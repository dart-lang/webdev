// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.2.1-dev.1.1.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
//
// defaultPackagesBase:
//    Override the location where `package:` uris are resolved from. By default
//    they are resolved under "packages/" from the current window location.
{
}
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == 'function')
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    copyProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == 'string')
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo = reflectionInfo + typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {ChromeObject: function ChromeObject() {
    }, Rule: function Rule() {
    }, Event0: function Event0() {
    }, API_ChromeApp: function API_ChromeApp() {
    }, API_Chrome: function API_Chrome() {
    }, AppWindowBounds: function AppWindowBounds() {
    }, AppWindowCreateWindowOptions: function AppWindowCreateWindowOptions() {
    }, AppWindowAppWindow: function AppWindowAppWindow() {
    }, Event_app_window_onBoundsChanged: function Event_app_window_onBoundsChanged() {
    }, Event_app_window_onClosed: function Event_app_window_onClosed() {
    }, Event_app_window_onFullscreened: function Event_app_window_onFullscreened() {
    }, Event_app_window_onMaximized: function Event_app_window_onMaximized() {
    }, Event_app_window_onMinimized: function Event_app_window_onMinimized() {
    }, Event_app_window_onRestored: function Event_app_window_onRestored() {
    }, API_app_window: function API_app_window() {
    }, AppRuntimeLaunchItem: function AppRuntimeLaunchItem() {
    }, AppRuntimeLaunchData: function AppRuntimeLaunchData() {
    }, Event_app_runtime_onLaunched: function Event_app_runtime_onLaunched() {
    }, Event_app_runtime_onRestarted: function Event_app_runtime_onRestarted() {
    }, API_app_runtime: function API_app_runtime() {
    }, FilesystemAcceptOption: function FilesystemAcceptOption() {
    }, FilesystemChooseEntryOptions: function FilesystemChooseEntryOptions() {
    }, API_file_system: function API_file_system() {
    }, JS_CONST: function JS_CONST(t0) {
      this.$ti = t0;
    }, _CryptoUtils: function _CryptoUtils() {
    }, _HashBase: function _HashBase() {
    }, _MD5: function _MD5() {
    }, _SHA1: function _SHA1() {
    }, HttpServer: function HttpServer() {
    }, HttpConnectionsInfo: function HttpConnectionsInfo() {
    }, HttpHeaders: function HttpHeaders() {
    }, HeaderValue: function HeaderValue() {
    }, HttpSession: function HttpSession() {
    }, ContentType: function ContentType() {
    }, Cookie: function Cookie() {
    }, HttpRequest0: function HttpRequest0() {
    }, HttpResponse: function HttpResponse() {
    }, HttpClient: function HttpClient() {
    }, HttpClientRequest: function HttpClientRequest() {
    }, HttpClientResponse: function HttpClientResponse() {
    }, HttpClientCredentials: function HttpClientCredentials() {
    }, HttpClientBasicCredentials: function HttpClientBasicCredentials() {
    }, HttpClientDigestCredentials: function HttpClientDigestCredentials() {
    }, HttpConnectionInfo: function HttpConnectionInfo() {
    }, RedirectInfo: function RedirectInfo() {
    }, DetachedSocket: function DetachedSocket() {
    }, HttpException: function HttpException() {
    }, RedirectException: function RedirectException() {
    }, HttpDate: function HttpDate() {
    }, _HttpHeaders: function _HttpHeaders() {
    }, _HeaderValue: function _HeaderValue() {
    }, _ContentType: function _ContentType() {
    }, _Cookie: function _Cookie() {
    }, _ServiceObject: function _ServiceObject() {
    }, _CopyingBytesBuilder: function _CopyingBytesBuilder() {
    }, _HttpIncoming: function _HttpIncoming() {
    }, _HttpInboundMessage: function _HttpInboundMessage() {
    }, _HttpRequest: function _HttpRequest() {
    }, _HttpClientResponse: function _HttpClientResponse() {
    }, _StreamSinkImpl: function _StreamSinkImpl() {
    }, _IOSinkImpl: function _IOSinkImpl() {
    }, _HttpOutboundMessage: function _HttpOutboundMessage() {
    }, _HttpResponse: function _HttpResponse() {
    }, _HttpClientRequest: function _HttpClientRequest() {
    }, _HttpGZipSink: function _HttpGZipSink() {
    }, _HttpOutgoing: function _HttpOutgoing() {
    }, _HttpClientConnection: function _HttpClientConnection() {
    }, _ConnectionInfo: function _ConnectionInfo() {
    }, _ConnectionTarget: function _ConnectionTarget() {
    }, _HttpClient: function _HttpClient() {
    }, _HttpConnection: function _HttpConnection() {
    }, _HttpServer: function _HttpServer() {
    }, _ProxyConfiguration: function _ProxyConfiguration() {
    }, _Proxy: function _Proxy() {
    }, _HttpConnectionInfo: function _HttpConnectionInfo() {
    }, _DetachedSocket: function _DetachedSocket() {
    }, _AuthenticationScheme: function _AuthenticationScheme() {
    }, _Credentials: function _Credentials() {
    }, _SiteCredentials: function _SiteCredentials() {
    }, _ProxyCredentials: function _ProxyCredentials() {
    }, _HttpClientCredentials: function _HttpClientCredentials() {
    }, _HttpClientBasicCredentials: function _HttpClientBasicCredentials() {
    }, _HttpClientDigestCredentials: function _HttpClientDigestCredentials() {
    }, _RedirectInfo: function _RedirectInfo() {
    }, _Const: function _Const() {
    }, _CharCode: function _CharCode() {
    }, _State: function _State() {
    }, _HttpVersion: function _HttpVersion() {
    }, _MessageType: function _MessageType() {
    }, _HttpDetachedStreamSubscription: function _HttpDetachedStreamSubscription() {
    }, _HttpDetachedIncoming: function _HttpDetachedIncoming() {
    }, _HttpParser: function _HttpParser() {
    }, _HttpSession: function _HttpSession() {
    }, _HttpSessionManager: function _HttpSessionManager() {
    }, HttpOverrides: function HttpOverrides() {
    }, _HttpOverridesScope: function _HttpOverridesScope() {
    }, WebSocketStatus: function WebSocketStatus() {
    }, CompressionOptions: function CompressionOptions() {
    }, WebSocketTransformer: function WebSocketTransformer() {
    }, WebSocket: function WebSocket() {
    }, WebSocketException: function WebSocketException() {
    }, _WebSocketMessageType: function _WebSocketMessageType() {
    }, _WebSocketOpcode: function _WebSocketOpcode() {
    }, _EncodedString: function _EncodedString() {
    }, _CompressionMaxWindowBits: function _CompressionMaxWindowBits() {
    }, _WebSocketProtocolTransformer: function _WebSocketProtocolTransformer() {
    }, _WebSocketPing: function _WebSocketPing() {
    }, _WebSocketPong: function _WebSocketPong() {
    }, _WebSocketTransformerImpl: function _WebSocketTransformerImpl() {
    }, _WebSocketPerMessageDeflate: function _WebSocketPerMessageDeflate() {
    }, _WebSocketOutgoingTransformer: function _WebSocketOutgoingTransformer() {
    }, _WebSocketConsumer: function _WebSocketConsumer() {
    }, _WebSocketImpl: function _WebSocketImpl() {
    }, __HttpConnection_LinkedListEntry__ServiceObject: function __HttpConnection_LinkedListEntry__ServiceObject() {
    }, __HttpServer_Stream__ServiceObject: function __HttpServer_Stream__ServiceObject() {
    }, __WebSocketImpl_Stream__ServiceObject: function __WebSocketImpl_Stream__ServiceObject() {
    },
    printToConsole: function(line) {
      H.printString(H.S(H.stringTypeCheck(line)));
    },
    makeListFixedLength: function(growableList, $T) {
      var t1 = [$T];
      return H.assertSubtype(J.JSArray_markFixedList(H.assertSubtype(growableList, "$isList", t1, "$asList")), "$isList", t1, "$asList");
    },
    makeFixedListUnmodifiable: function(fixedLengthList, $T) {
      var t1 = [$T];
      return H.assertSubtype(J.JSArray_markUnmodifiableList(H.assertSubtype(fixedLengthList, "$isList", t1, "$asList")), "$isList", t1, "$asList");
    },
    CastIterator$: function(_source, $S, $T) {
      return new H.CastIterator(_source, [$S, $T]);
    },
    CastIterable$_: function(_source, $S, $T) {
      return new H.CastIterable(_source, [$S, $T]);
    },
    CastIterable_CastIterable: function(source, $S, $T) {
      H.assertSubtype(source, "$isIterable", [$S], "$asIterable");
      if (H.checkSubtype(source, "$isEfficientLengthIterable", [$S], "$asEfficientLengthIterable"))
        return H._EfficientLengthCastIterable$(source, $S, $T);
      return H.CastIterable$_(source, $S, $T);
    },
    _EfficientLengthCastIterable$: function(source, $S, $T) {
      return new H._EfficientLengthCastIterable(source, [$S, $T]);
    },
    CastList$: function(_source, $S, $T) {
      return new H.CastList(_source, [$S, $T]);
    },
    CastSet$: function(_source, _emptySet, $S, $T) {
      return new H.CastSet(_source, _emptySet, [$S, $T]);
    },
    CastMap$: function(_source, SK, SV, $K, $V) {
      return new H.CastMap(_source, [SK, SV, $K, $V]);
    },
    CastQueue$: function(_source, $S, $T) {
      return new H.CastQueue(_source, [$S, $T]);
    },
    CodeUnits$: function(_string) {
      return new H.CodeUnits(_string, []);
    },
    hexDigitValue: function(char) {
      var digit, letter;
      H.intTypeCheck(char);
      if (typeof char !== "number")
        return char.$xor();
      digit = (char ^ 48) >>> 0;
      if (digit <= 9)
        return digit;
      letter = (char | 32) >>> 0;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    parseHexByte: function(source, index) {
      var digit1, digit2;
      H.stringTypeCheck(source);
      H.intTypeCheck(index);
      digit1 = H.hexDigitValue(J.getInterceptor$s(source).codeUnitAt$1(source, index));
      if (typeof index !== "number")
        return index.$add();
      digit2 = H.hexDigitValue(C.JSString_methods.codeUnitAt$1(source, index + 1));
      if (typeof digit1 !== "number")
        return digit1.$mul();
      if (typeof digit2 !== "number")
        return H.iae(digit2);
      return digit1 * 16 + digit2 - (digit2 & 256);
    },
    SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
      var t1 = new H.SubListIterable(_iterable, _start, _endOrLength, [$E]);
      t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
      return t1;
    },
    ListIterator$: function(iterable, $E) {
      return new H.ListIterator(iterable, J.get$length$asx(iterable), [$E]);
    },
    MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
      H.assertSubtype(iterable, "$isIterable", [$S], "$asIterable");
      H.functionTypeCheck($function, {func: 1, ret: $T, args: [$S]});
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
        return H.EfficientLengthMappedIterable$(iterable, $function, $S, $T);
      return H.MappedIterable$_(iterable, $function, $S, $T);
    },
    MappedIterable$_: function(_iterable, _f, $S, $T) {
      return new H.MappedIterable(_iterable, _f, [$S, $T]);
    },
    EfficientLengthMappedIterable$: function(iterable, $function, $S, $T) {
      return new H.EfficientLengthMappedIterable(iterable, $function, [$S, $T]);
    },
    MappedIterator$: function(_iterator, _f, $S, $T) {
      return new H.MappedIterator(_iterator, _f, [$S, $T]);
    },
    MappedListIterable$: function(_source, _f, $S, $T) {
      return new H.MappedListIterable(_source, _f, [$S, $T]);
    },
    WhereIterable$: function(_iterable, _f, $E) {
      return new H.WhereIterable(_iterable, _f, [$E]);
    },
    WhereIterator$: function(_iterator, _f, $E) {
      return new H.WhereIterator(_iterator, _f, [$E]);
    },
    TakeIterable_TakeIterable: function(iterable, takeCount, $E) {
      var _s9_ = "takeCount";
      H.assertSubtype(iterable, "$isIterable", [$E], "$asIterable");
      H.intTypeCheck(takeCount);
      P.ArgumentError_checkNotNull(takeCount, _s9_);
      P.RangeError_checkNotNegative(takeCount, _s9_);
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
        return H.EfficientLengthTakeIterable$(iterable, takeCount, $E);
      return H.TakeIterable$_(iterable, takeCount, $E);
    },
    TakeIterable$_: function(_iterable, _takeCount, $E) {
      return new H.TakeIterable(_iterable, _takeCount, [$E]);
    },
    EfficientLengthTakeIterable$: function(iterable, takeCount, $E) {
      return new H.EfficientLengthTakeIterable(iterable, takeCount, [$E]);
    },
    TakeIterator$: function(_iterator, _remaining, $E) {
      var t1 = new H.TakeIterator(_iterator, _remaining, [$E]);
      t1.TakeIterator$2(_iterator, _remaining, $E);
      return t1;
    },
    SkipIterable_SkipIterable: function(iterable, count, $E) {
      H.assertSubtype(iterable, "$isIterable", [$E], "$asIterable");
      H.intTypeCheck(count);
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
        return H.EfficientLengthSkipIterable_EfficientLengthSkipIterable(iterable, count, $E);
      return H.SkipIterable$_(iterable, H._checkCount(count), $E);
    },
    SkipIterable$_: function(_iterable, _skipCount, $E) {
      return new H.SkipIterable(_iterable, _skipCount, [$E]);
    },
    EfficientLengthSkipIterable_EfficientLengthSkipIterable: function(iterable, count, $E) {
      return H.EfficientLengthSkipIterable$_(H.assertSubtype(iterable, "$isIterable", [$E], "$asIterable"), H._checkCount(H.intTypeCheck(count)), $E);
    },
    EfficientLengthSkipIterable$_: function(iterable, count, $E) {
      return new H.EfficientLengthSkipIterable(iterable, count, [$E]);
    },
    _checkCount: function(count) {
      H.intTypeCheck(count);
      P.ArgumentError_checkNotNull(count, "count");
      P.RangeError_checkNotNegative(count, "count");
      return count;
    },
    SkipIterator$: function(_iterator, _skipCount, $E) {
      var t1 = new H.SkipIterator(_iterator, _skipCount, [$E]);
      t1.SkipIterator$2(_iterator, _skipCount, $E);
      return t1;
    },
    EmptyIterable$: function($E) {
      return new H.EmptyIterable([$E]);
    },
    IterableElementError_noElement: function() {
      return P.StateError$("No element");
    },
    IterableElementError_tooFew: function() {
      return P.StateError$("Too few elements");
    },
    ReversedListIterable$: function(_source, $E) {
      return new H.ReversedListIterable(_source, [$E]);
    },
    Sort_sort: function(a, compare, $E) {
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      H.Sort__doSort(a, 0, J.$sub$n(J.get$length$asx(a), 1), compare, $E);
    },
    Sort__doSort: function(a, left, right, compare, $E) {
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.intTypeCheck(left);
      H.intTypeCheck(right);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      if (typeof right !== "number")
        return right.$sub();
      if (typeof left !== "number")
        return H.iae(left);
      if (right - left <= 32)
        H.Sort__insertionSort(a, left, right, compare, $E);
      else
        H.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort: function(a, left, right, compare, $E) {
      var i, t1, el, j, j0;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.intTypeCheck(left);
      H.intTypeCheck(right);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      if (typeof left !== "number")
        return left.$add();
      i = left + 1;
      if (typeof right !== "number")
        return H.iae(right);
      t1 = J.getInterceptor$asx(a);
      for (; i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort: function(a, left, right, compare, $E) {
      var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, comp_pivot1, comp_pivot2, t2;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.intTypeCheck(left);
      H.intTypeCheck(right);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      if (typeof right !== "number")
        return right.$sub();
      if (typeof left !== "number")
        return H.iae(left);
      sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
      index1 = left + sixth;
      index5 = right - sixth;
      index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
      index2 = index3 - sixth;
      index4 = index3 + sixth;
      t1 = J.getInterceptor$asx(a);
      el1 = t1.$index(a, index1);
      el2 = t1.$index(a, index2);
      el3 = t1.$index(a, index3);
      el4 = t1.$index(a, index4);
      el5 = t1.$index(a, index5);
      if (J.$gt$n(compare.call$2(el1, el2), 0)) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el3), 0)) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el4), 0)) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el3, el4), 0)) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el5), 0)) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (typeof comp !== "number")
            return comp.$lt();
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (typeof comp !== "number")
                return comp.$gt();
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp_pivot1 = compare.call$2(ak, el2);
          if (typeof comp_pivot1 !== "number")
            return comp_pivot1.$lt();
          if (comp_pivot1 < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else {
            comp_pivot2 = compare.call$2(ak, el4);
            if (typeof comp_pivot2 !== "number")
              return comp_pivot2.$gt();
            if (comp_pivot2 > 0)
              for (; true;) {
                comp = compare.call$2(t1.$index(a, great), el4);
                if (typeof comp !== "number")
                  return comp.$gt();
                if (comp > 0) {
                  --great;
                  if (great < k)
                    break;
                  continue;
                } else {
                  comp = compare.call$2(t1.$index(a, great), el2);
                  if (typeof comp !== "number")
                    return comp.$lt();
                  great0 = great - 1;
                  if (comp < 0) {
                    t1.$indexSet(a, k, t1.$index(a, less));
                    less0 = less + 1;
                    t1.$indexSet(a, less, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    less = less0;
                  } else {
                    t1.$indexSet(a, k, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                  }
                  great = great0;
                  break;
                }
              }
          }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      H.Sort__doSort(a, left, less - 2, compare, $E);
      H.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                comp = compare.call$2(t1.$index(a, great), el2);
                if (typeof comp !== "number")
                  return comp.$lt();
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        H.Sort__doSort(a, less, great, compare, $E);
      } else
        H.Sort__doSort(a, less, great, compare, $E);
    },
    Symbol$unvalidated: function(_name) {
      return new H.Symbol(_name, []);
    },
    Symbol_getName: function(symbol) {
      return H.interceptedTypeCheck(symbol, "$isSymbol").__internal$_name;
    },
    CastStream: function CastStream() {
    },
    CastStreamSubscription: function CastStreamSubscription() {
    },
    CastStreamTransformer: function CastStreamTransformer() {
    },
    CastConverter: function CastConverter() {
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    _CastListBase_sort_closure: function _CastListBase_sort_closure(t0, t1, t2) {
      this.$this = t0;
      this.compare = t1;
      this.$ti = t2;
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastSet: function CastSet(t0, t1, t2) {
      this._source = t0;
      this._emptySet = t1;
      this.$ti = t2;
    },
    CastMap: function CastMap(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastMap_putIfAbsent_closure: function CastMap_putIfAbsent_closure(t0, t1, t2) {
      this.$this = t0;
      this.ifAbsent = t1;
      this.$ti = t2;
    },
    CastMap_forEach_closure: function CastMap_forEach_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.$ti = t2;
    },
    CastQueue: function CastQueue(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CodeUnits: function CodeUnits(t0, t1) {
      this.__internal$_string = t0;
      this.$ti = t1;
    },
    ExternalName: function ExternalName() {
    },
    Since: function Since() {
    },
    HttpStatus: function HttpStatus() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterable: function ExpandIterable() {
    },
    ExpandIterator: function ExpandIterator() {
    },
    TakeIterable: function TakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    EfficientLengthTakeIterable: function EfficientLengthTakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    TakeIterator: function TakeIterator(t0, t1, t2) {
      this._iterator = t0;
      this._remaining = t1;
      this.$ti = t2;
    },
    TakeWhileIterable: function TakeWhileIterable() {
    },
    TakeWhileIterator: function TakeWhileIterator() {
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipWhileIterable: function SkipWhileIterable() {
    },
    SkipWhileIterator: function SkipWhileIterator() {
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    FollowedByIterable: function FollowedByIterable() {
    },
    EfficientLengthFollowedByIterable: function EfficientLengthFollowedByIterable() {
    },
    FollowedByIterator: function FollowedByIterator() {
    },
    WhereTypeIterable: function WhereTypeIterable() {
    },
    WhereTypeIterator: function WhereTypeIterator() {
    },
    IterableElementError: function IterableElementError() {
    },
    LinkedList: function LinkedList() {
    },
    LinkedListEntry0: function LinkedListEntry0() {
    },
    _LinkedListIterator: function _LinkedListIterator() {
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    FixedLengthListBase: function FixedLengthListBase() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    _ListIndicesIterable: function _ListIndicesIterable() {
    },
    ListMapView: function ListMapView() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    UnmodifiableListError: function UnmodifiableListError() {
    },
    NonGrowableListError: function NonGrowableListError() {
    },
    Sort: function Sort() {
    },
    Symbol: function Symbol(t0, t1) {
      this.__internal$_name = t0;
      this.$ti = t1;
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    JsGetName: function JsGetName() {
    },
    JsBuiltin: function JsBuiltin() {
    },
    ConstantMapView$: function(base, $K, $V) {
      return new H.ConstantMapView(base, [$K, $V]);
    },
    ConstantMap__throwUnmodifiable: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    _ConstantMapKeyIterable$: function(_map, $K) {
      return new H._ConstantMapKeyIterable(_map, [$K]);
    },
    isCheckPropertyToJsConstructorName: function(isCheckProperty) {
      return H.stringTypeCheck(isCheckProperty).substring(3);
    },
    isDartFunctionType: function(type) {
      return 'func' in type;
    },
    isDartFutureOrType: function(type) {
      return 'futureOr' in type;
    },
    isDartVoidTypeRti: function(type) {
      return type === -1;
    },
    rawRtiToJsConstructorName: function(rti) {
      return rti.name;
    },
    unminifyOrTag: function(rawClassName) {
      var preserved;
      H.stringTypeCheck(rawClassName);
      preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (typeof preserved === "string")
        return preserved;
      return rawClassName;
    },
    getRawRuntimeType: function(o) {
      return o.constructor;
    },
    builtinIsSubtype: function(type, other) {
      return '$is' + H.stringTypeCheck(other) in type.prototype;
    },
    isDartFunctionTypeRti: function(type) {
      return type.name === "Function";
    },
    isNullType: function(type) {
      return type.name === "Null";
    },
    isDartDynamicTypeRti: function(type) {
      return type == null;
    },
    isDartJsInteropTypeArgumentRti: function(type) {
      return type === -2;
    },
    isDartObjectTypeRti: function(type) {
      return type.name === "Object";
    },
    isNullTypeRti: function(type) {
      return type.name === "Null";
    },
    getType: function(index) {
      return init.types[H.intTypeCheck(index)];
    },
    requiresPreamble: function() {
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = J.dispatchRecordIndexability(record);
        if (result != null)
          return H.boolTypeCheck(result);
      }
      return !!J.getInterceptor$(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    createUnmangledInvocationMirror: function(symbol, internalName, kind, $arguments, argumentNames, types) {
      return H.JSInvocationMirror$(H.interceptedTypeCheck(symbol, "$isSymbol0"), H.stringTypeCheck(internalName), H.intTypeCheck(kind), H.listTypeCheck($arguments), H.listTypeCheck(argumentNames), H.intTypeCheck(types));
    },
    JSInvocationMirror$: function(_memberName, _internalName, _kind, _arguments, _namedArgumentNames, _typeArgumentCount) {
      return new H.JSInvocationMirror(_memberName, _kind, _arguments, _namedArgumentNames, _typeArgumentCount, []);
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseInt: function(source, radix) {
      var match, decimalMatch, maxCharCode, digitsPart, t1, i, characterCode;
      H.stringTypeCheck(source);
      H.intTypeCheck(radix);
      H.checkString(source);
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return;
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = H.stringTypeCheck(match[3]);
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return;
      }
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i) {
          characterCode = J.$or$bn(C.JSString_methods._codeUnitAt$1(digitsPart, i), 32);
          if (typeof characterCode !== "number")
            return characterCode.$gt();
          if (characterCode > maxCharCode)
            return;
        }
      }
      return parseInt(source, radix);
    },
    Primitives_formatType: function(className, typeArguments) {
      H.stringTypeCheck(className);
      H.listTypeCheck(typeArguments);
      return H.unmangleAllIdentifiersIfPreservedAnyways(H.S(className) + H.S(H.joinArguments(typeArguments, 0)));
    },
    Primitives_objectTypeName: function(object) {
      var className = H.Primitives__objectClassName(object),
        $arguments = H.joinArguments(H.getRuntimeTypeInfo(object), 0);
      return H.S(className) + H.S($arguments);
    },
    Primitives__objectClassName: function(object) {
      var interceptorConstructorName, $name, t1, dispatchName, objectConstructor, match, decompiledName,
        interceptor = J.getInterceptor$(object),
        interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      t1 = $name == null;
      if (t1 || interceptor === C.Interceptor_methods || !!interceptor.$isUnknownJavaScriptObject) {
        dispatchName = H.constructorNameFallback(object);
        if (t1)
          $name = dispatchName;
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
        }
        return $name;
      }
      $name = $name;
      return H.unminifyOrTag($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36 ? C.JSString_methods.substring$1($name, 1) : $name);
    },
    Primitives_objectToHumanReadableString: function(object) {
      return "Instance of '" + H.S(H.Primitives_objectTypeName(object)) + "'";
    },
    Primitives_dateNow: function() {
      return Date.now();
    },
    Primitives_currentUri: function() {
      H.requiresPreamble();
      if (!!self.location)
        return self.location.href;
      return;
    },
    Primitives__fromCharCodeApply: function(array) {
      var end, result, i, i0, chunkEnd;
      H.listTypeCheck(array);
      end = J.get$length$asx(array);
      if (typeof end !== "number")
        return end.$le();
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        if (i0 < end)
          chunkEnd = i0;
        else
          chunkEnd = end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var t1, i,
        a = H.setRuntimeTypeInfo([], [P.int]);
      for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(codePoints, "$isIterable")); t1.moveNext$0();) {
        i = t1.get$current();
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          C.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          C.JSArray_methods.add$1(a, 55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          C.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, i;
      for (H.listSuperNativeTypeCheck(charCodes, "$isIterable"), t1 = J.get$iterator$ax(charCodes); t1.moveNext$0();) {
        i = t1.get$current();
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(H.listTypeCheck(charCodes));
    },
    Primitives_stringFromNativeUint8List: function(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      H.interceptedTypeCheck(charCodes, "$isNativeUint8List");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (typeof end !== "number")
        return end.$le();
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      i = start;
      result = "";
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (!(i < end))
          break;
        i0 = i + 500;
        if (i0 < end)
          chunkEnd = i0;
        else
          chunkEnd = end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
        i = i0;
      }
      return result;
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      H.numTypeCheck(charCode);
      if (typeof charCode !== "number")
        return H.iae(charCode);
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((55296 | C.JSNumber_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
        }
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_stringConcatUnchecked: function(string1, string2) {
      return H.stringTypeCheck(string1) + H.stringTypeCheck(string2);
    },
    Primitives_flattenString: function(str) {
      H.stringTypeCheck(str);
      return str.charCodeAt(0) == 0 ? str : str;
    },
    Primitives_lazyAsJsDate: function(receiver) {
      H.interceptedTypeCheck(receiver, "$isDateTime");
      if (receiver.date === void 0)
        receiver.date = new Date(receiver.get$millisecondsSinceEpoch());
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      H.interceptedTypeCheck(receiver, "$isDateTime");
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth: function(receiver) {
      H.interceptedTypeCheck(receiver, "$isDateTime");
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay: function(receiver) {
      H.interceptedTypeCheck(receiver, "$isDateTime");
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours: function(receiver) {
      H.interceptedTypeCheck(receiver, "$isDateTime");
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes: function(receiver) {
      H.interceptedTypeCheck(receiver, "$isDateTime");
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds: function(receiver) {
      H.interceptedTypeCheck(receiver, "$isDateTime");
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds: function(receiver) {
      H.interceptedTypeCheck(receiver, "$isDateTime");
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t2, t1 = {};
      H.listTypeCheck(positionalArguments);
      H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      if (positionalArguments != null) {
        t2 = J.get$length$asx(positionalArguments);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t1.argumentCount = 0 + t2;
        C.JSArray_methods.addAll$1($arguments, positionalArguments);
      }
      t1.names = "";
      if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
        namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      return J.noSuchMethod$1$($function, H.interceptedTypeCheck(H.createUnmangledInvocationMirror(C.Symbol_call, "call" + "$" + H.S(t1.argumentCount) + H.S(t1.names), 0, $arguments, namedArgumentList, 0), "$isInvocation"));
    },
    Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
      var t1, $arguments, argumentCount, jsStub;
      H.interceptedTypeCheck($function, "$isFunction");
      H.listTypeCheck(positionalArguments);
      H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
      if (positionalArguments instanceof Array)
        t1 = namedArguments == null || namedArguments.get$isEmpty(namedArguments);
      else
        t1 = false;
      if (t1) {
        $arguments = positionalArguments;
        argumentCount = $arguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1($arguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2($arguments[0], $arguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4($arguments[0], $arguments[1], $arguments[2], $arguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5($arguments[0], $arguments[1], $arguments[2], $arguments[3], $arguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, $arguments);
      }
      return H.Primitives__genericApplyFunction2($function, positionalArguments, namedArguments);
    },
    Primitives__genericApplyFunction2: function($function, positionalArguments, namedArguments) {
      var $arguments, t1, argumentCount, requiredParameterCount, defaultValuesClosure, t2, defaultValues, interceptor, jsFunction, keys, used, t3;
      H.interceptedTypeCheck($function, "$isFunction");
      H.listTypeCheck(positionalArguments);
      H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
      if (positionalArguments != null)
        $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, null);
      else
        $arguments = [];
      t1 = J.getInterceptor$asx($arguments);
      argumentCount = t1.get$length($arguments);
      requiredParameterCount = $function.$requiredArgCount;
      if (typeof argumentCount !== "number")
        return argumentCount.$lt();
      if (argumentCount < requiredParameterCount)
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t2 = defaultValuesClosure == null;
      defaultValues = !t2 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction === "string")
        jsFunction = interceptor[jsFunction];
      if (t2) {
        if (namedArguments != null && namedArguments.get$isNotEmpty(namedArguments))
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (defaultValues instanceof Array) {
        if (namedArguments != null && namedArguments.get$isNotEmpty(namedArguments))
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount > requiredParameterCount + defaultValues.length)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        t1.addAll$1($arguments, defaultValues.slice(argumentCount - requiredParameterCount));
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t2 = C.JSArray_methods.get$iterator(keys); t2.moveNext$0();)
            t1.add$1($arguments, defaultValues[H.stringTypeCheck(t2.get$current())]);
        else {
          for (t2 = C.JSArray_methods.get$iterator(keys), used = 0; t2.moveNext$0();) {
            t3 = H.stringTypeCheck(t2.get$current());
            if (namedArguments.containsKey$1(t3)) {
              ++used;
              t1.add$1($arguments, namedArguments.$index(0, t3));
            } else
              t1.add$1($arguments, defaultValues[t3]);
          }
          if (used !== namedArguments.get$length(namedArguments))
            return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    JsCache_fetch: function(cache, key) {
      return cache[H.stringTypeCheck(key)];
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1, _s5_ = "index";
      if (typeof index !== "number" || Math.floor(index) !== index)
        return P.ArgumentError$value(index, _s5_, null);
      $length = H.intTypeCheck(J.get$length$asx(indexable));
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_);
    },
    diagnoseRangeError: function(start, end, $length) {
      var t1, _null = null;
      if (typeof start !== "number" || Math.floor(start) !== start)
        return P.ArgumentError$value(start, "start", _null);
      if (!(start < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = start > $length;
      } else
        t1 = true;
      if (t1)
        return P.RangeError$range(start, 0, H.intTypeCheck($length), "start", _null);
      if (end != null) {
        if (typeof end !== "number" || Math.floor(end) !== end)
          return P.ArgumentError$value(end, "end", _null);
        if (!(end < start)) {
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = end > $length;
        } else
          t1 = true;
        if (t1)
          return P.RangeError$range(end, start, H.intTypeCheck($length), "end", _null);
      }
      return P.ArgumentError$value(end, "end", _null);
    },
    stringLastIndexOfUnchecked: function(receiver, element, start) {
      return receiver.lastIndexOf(element, start);
    },
    argumentErrorValue: function(object) {
      return P.ArgumentError$value(object, null, null);
    },
    checkNull: function(object) {
      if (object == null)
        throw H.wrapException(H.argumentErrorValue(object));
      return object;
    },
    checkNum: function(value) {
      if (typeof value !== "number")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    checkInt: function(value) {
      if (typeof value !== "number" || Math.floor(value) !== value)
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    checkBool: function(value) {
      if (typeof value !== "boolean")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    checkString: function(value) {
      if (typeof value !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = P.NullThrownError$();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder$: function(_arguments, _argumentsExpr, _expr, _method, _receiver, _pattern) {
      return new H.TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver, []);
    },
    TypeErrorDecoder_buildJavaScriptObject: function() {
      return {
        toString: function() {
          return "$receiver$";
        }
      };
    },
    TypeErrorDecoder_buildJavaScriptObjectWithNonClosure: function() {
      return {$method$: null,
        toString: function() {
          return "$receiver$";
        }
      };
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match;
      message = H.stringTypeCheck(H.quoteStringForRegExp(H.stringTypeCheck(message).replace(String({}), '$receiver$')));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], [P.String]);
      return H.TypeErrorDecoder$(match.indexOf("\\$arguments\\$"), match.indexOf("\\$argumentsExpr\\$"), match.indexOf("\\$expr\\$"), match.indexOf("\\$method\\$"), match.indexOf("\\$receiver\\$"), message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'));
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = '$arguments$';
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokeCallErrorOnNull: function() {
      return function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }();
    },
    TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
      return function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }();
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOnNull: function() {
      return function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }();
    },
    TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
      return function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }();
    },
    NullError$: function(_message, match) {
      var t1 = match == null ? null : match.method;
      return new H.NullError(_message, t1, []);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      t1 = t1 ? null : match.receiver;
      return new H.JsNoSuchMethodError(_message, t2, t1, []);
    },
    UnknownJsTypeError$: function(_message) {
      return new H.UnknownJsTypeError(_message, []);
    },
    ExceptionAndStackTrace$: function(dartException, stackTrace) {
      return new H.ExceptionAndStackTrace(dartException, stackTrace, []);
    },
    unwrapException: function(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t2,
        t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (ex instanceof H.ExceptionAndStackTrace)
        return t1.call$1(ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              return t1.call$1(H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(H.NullError$(H.stringTypeCheck(message), match));
          }
        }
        return t1.call$1(H.UnknownJsTypeError$(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && H.contains(message, "call stack"))
          return P.StackOverflowError$();
        message = H.tryStringifyException(ex);
        return t1.call$1(P.ArgumentError$(typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return P.StackOverflowError$();
      return ex;
    },
    tryStringifyException: function(ex) {
      return function(ex) {
        try {
          return String(ex);
        } catch (e) {
        }
        return null;
      }(ex);
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return H._StackTrace$(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = H._StackTrace$(exception);
    },
    _StackTrace$: function(_exception) {
      return new H._StackTrace(_exception, []);
    },
    objectHashCode: function(object) {
      if (object == null || typeof object != 'object')
        return J.get$hashCode$(object);
      else
        return H.Primitives_objectHashCode(object);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var $length, index, index0, index1;
      H.interceptedTypeCheck(result, "$isMap");
      $length = H.getLength(keyValuePairs);
      if (typeof $length !== "number")
        return H.iae($length);
      index = 0;
      for (; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, H.getIndex(keyValuePairs, index), H.getIndex(keyValuePairs, index0));
      }
      return result;
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      H.interceptedTypeCheck(closure, "$isFunction");
      switch (H.intTypeCheck(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      H.intTypeCheck(arity);
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $function, callName, $prototype, $constructor, t1, trampoline, signatureFunction, getReceiver, applyTrampoline, i, t2, stub, stubCallName, _null = null;
      H.listTypeCheck(functions);
      H.intTypeCheck(applyTrampolineIndex);
      H.boolTypeCheck(isStatic);
      H.boolTypeCheck(isIntercepted);
      H.stringTypeCheck(propertyName);
      $function = functions[0];
      callName = $function.$callName;
      $prototype = isStatic ? Object.create(H.StaticClosure$().constructor.prototype) : Object.create(H.BoundClosure$(_null, _null, _null, _null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else if (H.Closure_isCsp()) {
        t1 = function tear_off(a, b, c, d) {
          this.$initialize(a, b, c, d);
        };
        $constructor = t1;
      } else {
        t1 = $.Closure_functionCounter;
        $.Closure_functionCounter = J.$add$ansx(t1, 1);
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      if (typeof reflectionInfo == "number")
        signatureFunction = function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, reflectionInfo);
      else if (typeof reflectionInfo == "function")
        if (isStatic)
          signatureFunction = reflectionInfo;
        else {
          getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
          signatureFunction = function(f, r) {
            return function() {
              return f.apply({$receiver: r(this)}, arguments);
            };
          }(reflectionInfo, getReceiver);
        }
      else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      t1 = J.getInterceptor$asx(functions);
      applyTrampoline = trampoline;
      i = 1;
      while (true) {
        t2 = t1.get$length(functions);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        stub = t1.$index(functions, i);
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
        ++i;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf;
      H.intTypeCheck(arity);
      H.boolTypeCheck(isSuperCall);
      H.stringTypeCheck(stubName);
      getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_isCsp: function() {
      return false;
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, selfName, $arguments;
      if (H.boolTypeCheck(isIntercepted))
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      if (H.Closure_isCsp() || !t1 || arity >= 27)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        $.Closure_functionCounter = J.$add$ansx(t1, 1);
        selfName = "self" + H.S(t1);
        return new Function("return function(){var " + selfName + " = this." + H.S(H.BoundClosure_selfFieldName()) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ansx(t1, 1);
      $arguments += H.S(t1);
      return new Function("return function(" + H.S($arguments) + "){return this." + H.S(H.BoundClosure_selfFieldName()) + "." + H.S(stubName) + "(" + H.S($arguments) + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf, getReceiver;
      H.intTypeCheck(arity);
      H.boolTypeCheck(isSuperCall);
      H.stringTypeCheck($name);
      getSelf = H.BoundClosure_selfOf;
      getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var $arguments,
        selfField = H.BoundClosure_selfFieldName(),
        receiverField = H.BoundClosure_receiverFieldName(),
        stubName = $function.$stubName,
        arity = $function.length,
        lookedUpFunction = receiver[stubName],
        t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction,
        t2 = !t1 || arity >= 28;
      if (t2)
        return H.Closure_cspForwardInterceptedCall(arity, !t1, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(receiverField) + ");";
        t2 = $.Closure_functionCounter;
        $.Closure_functionCounter = J.$add$ansx(t2, 1);
        return new Function(t1 + H.S(t2) + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(receiverField) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ansx(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, H.intTypeCheck(applyTrampolineIndex), reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    StaticClosure$: function() {
      return new H.StaticClosure([]);
    },
    BoundClosure$: function(_self, _target, _receiver, _name) {
      return new H.BoundClosure(_self, _target, _receiver, _name, []);
    },
    BoundClosure_selfOf: function(closure) {
      return H.interceptedTypeCheck(closure, "$isBoundClosure")._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return H.interceptedTypeCheck(closure, "$isBoundClosure")._receiver;
    },
    BoundClosure_selfFieldName: function() {
      var t1 = $.BoundClosure_selfFieldNameCache;
      return t1 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t1;
    },
    BoundClosure_receiverFieldName: function() {
      var t1 = $.BoundClosure_receiverFieldNameCache;
      return t1 == null ? $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver") : t1;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var template, names, t1, i, t2, $name;
      H.stringTypeCheck(fieldName);
      template = H.BoundClosure$("self", "target", "receiver", "name");
      names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
      t1 = J.getInterceptor$asx(names);
      i = 0;
      while (true) {
        t2 = t1.get$length(names);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        $name = t1.$index(names, i);
        if (template[$name] === fieldName)
          return $name;
        ++i;
      }
    },
    jsHasOwnProperty: function(jsObject, property) {
      return jsObject.hasOwnProperty(H.stringTypeCheck(property));
    },
    jsPropertyAccess: function(jsObject, property) {
      return jsObject[H.stringTypeCheck(property)];
    },
    stringTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
    },
    stringTypeCast: function(value) {
      if (typeof value === "string" || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "String"));
    },
    doubleTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "double"));
    },
    numTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
    },
    numTypeCast: function(value) {
      if (typeof value === "number" || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "num"));
    },
    boolTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "boolean")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
    },
    boolTypeCast: function(value) {
      if (typeof value === "boolean" || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "bool"));
    },
    intTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number" && Math.floor(value) === value)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
    },
    intTypeCast: function(value) {
      if (typeof value === "number" && Math.floor(value) === value || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "int"));
    },
    propertyTypeError: function(value, property) {
      throw H.wrapException(H.TypeErrorImplementation$(value, H.unminifyOrTag(H.isCheckPropertyToJsConstructorName(H.stringTypeCheck(property)))));
    },
    propertyTypeCastError: function(value, property) {
      throw H.wrapException(H.CastErrorImplementation$(value, H.unminifyOrTag(H.isCheckPropertyToJsConstructorName(H.stringTypeCheck(property)))));
    },
    interceptedTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if ((typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = (typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    numberOrStringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (typeof value === "number")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    stringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listTypeCheck: function(value) {
      if (value == null)
        return value;
      if (!!J.getInterceptor$(value).$isList)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "List<dynamic>"));
    },
    listTypeCast: function(value) {
      if (!!J.getInterceptor$(value).$isList || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "List<dynamic>"));
    },
    listSuperNativeTypeCheck: function(value, property) {
      var t1;
      if (value == null)
        return value;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isList)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listSuperNativeTypeCast: function(value, property) {
      var t1 = J.getInterceptor$(value);
      if (!!t1.$isList || value == null)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeCastError(value, property);
    },
    extractFunctionTypeObjectFrom: function(o) {
      return H.extractFunctionTypeObjectFromInternal(J.getInterceptor$(o));
    },
    extractFunctionTypeObjectFromInternal: function(o) {
      var signature;
      if ("$signature" in o) {
        signature = o.$signature;
        if (typeof signature == "number")
          return H.getType(H.intTypeCheck(signature));
        else
          return o.$signature();
      }
      return;
    },
    functionTypeTest: function(value, functionTypeRti) {
      var functionTypeObject;
      if (value == null)
        return false;
      if (typeof value == "function")
        return true;
      functionTypeObject = H.extractFunctionTypeObjectFrom(value);
      if (functionTypeObject == null)
        return false;
      return H.isFunctionSubtype(functionTypeObject, functionTypeRti);
    },
    functionTypeCheck: function(value, functionTypeRti) {
      var $self, t1;
      if (value == null)
        return value;
      if (true === $._inTypeAssertion)
        return value;
      $._inTypeAssertion = true;
      try {
        if (H.boolTypeCheck(H.functionTypeTest(value, functionTypeRti)))
          return value;
        $self = H.runtimeTypeToString(functionTypeRti);
        t1 = H.TypeErrorImplementation$(value, $self);
        throw H.wrapException(t1);
      } finally {
        $._inTypeAssertion = false;
      }
    },
    futureOrCheck: function(o, futureOrRti) {
      return H.assertSubtypeOfRuntimeType(o, futureOrRti);
    },
    TypeErrorImplementation$: function(value, type) {
      return new H.TypeErrorImplementation("TypeError: " + H.S(P.Error_safeToString(value)) + ": type '" + H.S(H._typeDescription(value)) + "' is not a subtype of type '" + H.S(type) + "'", []);
    },
    TypeErrorImplementation$fromMessage: function(message) {
      return new H.TypeErrorImplementation(message, []);
    },
    CastErrorImplementation$: function(value, type) {
      return new H.CastErrorImplementation("CastError: " + H.S(P.Error_safeToString(value)) + ": type '" + H.S(H._typeDescription(value)) + "' is not a subtype of type '" + H.S(type) + "'", []);
    },
    _typeDescription: function(value) {
      var functionTypeObject;
      if (value instanceof H.Closure) {
        functionTypeObject = H.extractFunctionTypeObjectFrom(value);
        if (functionTypeObject != null)
          return H.runtimeTypeToString(functionTypeObject);
        return "Closure";
      }
      return H.Primitives_objectTypeName(value);
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(P.CyclicInitializationError$(H.stringTypeCheck(staticName)));
    },
    RuntimeError$: function(message) {
      return new H.RuntimeError(message, []);
    },
    jsonEncodeNative: function(string) {
      return JSON.stringify(H.stringTypeCheck(string));
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag(H.stringTypeCheck($name));
    },
    createRuntimeType: function(rti) {
      return H.TypeImpl$(rti);
    },
    TypeImpl$: function(_rti) {
      return new H.TypeImpl(_rti, []);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(interceptor, object, substitutionName) {
      return H.substitute(H.getField(interceptor, "$as" + H.S(substitutionName)), H.getRuntimeTypeInfo(object));
    },
    getRuntimeTypeArgumentIntercepted: function(interceptor, target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.getRuntimeTypeArguments(interceptor, target, substitutionName);
      return $arguments == null ? null : H.getIndex($arguments, index);
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.getRuntimeTypeArguments(target, target, substitutionName);
      return $arguments == null ? null : H.getIndex($arguments, index);
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti;
      H.intTypeCheck(index);
      rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : H.getIndex(rti, index);
    },
    _getRuntimeTypeAsString: function(rti, genericContext) {
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      return H.S(H.unminifyOrTag(H.rawRtiToJsConstructorName(H.getIndex(rti, 0)))) + H.S(H._joinArguments(rti, 1, genericContext));
    },
    runtimeTypeToString: function(rti) {
      return H._runtimeTypeToString(rti, null);
    },
    _runtimeTypeToString: function(rti, genericContext) {
      var t1;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (H.isDartDynamicTypeRti(rti))
        return "dynamic";
      if (H.isDartVoidTypeRti(rti))
        return "void";
      if (H.isJsArray(rti))
        return H._getRuntimeTypeAsString(rti, genericContext);
      if (H.isJsFunction(rti))
        return H.unminifyOrTag(H.rawRtiToJsConstructorName(rti));
      if (H.isDartJsInteropTypeArgumentRti(rti))
        return "dynamic";
      if (H.isGenericFunctionTypeParameter(rti)) {
        H.intTypeCheck(rti);
        if (genericContext != null) {
          if (typeof rti !== "number")
            return rti.$lt();
          if (rti >= 0) {
            t1 = J.get$length$asx(genericContext);
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = rti >= t1;
          } else
            t1 = true;
        } else
          t1 = true;
        if (t1)
          return "unexpected-generic-index:" + H.S(rti);
        t1 = J.getInterceptor$asx(genericContext);
        return H.S(t1.$index(genericContext, J.$sub$n(J.$sub$n(t1.get$length(genericContext), rti), 1)));
      }
      if (H.isDartFunctionType(rti))
        return H._functionRtiToString(rti, genericContext);
      if (H.isDartFutureOrType(rti))
        return "FutureOr<" + H.S(H._runtimeTypeToString(H.getFutureOrArgument(rti), genericContext)) + ">";
      return "unknown-reified-type";
    },
    _functionRtiToString: function(rti, genericContext) {
      var boundsRti, outerContextLength, offset, i, i0, typeParameters, typeSep, boundRti, returnTypeText, argumentsText, sep, argument, optionalArguments, namedArguments, t2, _s2_ = ", ",
        t1 = [P.String];
      H.assertSubtype(genericContext, "$isList", t1, "$asList");
      if (H.boolTypeCheck(H.hasField(rti, "bounds"))) {
        boundsRti = rti.bounds;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], t1);
          outerContextLength = null;
        } else
          outerContextLength = J.get$length$asx(genericContext);
        t1 = J.getInterceptor$asx(genericContext);
        offset = t1.get$length(genericContext);
        for (i = boundsRti.length, i0 = i; i0 > 0; --i0) {
          if (typeof offset !== "number")
            return offset.$add();
          t1.add$1(genericContext, "T" + (offset + i0));
        }
        for (typeParameters = "<", typeSep = "", i0 = 0; i0 < i; ++i0, typeSep = _s2_) {
          typeParameters = J.$add$ansx(J.$add$ansx(typeParameters, typeSep), t1.$index(genericContext, J.$sub$n(J.$sub$n(t1.get$length(genericContext), i0), 1)));
          boundRti = boundsRti[i0];
          if (H.isInterestingBound(boundRti))
            typeParameters = J.$add$ansx(typeParameters, C.JSString_methods.$add(" extends ", H._runtimeTypeToString(boundRti, genericContext)));
        }
        typeParameters = J.$add$ansx(typeParameters, ">");
      } else {
        typeParameters = "";
        outerContextLength = null;
      }
      returnTypeText = !!rti.v ? "void" : H._runtimeTypeToString(rti.ret, genericContext);
      if (H.boolTypeCheck(H.hasField(rti, "args")))
        for (t1 = C.JSArray_methods.get$iterator(rti.args), argumentsText = "", sep = ""; t1.moveNext$0(); sep = _s2_) {
          argument = t1.get$current();
          argumentsText = J.$add$ansx(J.$add$ansx(argumentsText, sep), H._runtimeTypeToString(argument, genericContext));
        }
      else {
        argumentsText = "";
        sep = "";
      }
      if ("opt" in rti) {
        optionalArguments = rti.opt;
        argumentsText = J.$add$ansx(argumentsText, sep + "[");
        for (t1 = C.JSArray_methods.get$iterator(optionalArguments), sep = ""; t1.moveNext$0(); sep = _s2_) {
          argument = t1.get$current();
          argumentsText = J.$add$ansx(J.$add$ansx(argumentsText, sep), H._runtimeTypeToString(argument, genericContext));
        }
        argumentsText = J.$add$ansx(argumentsText, "]");
      }
      if ("named" in rti) {
        namedArguments = rti.named;
        argumentsText = J.$add$ansx(argumentsText, sep + "{");
        for (t1 = J.get$iterator$ax(H.extractKeys(namedArguments)), sep = ""; t1.moveNext$0(); sep = _s2_) {
          t2 = H.stringTypeCheck(t1.get$current());
          argumentsText = J.$add$ansx(J.$add$ansx(J.$add$ansx(argumentsText, sep), H._runtimeTypeToString(namedArguments[t2], genericContext)), " " + H.S(t2));
        }
        argumentsText = J.$add$ansx(argumentsText, "}");
      }
      if (outerContextLength != null)
        genericContext.length = outerContextLength;
      return H.S(typeParameters) + "(" + H.S(argumentsText) + ") => " + H.S(returnTypeText);
    },
    joinArguments: function(types, startIndex) {
      return H._joinArguments(types, H.intTypeCheck(startIndex), null);
    },
    _joinArguments: function(types, startIndex, genericContext) {
      var buffer, index, separator, allDynamic, t1, argument;
      H.intTypeCheck(startIndex);
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (types == null)
        return "";
      buffer = P.StringBuffer$("");
      index = startIndex;
      separator = "";
      allDynamic = true;
      while (true) {
        t1 = H.getLength(types);
        if (typeof index !== "number")
          return index.$lt();
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(index < t1))
          break;
        buffer.write$1(separator);
        argument = H.getIndex(types, index);
        if (argument != null)
          allDynamic = false;
        buffer.write$1(H._runtimeTypeToString(argument, genericContext));
        ++index;
        separator = ", ";
      }
      return "<" + H.S(buffer) + ">";
    },
    getRti: function(o) {
      var functionRti, type, rti,
        t1 = J.getInterceptor$(o);
      if (!!t1.$isClosure) {
        functionRti = H.extractFunctionTypeObjectFrom(o);
        if (functionRti != null)
          return functionRti;
      }
      type = H.getRawRuntimeType(t1);
      if (o == null)
        return type;
      if (typeof o != "object")
        return type;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return type;
    },
    getRuntimeType: function(object) {
      return H.TypeImpl$(H.getRti(object));
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = H.invoke(substitution, $arguments);
      if (substitution == null)
        return;
      if (H.isJsArray(substitution))
        return substitution;
      if (H.isJsFunction(substitution))
        return H.invoke(substitution, $arguments);
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor$(object);
      if (H.getField(interceptor, isField) == null)
        return false;
      return H.checkArguments(H.getField(interceptor, asField), $arguments, null, checks, null);
    },
    computeTypeName: function(isField, $arguments) {
      H.stringTypeCheck(isField);
      H.listTypeCheck($arguments);
      return H.Primitives_formatType(H.unminifyOrTag(H.isCheckPropertyToJsConstructorName(isField)), $arguments);
    },
    subtypeCast: function(object, isField, checks, asField) {
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.CastErrorImplementation$(object, H.computeTypeName(isField, checks)));
    },
    assertSubtype: function(object, isField, checks, asField) {
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.TypeErrorImplementation$(object, H.computeTypeName(isField, checks)));
    },
    assertIsSubtype: function(subtype, supertype, prefix, infix, suffix) {
      H.stringTypeCheck(prefix);
      H.stringTypeCheck(infix);
      H.stringTypeCheck(suffix);
      if (!H.isSubtype(subtype, supertype))
        H.throwTypeError("TypeError: " + H.S(prefix) + H.S(H.runtimeTypeToString(subtype)) + H.S(infix) + H.S(H.runtimeTypeToString(supertype)) + H.S(suffix));
    },
    throwTypeError: function(message) {
      throw H.wrapException(H.TypeErrorImplementation$fromMessage(H.stringTypeCheck(message)));
    },
    checkArguments: function(substitution, $arguments, sEnv, checks, tEnv) {
      return H.areSubtypes(H.substitute(substitution, $arguments), sEnv, checks, tEnv);
    },
    areSubtypes: function(s, sEnv, t, tEnv) {
      var len, i;
      if (t == null)
        return true;
      if (s == null) {
        len = H.getLength(t);
        if (typeof len !== "number")
          return H.iae(len);
        i = 0;
        for (; i < len; ++i)
          if (!H._isSubtype(null, null, H.getIndex(t, i), tEnv))
            return false;
        return true;
      }
      len = H.getLength(s);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        if (!H._isSubtype(H.getIndex(s, i), sEnv, H.getIndex(t, i), tEnv))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return H.invokeOn(signature, context, H.getRuntimeTypeArguments(J.getInterceptor$(context), context, contextName));
    },
    isTopType: function(type) {
      return H.isDartDynamicTypeRti(type) || H.isDartVoidTypeRti(type) || H.isDartObjectTypeRti(type) || H.isDartJsInteropTypeArgumentRti(type);
    },
    isSupertypeOfNull: function(type) {
      return H.isSupertypeOfNullBase(type) || H.isSupertypeOfNullRecursive(type);
    },
    isSupertypeOfNullBase: function(type) {
      return H.isDartDynamicTypeRti(type) || H.isDartObjectTypeRti(type) || H.isNullTypeRti(type) || H.isDartVoidTypeRti(type) || H.isDartJsInteropTypeArgumentRti(type);
    },
    isSupertypeOfNullRecursive: function(type) {
      var typeArgument;
      if (H.isGenericFunctionTypeParameter(type))
        return false;
      if (H.isDartFutureOrType(type)) {
        typeArgument = H.getFutureOrArgument(type);
        return H.isSupertypeOfNullBase(type) || H.isSupertypeOfNullRecursive(typeArgument);
      }
      return false;
    },
    getFutureOrArgument: function(type) {
      return H.boolTypeCheck(H.hasField(type, "type")) ? H.getField(type, "type") : null;
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var type, rti;
      if (o == null)
        return H.isSupertypeOfNull(t);
      if (H.isTopType(t))
        return true;
      if (typeof t == "object") {
        if (H.isDartFutureOrType(t))
          if (H.checkSubtypeOfRuntimeType(o, H.getFutureOrArgument(t)))
            return true;
        if (H.isDartFunctionType(t))
          return H.boolTypeCheck(H.functionTypeTest(o, t));
      }
      type = H.getRawRuntimeType(J.getInterceptor$(o));
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return H.isSubtype(type, t);
    },
    subtypeOfRuntimeTypeCast: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.CastErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    assertSubtypeOfRuntimeType: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    getArguments: function(type) {
      return H.isJsArray(type) ? type.slice(1) : null;
    },
    isSubtype: function(s, t) {
      return H._isSubtype(s, null, t, null);
    },
    _isSubtype: function(s, sEnv, t, tEnv) {
      var typeOfS, tTypeArgument, futureArguments, typeOfT, typeOfTString, substitution;
      if (H.isIdentical(s, t))
        return true;
      if (H.isTopType(t))
        return true;
      if (H.isDartJsInteropTypeArgumentRti(s))
        return true;
      if (H.isTopType(s)) {
        if (H.isGenericFunctionTypeParameter(t))
          return false;
        if (H.isDartFutureOrType(t))
          return H._isSubtype(s, sEnv, H.getFutureOrArgument(t), tEnv);
        return false;
      }
      if (H.isGenericFunctionTypeParameter(s))
        return false;
      if (H.isGenericFunctionTypeParameter(t))
        return false;
      if (H.isNullType(s))
        return true;
      if (H.isDartFunctionType(t))
        return H._isFunctionSubtype(s, sEnv, t, tEnv);
      if (H.isDartFunctionType(s))
        return H.isDartFunctionTypeRti(t);
      typeOfS = H.isJsArray(s) ? H.getIndex(s, 0) : s;
      if (H.isDartFutureOrType(t)) {
        tTypeArgument = H.getFutureOrArgument(t);
        if (H.isDartFutureOrType(s))
          return H._isSubtype(H.getFutureOrArgument(s), sEnv, tTypeArgument, tEnv);
        else if (H._isSubtype(s, sEnv, tTypeArgument, tEnv))
          return true;
        else {
          if (!H.builtinIsSubtype(typeOfS, "Future"))
            return false;
          futureArguments = H.substitute(H.getField(typeOfS.prototype, "$as" + "Future"), H.getArguments(s));
          return H._isSubtype(H.isJsArray(futureArguments) ? H.getIndex(futureArguments, 0) : null, sEnv, tTypeArgument, tEnv);
        }
      }
      typeOfT = H.isJsArray(t) ? H.getIndex(t, 0) : t;
      if (H.isNotIdentical(typeOfT, typeOfS)) {
        typeOfTString = H.rawRtiToJsConstructorName(typeOfT);
        if (!H.builtinIsSubtype(typeOfS, typeOfTString))
          return false;
        substitution = H.getField(typeOfS.prototype, "$as" + H.S(typeOfTString));
      } else
        substitution = null;
      if (!H.isJsArray(t))
        return true;
      return H.checkArguments(substitution, H.getArguments(s), sEnv, H.getArguments(t), tEnv);
    },
    isFunctionSubtype: function(s, t) {
      return H._isFunctionSubtype(s, null, t, null);
    },
    _isFunctionSubtype: function(s, sEnv, t, tEnv) {
      var sBounds, tBounds, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, tPos, sPos, sNamedParameters, tNamedParameters;
      if (!H.isDartFunctionType(s))
        return false;
      if (H.boolTypeCheck(H.hasField(s, "bounds"))) {
        if (H.boolTypeCheck(H.hasNoField(t, "bounds")))
          return false;
        sBounds = H.getField(s, "bounds");
        tBounds = H.getField(t, "bounds");
        if (H.getLength(sBounds) != H.getLength(tBounds))
          return false;
      } else if (H.boolTypeCheck(H.hasField(t, "bounds")))
        return false;
      if (!H._isSubtype(H.getField(s, "ret"), sEnv, H.getField(t, "ret"), tEnv))
        return false;
      sParameterTypes = H.getField(s, "args");
      tParameterTypes = H.getField(t, "args");
      sOptionalParameterTypes = H.getField(s, "opt");
      tOptionalParameterTypes = H.getField(t, "opt");
      sParametersLen = sParameterTypes != null ? H.getLength(sParameterTypes) : 0;
      tParametersLen = tParameterTypes != null ? H.getLength(tParameterTypes) : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? H.getLength(sOptionalParameterTypes) : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? H.getLength(tOptionalParameterTypes) : 0;
      if (typeof sParametersLen !== "number")
        return sParametersLen.$gt();
      if (typeof tParametersLen !== "number")
        return H.iae(tParametersLen);
      if (sParametersLen > tParametersLen)
        return false;
      if (typeof sOptionalParametersLen !== "number")
        return H.iae(sOptionalParametersLen);
      if (typeof tOptionalParametersLen !== "number")
        return H.iae(tOptionalParametersLen);
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      for (pos = 0; pos < sParametersLen; ++pos)
        if (!H._isSubtype(H.getIndex(tParameterTypes, pos), tEnv, H.getIndex(sParameterTypes, pos), sEnv))
          return false;
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(H.getIndex(tParameterTypes, tPos), tEnv, H.getIndex(sOptionalParameterTypes, sPos), sEnv))
          return false;
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(H.getIndex(tOptionalParameterTypes, tPos), tEnv, H.getIndex(sOptionalParameterTypes, sPos), sEnv))
          return false;
      sNamedParameters = H.getField(s, "named");
      tNamedParameters = H.getField(t, "named");
      if (tNamedParameters == null)
        return true;
      if (sNamedParameters == null)
        return false;
      return H.namedParametersSubtypeCheck(sNamedParameters, sEnv, tNamedParameters, tEnv);
    },
    namedParametersSubtypeCheck: function(s, sEnv, t, tEnv) {
      var t1, i, $name,
        names = Object.getOwnPropertyNames(t);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        if (!H._isSubtype(t[$name], tEnv, s[$name], sEnv))
          return false;
      }
      return true;
    },
    isGenericFunctionTypeParameter: function(type) {
      return typeof type === "number";
    },
    invoke: function($function, $arguments) {
      return H.invokeOn($function, null, $arguments);
    },
    invokeOn: function($function, receiver, $arguments) {
      return $function.apply(receiver, $arguments);
    },
    getField: function(object, $name) {
      return object[H.stringTypeCheck($name)];
    },
    getIndex: function(array, index) {
      return array[H.intTypeCheck(index)];
    },
    getLength: function(array) {
      return array.length;
    },
    isJsArray: function(value) {
      return typeof value === "object" && value !== null && value.constructor === Array;
    },
    hasField: function(object, $name) {
      return $name in object;
    },
    hasNoField: function(object, $name) {
      return !H.boolTypeCheck(H.hasField(object, $name));
    },
    isJsFunction: function(o) {
      return typeof o == "function";
    },
    isIdentical: function(s, t) {
      return s === t;
    },
    isNotIdentical: function(s, t) {
      return s !== t;
    },
    isInterestingBound: function(rti) {
      return rti != null && H.isNotIdentical(rti, P.Object);
    },
    JsLinkedHashMap$: function($K, $V) {
      return new H.JsLinkedHashMap([$K, $V]);
    },
    JsLinkedHashMap_JsLinkedHashMap$es6: function($K, $V) {
      var t1 = H.JsLinkedHashMap$($K, $V);
      return t1;
    },
    JsLinkedHashMap__isStringKey: function(key) {
      return typeof key === "string";
    },
    JsLinkedHashMap__isNumericKey: function(key) {
      return typeof key === "number" && (key & 0x3ffffff) === key;
    },
    LinkedHashMapCell$: function(hashMapCellKey, hashMapCellValue) {
      return new H.LinkedHashMapCell(hashMapCellKey, hashMapCellValue, []);
    },
    LinkedHashMapKeyIterable$: function(_map, $E) {
      return new H.LinkedHashMapKeyIterable(_map, [$E]);
    },
    LinkedHashMapKeyIterator$: function(_map, _modifications, $E) {
      var t1 = new H.LinkedHashMapKeyIterator(_map, _modifications, [$E]);
      t1.LinkedHashMapKeyIterator$2(_map, _modifications, $E);
      return t1;
    },
    contains: function(userAgent, $name) {
      return H.stringTypeCheck(userAgent).indexOf(H.stringTypeCheck($name)) !== -1;
    },
    propertyGet: function(object, property) {
      return object[H.stringTypeCheck(property)];
    },
    propertySet: function(object, property, value) {
      object[H.stringTypeCheck(property)] = value;
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, H.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
    },
    interceptorsByTag: function() {
      return init.interceptorsByTag;
    },
    leafTags: function() {
      return init.leafTags;
    },
    lookupInterceptor: function(tag) {
      H.stringTypeCheck(tag);
      return H.propertyGet(H.interceptorsByTag(), tag);
    },
    lookupAndCacheInterceptor: function(obj) {
      var interceptor, interceptorClass, mark,
        tag = H.stringTypeCheck($.getTagFunction.call$1(obj)),
        record = H.propertyGet($.dispatchRecordsForInstanceTags, tag);
      if (record != null)
        return H.patchInstance(obj, record);
      interceptor = H.propertyGet($.interceptorsForUncacheableTags, tag);
      if (interceptor != null)
        return interceptor;
      interceptorClass = H.lookupInterceptor(tag);
      if (interceptorClass == null) {
        tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = H.propertyGet($.dispatchRecordsForInstanceTags, tag);
          if (record != null)
            return H.patchInstance(obj, record);
          interceptor = H.propertyGet($.interceptorsForUncacheableTags, tag);
          if (interceptor != null)
            return interceptor;
          interceptorClass = H.lookupInterceptor(tag);
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        H.propertySet($.dispatchRecordsForInstanceTags, tag, record);
        return H.patchInstance(obj, record);
      }
      if (mark === "~") {
        H.propertySet($.interceptorsForUncacheableTags, tag, interceptor);
        return interceptor;
      }
      if (mark === "-")
        return H.patchProto(obj, H.makeLeafDispatchRecord(interceptor));
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (H.leafTags()[tag] === true)
        return H.patchProto(obj, H.makeLeafDispatchRecord(interceptor));
      else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInstance: function(obj, record) {
      J.setDispatchProperty(obj, record);
      return J.dispatchRecordInterceptor(record);
    },
    patchProto: function(obj, record) {
      J.setDispatchProperty(Object.getPrototypeOf(obj), record);
      return J.dispatchRecordInterceptor(record);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      J.setDispatchProperty(proto, J.makeDispatchRecord(interceptor, proto, null, null));
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (H.leafTags()[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    constructorNameFallback: function(object) {
      return C.C_JS_CONST(object);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = H.interceptorsByTag();
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              J.setDispatchProperty(proto, record);
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = H.propertyGet(map, tag);
          H.propertySet(map, "!" + tag, interceptorClass);
          H.propertySet(map, "~" + tag, interceptorClass);
          H.propertySet(map, "-" + tag, interceptorClass);
          H.propertySet(map, "+" + tag, interceptorClass);
          H.propertySet(map, "*" + tag, interceptorClass);
        }
      }
    },
    initHooks: function() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST0();
      hooks = H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5, H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = H.applyHooksTransformer(transformer, hooks);
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    regExpGetNative: function(regexp) {
      return H.interceptedTypeCheck(regexp, "$isJSSyntaxRegExp")._nativeRegExp;
    },
    regExpGetGlobalNative: function(regexp) {
      var nativeRegexp = H.interceptedTypeCheck(regexp, "$isJSSyntaxRegExp").get$_nativeGlobalVersion();
      nativeRegexp.lastIndex = 0;
      return nativeRegexp;
    },
    regExpCaptureCount: function(regexp) {
      return H.interceptedTypeCheck(regexp, "$isJSSyntaxRegExp").get$_nativeAnchoredVersion().exec("").length - 2;
    },
    JSSyntaxRegExp$: function(source, caseSensitive, multiLine) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, false), []);
    },
    JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
      var m, i, g, regexp;
      H.stringTypeCheck(source);
      H.boolTypeCheck(multiLine);
      H.boolTypeCheck(caseSensitive);
      H.boolTypeCheck(global);
      H.checkString(source);
      m = multiLine === true ? "m" : "";
      i = caseSensitive === true ? "" : "i";
      g = global ? "g" : "";
      regexp = function(source, modifiers) {
        try {
          return new RegExp(source, modifiers);
        } catch (e) {
          return e;
        }
      }(source, m + i + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw H.wrapException(P.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    _MatchImplementation$: function(pattern, _match) {
      var t1 = new H._MatchImplementation(_match, []);
      t1._MatchImplementation$2(pattern, _match);
      return t1;
    },
    _AllMatchesIterable$: function(_re, _string, _start) {
      return new H._AllMatchesIterable(_re, _string, _start, []);
    },
    _AllMatchesIterator$: function(_regExp, _string, _nextIndex) {
      return new H._AllMatchesIterator(_regExp, _string, _nextIndex, []);
    },
    firstMatchAfter: function(regExp, string, start) {
      return H.interceptedTypeCheck(regExp, "$isJSSyntaxRegExp")._execGlobal$2(H.stringTypeCheck(string), H.intTypeCheck(start));
    },
    stringIndexOfStringUnchecked: function(receiver, other, startIndex) {
      return receiver.indexOf(other, startIndex);
    },
    stringContainsStringUnchecked: function(receiver, other, startIndex) {
      return J.$ge$n(H.stringIndexOfStringUnchecked(receiver, other, startIndex), 0);
    },
    stringSplitUnchecked: function(receiver, pattern) {
      return J.JSArray_JSArray$markGrowable(H.stringTypeCheck(receiver).split(pattern), P.String);
    },
    StringMatch$: function(start, input, pattern) {
      return new H.StringMatch(start, pattern, []);
    },
    allMatchesInStringUnchecked: function(pattern, string, startIndex) {
      H.stringTypeCheck(pattern);
      return H._StringAllMatchesIterable$(H.stringTypeCheck(string), pattern, H.intTypeCheck(startIndex));
    },
    _StringAllMatchesIterable$: function(_input, _pattern, _index) {
      return new H._StringAllMatchesIterable(_input, _pattern, _index, []);
    },
    _StringAllMatchesIterator$: function(_input, _pattern, _index) {
      return new H._StringAllMatchesIterator(_input, _pattern, _index, []);
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1, t2;
      if (typeof other === "string")
        return H.stringContainsStringUnchecked(receiver, other, startIndex);
      else {
        t1 = J.getInterceptor$(other);
        t2 = J.getInterceptor$s(receiver);
        if (!!t1.$isJSSyntaxRegExp)
          return other.hasMatch$1(H.stringTypeCheck(t2.substring$1(receiver, startIndex)));
        else
          return J.get$isNotEmpty$asx(t1.allMatches$1(other, t2.substring$1(receiver, startIndex)));
      }
    },
    stringReplaceJS: function(receiver, replacer, replacement) {
      return receiver.replace(replacer, replacement.replace(/\$/g, "$$$$"));
    },
    stringReplaceFirstRE: function(receiver, regexp, replacement, startIndex) {
      var start, end,
        match = regexp._execGlobal$2(receiver, startIndex);
      if (match == null)
        return receiver;
      start = match.get$start();
      end = match.get$end();
      return H.stringReplaceRangeUnchecked(H.stringTypeCheck(receiver), H.intTypeCheck(start), H.intTypeCheck(end), H.stringTypeCheck(replacement));
    },
    quoteStringForRegExp: function(string) {
      return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
    },
    stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
      var t1, result, $length, i;
      H.checkString(replacement);
      if (typeof pattern === "string")
        if (pattern === "") {
          t1 = J.getInterceptor$(receiver);
          if (t1.$eq(receiver, ""))
            return replacement;
          else {
            result = P.StringBuffer$("");
            $length = H.intTypeCheck(t1.get$length(receiver));
            result.write$1(replacement);
            if (typeof $length !== "number")
              return H.iae($length);
            i = 0;
            for (; i < $length; ++i) {
              result.write$1(t1.$index(receiver, i));
              result.write$1(replacement);
            }
            return result.toString$0(0);
          }
        } else
          return H.stringReplaceJS(receiver, new RegExp(H.quoteStringForRegExp(pattern), 'g'), replacement);
      else if (pattern instanceof H.JSSyntaxRegExp)
        return H.stringReplaceJS(receiver, H.regExpGetGlobalNative(pattern), replacement);
      else {
        H.checkNull(pattern);
        throw H.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
      }
    },
    _matchString: function(match) {
      return H.interceptedTypeCheck(match, "$isMatch").$index(0, 0);
    },
    _stringIdentity: function(string) {
      return H.stringTypeCheck(string);
    },
    stringReplaceAllFuncUnchecked: function(receiver, pattern, onMatch, onNonMatch) {
      var t1, buffer, t2, startIndex, t3;
      if (onMatch == null)
        onMatch = H._js_helper___matchString$closure();
      if (onNonMatch == null)
        onNonMatch = H._js_helper___stringIdentity$closure();
      if (typeof pattern === "string")
        return H.stringReplaceAllStringFuncUnchecked(receiver, pattern, onMatch, onNonMatch);
      t1 = J.getInterceptor$(pattern);
      if (!t1.$isPattern)
        throw H.wrapException(P.ArgumentError$value(pattern, "pattern", "is not a Pattern"));
      buffer = P.StringBuffer$("");
      for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(t1.allMatches$1(pattern, receiver), "$isIterable")), t2 = J.getInterceptor$s(receiver), startIndex = 0; t1.moveNext$0();) {
        t3 = H.interceptedTypeCheck(t1.get$current(), "$isMatch");
        buffer.write$1(onNonMatch.call$1(t2.substring$2(receiver, startIndex, t3.get$start())));
        buffer.write$1(onMatch.call$1(t3));
        startIndex = t3.get$end();
      }
      buffer.write$1(onNonMatch.call$1(t2.substring$1(receiver, startIndex)));
      return buffer.toString$0(0);
    },
    stringReplaceAllEmptyFuncUnchecked: function(receiver, onMatch, onNonMatch) {
      var i, code, i0,
        buffer = P.StringBuffer$(""),
        $length = H.intTypeCheck(J.getInterceptor$asx(receiver).get$length(receiver));
      buffer.write$1(onNonMatch.call$1(""));
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length;) {
        H.stringTypeCheck(receiver);
        buffer.write$1(onMatch.call$1(H.StringMatch$(i, receiver, "")));
        code = H.intTypeCheck(C.JSString_methods._codeUnitAt$1(receiver, i));
        if (typeof code !== "number")
          return code.$and();
        if ((code & 4294966272) >>> 0 === 55296 && $length > i + 1) {
          code = H.intTypeCheck(C.JSString_methods._codeUnitAt$1(receiver, i + 1));
          if (typeof code !== "number")
            return code.$and();
          if ((code & 4294966272) >>> 0 === 56320) {
            i0 = i + 2;
            buffer.write$1(onNonMatch.call$1(C.JSString_methods.substring$2(receiver, i, i0)));
            i = i0;
            continue;
          }
        }
        if (i >= receiver.length)
          return H.ioore(receiver, i);
        buffer.write$1(onNonMatch.call$1(receiver[i]));
        ++i;
      }
      buffer.write$1(onMatch.call$1(H.StringMatch$(i, H.stringTypeCheck(receiver), "")));
      buffer.write$1(onNonMatch.call$1(""));
      return buffer.toString$0(0);
    },
    stringReplaceAllStringFuncUnchecked: function(receiver, pattern, onMatch, onNonMatch) {
      var t1, $length, buffer, startIndex, position,
        patternLength = H.intTypeCheck(J.get$length$asx(pattern));
      if (patternLength === 0)
        return H.stringReplaceAllEmptyFuncUnchecked(receiver, onMatch, onNonMatch);
      t1 = J.getInterceptor$asx(receiver);
      $length = H.intTypeCheck(t1.get$length(receiver));
      buffer = P.StringBuffer$("");
      if (typeof $length !== "number")
        return H.iae($length);
      startIndex = 0;
      for (; startIndex < $length;) {
        position = H.intTypeCheck(H.stringIndexOfStringUnchecked(receiver, pattern, startIndex));
        if (position === -1)
          break;
        buffer.write$1(onNonMatch.call$1(t1.substring$2(receiver, startIndex, position)));
        buffer.write$1(onMatch.call$1(H.StringMatch$(position, H.stringTypeCheck(receiver), H.stringTypeCheck(pattern))));
        if (typeof position !== "number")
          return position.$add();
        if (typeof patternLength !== "number")
          return H.iae(patternLength);
        startIndex = position + patternLength;
      }
      buffer.write$1(onNonMatch.call$1(t1.substring$1(receiver, startIndex)));
      return buffer.toString$0(0);
    },
    stringReplaceFirstUnchecked: function(receiver, pattern, replacement, startIndex) {
      var index, t1, matches, match;
      H.intTypeCheck(startIndex);
      if (typeof pattern === "string") {
        index = H.intTypeCheck(H.stringIndexOfStringUnchecked(receiver, pattern, startIndex));
        if (typeof index !== "number")
          return index.$lt();
        if (index < 0)
          return receiver;
        t1 = pattern.length;
        return H.stringReplaceRangeUnchecked(H.stringTypeCheck(receiver), index, index + t1, H.stringTypeCheck(replacement));
      }
      t1 = J.getInterceptor$(pattern);
      if (!!t1.$isJSSyntaxRegExp)
        return startIndex === 0 ? H.stringReplaceJS(receiver, H.regExpGetNative(pattern), replacement) : H.stringReplaceFirstRE(receiver, pattern, replacement, startIndex);
      H.checkNull(pattern);
      matches = H.assertSubtype(J.get$iterator$ax(t1.allMatches$2(pattern, receiver, startIndex)), "$isIterator", [P.Match], "$asIterator");
      if (!matches.moveNext$0())
        return receiver;
      match = matches.get$current();
      return J.replaceRange$3$asx(receiver, match.get$start(), match.get$end(), replacement);
    },
    stringReplaceRangeUnchecked: function(receiver, start, end, replacement) {
      var prefix, suffix;
      H.stringTypeCheck(receiver);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.stringTypeCheck(replacement);
      prefix = receiver.substring(0, start);
      suffix = receiver.substring(end);
      return prefix + H.S(replacement) + suffix;
    },
    Native: function Native() {
    },
    _Patch: function _Patch() {
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantMap_map_closure: function ConstantMap_map_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.transform = t1;
      _.result = t2;
      _.$ti = t3;
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_length = t0;
      _._jsObject = t1;
      _.__js_helper$_keys = t2;
      _.$ti = t3;
    },
    ConstantStringMap_values_closure: function ConstantStringMap_values_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    ConstantProtoMap: function ConstantProtoMap() {
    },
    _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    GeneralConstantMap: function GeneralConstantMap() {
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1() {
    },
    Instantiation2: function Instantiation2() {
    },
    Instantiation3: function Instantiation3() {
    },
    Instantiation4: function Instantiation4() {
    },
    Instantiation5: function Instantiation5() {
    },
    Instantiation6: function Instantiation6() {
    },
    Instantiation7: function Instantiation7() {
    },
    Instantiation8: function Instantiation8() {
    },
    Instantiation9: function Instantiation9() {
    },
    Instantiation10: function Instantiation10() {
    },
    Instantiation11: function Instantiation11() {
    },
    Instantiation12: function Instantiation12() {
    },
    Instantiation13: function Instantiation13() {
    },
    Instantiation14: function Instantiation14() {
    },
    Instantiation15: function Instantiation15() {
    },
    Instantiation16: function Instantiation16() {
    },
    Instantiation17: function Instantiation17() {
    },
    Instantiation18: function Instantiation18() {
    },
    Instantiation19: function Instantiation19() {
    },
    Instantiation20: function Instantiation20() {
    },
    InternalMap: function InternalMap() {
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.__js_helper$_memberName = t0;
      _._kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
      _.$ti = t5;
    },
    Primitives: function Primitives() {
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.namedArgumentList = t1;
      _.$arguments = t2;
      _.$ti = t3;
    },
    JsCache: function JsCache() {
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
      _.$ti = t6;
    },
    NullError: function NullError(t0, t1, t2) {
      this._message = t0;
      this._method = t1;
      this.$ti = t2;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._message = t0;
      _._method = t1;
      _._receiver = t2;
      _.$ti = t3;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0, t1) {
      this._message = t0;
      this.$ti = t1;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1, t2) {
      this.dartException = t0;
      this.stackTrace = t1;
      this.$ti = t2;
    },
    unwrapException_saveStackTrace: function unwrapException_saveStackTrace(t0, t1) {
      this.ex = t0;
      this.$ti = t1;
    },
    _StackTrace: function _StackTrace(t0, t1) {
      this._exception = t0;
      this._trace = null;
      this.$ti = t1;
    },
    Closure: function Closure() {
    },
    Closure_fromTearOff_closure: function Closure_fromTearOff_closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure(t0) {
      this.$ti = t0;
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3, t4) {
      var _ = this;
      _._self = t0;
      _._target = t1;
      _._receiver = t2;
      _._name = t3;
      _.$ti = t4;
    },
    Creates: function Creates() {
    },
    Returns: function Returns() {
    },
    JSName: function JSName() {
    },
    JavaScriptIndexingBehavior: function JavaScriptIndexingBehavior() {
    },
    TypeErrorImplementation: function TypeErrorImplementation(t0, t1) {
      this.message = t0;
      this.$ti = t1;
    },
    CastErrorImplementation: function CastErrorImplementation(t0, t1) {
      this.message = t0;
      this.$ti = t1;
    },
    FallThroughErrorImplementation: function FallThroughErrorImplementation() {
    },
    RuntimeError: function RuntimeError(t0, t1) {
      this.message = t0;
      this.$ti = t1;
    },
    DeferredNotLoadedError: function DeferredNotLoadedError() {
    },
    UnimplementedNoSuchMethodError: function UnimplementedNoSuchMethodError() {
    },
    MainError: function MainError() {
    },
    _AssertionError: function _AssertionError() {
    },
    _UnreachableError: function _UnreachableError() {
    },
    TypeImpl: function TypeImpl(t0, t1) {
      var _ = this;
      _._rti = t0;
      _.__js_helper$_hashCode = _.__typeName = null;
      _.$ti = t1;
    },
    TypeVariable: function TypeVariable() {
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _._rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    Es6LinkedHashMap: function Es6LinkedHashMap() {
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1, t2) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
      _.$ti = t2;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0, t1) {
      this.getTag = t0;
      this.$ti = t1;
    },
    initHooks_closure0: function initHooks_closure0(t0, t1) {
      this.getUnknownTag = t0;
      this.$ti = t1;
    },
    initHooks_closure1: function initHooks_closure1(t0, t1) {
      this.prototypeForTag = t0;
      this.$ti = t1;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1, t2) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
      _.$ti = t2;
    },
    _MatchImplementation: function _MatchImplementation(t0, t1) {
      this._match = t0;
      this.$ti = t1;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2, t3) {
      var _ = this;
      _._re = t0;
      _._string = t1;
      _.__js_helper$_start = t2;
      _.$ti = t3;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2, t3) {
      var _ = this;
      _._regExp = t0;
      _._string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
      _.$ti = t3;
    },
    StringMatch: function StringMatch(t0, t1, t2) {
      this.start = t0;
      this.pattern = t1;
      this.$ti = t2;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2, t3) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.$ti = t3;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2, t3) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
      _.$ti = t3;
    },
    extractKeys: function(victim) {
      return J.JSArray_JSArray$markFixed(victim ? Object.keys(victim) : [], null);
    },
    unmangleGlobalNameIfPreservedAnyways: function($name) {
      return H.stringTypeCheck(H.JsCache_fetch(init.mangledGlobalNames, H.stringTypeCheck($name)));
    },
    unmangleAllIdentifiersIfPreservedAnyways: function(str) {
      return function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(H.stringTypeCheck(str), init.mangledGlobalNames);
    },
    _LazyMangledNamesMap: function _LazyMangledNamesMap() {
    },
    _LazyMangledInstanceNamesMap: function _LazyMangledInstanceNamesMap() {
    },
    _LazyReflectiveNamesMap: function _LazyReflectiveNamesMap() {
    },
    SupportedBrowser: function SupportedBrowser() {
    },
    Experimental: function Experimental() {
    },
    DomName: function DomName() {
    },
    DocsEditable: function DocsEditable() {
    },
    Unstable: function Unstable() {
    },
    _checkLength: function($length) {
      return typeof $length === "number" && Math.floor($length) === $length ? $length : H.throwExpression(P.ArgumentError$("Invalid length " + H.S($length)));
    },
    _checkViewArguments: function(buffer, offsetInBytes, $length) {
      if (!J.getInterceptor$(buffer).$isNativeByteBuffer)
        throw H.wrapException(P.ArgumentError$("Invalid view buffer"));
      if (typeof offsetInBytes !== "number" || Math.floor(offsetInBytes) !== offsetInBytes)
        throw H.wrapException(P.ArgumentError$("Invalid view offsetInBytes " + H.S(offsetInBytes)));
      if ($length != null && (typeof $length !== "number" || Math.floor($length) !== $length))
        throw H.wrapException(P.ArgumentError$("Invalid view length " + H.S($length)));
    },
    _ensureNativeList: function(list) {
      var t1, t2, result, i;
      H.listTypeCheck(list);
      t1 = J.getInterceptor$(list);
      if (!!t1.$isJSIndexable)
        return list;
      t2 = t1.get$length(list);
      if (typeof t2 !== "number")
        return H.iae(t2);
      result = new Array(t2);
      result.fixed$length = Array;
      i = 0;
      while (true) {
        t2 = t1.get$length(list);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        C.JSArray_methods.$indexSet(result, i, t1.$index(list, i));
        ++i;
      }
      return result;
    },
    NativeByteData_NativeByteData: function($length) {
      return H.NativeByteData__create1(H._checkLength(H.intTypeCheck($length)));
    },
    NativeByteData_NativeByteData$view: function(buffer, offsetInBytes, $length) {
      H.interceptedTypeCheck(buffer, "$isByteBuffer");
      H.intTypeCheck(offsetInBytes);
      H.intTypeCheck($length);
      H._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? H.NativeByteData__create2(buffer, offsetInBytes) : H.NativeByteData__create3(buffer, offsetInBytes, $length);
    },
    NativeByteData__create1: function(arg) {
      return new DataView(new ArrayBuffer(arg));
    },
    NativeByteData__create2: function(arg1, arg2) {
      return new DataView(arg1, arg2);
    },
    NativeByteData__create3: function(arg1, arg2, arg3) {
      return new DataView(arg1, arg2, arg3);
    },
    NativeFloat32List__create1: function(arg) {
      return new Float32Array(arg);
    },
    NativeFloat64List__create1: function(arg) {
      return new Float64Array(arg);
    },
    NativeInt16List__create1: function(arg) {
      return new Int16Array(arg);
    },
    NativeInt32List__create1: function(arg) {
      return new Int32Array(arg);
    },
    NativeInt8List_NativeInt8List$fromList: function(elements) {
      return H.NativeInt8List__create1(H._ensureNativeList(H.assertSubtype(elements, "$isList", [P.int], "$asList")));
    },
    NativeInt8List__create1: function(arg) {
      return new Int8Array(arg);
    },
    NativeUint16List_NativeUint16List: function($length) {
      return H.NativeUint16List__create1(H._checkLength(H.intTypeCheck($length)));
    },
    NativeUint16List__create1: function(arg) {
      return new Uint16Array(arg);
    },
    NativeUint32List_NativeUint32List$fromList: function(elements) {
      return H.NativeUint32List__create1(H._ensureNativeList(H.assertSubtype(elements, "$isList", [P.int], "$asList")));
    },
    NativeUint32List__create1: function(arg) {
      return new Uint32Array(arg);
    },
    NativeUint8ClampedList__create1: function(arg) {
      return new Uint8ClampedArray(arg);
    },
    NativeUint8List_NativeUint8List: function($length) {
      return H.NativeUint8List__create1(H._checkLength(H.intTypeCheck($length)));
    },
    NativeUint8List_NativeUint8List$fromList: function(elements) {
      return H.NativeUint8List__create1(H._ensureNativeList(H.assertSubtype(elements, "$isList", [P.int], "$asList")));
    },
    NativeUint8List_NativeUint8List$view: function(buffer, offsetInBytes, $length) {
      H.interceptedTypeCheck(buffer, "$isByteBuffer");
      H.intTypeCheck(offsetInBytes);
      H.intTypeCheck($length);
      H._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? H.NativeUint8List__create2(buffer, offsetInBytes) : H.NativeUint8List__create3(buffer, offsetInBytes, $length);
    },
    NativeUint8List__create1: function(arg) {
      return new Uint8Array(arg);
    },
    NativeUint8List__create2: function(arg1, arg2) {
      return new Uint8Array(arg1, arg2);
    },
    NativeUint8List__create3: function(arg1, arg2, arg3) {
      return new Uint8Array(arg1, arg2, arg3);
    },
    _isInvalidArrayIndex: function(index) {
      H.intTypeCheck(index);
      return index >>> 0 !== index;
    },
    _checkValidIndex: function(index, list, $length) {
      var t1;
      H.intTypeCheck(index);
      H.listTypeCheck(list);
      H.intTypeCheck($length);
      if (!H._isInvalidArrayIndex(index)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    _checkValidRange: function(start, end, $length) {
      var t1;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.intTypeCheck($length);
      if (!H._isInvalidArrayIndex(start))
        if (end == null) {
          if (typeof start !== "number")
            return start.$gt();
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = start > $length;
        } else if (!H._isInvalidArrayIndex(end)) {
          if (typeof start !== "number")
            return start.$gt();
          if (!(start > end)) {
            if (typeof $length !== "number")
              return H.iae($length);
            t1 = end > $length;
          } else
            t1 = true;
        } else
          t1 = true;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeFloat32x4List: function NativeFloat32x4List() {
    },
    NativeInt32x4List: function NativeInt32x4List() {
    },
    NativeFloat64x2List: function NativeFloat64x2List() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    NativeFloat32x4: function NativeFloat32x4() {
    },
    NativeInt32x4: function NativeInt32x4() {
    },
    NativeFloat64x2: function NativeFloat64x2() {
    },
    _NativeFloat32x4List_Object_ListMixin: function _NativeFloat32x4List_Object_ListMixin() {
    },
    _NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin: function _NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin() {
    },
    _NativeFloat64x2List_Object_ListMixin: function _NativeFloat64x2List_Object_ListMixin() {
    },
    _NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin: function _NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin() {
    },
    _NativeInt32x4List_Object_ListMixin: function _NativeInt32x4List_Object_ListMixin() {
    },
    _NativeInt32x4List_Object_ListMixin_FixedLengthListMixin: function _NativeInt32x4List_Object_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    printString: function(string) {
      H.stringTypeCheck(string);
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  },
  J = {
    getDispatchProperty: function(object) {
      return object[init.dispatchPropertyName];
    },
    setDispatchProperty: function(object, value) {
      H.defineProperty(object, init.dispatchPropertyName, value);
    },
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    dispatchRecordInterceptor: function(record) {
      return record.i;
    },
    dispatchRecordProto: function(record) {
      return record.p;
    },
    dispatchRecordExtension: function(record) {
      return record.e;
    },
    dispatchRecordIndexability: function(record) {
      return record.x;
    },
    getNativeInterceptor: function(object) {
      var proto, objectProto, $constructor, interceptor,
        record = J.getDispatchProperty(object);
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = J.getDispatchProperty(object);
        }
      if (record != null) {
        proto = J.dispatchRecordProto(record);
        if (false === proto)
          return J.dispatchRecordInterceptor(record);
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return J.dispatchRecordInterceptor(record);
        if (J.dispatchRecordExtension(record) === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = J.lookupInterceptorByConstructor($constructor);
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        J.cacheInterceptorOnConstructor($constructor, C.UnknownJavaScriptObject_methods);
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    lookupInterceptorByConstructor: function($constructor) {
      return $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
    },
    cacheInterceptorOnConstructor: function($constructor, interceptor) {
      H.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), interceptor);
    },
    JSArray_JSArray$fixed: function($length, $E) {
      H.intTypeCheck($length);
      if (typeof $length !== "number" || Math.floor($length) !== $length)
        throw H.wrapException(P.ArgumentError$value($length, "length", "is not an integer"));
      if ($length < 0 || $length > 4294967295)
        throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$typed: function(allocation, $E) {
      return allocation;
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(J.JSArray_JSArray$typed(allocation, $E), [$E]));
    },
    JSArray_JSArray$markGrowable: function(allocation, $E) {
      return H.setRuntimeTypeInfo(J.JSArray_JSArray$typed(allocation, $E), [$E]);
    },
    JSArray_markFixedList: function(list) {
      H.listTypeCheck(list);
      list.fixed$length = Array;
      return list;
    },
    JSArray_markUnmodifiableList: function(list) {
      H.listTypeCheck(list);
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    JSArray__compareAny: function(a, b) {
      return P.Comparable_compare(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
    },
    ArrayIterator$: function(iterable, $E) {
      return new J.ArrayIterator(iterable, iterable.length, [$E]);
    },
    JSNumber__handleIEtoString: function(result) {
      var match, t1, exponent;
      H.stringTypeCheck(result);
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        throw H.wrapException(P.UnsupportedError$("Unexpected toString result: " + H.S(result)));
      t1 = match.length;
      if (1 >= t1)
        return H.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return H.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return C.JSString_methods.$add(result, C.JSString_methods.$mul("0", exponent));
    },
    JSInt__clz32: function(uint32) {
      var t1 = J.JSInt__bitCount(J.JSInt__spread(H.intTypeCheck(uint32)));
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 32 - t1;
    },
    JSInt__bitCount: function(i) {
      var t1;
      H.intTypeCheck(i);
      i = J.$sub$n(J.JSInt__shru(i, 0), J.$and$bn(J.JSInt__shru(i, 1), 1431655765));
      if (typeof i !== "number")
        return i.$and();
      t1 = J.$and$bn(J.JSInt__shru(i, 2), 858993459);
      if (typeof t1 !== "number")
        return H.iae(t1);
      i = (i & 858993459) + t1;
      t1 = J.JSInt__shru(i, 4);
      if (typeof t1 !== "number")
        return H.iae(t1);
      i = 252645135 & i + t1;
      t1 = J.JSInt__shru(i, 8);
      if (typeof t1 !== "number")
        return H.iae(t1);
      i += t1;
      t1 = J.JSInt__shru(i, 16);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return i + t1 & 63;
    },
    JSInt__shru: function(value, shift) {
      return H.intTypeCheck(value) >>> H.intTypeCheck(shift);
    },
    JSInt__shrs: function(value, shift) {
      return H.intTypeCheck(value) >> H.intTypeCheck(shift);
    },
    JSInt__ors: function(a, b) {
      return H.intTypeCheck(a) | H.intTypeCheck(b);
    },
    JSInt__spread: function(i) {
      H.intTypeCheck(i);
      i = J.JSInt__ors(i, J.JSInt__shrs(i, 1));
      i = J.JSInt__ors(i, J.JSInt__shrs(i, 2));
      i = J.JSInt__ors(i, J.JSInt__shrs(i, 4));
      i = J.JSInt__ors(i, J.JSInt__shrs(i, 8));
      return J.JSInt__shru(J.JSInt__ors(i, J.JSInt__shrs(i, 16)), 0);
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSDouble.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$bn: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$i: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumber.prototype;
      }
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$in: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumber.prototype;
      }
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$n: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x: function(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z: function(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    set$length$asx: function(receiver, value) {
      return J.getInterceptor$asx(receiver).set$length(receiver, value);
    },
    set$responseType$x: function(receiver, value) {
      return J.getInterceptor$x(receiver).set$responseType(receiver, value);
    },
    set$withCredentials$x: function(receiver, value) {
      return J.getInterceptor$x(receiver).set$withCredentials(receiver, value);
    },
    get$_children$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$_children(receiver);
    },
    get$appDigests$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$appDigests(receiver);
    },
    get$bitLength$i: function(receiver) {
      return J.getInterceptor$i(receiver).get$bitLength(receiver);
    },
    get$buffer$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$buffer(receiver);
    },
    get$codeUnits$s: function(receiver) {
      return J.getInterceptor$s(receiver).get$codeUnits(receiver);
    },
    get$error$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$error(receiver);
    },
    get$first$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hash$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$hash(receiver);
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$isOdd$i: function(receiver) {
      return J.getInterceptor$i(receiver).get$isOdd(receiver);
    },
    get$iterator$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$key$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$key(receiver);
    },
    get$keys$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$keys(receiver);
    },
    get$last$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$last(receiver);
    },
    get$length$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$location$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$location(receiver);
    },
    get$message$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$message(receiver);
    },
    get$moduleParentsGraph$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$moduleParentsGraph(receiver);
    },
    get$name$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$name(receiver);
    },
    get$offset$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$offset(receiver);
    },
    get$onError$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onError(receiver);
    },
    get$onKeyDown$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onKeyDown(receiver);
    },
    get$onLoad$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onLoad(receiver);
    },
    get$onOpen$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onOpen(receiver);
    },
    get$path$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$path(receiver);
    },
    get$result$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$result(receiver);
    },
    get$runtimeType$: function(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    get$setRequestHeader$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$setRequestHeader(receiver);
    },
    get$source$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$source(receiver);
    },
    get$status$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$status(receiver);
    },
    get$stream$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$stream(receiver);
    },
    get$target$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$target(receiver);
    },
    get$text$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$text(receiver);
    },
    get$url$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$url(receiver);
    },
    $add$ansx: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $and$bn: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return (receiver & a0) >>> 0;
      return J.getInterceptor$bn(receiver).$and(receiver, a0);
    },
    $div$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver / a0;
      return J.getInterceptor$n(receiver).$div(receiver, a0);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $ge$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver >= a0;
      return J.getInterceptor$n(receiver).$ge(receiver, a0);
    },
    $get$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).$get$1(receiver, a0);
    },
    $gt$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver > a0;
      return J.getInterceptor$n(receiver).$gt(receiver, a0);
    },
    $index$asx: function(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    $le$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver <= a0;
      return J.getInterceptor$n(receiver).$le(receiver, a0);
    },
    $lt$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver < a0;
      return J.getInterceptor$n(receiver).$lt(receiver, a0);
    },
    $mod$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).$mod(receiver, a0);
    },
    $mul$ns: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver * a0;
      return J.getInterceptor$ns(receiver).$mul(receiver, a0);
    },
    $negate$in: function(receiver) {
      if (typeof receiver == "number")
        return -receiver;
      return J.getInterceptor$in(receiver).$negate(receiver);
    },
    $not$i: function(receiver) {
      if (typeof receiver == "number" && Math.floor(receiver) == receiver)
        return ~receiver >>> 0;
      return J.getInterceptor$i(receiver).$not(receiver);
    },
    $or$bn: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return (receiver | a0) >>> 0;
      return J.getInterceptor$bn(receiver).$or(receiver, a0);
    },
    $shl$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).$shl(receiver, a0);
    },
    $shr$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).$shr(receiver, a0);
    },
    $sub$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver - a0;
      return J.getInterceptor$n(receiver).$sub(receiver, a0);
    },
    $tdiv$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).$tdiv(receiver, a0);
    },
    $xor$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return (receiver ^ a0) >>> 0;
      return J.getInterceptor$n(receiver).$xor(receiver, a0);
    },
    _codeUnitAt$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver)._codeUnitAt$1(receiver, a0);
    },
    abs$0$in: function(receiver) {
      if (typeof receiver === "number")
        return Math.abs(receiver);
      return J.getInterceptor$in(receiver).abs$0(receiver);
    },
    add$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addAll$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
    },
    addEventListener$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).addEventListener$2(receiver, a0, a1);
    },
    addEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
    },
    alert$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).alert$1(receiver, a0);
    },
    allMatches$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
    },
    any$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).any$1(receiver, a0);
    },
    asUint8List$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).asUint8List$2(receiver, a0, a1);
    },
    cast$1$0$ax: function(receiver, $T1) {
      return J.getInterceptor$ax(receiver).cast$1$0(receiver, $T1);
    },
    cast$2$0$ax: function(receiver, $T1, $T2) {
      return J.getInterceptor$ax(receiver).cast$2$0(receiver, $T1, $T2);
    },
    clear$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).clear$0(receiver);
    },
    close$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).close$0(receiver);
    },
    codeUnitAt$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
    },
    compareTo$1$ns: function(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx: function(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    elementAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    endsWith$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
    },
    fillRange$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).fillRange$3(receiver, a0, a1, a2);
    },
    fold$1$2$ax: function(receiver, a0, a1, $T1) {
      return J.getInterceptor$ax(receiver).fold$1$2(receiver, a0, a1, $T1);
    },
    forEach$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    forceLoadModule$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).forceLoadModule$3(receiver, a0, a1, a2);
    },
    getFloat64$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).getFloat64$2(receiver, a0, a1);
    },
    getModuleLibraries$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).getModuleLibraries$1(receiver, a0);
    },
    hash$1$z: function(receiver, a0) {
      return J.getInterceptor$z(receiver).hash$1(receiver, a0);
    },
    hot$onChildUpdate$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).hot$onChildUpdate$3(receiver, a0, a1, a2);
    },
    hot$onDestroy$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).hot$onDestroy$0(receiver);
    },
    hot$onSelfUpdate$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).hot$onSelfUpdate$1(receiver, a0);
    },
    insert$2$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).insert$2(receiver, a0, a1);
    },
    insertAll$2$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).insertAll$2(receiver, a0, a1);
    },
    join$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).join$0(receiver);
    },
    join$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).join$1(receiver, a0);
    },
    keys$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).keys$0(receiver);
    },
    map$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).map$1(receiver, a0);
    },
    map$1$1$ax: function(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    map$2$1$ax: function(receiver, a0, $T1, $T2) {
      return J.getInterceptor$ax(receiver).map$2$1(receiver, a0, $T1, $T2);
    },
    matchAsPrefix$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    message$2$color$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).message$2$color(receiver, a0, a1);
    },
    noSuchMethod$1$: function(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    padLeft$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).padLeft$2(receiver, a0, a1);
    },
    padRight$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).padRight$1(receiver, a0);
    },
    reload$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).reload$0(receiver);
    },
    reload$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).reload$1(receiver, a0);
    },
    remainder$1$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).remainder$1(receiver, a0);
    },
    remove$1$z: function(receiver, a0) {
      return J.getInterceptor$z(receiver).remove$1(receiver, a0);
    },
    removeAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).removeAt$1(receiver, a0);
    },
    removeEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
    },
    removeLast$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).removeLast$0(receiver);
    },
    replaceAll$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
    },
    replaceAllMapped$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).replaceAllMapped$2(receiver, a0, a1);
    },
    replaceFirst$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).replaceFirst$2(receiver, a0, a1);
    },
    replaceRange$3$asx: function(receiver, a0, a1, a2) {
      return J.getInterceptor$asx(receiver).replaceRange$3(receiver, a0, a1, a2);
    },
    round$0$n: function(receiver) {
      return J.getInterceptor$n(receiver).round$0(receiver);
    },
    send$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).send$1(receiver, a0);
    },
    setAll$2$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).setAll$2(receiver, a0, a1);
    },
    setRange$3$ax: function(receiver, a0, a1, a2) {
      return J.getInterceptor$ax(receiver).setRange$3(receiver, a0, a1, a2);
    },
    setRange$4$ax: function(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
    },
    skip$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sort$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).sort$0(receiver);
    },
    sort$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
    },
    split$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).split$1(receiver, a0);
    },
    startsWith$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
    },
    startsWith$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).startsWith$2(receiver, a0, a1);
    },
    sublist$2$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
    },
    substring$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).substring$1(receiver, a0);
    },
    substring$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
    },
    take$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).take$1(receiver, a0);
    },
    toList$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toList$1$growable$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).toList$1$growable(receiver, a0);
    },
    toLowerCase$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
    },
    toRadixString$1$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    toUpperCase$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).toUpperCase$0(receiver);
    },
    where$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).where$1(receiver, a0);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool(t0) {
      this.$ti = t0;
    },
    JSNull: function JSNull(t0) {
      this.$ti = t0;
    },
    JSIndexable: function JSIndexable() {
    },
    JSMutableIndexable: function JSMutableIndexable() {
    },
    JSObject: function JSObject() {
    },
    JavaScriptObject: function JavaScriptObject(t0) {
      this.$ti = t0;
    },
    PlainJavaScriptObject: function PlainJavaScriptObject(t0) {
      this.$ti = t0;
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject(t0) {
      this.$ti = t0;
    },
    JavaScriptFunction: function JavaScriptFunction(t0) {
      this.$ti = t0;
    },
    _Growable: function _Growable() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber(t0) {
      this.$ti = t0;
    },
    JSInt: function JSInt(t0) {
      this.$ti = t0;
    },
    JSDouble: function JSDouble(t0) {
      this.$ti = t0;
    },
    JSString: function JSString(t0) {
      this.$ti = t0;
    }
  },
  P = {
    _AsyncRun__scheduleImmediate: function(callback) {
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      $.$get$_AsyncRun__scheduleImmediateClosure().call$1(callback);
    },
    _AsyncRun__initializeScheduleImmediate: function() {
      var div, span, t1 = {};
      H.requiresPreamble();
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer: function(callback) {
      P.Timer__createTimer(C.Duration_0, H.functionTypeCheck(callback, {func: 1, ret: -1}));
    },
    Timer__createTimer: function(duration, callback) {
      var milliseconds;
      H.interceptedTypeCheck(duration, "$isDuration");
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      milliseconds = duration.get$inMilliseconds();
      if (typeof milliseconds !== "number")
        return milliseconds.$lt();
      if (milliseconds < 0)
        milliseconds = 0;
      return P._TimerImpl$(milliseconds, callback);
    },
    _TimerImpl$: function(milliseconds, callback) {
      var t1 = new P._TimerImpl([]);
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _hasTimer: function() {
      H.requiresPreamble();
      return self.setTimeout != null;
    },
    _AsyncAwaitCompleter$: function($T) {
      return new P._AsyncAwaitCompleter(P.Completer_Completer$sync($T), [$T]);
    },
    _makeAsyncAwaitCompleter: function($T) {
      return P._AsyncAwaitCompleter$($T);
    },
    _asyncStartSync: function(bodyFunction, completer) {
      H.functionTypeCheck(bodyFunction, {func: 1, ret: -1, args: [P.int,,]});
      H.interceptedTypeCheck(completer, "$is_AsyncAwaitCompleter");
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer.get$future();
    },
    _asyncAwait: function(object, bodyFunction) {
      P._awaitOnObject(object, H.functionTypeCheck(bodyFunction, {func: 1, ret: -1, args: [P.int,,]}));
    },
    _asyncReturn: function(object, completer) {
      H.interceptedTypeCheck(completer, "$isCompleter").complete$1(object);
    },
    _asyncRethrow: function(object, completer) {
      H.interceptedTypeCheck(completer, "$isCompleter").completeError$2(H.unwrapException(object), H.getTraceFromException(object));
    },
    _awaitOnObject: function(object, bodyFunction) {
      var thenCallback, errorCallback, t1, future, _null = null;
      H.functionTypeCheck(bodyFunction, {func: 1, ret: -1, args: [P.int,,]});
      thenCallback = new P._awaitOnObject_closure(bodyFunction);
      errorCallback = new P._awaitOnObject_closure0(bodyFunction);
      t1 = J.getInterceptor$(object);
      if (!!t1.$is_Future)
        object._thenNoZoneRegistration$1$2(thenCallback, errorCallback, _null);
      else if (!!t1.$isFuture)
        object.then$1$2$onError(thenCallback, errorCallback, _null);
      else {
        future = P._Future$(_null);
        future._setValue$1(object);
        future._thenNoZoneRegistration$1$2(thenCallback, _null, _null);
      }
    },
    _wrapJsFunctionForAsync: function($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return P.Zone_current().registerBinaryCallback$3$1(new P._wrapJsFunctionForAsync_closure($protected), P.Null, P.int, null);
    },
    _rethrow: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      error = H.wrapException(error);
      error.stack = J.toString$0$(stackTrace);
      throw error;
    },
    Completer_Completer: function($T) {
      return P._AsyncCompleter$($T);
    },
    Completer_Completer$sync: function($T) {
      return P._SyncCompleter$($T);
    },
    _completeWithErrorCallback: function(result, error, stackTrace) {
      var replacement;
      H.interceptedTypeCheck(result, "$is_Future");
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      replacement = P.Zone_current().errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = P._nonNullError(replacement.error);
        stackTrace = replacement.stackTrace;
      }
      result._completeError$2(error, stackTrace);
    },
    _nonNullError: function(error) {
      return error == null ? P.NullThrownError$() : error;
    },
    _AsyncCompleter$: function($T) {
      return new P._AsyncCompleter(P._Future$($T), [$T]);
    },
    _SyncCompleter$: function($T) {
      return new P._SyncCompleter(P._Future$($T), [$T]);
    },
    _FutureListener$then: function(result, onValue, errorCallback, $S, $T) {
      var t1 = errorCallback == null ? 1 : 3;
      return new P._FutureListener(null, result, t1, onValue, errorCallback, [$S, $T]);
    },
    _FutureListener$whenComplete: function(result, callback, $S, $T) {
      return new P._FutureListener(null, result, 8, callback, null, [$S, $T]);
    },
    _Future$: function($T) {
      return new P._Future(0, P.Zone_current(), null, [$T]);
    },
    _Future$zoneValue: function(value, _zone, $T) {
      var t1 = new P._Future(0, _zone, null, [$T]);
      t1._Future$zoneValue$2(value, _zone, $T);
      return t1;
    },
    _Future__chainForeignFuture: function(source, target) {
      var e, s, exception;
      H.interceptedTypeCheck(source, "$isFuture");
      H.interceptedTypeCheck(target, "$is_Future");
      target._setPendingComplete$0();
      try {
        source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
      }
    },
    _Future__chainCoreFuture: function(source, target) {
      var listeners;
      H.interceptedTypeCheck(source, "$is_Future");
      H.interceptedTypeCheck(target, "$is_Future");
      for (; source.get$_isChained();)
        source = source.get$_chainSource();
      if (source.get$_isComplete()) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = H.interceptedTypeCheck(target._resultOrListeners, "$is_FutureListener");
        target._setChained$1(source);
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners: function(source, listeners) {
      var t1, _box_0, hasError, asyncError, listeners0, sourceResult, zone, t2, oldZone, result, _box_1 = {};
      _box_1.source = source;
      H.interceptedTypeCheck(source, "$is_Future");
      H.interceptedTypeCheck(listeners, "$is_FutureListener");
      for (t1 = source; true;) {
        _box_0 = {};
        hasError = t1.get$_hasError();
        if (listeners == null) {
          if (hasError) {
            asyncError = _box_1.source.get$_error();
            _box_1.source.get$_zone().handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
          listeners._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, listeners);
        }
        sourceResult = _box_1.source.get$_resultOrListeners();
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        t1 = !hasError;
        if (!t1 || listeners.get$handlesValue() || listeners.get$handlesComplete()) {
          zone = listeners.get$_zone();
          if (hasError && !_box_1.source.get$_zone().inSameErrorZone$1(zone)) {
            asyncError = _box_1.source.get$_error();
            _box_1.source.get$_zone().handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
            return;
          }
          t2 = P.Zone_current();
          oldZone = (t2 == null ? zone != null : t2 !== zone) ? P.Zone__enter(zone) : null;
          if (listeners.get$handlesComplete())
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, listeners, hasError).call$0();
          else if (t1) {
            if (listeners.get$handlesValue())
              new P._Future__propagateToListeners_handleValueCallback(_box_0, listeners, sourceResult).call$0();
          } else if (listeners.get$handlesError())
            new P._Future__propagateToListeners_handleError(_box_1, _box_0, listeners).call$0();
          if (oldZone != null)
            P.Zone__leave(oldZone);
          t1 = _box_0.listenerValueOrError;
          if (!!J.getInterceptor$(t1).$isFuture) {
            result = listeners.result;
            if (t1.get$_isComplete()) {
              listeners = result._removeListeners$0();
              result._cloneResult$1(t1);
              _box_1.source = t1;
              continue;
            } else
              P._Future__chainCoreFuture(t1, result);
            return;
          }
        }
        result = listeners.result;
        listeners = result._removeListeners$0();
        t1 = _box_0.listenerHasError;
        t2 = _box_0.listenerValueOrError;
        if (!t1)
          result._setValue$1(t2);
        else
          result._setErrorObject$1(H.interceptedTypeCheck(t2, "$isAsyncError"));
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler: function(errorHandler, zone) {
      H.interceptedTypeCheck(errorHandler, "$isFunction");
      H.interceptedTypeCheck(zone, "$isZone");
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object, P.StackTrace]}))
        return zone.registerBinaryCallback$3$1(errorHandler, null, P.Object, P.StackTrace);
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object]}))
        return zone.registerUnaryCallback$2$1(errorHandler, null, P.Object);
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _AsyncCallbackEntry$: function(callback) {
      return new P._AsyncCallbackEntry(callback, []);
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.callback.call$0();
      }
    },
    _startMicrotaskLoop: function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          P._AsyncRun__scheduleImmediate(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback: function(callback) {
      var newEntry = P._AsyncCallbackEntry$(H.functionTypeCheck(callback, {func: 1, ret: -1}));
      if ($._nextCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          P._AsyncRun__scheduleImmediate(P.async___startMicrotaskLoop$closure());
      } else {
        $._lastCallback.set$next(newEntry);
        $._lastCallback = newEntry;
      }
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var entry, t1;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      if ($._nextCallback == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = P._AsyncCallbackEntry$(callback);
      t1 = $._lastPriorityCallback;
      if (t1 == null) {
        entry.next = H.interceptedTypeCheck($._nextCallback, "$is_AsyncCallbackEntry");
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        entry.next = H.interceptedTypeCheck(t1.get$next(), "$is_AsyncCallbackEntry");
        $._lastPriorityCallback.set$next(entry);
        $._lastPriorityCallback = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var currentZone, _null = null;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      currentZone = H.interceptedTypeCheck(P.Zone_current(), "$is_Zone");
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
        return;
      }
      if (C.C__RootZone === currentZone.get$_scheduleMicrotask().zone && C.C__RootZone.inSameErrorZone$1(currentZone)) {
        P._rootScheduleMicrotask(_null, _null, currentZone, currentZone.registerCallback$1$1(callback, -1));
        return;
      }
      P.Zone_current().scheduleMicrotask$1(P.Zone_current().bindCallbackGuarded$1(callback));
    },
    Stream_Stream$fromIterable: function(elements, $T) {
      return P._GeneratedStreamImpl$(new P.Stream_Stream$fromIterable_closure(H.assertSubtype(elements, "$isIterable", [$T], "$asIterable"), $T), $T);
    },
    StreamIterator_StreamIterator: function(stream, $T) {
      return P._StreamIterator$(H.assertSubtype(stream, "$isStream", [$T], "$asStream"), $T);
    },
    StreamController_StreamController: function($T) {
      var _null = null,
        t1 = P._AsyncStreamController$(_null, _null, _null, _null, $T);
      return t1;
    },
    _AsyncStreamController$: function(onListen, onPause, onResume, onCancel, $T) {
      return new P._AsyncStreamController(onListen, onPause, onResume, onCancel, [$T]);
    },
    _runGuarded: function(notificationHandler) {
      var e, s, exception;
      H.functionTypeCheck(notificationHandler, {func: 1});
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.Zone_current().handleUncaughtError$2(e, s);
      }
    },
    _ControllerStream$: function(_controller, $T) {
      return new P._ControllerStream(_controller, [$T]);
    },
    _ControllerSubscription$: function(_controller, onData, onError, onDone, cancelOnError, $T) {
      var t1 = P.Zone_current(),
        t2 = cancelOnError ? 1 : 0;
      t2 = new P._ControllerSubscription(_controller, t1, t2, [$T]);
      t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
      return t2;
    },
    _StreamSinkWrapper$: function(_target, $T) {
      return new P._StreamSinkWrapper(_target, [$T]);
    },
    _BufferingStreamSubscription$: function(onData, onError, onDone, cancelOnError, $T) {
      var t1 = P.Zone_current(),
        t2 = cancelOnError ? 1 : 0;
      t2 = new P._BufferingStreamSubscription(t1, t2, [$T]);
      t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
      return t2;
    },
    _GeneratedStreamImpl$: function(_pending, $T) {
      return new P._GeneratedStreamImpl(_pending, [$T]);
    },
    _IterablePendingEvents$: function(data, $T) {
      return new P._IterablePendingEvents(J.get$iterator$ax(data), [$T]);
    },
    _nullDataHandler: function(value) {
    },
    _nullErrorHandler: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      P.Zone_current().handleUncaughtError$2(error, stackTrace);
    },
    _nullDoneHandler: function() {
    },
    _DelayedData$: function(value, $T) {
      return new P._DelayedData(value, [$T]);
    },
    _DelayedError$: function(error, stackTrace) {
      return new P._DelayedError(error, stackTrace, []);
    },
    _StreamImplEvents$: function($T) {
      return new P._StreamImplEvents([$T]);
    },
    _StreamIterator$: function(stream, $T) {
      return new P._StreamIterator(stream, [$T]);
    },
    _cancelAndValue: function(subscription, future, value) {
      var cancelFuture;
      H.interceptedTypeCheck(subscription, "$isStreamSubscription");
      H.interceptedTypeCheck(future, "$is_Future");
      cancelFuture = subscription.cancel$0();
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
      else
        future._complete$1(value);
    },
    _ForwardingStreamSubscription$: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
      var t1 = P.Zone_current(),
        t2 = cancelOnError ? 1 : 0;
      t2 = new P._ForwardingStreamSubscription(_stream, t1, t2, [$S, $T]);
      t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
      t2._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, cancelOnError, $S, $T);
      return t2;
    },
    _addErrorWithReplacement: function(sink, error, stackTrace) {
      var replacement;
      H.interceptedTypeCheck(sink, "$is_EventSink");
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      replacement = P.Zone_current().errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = P._nonNullError(replacement.error);
        stackTrace = replacement.stackTrace;
      }
      sink._addError$2(error, stackTrace);
    },
    _MapStream$: function(source, transform, $S, $T) {
      return new P._MapStream(transform, source, [$S, $T]);
    },
    AsyncError$: function(error, stackTrace) {
      return new P.AsyncError(error, stackTrace, []);
    },
    Zone_current: function() {
      return $.Zone__current;
    },
    Zone__enter: function(zone) {
      var previous;
      H.interceptedTypeCheck(zone, "$isZone");
      previous = $.Zone__current;
      $.Zone__current = zone;
      return previous;
    },
    Zone__leave: function(previous) {
      $.Zone__current = H.interceptedTypeCheck(previous, "$isZone");
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, H.interceptedTypeCheck(stackTrace, "$isStackTrace")));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old, t1;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R});
      if (J.$eq$($.Zone__current, zone))
        return f.call$0();
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        P.Zone__leave(old);
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      if (J.$eq$($.Zone__current, zone))
        return f.call$1(arg);
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        P.Zone__leave(old);
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      if (J.$eq$($.Zone__current, zone))
        return f.call$2(arg1, arg2);
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        P.Zone__leave(old);
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: -1});
      if (C.C__RootZone !== zone)
        f = !C.C__RootZone.inSameErrorZone$1(zone) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, -1);
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0, t1) {
      this._box_0 = t0;
      this.$ti = t1;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.div = t1;
      _.span = t2;
      _.$ti = t3;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0, t1) {
      this.callback = t0;
      this.$ti = t1;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0, t1) {
      this.callback = t0;
      this.$ti = t1;
    },
    _TimerImpl: function _TimerImpl(t0) {
      this.$ti = t0;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1, t2) {
      this.$this = t0;
      this.callback = t1;
      this.$ti = t2;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._completer = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _AsyncAwaitCompleter_complete_closure: function _AsyncAwaitCompleter_complete_closure(t0, t1, t2) {
      this.$this = t0;
      this.value = t1;
      this.$ti = t2;
    },
    _AsyncAwaitCompleter_completeError_closure: function _AsyncAwaitCompleter_completeError_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.e = t1;
      _.st = t2;
      _.$ti = t3;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0, t1) {
      this.bodyFunction = t0;
      this.$ti = t1;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0, t1) {
      this.bodyFunction = t0;
      this.$ti = t1;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0, t1) {
      this.$protected = t0;
      this.$ti = t1;
    },
    _AsyncStarStreamController: function _AsyncStarStreamController() {
    },
    _IterationMarker: function _IterationMarker() {
    },
    _SyncStarIterator: function _SyncStarIterator() {
    },
    _SyncStarIterable: function _SyncStarIterable() {
    },
    _BroadcastStream: function _BroadcastStream() {
    },
    _BroadcastSubscription: function _BroadcastSubscription() {
    },
    _BroadcastStreamController: function _BroadcastStreamController() {
    },
    _SyncBroadcastStreamController: function _SyncBroadcastStreamController() {
    },
    _AsyncBroadcastStreamController: function _AsyncBroadcastStreamController() {
    },
    _AsBroadcastStreamController: function _AsBroadcastStreamController() {
    },
    DeferredLibrary: function DeferredLibrary() {
    },
    DeferredLoadException: function DeferredLoadException() {
    },
    FutureOr: function FutureOr() {
    },
    Future: function Future() {
    },
    TimeoutException: function TimeoutException() {
    },
    Completer: function Completer() {
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._nextListener = t0;
      _.result = t1;
      _.state = t2;
      _.callback = t3;
      _.errorCallback = t4;
      _.$ti = t5;
    },
    _Future: function _Future(t0, t1, t2, t3) {
      var _ = this;
      _._state = t0;
      _._zone = t1;
      _._resultOrListeners = t2;
      _.$ti = t3;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1, t2) {
      this.$this = t0;
      this.listener = t1;
      this.$ti = t2;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.$ti = t2;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0, t1) {
      this.target = t0;
      this.$ti = t1;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0, t1) {
      this.target = t0;
      this.$ti = t1;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2, t3) {
      var _ = this;
      _.target = t0;
      _.e = t1;
      _.s = t2;
      _.$ti = t3;
    },
    _Future__asyncComplete_closure: function _Future__asyncComplete_closure(t0, t1, t2) {
      this.$this = t0;
      this.value = t1;
      this.$ti = t2;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1, t2) {
      this.$this = t0;
      this.value = t1;
      this.$ti = t2;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.error = t1;
      _.stackTrace = t2;
      _.$ti = t3;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_1 = t0;
      _._box_0 = t1;
      _.listener = t2;
      _.hasError = t3;
      _.$ti = t4;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0, t1) {
      this.originalSource = t0;
      this.$ti = t1;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.listener = t1;
      _.sourceResult = t2;
      _.$ti = t3;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1, t2, t3) {
      var _ = this;
      _._box_1 = t0;
      _._box_0 = t1;
      _.listener = t2;
      _.$ti = t3;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0, t1) {
      this.callback = t0;
      this.next = null;
      this.$ti = t1;
    },
    _AsyncRun: function _AsyncRun() {
    },
    Stream: function Stream() {
    },
    Stream_Stream$fromIterable_closure: function Stream_Stream$fromIterable_closure(t0, t1, t2) {
      this.elements = t0;
      this.T = t1;
      this.$ti = t2;
    },
    Stream_length_closure: function Stream_length_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.$ti = t2;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1, t2) {
      this._box_0 = t0;
      this.future = t1;
      this.$ti = t2;
    },
    Stream_isEmpty_closure: function Stream_isEmpty_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.future = t2;
      _.$ti = t3;
    },
    Stream_isEmpty_closure0: function Stream_isEmpty_closure0(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    Stream_first_closure: function Stream_first_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.future = t2;
      _.$ti = t3;
    },
    Stream_first_closure0: function Stream_first_closure0(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    StreamSubscription: function StreamSubscription() {
    },
    EventSink: function EventSink() {
    },
    StreamView: function StreamView() {
    },
    StreamConsumer: function StreamConsumer() {
    },
    StreamSink: function StreamSink() {
    },
    StreamTransformer: function StreamTransformer() {
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    StreamIterator: function StreamIterator() {
    },
    _ControllerEventSinkWrapper: function _ControllerEventSinkWrapper() {
    },
    StreamController: function StreamController() {
    },
    SynchronousStreamController: function SynchronousStreamController() {
    },
    _StreamControllerLifecycle: function _StreamControllerLifecycle() {
    },
    _StreamControllerBase: function _StreamControllerBase() {
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    _SyncStreamControllerDispatch: function _SyncStreamControllerDispatch() {
    },
    _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    },
    _AsyncStreamController: function _AsyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _SyncStreamController: function _SyncStreamController() {
    },
    _ControllerStream: function _ControllerStream(t0, t1) {
      this._controller = t0;
      this.$ti = t1;
    },
    _ControllerSubscription: function _ControllerSubscription(t0, t1, t2, t3) {
      var _ = this;
      _._controller = t0;
      _._onDone = _._onError = _._onData = null;
      _._zone = t1;
      _._state = t2;
      _._pending = _._cancelFuture = null;
      _.$ti = t3;
    },
    _StreamSinkWrapper: function _StreamSinkWrapper(t0, t1) {
      this._async$_target = t0;
      this.$ti = t1;
    },
    _AddStreamState: function _AddStreamState() {
    },
    _StreamControllerAddStreamState: function _StreamControllerAddStreamState() {
    },
    _EventSink: function _EventSink() {
    },
    _EventDispatch: function _EventDispatch() {
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription(t0, t1, t2) {
      var _ = this;
      _._onDone = _._onError = _._onData = null;
      _._zone = t0;
      _._state = t1;
      _._pending = _._cancelFuture = null;
      _.$ti = t2;
    },
    _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.error = t1;
      _.stackTrace = t2;
      _.$ti = t3;
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _GeneratedStreamImpl: function _GeneratedStreamImpl(t0, t1) {
      this._pending = t0;
      this._isUsed = false;
      this.$ti = t1;
    },
    _IterablePendingEvents: function _IterablePendingEvents(t0, t1) {
      this._async$_iterator = t0;
      this._state = 0;
      this.$ti = t1;
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0, t1) {
      this.value = t0;
      this.next = null;
      this.$ti = t1;
    },
    _DelayedError: function _DelayedError(t0, t1, t2) {
      var _ = this;
      _.error = t0;
      _.stackTrace = t1;
      _.next = null;
      _.$ti = t2;
    },
    _DelayedDone: function _DelayedDone(t0) {
      this.$ti = t0;
    },
    _PendingEvents: function _PendingEvents() {
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1, t2) {
      this.$this = t0;
      this.dispatch = t1;
      this.$ti = t2;
    },
    _StreamImplEvents: function _StreamImplEvents(t0) {
      var _ = this;
      _.lastPendingEvent = _.firstPendingEvent = null;
      _._state = 0;
      _.$ti = t0;
    },
    _DoneStreamSubscription: function _DoneStreamSubscription() {
    },
    _AsBroadcastStream: function _AsBroadcastStream() {
    },
    _BroadcastSubscriptionWrapper: function _BroadcastSubscriptionWrapper() {
    },
    _StreamIterator: function _StreamIterator(t0, t1) {
      var _ = this;
      _._subscription = null;
      _._stateData = t0;
      _._isPaused = false;
      _.$ti = t1;
    },
    _EmptyStream: function _EmptyStream() {
    },
    _cancelAndValue_closure: function _cancelAndValue_closure(t0, t1, t2) {
      this.future = t0;
      this.value = t1;
      this.$ti = t2;
    },
    _ForwardingStream: function _ForwardingStream() {
    },
    _ForwardingStreamSubscription: function _ForwardingStreamSubscription(t0, t1, t2, t3) {
      var _ = this;
      _._stream = t0;
      _._onDone = _._onError = _._onData = _._subscription = null;
      _._zone = t1;
      _._state = t2;
      _._pending = _._cancelFuture = null;
      _.$ti = t3;
    },
    _WhereStream: function _WhereStream() {
    },
    _MapStream: function _MapStream(t0, t1, t2) {
      this._transform = t0;
      this._async$_source = t1;
      this.$ti = t2;
    },
    _ExpandStream: function _ExpandStream() {
    },
    _HandleErrorStream: function _HandleErrorStream() {
    },
    _TakeStream: function _TakeStream() {
    },
    _StateStreamSubscription: function _StateStreamSubscription() {
    },
    _TakeWhileStream: function _TakeWhileStream() {
    },
    _SkipStream: function _SkipStream() {
    },
    _SkipWhileStream: function _SkipWhileStream() {
    },
    _DistinctStream: function _DistinctStream() {
    },
    _EventSinkWrapper: function _EventSinkWrapper() {
    },
    _SinkTransformerStreamSubscription: function _SinkTransformerStreamSubscription() {
    },
    _StreamSinkTransformer: function _StreamSinkTransformer() {
    },
    _BoundSinkStream: function _BoundSinkStream() {
    },
    _HandlerEventSink: function _HandlerEventSink() {
    },
    _StreamHandlerTransformer: function _StreamHandlerTransformer() {
    },
    _StreamBindTransformer: function _StreamBindTransformer() {
    },
    _StreamSubscriptionTransformer: function _StreamSubscriptionTransformer() {
    },
    _BoundSubscriptionStream: function _BoundSubscriptionStream() {
    },
    Timer: function Timer() {
    },
    AsyncError: function AsyncError(t0, t1, t2) {
      this.error = t0;
      this.stackTrace = t1;
      this.$ti = t2;
    },
    _ZoneFunction: function _ZoneFunction(t0, t1) {
      this.zone = t0;
      this.$ti = t1;
    },
    ZoneSpecification: function ZoneSpecification() {
    },
    _ZoneSpecification: function _ZoneSpecification() {
    },
    ZoneDelegate: function ZoneDelegate() {
    },
    Zone: function Zone() {
    },
    _ZoneDelegate: function _ZoneDelegate() {
    },
    _Zone: function _Zone() {
    },
    _CustomZone: function _CustomZone() {
    },
    _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.stackTrace = t1;
      this.$ti = t2;
    },
    _RootZone: function _RootZone(t0) {
      this.$ti = t0;
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.f = t1;
      _.R = t2;
      _.$ti = t3;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.$ti = t2;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.f = t1;
      _.T = t2;
      _.$ti = t3;
    },
    HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
      H.functionTypeCheck(equals, {func: 1, ret: P.bool, args: [$K, $K]});
      H.functionTypeCheck(hashCode, {func: 1, ret: P.int, args: [$K]});
      H.functionTypeCheck(isValidKey, {func: 1, ret: P.bool, args: [,]});
      if (isValidKey == null)
        if (hashCode == null) {
          if (equals == null)
            return P._HashMap$($K, $V);
          hashCode = P.collection___defaultHashCode$closure();
        } else {
          if (P.core__identityHashCode$closure() === hashCode && (P.core__identical$closure() == null ? equals == null : P.core__identical$closure() === equals))
            return P._IdentityHashMap$($K, $V);
          if (equals == null)
            equals = P.collection___defaultEquals$closure();
        }
      else {
        if (hashCode == null)
          hashCode = P.collection___defaultHashCode$closure();
        if (equals == null)
          equals = P.collection___defaultEquals$closure();
      }
      return P._CustomHashMap$(equals, hashCode, isValidKey, $K, $V);
    },
    _HashMap$: function($K, $V) {
      return new P._HashMap([$K, $V]);
    },
    _HashMap__isStringKey: function(key) {
      return typeof key === "string" && key !== "__proto__";
    },
    _HashMap__isNumericKey: function(key) {
      return typeof key === "number" && (key & 1073741823) === key;
    },
    _HashMap__hasTableEntry: function(table, key) {
      return table[key] != null;
    },
    _HashMap__getTableEntry: function(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry: function(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__deleteTableEntry: function(table, key) {
      delete table[key];
    },
    _HashMap__newHashTable: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      P._HashMap__setTableEntry(table, _s20_, table);
      P._HashMap__deleteTableEntry(table, _s20_);
      return table;
    },
    _IdentityHashMap$: function($K, $V) {
      return new P._IdentityHashMap([$K, $V]);
    },
    _CustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
      var t1 = validKey != null ? validKey : new P._CustomHashMap_closure($K);
      return new P._CustomHashMap(_equals, _hashCode, t1, [$K, $V]);
    },
    _HashMapKeyIterable$: function(_map, $E) {
      return new P._HashMapKeyIterable(_map, [$E]);
    },
    _HashMapKeyIterator$: function(_map, _keys, $E) {
      return new P._HashMapKeyIterator(_map, _keys, [$E]);
    },
    LinkedHashMap_LinkedHashMap: function(equals, hashCode, $K, $V) {
      H.functionTypeCheck(equals, {func: 1, ret: P.bool, args: [$K, $K]});
      H.functionTypeCheck(hashCode, {func: 1, ret: P.int, args: [$K]});
      if (hashCode == null) {
        if (equals == null)
          return H.JsLinkedHashMap_JsLinkedHashMap$es6($K, $V);
        hashCode = P.collection___defaultHashCode$closure();
      } else {
        if (P.core__identityHashCode$closure() === hashCode && (P.core__identical$closure() == null ? equals == null : P.core__identical$closure() === equals))
          return P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6($K, $V);
        if (equals == null)
          equals = P.collection___defaultEquals$closure();
      }
      return P._LinkedCustomHashMap$(equals, hashCode, null, $K, $V);
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      return H.assertSubtype(H.fillLiteralMap(H.listTypeCheck(keyValuePairs), H.JsLinkedHashMap_JsLinkedHashMap$es6($K, $V)), "$isLinkedHashMap", [$K, $V], "$asLinkedHashMap");
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return H.JsLinkedHashMap_JsLinkedHashMap$es6($K, $V);
    },
    LinkedHashMap__makeEmpty: function() {
      return H.JsLinkedHashMap$(null, null);
    },
    _LinkedIdentityHashMap__LinkedIdentityHashMap$es6: function($K, $V) {
      var t1 = P._LinkedIdentityHashMap$($K, $V);
      return t1;
    },
    _LinkedIdentityHashMap$: function($K, $V) {
      return new P._LinkedIdentityHashMap([$K, $V]);
    },
    _LinkedCustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
      var t1 = validKey != null ? validKey : new P._LinkedCustomHashMap_closure($K);
      return new P._LinkedCustomHashMap(_equals, _hashCode, t1, [$K, $V]);
    },
    HashSet_HashSet: function(equals, hashCode, $E) {
      H.functionTypeCheck(equals, {func: 1, ret: P.bool, args: [$E, $E]});
      H.functionTypeCheck(hashCode, {func: 1, ret: P.int, args: [$E]});
      if (hashCode == null) {
        if (equals == null)
          return P._HashSet$($E);
        hashCode = P.collection___defaultHashCode$closure();
      } else {
        if (P.core__identityHashCode$closure() === hashCode && (P.core__identical$closure() == null ? equals == null : P.core__identical$closure() === equals))
          return P._IdentityHashSet$($E);
        if (equals == null)
          equals = P.collection___defaultEquals$closure();
      }
      return P._CustomHashSet$(equals, hashCode, null, $E);
    },
    _HashSet$: function($E) {
      return new P._HashSet([$E]);
    },
    _HashSet__isStringElement: function(element) {
      return typeof element === "string" && element !== "__proto__";
    },
    _HashSet__isNumericElement: function(element) {
      return typeof element === "number" && (element & 1073741823) === element;
    },
    _HashSet__hasTableEntry: function(table, key) {
      return table[key] != null;
    },
    _HashSet__setTableEntry: function(table, key, value) {
      table[key] = value;
    },
    _HashSet__deleteTableEntry: function(table, key) {
      delete table[key];
    },
    _HashSet__newHashTable: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      P._HashSet__setTableEntry(table, _s20_, table);
      P._HashSet__deleteTableEntry(table, _s20_);
      return table;
    },
    _IdentityHashSet$: function($E) {
      return new P._IdentityHashSet([$E]);
    },
    _CustomHashSet$: function(_equality, _hasher, validKey, $E) {
      var t1 = validKey != null ? validKey : new P._CustomHashSet_closure($E);
      return new P._CustomHashSet(_equality, _hasher, t1, [$E]);
    },
    _HashSetIterator$: function(_set, _elements, $E) {
      return new P._HashSetIterator(_set, _elements, [$E]);
    },
    LinkedHashSet_LinkedHashSet: function($E) {
      var t1 = P._LinkedHashSet$($E);
      return t1;
    },
    _LinkedHashSet$: function($E) {
      return new P._LinkedHashSet([$E]);
    },
    _LinkedHashSet__isStringElement: function(element) {
      return typeof element === "string" && element !== "__proto__";
    },
    _LinkedHashSet__isNumericElement: function(element) {
      return typeof element === "number" && (element & 1073741823) === element;
    },
    _LinkedHashSet__getTableEntry: function(table, key) {
      return table[key];
    },
    _LinkedHashSet__setTableEntry: function(table, key, value) {
      table[key] = value;
    },
    _LinkedHashSet__deleteTableEntry: function(table, key) {
      delete table[key];
    },
    _LinkedHashSet__newHashTable: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      P._LinkedHashSet__setTableEntry(table, _s20_, table);
      P._LinkedHashSet__deleteTableEntry(table, _s20_);
      return table;
    },
    _LinkedHashSetCell$: function(_element) {
      return new P._LinkedHashSetCell(_element, []);
    },
    _LinkedHashSetIterator$: function(_set, _modifications, $E) {
      var t1 = new P._LinkedHashSetIterator(_set, _modifications, [$E]);
      t1._LinkedHashSetIterator$2(_set, _modifications, $E);
      return t1;
    },
    UnmodifiableListView$: function(source, $E) {
      return new P.UnmodifiableListView(source, [$E]);
    },
    _defaultEquals: function(a, b) {
      return J.$eq$(a, b);
    },
    _defaultHashCode: function(a) {
      return J.get$hashCode$(a);
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      H.listSuperNativeTypeCheck(iterable, "$isIterable");
      H.stringTypeCheck(leftDelimiter);
      H.stringTypeCheck(rightDelimiter);
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
      }
      parts = H.setRuntimeTypeInfo([], [P.String]);
      t1 = $.$get$_toStringVisiting();
      J.add$1$ax(t1, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        J.removeLast$0$ax(t1);
      }
      t1 = P.StringBuffer$(leftDelimiter);
      t1.writeAll$2(parts, ", ");
      t1.write$1(rightDelimiter);
      return t1.toString$0(0);
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      H.listSuperNativeTypeCheck(iterable, "$isIterable");
      H.stringTypeCheck(leftDelimiter);
      H.stringTypeCheck(rightDelimiter);
      if (P._isToStringVisiting(iterable))
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
      buffer = P.StringBuffer$(leftDelimiter);
      t1 = $.$get$_toStringVisiting();
      J.add$1$ax(t1, iterable);
      try {
        buffer.writeAll$2(iterable, ", ");
      } finally {
        J.removeLast$0$ax(t1);
      }
      buffer.write$1(rightDelimiter);
      return J.toString$0$(buffer);
    },
    _isToStringVisiting: function(o) {
      var t1, t2, i = 0;
      while (true) {
        t1 = $.$get$_toStringVisiting();
        t2 = J.get$length$asx(t1);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1 = J.$index$asx(t1, i);
        if (o == null ? t1 == null : o === t1)
          return true;
        ++i;
      }
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var it, t1, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, t2, elision;
      H.listSuperNativeTypeCheck(iterable, "$isIterable");
      H.assertSubtype(parts, "$isList", [P.String], "$asList");
      it = J.get$iterator$ax(iterable);
      t1 = J.getInterceptor$asx(parts);
      $length = 0;
      count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        t1.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        ultimateString = t1.removeLast$0(parts);
        penultimateString = t1.removeLast$0(parts);
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            t1.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          penultimateString = t1.removeLast$0(parts);
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                t2 = J.$add$ansx(J.get$length$asx(t1.removeLast$0(parts)), 2);
                if (typeof t2 !== "number")
                  return H.iae(t2);
                $length -= t2;
                --count;
              }
              t1.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      t2 = J.$add$ansx(t1.get$length(parts), 2);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (count > t2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && J.$gt$n(t1.get$length(parts), 3)))
          break;
        t2 = J.$add$ansx(J.get$length$asx(t1.removeLast$0(parts)), 2);
        if (typeof t2 !== "number")
          return H.iae(t2);
        $length -= t2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        t1.add$1(parts, elision);
      t1.add$1(parts, penultimateString);
      t1.add$1(parts, ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from: function(other, $K, $V) {
      var result;
      H.interceptedTypeCheck(other, "$isMap");
      result = P.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
      other.forEach$1(0, new P.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashMap_LinkedHashMap$fromIterables: function(keys, values, $K, $V) {
      var map;
      H.assertSubtype(keys, "$isIterable", [$K], "$asIterable");
      H.assertSubtype(values, "$isIterable", [$V], "$asIterable");
      map = P.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
      P.MapBase__fillMapWithIterables(map, keys, values);
      return map;
    },
    ListBase_listToString: function(list) {
      return P.IterableBase_iterableToFullString(H.listTypeCheck(list), "[", "]");
    },
    ListMixin__compareAny: function(a, b) {
      return P.Comparable_compare(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      H.interceptedTypeCheck(m, "$isMap");
      if (P._isToStringVisiting(m))
        return "{...}";
      result = P.StringBuffer$("");
      try {
        J.add$1$ax($.$get$_toStringVisiting(), m);
        result.write$1("{");
        t1.first = true;
        J.forEach$1$ax(m, new P.MapBase_mapToString_closure(t1, result));
        result.write$1("}");
      } finally {
        J.removeLast$0$ax($.$get$_toStringVisiting());
      }
      return J.toString$0$(result);
    },
    MapBase__fillMapWithIterables: function(map, keys, values) {
      var keyIterator, valueIterator, hasNextKey, hasNextValue;
      H.interceptedTypeCheck(map, "$isMap");
      H.listSuperNativeTypeCheck(keys, "$isIterable");
      H.listSuperNativeTypeCheck(values, "$isIterable");
      keyIterator = J.get$iterator$ax(keys);
      valueIterator = J.get$iterator$ax(values);
      hasNextKey = keyIterator.moveNext$0();
      hasNextValue = valueIterator.moveNext$0();
      while (true) {
        if (!(hasNextKey && hasNextValue))
          break;
        map.$indexSet(0, keyIterator.get$current(), valueIterator.get$current());
        hasNextKey = keyIterator.moveNext$0();
        hasNextValue = valueIterator.moveNext$0();
      }
      if (hasNextKey || hasNextValue)
        throw H.wrapException(P.ArgumentError$("Iterables do not have same length."));
    },
    _MapBaseValueIterable$: function(_map, $K, $V) {
      return new P._MapBaseValueIterable(_map, [$K, $V]);
    },
    _MapBaseValueIterator$: function(map, $K, $V) {
      return new P._MapBaseValueIterator(J.get$iterator$ax(map.get$keys(map)), map, [$K, $V]);
    },
    UnmodifiableMapView$: function(map, $K, $V) {
      return new P.UnmodifiableMapView(map, [$K, $V]);
    },
    Queue_castFrom: function(source, $S, $T) {
      return H.CastQueue$(H.assertSubtype(source, "$isQueue", [$S], "$asQueue"), $S, $T);
    },
    ListQueue$: function($E) {
      var t1 = new P.ListQueue([$E]);
      t1.ListQueue$1(null, $E);
      return t1;
    },
    ListQueue__isPowerOf2: function(number) {
      H.intTypeCheck(number);
      if (typeof number !== "number")
        return number.$sub();
      return (number & number - 1) >>> 0 === 0;
    },
    ListQueue__nextPowerOf2: function(number) {
      var nextNumber;
      H.intTypeCheck(number);
      if (typeof number !== "number")
        return number.$shl();
      number = (number << 1 >>> 0) - 1;
      for (; true; number = nextNumber) {
        nextNumber = (number & number - 1) >>> 0;
        if (nextNumber === 0)
          return number;
      }
    },
    _ListQueueIterator$: function(queue, $E) {
      return new P._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, [$E]);
    },
    _SplayTreeNode$: function(key, $K) {
      return new P._SplayTreeNode(key, [$K]);
    },
    _dynamicCompare: function(a, b) {
      return P.Comparable_compare(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
    },
    _defaultCompare: function($K) {
      if (H.functionTypeTest(P.core_Comparable_compare$closure(), {func: 1, ret: P.int, args: [$K, $K]}))
        return P.core_Comparable_compare$closure();
      return P.collection___dynamicCompare$closure();
    },
    _SplayTreeKeyIterator$: function(map, $K) {
      var t1 = new P._SplayTreeKeyIterator(map, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, $K]]), map._modificationCount, map._splayCount, null, [$K]);
      t1._SplayTreeIterator$1(map, $K, $K);
      return t1;
    },
    SplayTreeSet$: function(compare, isValidKey, $E) {
      var t1 = P._SplayTreeNode$(null, $E),
        t2 = compare == null ? P._defaultCompare($E) : compare,
        t3 = isValidKey == null ? new P.SplayTreeSet_closure($E) : isValidKey;
      return new P.SplayTreeSet(t1, t2, t3, [$E]);
    },
    _HashMap: function _HashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMap_values_closure: function _HashMap_values_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    _HashMap_addAll_closure: function _HashMap_addAll_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    _IdentityHashMap: function _IdentityHashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _CustomHashMap: function _CustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t3;
    },
    _CustomHashMap_closure: function _CustomHashMap_closure(t0, t1) {
      this.K = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._collection$_map = t0;
      _._keys = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _LinkedIdentityHashMap: function _LinkedIdentityHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _._rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    _Es6LinkedIdentityHashMap: function _Es6LinkedIdentityHashMap() {
    },
    _Es6LinkedIdentityHashMap_addAll_closure: function _Es6LinkedIdentityHashMap_addAll_closure() {
    },
    _Es6MapIterable: function _Es6MapIterable() {
    },
    _Es6MapIterator: function _Es6MapIterator() {
    },
    _LinkedCustomHashMap: function _LinkedCustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _.__js_helper$_length = 0;
      _._last = _._first = _._rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t3;
    },
    _LinkedCustomHashMap_closure: function _LinkedCustomHashMap_closure(t0, t1) {
      this.K = t0;
      this.$ti = t1;
    },
    _HashSet: function _HashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._elements = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _IdentityHashSet: function _IdentityHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._elements = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _CustomHashSet: function _CustomHashSet(t0, t1, t2, t3) {
      var _ = this;
      _._equality = t0;
      _._hasher = t1;
      _._validKey = t2;
      _._collection$_length = 0;
      _._elements = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t3;
    },
    _CustomHashSet_closure: function _CustomHashSet_closure(t0, t1) {
      this.E = t0;
      this.$ti = t1;
    },
    _HashSetIterator: function _HashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._elements = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedIdentityHashSet: function _LinkedIdentityHashSet() {
    },
    _LinkedCustomHashSet: function _LinkedCustomHashSet() {
    },
    _LinkedCustomHashSet_closure: function _LinkedCustomHashSet_closure() {
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0, t1) {
      var _ = this;
      _._element = t0;
      _._collection$_previous = _._collection$_next = null;
      _.$ti = t1;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    UnmodifiableListView: function UnmodifiableListView(t0, t1) {
      this._collection$_source = t0;
      this.$ti = t1;
    },
    HashMap: function HashMap() {
    },
    HashSet: function HashSet() {
    },
    IterableMixin: function IterableMixin() {
    },
    IterableBase: function IterableBase() {
    },
    HasNextIterator: function HasNextIterator() {
    },
    LinkedHashMap: function LinkedHashMap() {
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2, t3) {
      var _ = this;
      _.result = t0;
      _.K = t1;
      _.V = t2;
      _.$ti = t3;
    },
    LinkedHashSet: function LinkedHashSet() {
    },
    LinkedList0: function LinkedList0() {
    },
    _LinkedListIterator0: function _LinkedListIterator0() {
    },
    LinkedListEntry: function LinkedListEntry() {
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.result = t1;
      this.$ti = t2;
    },
    MapMixin: function MapMixin() {
    },
    UnmodifiableMapBase: function UnmodifiableMapBase() {
    },
    _MapBaseValueIterable: function _MapBaseValueIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _MapBaseValueIterator: function _MapBaseValueIterator(t0, t1, t2) {
      var _ = this;
      _._keys = t0;
      _._collection$_map = t1;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    Queue: function Queue() {
    },
    _DoubleLink: function _DoubleLink() {
    },
    DoubleLinkedQueueEntry: function DoubleLinkedQueueEntry() {
    },
    _DoubleLinkedQueueEntry: function _DoubleLinkedQueueEntry() {
    },
    _DoubleLinkedQueueElement: function _DoubleLinkedQueueElement() {
    },
    _DoubleLinkedQueueSentinel: function _DoubleLinkedQueueSentinel() {
    },
    DoubleLinkedQueue: function DoubleLinkedQueue() {
    },
    _DoubleLinkedQueueIterator: function _DoubleLinkedQueueIterator() {
    },
    ListQueue: function ListQueue(t0) {
      var _ = this;
      _._table = null;
      _._modificationCount = _._tail = _._head = 0;
      _.$ti = t0;
    },
    _ListQueueIterator: function _ListQueueIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._queue = t0;
      _._end = t1;
      _._modificationCount = t2;
      _._position = t3;
      _._collection$_current = null;
      _.$ti = t4;
    },
    SetMixin: function SetMixin() {
    },
    SetBase: function SetBase() {
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableSet: function _UnmodifiableSet() {
    },
    _SplayTreeNode: function _SplayTreeNode(t0, t1) {
      var _ = this;
      _.key = t0;
      _.right = _.left = null;
      _.$ti = t1;
    },
    _SplayTreeMapNode: function _SplayTreeMapNode() {
    },
    _SplayTree: function _SplayTree() {
    },
    _TypeTest: function _TypeTest() {
    },
    SplayTreeMap: function SplayTreeMap() {
    },
    _SplayTreeIterator: function _SplayTreeIterator() {
    },
    _SplayTreeKeyIterable: function _SplayTreeKeyIterable() {
    },
    _SplayTreeValueIterable: function _SplayTreeValueIterable() {
    },
    _SplayTreeKeyIterator: function _SplayTreeKeyIterator(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._tree = t0;
      _._workList = t1;
      _._modificationCount = t2;
      _._splayCount = t3;
      _._currentNode = t4;
      _.$ti = t5;
    },
    _SplayTreeValueIterator: function _SplayTreeValueIterator() {
    },
    _SplayTreeNodeIterator: function _SplayTreeNodeIterator() {
    },
    SplayTreeSet: function SplayTreeSet(t0, t1, t2, t3) {
      var _ = this;
      _._root = null;
      _._dummy = t0;
      _._comparator = t1;
      _._validKey = t2;
      _._splayCount = _._modificationCount = _._count = 0;
      _.$ti = t3;
    },
    SplayTreeSet_closure: function SplayTreeSet_closure(t0, t1) {
      this.E = t0;
      this.$ti = t1;
    },
    SplayTreeSet__newSet_closure: function SplayTreeSet__newSet_closure(t0, t1, t2) {
      this.$this = t0;
      this.T = t1;
      this.$ti = t2;
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    _SetBase_Object_SetMixin: function _SetBase_Object_SetMixin() {
    },
    _SplayTreeMap__SplayTree_MapMixin: function _SplayTreeMap__SplayTree_MapMixin() {
    },
    _SplayTreeSet__SplayTree_IterableMixin: function _SplayTreeSet__SplayTree_IterableMixin() {
    },
    _SplayTreeSet__SplayTree_IterableMixin_SetMixin: function _SplayTreeSet__SplayTree_IterableMixin_SetMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    _parseJson: function(source, reviver) {
      var parsed, e, t1, exception;
      H.stringTypeCheck(source);
      H.functionTypeCheck(reviver, {func: 1, args: [,,]});
      t1 = source;
      if (typeof t1 !== "string")
        throw H.wrapException(H.argumentErrorValue(source));
      parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.FormatException$(String(e), null, null);
        throw H.wrapException(t1);
      }
      if (reviver == null)
        return P._convertJsonToDartLazy(parsed);
      else
        return P._convertJsonToDart(parsed, reviver);
    },
    _convertJsonToDart: function(json, reviver) {
      H.functionTypeCheck(reviver, {func: 1, args: [,,]});
      return reviver.call$2(null, new P._convertJsonToDart_walk(reviver).call$1(json));
    },
    _convertJsonToDartLazy: function(object) {
      var i;
      if (object == null)
        return;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return P._JsonMap$(object);
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    _JsonMap$: function(_original) {
      return new P._JsonMap(_original, P._JsonMap__newJavaScriptObject(), []);
    },
    _JsonMap__hasProperty: function(object, key) {
      return Object.prototype.hasOwnProperty.call(object, H.stringTypeCheck(key));
    },
    _JsonMap__getProperty: function(object, key) {
      return object[H.stringTypeCheck(key)];
    },
    _JsonMap__setProperty: function(object, key, value) {
      return object[H.stringTypeCheck(key)] = value;
    },
    _JsonMap__getPropertyNames: function(object) {
      return Object.keys(object);
    },
    _JsonMap__isUnprocessed: function(object) {
      return typeof object == "undefined";
    },
    _JsonMap__newJavaScriptObject: function() {
      return Object.create(null);
    },
    _JsonMapKeyIterable$: function(_parent) {
      return new P._JsonMapKeyIterable(_parent, []);
    },
    Utf8Decoder__convertIntercepted: function(allowMalformed, codeUnits, start, end) {
      H.boolTypeCheck(allowMalformed);
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (codeUnits instanceof Uint8Array)
        return P.Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end);
      return;
    },
    Utf8Decoder__convertInterceptedUint8List: function(allowMalformed, codeUnits, start, end) {
      var decoder, t1, $length;
      H.boolTypeCheck(allowMalformed);
      H.interceptedTypeCheck(codeUnits, "$isNativeUint8List");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (allowMalformed)
        return;
      decoder = $.$get$Utf8Decoder__decoder();
      if (decoder == null)
        return;
      t1 = 0 === start;
      if (t1 && end == null)
        return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits);
      $length = codeUnits.length;
      end = P.RangeError_checkValidRange(start, end, $length);
      if (t1 && end === $length)
        return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits);
      return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits.subarray(start, end));
    },
    Utf8Decoder__useTextDecoderChecked: function(decoder, codeUnits) {
      H.interceptedTypeCheck(codeUnits, "$isNativeUint8List");
      if (P.Utf8Decoder__unsafe(codeUnits))
        return;
      return P.Utf8Decoder__useTextDecoderUnchecked(decoder, codeUnits);
    },
    Utf8Decoder__useTextDecoderUnchecked: function(decoder, codeUnits) {
      var t1, exception;
      H.interceptedTypeCheck(codeUnits, "$isNativeUint8List");
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return;
    },
    Utf8Decoder__unsafe: function(codeUnits) {
      var limit, i, unit2;
      H.interceptedTypeCheck(codeUnits, "$isNativeUint8List");
      limit = codeUnits.length - 2;
      for (i = 0; i < limit; ++i)
        if (codeUnits[i] === 237) {
          unit2 = codeUnits[i + 1];
          if (typeof unit2 !== "number")
            return unit2.$and();
          if ((unit2 & 224) === 160)
            return true;
        }
      return false;
    },
    Utf8Decoder__makeDecoder: function() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return;
    },
    _scanOneByteCharacters: function(units, from, endIndex) {
      var t1, i, unit;
      H.assertSubtype(units, "$isList", [P.int], "$asList");
      H.intTypeCheck(from);
      H.intTypeCheck(endIndex);
      t1 = J.getInterceptor$asx(units);
      i = from;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof endIndex !== "number")
          return H.iae(endIndex);
        if (!(i < endIndex))
          break;
        unit = t1.$index(units, i);
        if (typeof unit !== "number")
          return unit.$and();
        if ((unit & 127) !== unit) {
          if (typeof from !== "number")
            return H.iae(from);
          return i - from;
        }
        ++i;
      }
      if (typeof from !== "number")
        return H.iae(from);
      return endIndex - from;
    },
    Base64Codec__checkPadding: function(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      H.stringTypeCheck(source);
      H.intTypeCheck(sourceIndex);
      H.intTypeCheck(sourceEnd);
      H.intTypeCheck(firstPadding);
      H.intTypeCheck(paddingCount);
      H.intTypeCheck($length);
      if (typeof $length !== "number")
        return $length.$mod();
      if (C.JSInt_methods.$mod($length, 4) !== 0)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (typeof firstPadding !== "number")
        return firstPadding.$add();
      if (typeof paddingCount !== "number")
        return H.iae(paddingCount);
      if (firstPadding + paddingCount !== $length)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Base64Encoder$: function(urlSafe) {
      var t1 = urlSafe ? "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_" : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      return new P._Base64Encoder(t1, []);
    },
    _Base64Encoder__encodeState: function(count, bits) {
      H.intTypeCheck(count);
      H.intTypeCheck(bits);
      if (typeof bits !== "number")
        return bits.$shl();
      if (typeof count !== "number")
        return H.iae(count);
      return (bits << 2 | count) >>> 0;
    },
    _Base64Encoder__stateBits: function(state) {
      H.intTypeCheck(state);
      if (typeof state !== "number")
        return state.$shr();
      return C.JSInt_methods._shrOtherPositive$1(state, 2);
    },
    _Base64Encoder__stateCount: function(state) {
      H.intTypeCheck(state);
      if (typeof state !== "number")
        return state.$and();
      return state & 3;
    },
    _Base64Encoder_encodeChunk: function(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      var bits, t1, expectedChars, t2, t3, i, byteOr, byte, outputIndex0;
      H.stringTypeCheck(alphabet);
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.boolTypeCheck(isLast);
      H.interceptedTypeCheck(output, "$isUint8List");
      H.intTypeCheck(outputIndex);
      H.intTypeCheck(state);
      bits = P._Base64Encoder__stateBits(state);
      t1 = P._Base64Encoder__stateCount(state);
      if (typeof t1 !== "number")
        return H.iae(t1);
      expectedChars = 3 - t1;
      t1 = J.getInterceptor$asx(bytes);
      t2 = J.getInterceptor$s(alphabet);
      t3 = output && C.NativeUint8List_methods;
      i = start;
      byteOr = 0;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        byte = t1.$index(bytes, i);
        if (typeof byte !== "number")
          return H.iae(byte);
        byteOr = (byteOr | byte) >>> 0;
        if (typeof bits !== "number")
          return bits.$shl();
        bits = (bits << 8 | byte) & 16777215;
        --expectedChars;
        if (expectedChars === 0) {
          if (typeof outputIndex !== "number")
            return outputIndex.$add();
          outputIndex0 = outputIndex + 1;
          t3.$indexSet(output, outputIndex, t2._codeUnitAt$1(alphabet, bits >>> 18 & 63));
          outputIndex = outputIndex0 + 1;
          C.NativeUint8List_methods.$indexSet(output, outputIndex0, C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 12 & 63));
          outputIndex0 = outputIndex + 1;
          C.NativeUint8List_methods.$indexSet(output, outputIndex, C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 6 & 63));
          outputIndex = outputIndex0 + 1;
          C.NativeUint8List_methods.$indexSet(output, outputIndex0, C.JSString_methods._codeUnitAt$1(alphabet, bits & 63));
          bits = 0;
          expectedChars = 3;
        }
        ++i;
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (isLast && expectedChars < 3) {
          P._Base64Encoder_writeFinalChunk(alphabet, output, outputIndex, 3 - expectedChars, bits);
          return 0;
        }
        return P._Base64Encoder__encodeState(3 - expectedChars, bits);
      }
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (!(i < end))
          break;
        byte = t1.$index(bytes, i);
        if (typeof byte !== "number")
          return byte.$lt();
        if (byte < 0 || byte > 255)
          break;
        ++i;
      }
      throw H.wrapException(P.ArgumentError$value(bytes, "Not a byte value at index " + i + ": 0x" + H.S(J.toRadixString$1$n(t1.$index(bytes, i), 16)), null));
    },
    _Base64Encoder_writeFinalChunk: function(alphabet, output, outputIndex, count, bits) {
      var t1, t2, outputIndex0;
      H.stringTypeCheck(alphabet);
      H.interceptedTypeCheck(output, "$isUint8List");
      H.intTypeCheck(outputIndex);
      H.intTypeCheck(count);
      H.intTypeCheck(bits);
      t1 = J.getInterceptor$s(alphabet);
      t2 = output && C.NativeUint8List_methods;
      if (count === 1) {
        if (typeof outputIndex !== "number")
          return outputIndex.$add();
        outputIndex0 = outputIndex + 1;
        if (typeof bits !== "number")
          return bits.$shr();
        t2.$indexSet(output, outputIndex, t1._codeUnitAt$1(alphabet, C.JSInt_methods._shrOtherPositive$1(bits, 2) & 63));
        outputIndex = outputIndex0 + 1;
        C.NativeUint8List_methods.$indexSet(output, outputIndex0, C.JSString_methods._codeUnitAt$1(alphabet, bits << 4 & 63));
        outputIndex0 = outputIndex + 1;
        t1 = output.length;
        if (outputIndex < 0 || outputIndex >= t1)
          return H.ioore(output, outputIndex);
        output[outputIndex] = 61;
        if (outputIndex0 < 0 || outputIndex0 >= t1)
          return H.ioore(output, outputIndex0);
        output[outputIndex0] = 61;
      } else {
        if (typeof outputIndex !== "number")
          return outputIndex.$add();
        outputIndex0 = outputIndex + 1;
        if (typeof bits !== "number")
          return bits.$shr();
        t2.$indexSet(output, outputIndex, t1._codeUnitAt$1(alphabet, C.JSInt_methods._shrOtherPositive$1(bits, 10) & 63));
        outputIndex = outputIndex0 + 1;
        C.NativeUint8List_methods.$indexSet(output, outputIndex0, C.JSString_methods._codeUnitAt$1(alphabet, C.JSInt_methods._shrOtherPositive$1(bits, 4) & 63));
        outputIndex0 = outputIndex + 1;
        C.NativeUint8List_methods.$indexSet(output, outputIndex, C.JSString_methods._codeUnitAt$1(alphabet, bits << 2 & 63));
        if (outputIndex0 < 0 || outputIndex0 >= output.length)
          return H.ioore(output, outputIndex0);
        output[outputIndex0] = 61;
      }
    },
    _Base64Decoder$: function() {
      return new P._Base64Decoder([]);
    },
    _Base64Decoder__encodeCharacterState: function(count, bits) {
      H.intTypeCheck(count);
      H.intTypeCheck(bits);
      if (typeof bits !== "number")
        return bits.$shl();
      if (typeof count !== "number")
        return H.iae(count);
      return (bits << 2 | count) >>> 0;
    },
    _Base64Decoder__stateCount: function(state) {
      H.intTypeCheck(state);
      if (typeof state !== "number")
        return state.$and();
      return state & 3;
    },
    _Base64Decoder__stateBits: function(state) {
      H.intTypeCheck(state);
      if (typeof state !== "number")
        return state.$shr();
      return C.JSInt_methods._shrOtherPositive$1(state, 2);
    },
    _Base64Decoder__encodePaddingState: function(expectedPadding) {
      H.intTypeCheck(expectedPadding);
      if (typeof expectedPadding !== "number")
        return expectedPadding.$negate();
      return -expectedPadding - 1;
    },
    _Base64Decoder__statePadding: function(state) {
      H.intTypeCheck(state);
      if (typeof state !== "number")
        return state.$negate();
      return -state - 1;
    },
    _Base64Decoder__hasSeenPadding: function(state) {
      H.intTypeCheck(state);
      if (typeof state !== "number")
        return state.$lt();
      return state < 0;
    },
    _Base64Decoder_decodeChunk: function(input, start, end, output, outIndex, state) {
      var bits, count, t1, i, charOr, char, code, outIndex0, t2, expectedPadding,
        _s31_ = "Invalid encoding before padding",
        _s17_ = "Invalid character";
      H.stringTypeCheck(input);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.interceptedTypeCheck(output, "$isUint8List");
      H.intTypeCheck(outIndex);
      H.intTypeCheck(state);
      bits = P._Base64Decoder__stateBits(state);
      count = P._Base64Decoder__stateCount(state);
      t1 = J.getInterceptor$s(input);
      i = start;
      charOr = 0;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        c$0: {
          char = t1.codeUnitAt$1(input, i);
          if (typeof char !== "number")
            return H.iae(char);
          charOr = (charOr | char) >>> 0;
          code = J.$index$asx($.$get$_Base64Decoder__inverseAlphabet(), char & 127);
          if (typeof code !== "number")
            return code.$ge();
          if (code >= 0) {
            if (typeof bits !== "number")
              return bits.$shl();
            bits = (bits << 6 | code) & 16777215;
            if (typeof count !== "number")
              return count.$add();
            count = count + 1 & 3;
            if (count === 0) {
              if (typeof outIndex !== "number")
                return outIndex.$add();
              outIndex0 = outIndex + 1;
              t2 = output.length;
              if (outIndex < 0 || outIndex >= t2)
                return H.ioore(output, outIndex);
              output[outIndex] = bits >>> 16 & 255;
              outIndex = outIndex0 + 1;
              if (outIndex0 < 0 || outIndex0 >= t2)
                return H.ioore(output, outIndex0);
              output[outIndex0] = bits >>> 8 & 255;
              outIndex0 = outIndex + 1;
              if (outIndex < 0 || outIndex >= t2)
                return H.ioore(output, outIndex);
              output[outIndex] = bits & 255;
              outIndex = outIndex0;
              bits = 0;
            }
            break c$0;
          } else {
            if (code === -1) {
              if (typeof count !== "number")
                return count.$gt();
              t2 = count > 1;
            } else
              t2 = false;
            if (t2) {
              if (charOr > 127)
                break;
              if (count === 3) {
                if (typeof bits !== "number")
                  return bits.$and();
                if ((bits & 3) !== 0)
                  throw H.wrapException(P.FormatException$(_s31_, input, i));
                if (typeof outIndex !== "number")
                  return outIndex.$add();
                outIndex0 = outIndex + 1;
                t1 = C.JSInt_methods._shrOtherPositive$1(bits, 10);
                t2 = output.length;
                if (outIndex < 0 || outIndex >= t2)
                  return H.ioore(output, outIndex);
                output[outIndex] = t1;
                t1 = C.JSInt_methods._shrOtherPositive$1(bits, 2);
                if (outIndex0 < 0 || outIndex0 >= t2)
                  return H.ioore(output, outIndex0);
                output[outIndex0] = t1;
              } else {
                if (typeof bits !== "number")
                  return bits.$and();
                if ((bits & 15) !== 0)
                  throw H.wrapException(P.FormatException$(_s31_, input, i));
                if (typeof outIndex !== "number")
                  return outIndex.$add();
                t1 = C.JSInt_methods._shrOtherPositive$1(bits, 4);
                if (outIndex < 0 || outIndex >= output.length)
                  return H.ioore(output, outIndex);
                output[outIndex] = t1;
              }
              if (typeof count !== "number")
                return H.iae(count);
              expectedPadding = (3 - count) * 3;
              return P._Base64Decoder__checkPadding(input, i + 1, end, P._Base64Decoder__encodePaddingState(char === 37 ? expectedPadding + 2 : expectedPadding));
            }
          }
          throw H.wrapException(P.FormatException$(_s17_, input, i));
        }
        ++i;
      }
      if (charOr >= 0 && charOr <= 127)
        return P._Base64Decoder__encodeCharacterState(count, bits);
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (!(i < end))
          break;
        char = t1.codeUnitAt$1(input, i);
        if (typeof char !== "number")
          return char.$lt();
        if (char < 0 || char > 127)
          break;
        ++i;
      }
      throw H.wrapException(P.FormatException$(_s17_, input, i));
    },
    _Base64Decoder__allocateBuffer: function(input, start, end, state) {
      var paddingStart, t1, $length, bufferLength, remainderLength;
      H.stringTypeCheck(input);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.intTypeCheck(state);
      paddingStart = P._Base64Decoder__trimPaddingChars(input, start, end);
      t1 = P._Base64Decoder__stateCount(state);
      if (typeof paddingStart !== "number")
        return paddingStart.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = J.$add$ansx(t1, paddingStart - start);
      if (typeof $length !== "number")
        return $length.$shr();
      bufferLength = C.JSInt_methods._shrOtherPositive$1($length, 2) * 3;
      remainderLength = $length & 3;
      if (remainderLength !== 0) {
        if (typeof end !== "number")
          return H.iae(end);
        t1 = paddingStart < end;
      } else
        t1 = false;
      if (t1)
        bufferLength += remainderLength - 1;
      if (bufferLength > 0)
        return H.NativeUint8List_NativeUint8List(bufferLength);
      return;
    },
    _Base64Decoder__trimPaddingChars: function(input, start, end) {
      var t1, newEnd, index, padding, char;
      H.stringTypeCheck(input);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      t1 = J.getInterceptor$s(input);
      newEnd = end;
      index = newEnd;
      padding = 0;
      while (true) {
        if (typeof index !== "number")
          return index.$gt();
        if (typeof start !== "number")
          return H.iae(start);
        if (!(index > start && padding < 2))
          break;
        c$0: {
          --index;
          char = t1.codeUnitAt$1(input, index);
          if (char === 61) {
            ++padding;
            newEnd = index;
            break c$0;
          }
          if (typeof char !== "number")
            return char.$or();
          if ((char | 32) >>> 0 === 100) {
            if (index === start)
              break;
            --index;
            char = C.JSString_methods.codeUnitAt$1(input, index);
          }
          if (char === 51) {
            if (index === start)
              break;
            --index;
            char = C.JSString_methods.codeUnitAt$1(input, index);
          }
          if (char === 37) {
            ++padding;
            newEnd = index;
            break c$0;
          }
          break;
        }
      }
      return newEnd;
    },
    _Base64Decoder__checkPadding: function(input, start, end, state) {
      var expectedPadding, t1, char;
      H.stringTypeCheck(input);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.intTypeCheck(state);
      if (start == end)
        return state;
      expectedPadding = P._Base64Decoder__statePadding(state);
      t1 = J.getInterceptor$s(input);
      while (true) {
        if (typeof expectedPadding !== "number")
          return expectedPadding.$gt();
        if (!(expectedPadding > 0))
          break;
        char = t1.codeUnitAt$1(input, start);
        if (expectedPadding === 3) {
          if (char === 61) {
            expectedPadding -= 3;
            if (typeof start !== "number")
              return start.$add();
            ++start;
            break;
          }
          if (char === 37) {
            --expectedPadding;
            if (typeof start !== "number")
              return start.$add();
            ++start;
            if (start === end)
              break;
            char = C.JSString_methods.codeUnitAt$1(input, start);
          } else
            break;
        }
        if ((expectedPadding > 3 ? expectedPadding - 3 : expectedPadding) === 2) {
          if (char !== 51)
            break;
          if (typeof start !== "number")
            return start.$add();
          ++start;
          --expectedPadding;
          if (start === end)
            break;
          char = C.JSString_methods.codeUnitAt$1(input, start);
        }
        if (typeof char !== "number")
          return char.$or();
        if ((char | 32) >>> 0 !== 100)
          break;
        if (typeof start !== "number")
          return start.$add();
        ++start;
        --expectedPadding;
        if (start === end)
          break;
      }
      if (start != end)
        throw H.wrapException(P.FormatException$("Invalid padding character", input, start));
      return P._Base64Decoder__encodePaddingState(expectedPadding);
    },
    _ByteCallbackSink$: function(callback) {
      return new P._ByteCallbackSink(callback, H.NativeUint8List_NativeUint8List(1024), []);
    },
    _ByteCallbackSink__roundToPowerOf2: function(v) {
      H.intTypeCheck(v);
      if (typeof v !== "number")
        return v.$sub();
      --v;
      v |= C.JSInt_methods._shrOtherPositive$1(v, 1);
      v |= v >>> 2;
      v |= v >>> 4;
      v |= v >>> 8;
      return ((v | v >>> 16) >>> 0) + 1;
    },
    Encoding_getByName: function($name) {
      H.stringTypeCheck($name);
      if ($name == null)
        return;
      $name = C.JSString_methods.toLowerCase$0($name);
      return J.$index$asx($.$get$Encoding__nameToEncoding(), $name);
    },
    JsonUnsupportedObjectError$: function(unsupportedObject, cause, partialResult) {
      return new P.JsonUnsupportedObjectError(unsupportedObject, cause, []);
    },
    JsonCyclicError$: function(object) {
      return new P.JsonCyclicError(object, null, []);
    },
    jsonEncode: function(object) {
      return C.JsonCodec_null_null.encode$2$toEncodable(object, null);
    },
    jsonDecode: function(source) {
      return C.JsonCodec_null_null.decode$2$reviver(H.stringTypeCheck(source), null);
    },
    JsonEncoder$: function(toEncodable) {
      return new P.JsonEncoder(null, toEncodable, []);
    },
    JsonDecoder$: function(reviver) {
      return new P.JsonDecoder(reviver, []);
    },
    _defaultToEncodable: function(object) {
      return object.toJson$0();
    },
    _JsonStringifier_hexDigit: function(x) {
      H.intTypeCheck(x);
      if (typeof x !== "number")
        return x.$lt();
      return x < 10 ? 48 + x : 87 + x;
    },
    _JsonStringStringifier$: function(_sink, _toEncodable) {
      var t1 = _toEncodable == null ? P.convert___defaultToEncodable$closure() : _toEncodable;
      return new P._JsonStringStringifier(_sink, [], t1, []);
    },
    _JsonStringStringifier_stringify: function(object, toEncodable, indent) {
      var output;
      H.functionTypeCheck(toEncodable, {func: 1, args: [,]});
      H.stringTypeCheck(indent);
      output = P.StringBuffer$("");
      P._JsonStringStringifier_printOn(object, output, toEncodable, indent);
      return output.toString$0(0);
    },
    _JsonStringStringifier_printOn: function(object, output, toEncodable, indent) {
      H.interceptedTypeCheck(output, "$isStringSink");
      H.functionTypeCheck(toEncodable, {func: 1, args: [,]});
      H.stringTypeCheck(indent);
      (indent == null ? P._JsonStringStringifier$(output, toEncodable) : P._JsonStringStringifierPretty$(output, toEncodable, indent)).writeObject$1(object);
    },
    _JsonStringStringifierPretty$: function(sink, toEncodable, _indent) {
      var t1 = toEncodable == null ? P.convert___defaultToEncodable$closure() : toEncodable;
      return new P._JsonStringStringifierPretty(_indent, 0, sink, [], t1, []);
    },
    _Utf8Encoder$withBufferSize: function(bufferSize) {
      return new P._Utf8Encoder(0, P._Utf8Encoder__createBuffer(bufferSize), []);
    },
    _Utf8Encoder__createBuffer: function(size) {
      return H.NativeUint8List_NativeUint8List(H.intTypeCheck(size));
    },
    Utf8Decoder$: function(allowMalformed) {
      return new P.Utf8Decoder(allowMalformed, []);
    },
    _isLeadSurrogate: function(codeUnit) {
      H.intTypeCheck(codeUnit);
      if (typeof codeUnit !== "number")
        return codeUnit.$and();
      return (codeUnit & 64512) === 55296;
    },
    _isTailSurrogate: function(codeUnit) {
      H.intTypeCheck(codeUnit);
      if (typeof codeUnit !== "number")
        return codeUnit.$and();
      return (codeUnit & 64512) === 56320;
    },
    _combineSurrogatePair: function(lead, tail) {
      H.intTypeCheck(lead);
      H.intTypeCheck(tail);
      if (typeof lead !== "number")
        return lead.$and();
      if (typeof tail !== "number")
        return tail.$and();
      return 65536 + ((lead & 1023) << 10) | tail & 1023;
    },
    _Utf8Decoder$: function(_stringSink, _allowMalformed) {
      return new P._Utf8Decoder(_allowMalformed, _stringSink, []);
    },
    _convertJsonToDart_walk: function _convertJsonToDart_walk(t0, t1) {
      this.reviver = t0;
      this.$ti = t1;
    },
    _JsonMap: function _JsonMap(t0, t1, t2) {
      var _ = this;
      _._original = t0;
      _._processed = t1;
      _._data = null;
      _.$ti = t2;
    },
    _JsonMap_values_closure: function _JsonMap_values_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    _JsonMap_addAll_closure: function _JsonMap_addAll_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0, t1) {
      this._parent = t0;
      this.$ti = t1;
    },
    _JsonDecoderSink: function _JsonDecoderSink() {
    },
    AsciiCodec: function AsciiCodec(t0) {
      this.$ti = t0;
    },
    _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {
    },
    AsciiEncoder: function AsciiEncoder(t0, t1) {
      this._subsetMask = t0;
      this.$ti = t1;
    },
    _UnicodeSubsetEncoderSink: function _UnicodeSubsetEncoderSink() {
    },
    _UnicodeSubsetDecoder: function _UnicodeSubsetDecoder() {
    },
    AsciiDecoder: function AsciiDecoder(t0, t1, t2) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
      this.$ti = t2;
    },
    _ErrorHandlingAsciiDecoderSink: function _ErrorHandlingAsciiDecoderSink() {
    },
    _SimpleAsciiDecoderSink: function _SimpleAsciiDecoderSink() {
    },
    Base64Codec: function Base64Codec(t0, t1) {
      this._encoder = t0;
      this.$ti = t1;
    },
    Base64Encoder: function Base64Encoder(t0, t1) {
      this._urlSafe = t0;
      this.$ti = t1;
    },
    _Base64Encoder: function _Base64Encoder(t0, t1) {
      this._convert$_state = 0;
      this._alphabet = t0;
      this.$ti = t1;
    },
    _BufferCachingBase64Encoder: function _BufferCachingBase64Encoder() {
    },
    _Base64EncoderSink: function _Base64EncoderSink() {
    },
    _AsciiBase64EncoderSink: function _AsciiBase64EncoderSink() {
    },
    _Utf8Base64EncoderSink: function _Utf8Base64EncoderSink() {
    },
    Base64Decoder: function Base64Decoder(t0) {
      this.$ti = t0;
    },
    _Base64Decoder: function _Base64Decoder(t0) {
      this._convert$_state = 0;
      this.$ti = t0;
    },
    _Base64DecoderSink: function _Base64DecoderSink() {
    },
    ByteConversionSink: function ByteConversionSink() {
    },
    ByteConversionSinkBase: function ByteConversionSinkBase() {
    },
    _ByteAdapterSink: function _ByteAdapterSink() {
    },
    _ByteCallbackSink: function _ByteCallbackSink(t0, t1, t2) {
      var _ = this;
      _._callback = t0;
      _._buffer = t1;
      _._bufferIndex = 0;
      _.$ti = t2;
    },
    ChunkedConversionSink: function ChunkedConversionSink() {
    },
    _SimpleCallbackSink: function _SimpleCallbackSink() {
    },
    _ConverterStreamEventSink: function _ConverterStreamEventSink() {
    },
    Codec: function Codec() {
    },
    _FusedCodec: function _FusedCodec() {
    },
    _InvertedCodec: function _InvertedCodec() {
    },
    Converter: function Converter() {
    },
    _FusedConverter: function _FusedConverter() {
    },
    Encoding: function Encoding() {
    },
    HtmlEscapeMode: function HtmlEscapeMode() {
    },
    HtmlEscape: function HtmlEscape() {
    },
    _HtmlEscapeSink: function _HtmlEscapeSink() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1, t2) {
      this.unsupportedObject = t0;
      this.cause = t1;
      this.$ti = t2;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1, t2) {
      this.unsupportedObject = t0;
      this.cause = t1;
      this.$ti = t2;
    },
    JsonCodec: function JsonCodec(t0, t1, t2) {
      this._reviver = t0;
      this._toEncodable = t1;
      this.$ti = t2;
    },
    JsonEncoder: function JsonEncoder(t0, t1, t2) {
      this.indent = t0;
      this._toEncodable = t1;
      this.$ti = t2;
    },
    JsonUtf8Encoder: function JsonUtf8Encoder() {
    },
    _JsonEncoderSink: function _JsonEncoderSink() {
    },
    _JsonUtf8EncoderSink: function _JsonUtf8EncoderSink() {
    },
    JsonDecoder: function JsonDecoder(t0, t1) {
      this._reviver = t0;
      this.$ti = t1;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.keyValueList = t1;
      this.$ti = t2;
    },
    _JsonPrettyPrintMixin: function _JsonPrettyPrintMixin() {
    },
    _JsonPrettyPrintMixin_writeMap_closure: function _JsonPrettyPrintMixin_writeMap_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.keyValueList = t1;
      this.$ti = t2;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2, t3) {
      var _ = this;
      _._sink = t0;
      _._seen = t1;
      _._toEncodable = t2;
      _.$ti = t3;
    },
    _JsonStringStringifierPretty: function _JsonStringStringifierPretty(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._indent = t0;
      _._JsonPrettyPrintMixin__indentLevel = t1;
      _._sink = t2;
      _._seen = t3;
      _._toEncodable = t4;
      _.$ti = t5;
    },
    _JsonUtf8Stringifier: function _JsonUtf8Stringifier() {
    },
    _JsonUtf8StringifierPretty: function _JsonUtf8StringifierPretty() {
    },
    Latin1Codec: function Latin1Codec(t0) {
      this.$ti = t0;
    },
    Latin1Encoder: function Latin1Encoder(t0, t1) {
      this._subsetMask = t0;
      this.$ti = t1;
    },
    Latin1Decoder: function Latin1Decoder(t0, t1, t2) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
      this.$ti = t2;
    },
    _Latin1DecoderSink: function _Latin1DecoderSink() {
    },
    _Latin1AllowInvalidDecoderSink: function _Latin1AllowInvalidDecoderSink() {
    },
    LineSplitter: function LineSplitter() {
    },
    _LineSplitterSink: function _LineSplitterSink() {
    },
    _LineSplitterEventSink: function _LineSplitterEventSink() {
    },
    StringConversionSink: function StringConversionSink() {
    },
    ClosableStringSink: function ClosableStringSink() {
    },
    _ClosableStringSink: function _ClosableStringSink() {
    },
    _StringConversionSinkAsStringSinkAdapter: function _StringConversionSinkAsStringSinkAdapter() {
    },
    StringConversionSinkBase: function StringConversionSinkBase() {
    },
    StringConversionSinkMixin: function StringConversionSinkMixin() {
    },
    _StringSinkConversionSink: function _StringSinkConversionSink() {
    },
    _StringCallbackSink: function _StringCallbackSink() {
    },
    _StringAdapterSink: function _StringAdapterSink() {
    },
    _Utf8StringSinkAdapter: function _Utf8StringSinkAdapter() {
    },
    _Utf8ConversionSink: function _Utf8ConversionSink() {
    },
    Utf8Codec: function Utf8Codec(t0) {
      this.$ti = t0;
    },
    Utf8Encoder: function Utf8Encoder(t0) {
      this.$ti = t0;
    },
    _Utf8Encoder: function _Utf8Encoder(t0, t1, t2) {
      this._bufferIndex = t0;
      this._buffer = t1;
      this.$ti = t2;
    },
    _Utf8EncoderSink: function _Utf8EncoderSink() {
    },
    Utf8Decoder: function Utf8Decoder(t0, t1) {
      this._allowMalformed = t0;
      this.$ti = t1;
    },
    _Utf8Decoder: function _Utf8Decoder(t0, t1, t2) {
      var _ = this;
      _._allowMalformed = t0;
      _._stringSink = t1;
      _._isFirstCharacter = true;
      _._extraUnits = _._expectedUnits = _._convert$_value = 0;
      _.$ti = t2;
    },
    __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin: function __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin() {
    },
    __JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin: function __JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin() {
    },
    __Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin: function __Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin() {
    },
    _symbolToString: function(symbol) {
      return H.Symbol_getName(H.interceptedTypeCheck(symbol, "$isSymbol0"));
    },
    identityHashCode: function(object) {
      return H.objectHashCode(object);
    },
    Function_apply: function($function, positionalArguments) {
      H.interceptedTypeCheck($function, "$isFunction");
      H.listTypeCheck(positionalArguments);
      return H.Primitives_applyFunction($function, positionalArguments, null);
    },
    int_parse: function(source, onError, radix) {
      var value;
      H.stringTypeCheck(source);
      H.intTypeCheck(radix);
      H.functionTypeCheck(onError, {func: 1, ret: P.int, args: [P.String]});
      value = P.int_tryParse(source, radix);
      if (value != null)
        return value;
      if (onError != null)
        return onError.call$1(source);
      throw H.wrapException(P.FormatException$(source, null, null));
    },
    int_tryParse: function(source, radix) {
      return H.Primitives_parseInt(H.stringTypeCheck(source), H.intTypeCheck(radix));
    },
    BigInt_zero: function() {
      return $.$get$_BigIntImpl_zero();
    },
    BigInt_parse: function(source) {
      return P._BigIntImpl_parse(H.stringTypeCheck(source), null);
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return H.Primitives_objectToHumanReadableString(object);
    },
    Error__stringToSafeString: function(string) {
      return H.jsonEncodeNative(H.stringTypeCheck(string));
    },
    DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
      var t1;
      if (typeof millisecondsSinceEpoch !== "number")
        return H.iae(millisecondsSinceEpoch);
      t1 = new P.DateTime(millisecondsSinceEpoch, isUtc, []);
      t1.DateTime$_withValue$2$isUtc(millisecondsSinceEpoch, isUtc);
      return t1;
    },
    DateTime$fromMicrosecondsSinceEpoch: function(microsecondsSinceEpoch, isUtc) {
      var t1 = P.DateTime__microsecondInRoundedMilliseconds(microsecondsSinceEpoch),
        t2 = new P.DateTime(t1, isUtc, []);
      t2.DateTime$_withValue$2$isUtc(t1, isUtc);
      return t2;
    },
    DateTime__microsecondInRoundedMilliseconds: function(microsecond) {
      H.intTypeCheck(microsecond);
      if (typeof microsecond !== "number")
        return microsecond.$div();
      return C.JSDouble_methods.round$0(microsecond / 1000);
    },
    List_List$filled: function($length, fill, $E) {
      var result, i;
      H.intTypeCheck($length);
      H.assertSubtypeOfRuntimeType(fill, $E);
      result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          C.JSArray_methods.$indexSet(result, i, fill);
      return H.assertSubtype(result, "$isList", [$E], "$asList");
    },
    List_List$from: function(elements, growable, $E) {
      var list, t1;
      H.listSuperNativeTypeCheck(elements, "$isIterable");
      H.boolTypeCheck(growable);
      list = H.setRuntimeTypeInfo([], [$E]);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        C.JSArray_methods.add$1(list, H.assertSubtypeOfRuntimeType(t1.get$current(), $E));
      if (growable)
        return list;
      return H.makeListFixedLength(list, $E);
    },
    List_List$unmodifiable: function(elements, $E) {
      return H.makeFixedListUnmodifiable(H.assertSubtype(P.List_List$from(H.listSuperNativeTypeCheck(elements, "$isIterable"), false, $E), "$isList", [$E], "$asList"), $E);
    },
    String_String$fromCharCodes: function(charCodes, start, end) {
      var t1 = P.int;
      H.assertSubtype(charCodes, "$isIterable", [t1], "$asIterable");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (typeof charCodes === "object" && charCodes !== null && charCodes.constructor === Array)
        return P.String__stringFromJSArray(H.assertSubtype(charCodes, "$isJSArray", [t1], "$asJSArray"), start, end);
      if (!!J.getInterceptor$(charCodes).$isNativeUint8List)
        return P.String__stringFromUint8List(charCodes, start, end);
      return P.String__stringFromIterable(charCodes, start, end);
    },
    String_String$fromCharCode: function(charCode) {
      return H.Primitives_stringFromCharCode(H.intTypeCheck(charCode));
    },
    String__stringFromJSArray: function(list, start, endOrNull) {
      var t1, len, end, t2;
      H.listTypeCheck(list);
      H.intTypeCheck(start);
      H.intTypeCheck(endOrNull);
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      end = P.RangeError_checkValidRange(start, endOrNull, len);
      if (typeof start !== "number")
        return start.$gt();
      if (start <= 0) {
        if (typeof end !== "number")
          return end.$lt();
        if (typeof len !== "number")
          return H.iae(len);
        t2 = end < len;
      } else
        t2 = true;
      return H.Primitives_stringFromCharCodes(t2 ? t1.sublist$2(list, start, end) : list);
    },
    String__stringFromUint8List: function(charCodes, start, endOrNull) {
      H.interceptedTypeCheck(charCodes, "$isNativeUint8List");
      H.intTypeCheck(start);
      return H.Primitives_stringFromNativeUint8List(charCodes, start, P.RangeError_checkValidRange(start, H.intTypeCheck(endOrNull), charCodes.length));
    },
    String__stringFromIterable: function(charCodes, start, end) {
      var t1, it, i, list, _null = null;
      H.assertSubtype(charCodes, "$isIterable", [P.int], "$asIterable");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (typeof start !== "number")
        return start.$lt();
      if (start < 0)
        throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(charCodes), _null, _null));
      t1 = end == null;
      if (!t1 && end < start)
        throw H.wrapException(P.RangeError$range(end, start, J.get$length$asx(charCodes), _null, _null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, _null, _null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current());
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw H.wrapException(P.RangeError$range(end, start, i, _null, _null));
          list.push(it.get$current());
        }
      return H.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp: function(source, caseSensitive) {
      return H.JSSyntaxRegExp$(H.stringTypeCheck(source), H.boolTypeCheck(caseSensitive), false);
    },
    identical: function(a, b) {
      return a == null ? b == null : a === b;
    },
    StringBuffer$: function($content) {
      return new P.StringBuffer(H.S($content), []);
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator;
      H.stringTypeCheck(string);
      H.listSuperNativeTypeCheck(objects, "$isIterable");
      H.stringTypeCheck(separator);
      iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (J.get$isEmpty$asx(separator)) {
        do
          string = P.StringBuffer__writeOne(string, iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string = P.StringBuffer__writeOne(string, iterator.get$current());
        for (; iterator.moveNext$0();)
          string = P.StringBuffer__writeOne(P.StringBuffer__writeOne(string, separator), iterator.get$current());
      }
      return string;
    },
    StringBuffer__writeOne: function(string, obj) {
      return H.Primitives_stringConcatUnchecked(H.stringTypeCheck(string), H.S(obj));
    },
    NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments) {
      return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, null, []);
    },
    Uri_base: function() {
      var uri = H.Primitives_currentUri();
      if (uri != null)
        return P.Uri_parse(uri);
      throw H.wrapException(P.UnsupportedError$("'Uri.base' is not supported"));
    },
    _Uri__isWindows: function() {
      return $.$get$_Uri__isWindowsCached();
    },
    _Uri__uriEncode: function(canonicalTable, text, encoding, spaceToPlus) {
      var result, bytes, t1, t2, i, t3, byte,
        _s16_ = "0123456789ABCDEF";
      H.assertSubtype(canonicalTable, "$isList", [P.int], "$asList");
      H.stringTypeCheck(text);
      H.interceptedTypeCheck(encoding, "$isEncoding");
      H.boolTypeCheck(spaceToPlus);
      if (encoding === C.C_Utf8Codec && $.$get$_Uri__needsNoEncoding().hasMatch$1(text))
        return text;
      result = P.StringBuffer$("");
      bytes = encoding.encode$1(text);
      t1 = J.getInterceptor$asx(bytes);
      t2 = J.getInterceptor$asx(canonicalTable);
      i = 0;
      while (true) {
        t3 = t1.get$length(bytes);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        byte = t1.$index(bytes, i);
        if (typeof byte !== "number")
          return byte.$lt();
        if (byte < 128 && !J.$eq$(J.$and$bn(t2.$index(canonicalTable, C.JSInt_methods._shrOtherPositive$1(byte, 4)), 1 << (byte & 15) >>> 0), 0))
          result.writeCharCode$1(byte);
        else if (spaceToPlus && byte === 32)
          result.write$1("+");
        else {
          result.write$1("%");
          result.write$1(_s16_[C.JSInt_methods._shrOtherPositive$1(byte, 4) & 15]);
          result.write$1(_s16_[byte & 15]);
        }
        ++i;
      }
      return result.toString$0(0);
    },
    StackTrace_current: function() {
      var stackTrace, exception;
      if ($.$get$_hasErrorStackProperty())
        return H.getTraceFromException(new Error());
      try {
        throw H.wrapException("");
      } catch (exception) {
        H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        return stackTrace;
      }
    },
    _max: function(a, b) {
      var t1;
      H.intTypeCheck(a);
      H.intTypeCheck(b);
      if (typeof a !== "number")
        return a.$gt();
      if (typeof b !== "number")
        return H.iae(b);
      if (a > b)
        t1 = a;
      else
        t1 = b;
      return t1;
    },
    _min: function(a, b) {
      var t1;
      H.intTypeCheck(a);
      H.intTypeCheck(b);
      if (typeof a !== "number")
        return a.$lt();
      if (typeof b !== "number")
        return H.iae(b);
      if (a < b)
        t1 = a;
      else
        t1 = b;
      return t1;
    },
    _BigIntImpl_parse: function(source, radix) {
      var result;
      H.stringTypeCheck(source);
      result = P._BigIntImpl__tryParse(source, H.intTypeCheck(radix));
      if (result == null)
        throw H.wrapException(P.FormatException$("Could not parse BigInt", source, null));
      return result;
    },
    _BigIntImpl__parseDecimal: function(source, isNegative) {
      var result, t1, digitInPartCount, part, i, t2;
      H.stringTypeCheck(source);
      H.boolTypeCheck(isNegative);
      result = $.$get$_BigIntImpl_zero();
      t1 = source.length;
      digitInPartCount = 4 - t1 % 4;
      if (digitInPartCount === 4)
        digitInPartCount = 0;
      for (part = 0, i = 0; i < t1; ++i) {
        t2 = C.JSString_methods._codeUnitAt$1(source, i);
        if (typeof t2 !== "number")
          return H.iae(t2);
        part = part * 10 + t2 - 48;
        ++digitInPartCount;
        if (digitInPartCount === 4) {
          result = J.$add$ansx(result.$mul(0, $.$get$_BigIntImpl__bigInt10000()), P._BigIntImpl__BigIntImpl$_fromInt(part));
          part = 0;
          digitInPartCount = 0;
        }
      }
      if (isNegative)
        return result.$negate(0);
      return result;
    },
    _BigIntImpl__codeUnitToRadixValue: function(codeUnit) {
      H.intTypeCheck(codeUnit);
      if (typeof codeUnit !== "number")
        return H.iae(codeUnit);
      if (48 <= codeUnit && codeUnit <= 57)
        return codeUnit - 48;
      return ((codeUnit | 32) >>> 0) - 97 + 10;
    },
    _BigIntImpl__parseHex: function(source, startPos, isNegative) {
      var t1, sourceLength, chunkCount, digits, lastDigitLength, t2, digitIndex, t3, i, chunk, j, i0, digitValue, digitIndex0;
      H.stringTypeCheck(source);
      H.intTypeCheck(startPos);
      H.boolTypeCheck(isNegative);
      t1 = source.length;
      if (typeof startPos !== "number")
        return H.iae(startPos);
      sourceLength = t1 - startPos;
      chunkCount = C.JSDouble_methods.ceil$0(sourceLength / 4);
      digits = H.NativeUint16List_NativeUint16List(chunkCount);
      if (typeof chunkCount !== "number")
        return chunkCount.$sub();
      lastDigitLength = sourceLength - (chunkCount - 1) * 4;
      t2 = digits.length;
      digitIndex = t2 - 1;
      for (t3 = J.getInterceptor$s(source), i = startPos, chunk = 0, j = 0; j < lastDigitLength; ++j, i = i0) {
        i0 = i + 1;
        digitValue = P._BigIntImpl__codeUnitToRadixValue(t3.codeUnitAt$1(source, i));
        if (typeof digitValue !== "number")
          return digitValue.$ge();
        if (digitValue >= 16)
          return;
        chunk = chunk * 16 + digitValue;
      }
      digitIndex0 = digitIndex - 1;
      if (digitIndex < 0)
        return H.ioore(digits, digitIndex);
      digits[digitIndex] = chunk;
      for (digitIndex = digitIndex0; i < t1; digitIndex = digitIndex0) {
        for (chunk = 0, j = 0; j < 4; ++j, i = i0) {
          i0 = i + 1;
          digitValue = P._BigIntImpl__codeUnitToRadixValue(C.JSString_methods.codeUnitAt$1(source, i));
          if (typeof digitValue !== "number")
            return digitValue.$ge();
          if (digitValue >= 16)
            return;
          chunk = chunk * 16 + digitValue;
        }
        digitIndex0 = digitIndex - 1;
        if (digitIndex < 0)
          return H.ioore(digits, digitIndex);
        digits[digitIndex] = chunk;
      }
      if (t2 === 1) {
        if (0 >= t2)
          return H.ioore(digits, 0);
        t1 = J.$eq$(digits[0], 0);
      } else
        t1 = false;
      if (t1)
        return $.$get$_BigIntImpl_zero();
      return P._BigIntImpl$_(isNegative, t2, digits);
    },
    _BigIntImpl__parseRadix: function(source, radix, isNegative) {
      var result, base, t1, i, digitValue;
      H.stringTypeCheck(source);
      H.intTypeCheck(radix);
      H.boolTypeCheck(isNegative);
      result = $.$get$_BigIntImpl_zero();
      base = P._BigIntImpl__BigIntImpl$_fromInt(radix);
      for (t1 = source.length, i = 0; i < t1; ++i) {
        digitValue = P._BigIntImpl__codeUnitToRadixValue(C.JSString_methods._codeUnitAt$1(source, i));
        if (typeof digitValue !== "number")
          return digitValue.$ge();
        if (typeof radix !== "number")
          return H.iae(radix);
        if (digitValue >= radix)
          return;
        result = J.$add$ansx(result.$mul(0, base), P._BigIntImpl__BigIntImpl$_fromInt(digitValue));
      }
      if (isNegative)
        return result.$negate(0);
      return result;
    },
    _BigIntImpl__tryParse: function(source, radix) {
      var match, isNegative, decimalMatch, hexMatch, nonDecimalMatch, t1;
      H.stringTypeCheck(source);
      H.intTypeCheck(radix);
      if (source === "")
        return;
      match = P.RegExp_RegExp("^\\s*([+-]?)((0x[a-f0-9]+)|(\\d+)|([a-z0-9]+))\\s*$", false).firstMatch$1(source);
      if (match == null)
        return;
      isNegative = J.$eq$(match.$index(0, 1), "-");
      decimalMatch = match.$index(0, 4);
      hexMatch = match.$index(0, 3);
      nonDecimalMatch = match.$index(0, 5);
      if (radix == null) {
        if (decimalMatch != null)
          return P._BigIntImpl__parseDecimal(decimalMatch, isNegative);
        if (hexMatch != null)
          return P._BigIntImpl__parseHex(hexMatch, 2, isNegative);
        return;
      }
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      if (radix === 10 && decimalMatch != null)
        return P._BigIntImpl__parseDecimal(decimalMatch, isNegative);
      if (radix === 16)
        t1 = decimalMatch != null || nonDecimalMatch != null;
      else
        t1 = false;
      if (t1)
        return P._BigIntImpl__parseHex(decimalMatch == null ? nonDecimalMatch : decimalMatch, 0, isNegative);
      t1 = decimalMatch == null ? nonDecimalMatch : decimalMatch;
      return P._BigIntImpl__parseRadix(t1 == null ? hexMatch : t1, radix, isNegative);
    },
    _BigIntImpl__normalize: function(used, digits) {
      var t1;
      H.intTypeCheck(used);
      H.interceptedTypeCheck(digits, "$isUint16List");
      while (true) {
        if (typeof used !== "number")
          return used.$gt();
        if (used > 0) {
          t1 = used - 1;
          if (t1 >= digits.length)
            return H.ioore(digits, t1);
          t1 = J.$eq$(digits[t1], 0);
        } else
          t1 = false;
        if (!t1)
          break;
        --used;
      }
      return used;
    },
    _BigIntImpl$_: function(isNegative, used, digits) {
      var t1 = P._BigIntImpl__normalize(used, digits),
        t2 = J.$eq$(t1, 0) ? false : isNegative;
      return new P._BigIntImpl(t2, digits, t1, []);
    },
    _BigIntImpl__cloneDigits: function(digits, from, to, $length) {
      var resultDigits, n, t1, i, t2;
      H.interceptedTypeCheck(digits, "$isUint16List");
      H.intTypeCheck(from);
      H.intTypeCheck(to);
      resultDigits = H.NativeUint16List_NativeUint16List(H.intTypeCheck($length));
      if (typeof to !== "number")
        return to.$sub();
      if (typeof from !== "number")
        return H.iae(from);
      n = to - from;
      for (t1 = resultDigits && C.NativeUint16List_methods, i = 0; i < n; ++i) {
        t2 = from + i;
        if (t2 < 0 || t2 >= digits.length)
          return H.ioore(digits, t2);
        t1.$indexSet(resultDigits, i, digits[t2]);
      }
      return resultDigits;
    },
    _BigIntImpl__BigIntImpl$_fromInt: function(value) {
      var isNegative, digits, t1, t2, bits, i, i0;
      H.intTypeCheck(value);
      if (typeof value !== "number")
        return value.$lt();
      isNegative = value < 0;
      if (isNegative) {
        if (value === -9223372036854776e3) {
          digits = H.NativeUint16List_NativeUint16List(4);
          if (3 >= digits.length)
            return H.ioore(digits, 3);
          digits[3] = 32768;
          return P._BigIntImpl$_(true, 4, digits);
        }
        value = -value;
      }
      if (value < 65536) {
        digits = H.NativeUint16List_NativeUint16List(1);
        if (0 >= digits.length)
          return H.ioore(digits, 0);
        digits[0] = value;
        return P._BigIntImpl$_(isNegative, 1, digits);
      }
      if (value <= 4294967295) {
        digits = H.NativeUint16List_NativeUint16List(2);
        t1 = digits.length;
        if (0 >= t1)
          return H.ioore(digits, 0);
        digits[0] = value & 65535;
        t2 = C.JSInt_methods._shrOtherPositive$1(value, 16);
        if (1 >= t1)
          return H.ioore(digits, 1);
        digits[1] = t2;
        return P._BigIntImpl$_(isNegative, 2, digits);
      }
      bits = C.JSInt_methods.get$bitLength(value);
      if (typeof bits !== "number")
        return bits.$sub();
      digits = H.NativeUint16List_NativeUint16List(C.JSInt_methods._tdivFast$1(bits - 1, 16) + 1);
      for (i = 0; value !== 0; i = i0) {
        i0 = i + 1;
        if (i >= digits.length)
          return H.ioore(digits, i);
        digits[i] = value & 65535;
        value = C.JSInt_methods._tdivFast$1(value, 65536);
      }
      return P._BigIntImpl$_(isNegative, digits.length, digits);
    },
    _BigIntImpl__dlShiftDigits: function(xDigits, xUsed, n, resultDigits) {
      var i, t1;
      H.interceptedTypeCheck(xDigits, "$isUint16List");
      H.intTypeCheck(xUsed);
      H.intTypeCheck(n);
      H.interceptedTypeCheck(resultDigits, "$isUint16List");
      if (xUsed === 0)
        return 0;
      if (n === 0 && (resultDigits == null ? xDigits == null : resultDigits === xDigits))
        return xUsed;
      if (typeof xUsed !== "number")
        return xUsed.$add();
      if (typeof n !== "number")
        return H.iae(n);
      for (i = xUsed - 1, t1 = resultDigits && C.NativeUint16List_methods; i >= 0; --i) {
        if (i >= xDigits.length)
          return H.ioore(xDigits, i);
        t1.$indexSet(resultDigits, i + n, xDigits[i]);
      }
      for (i = n - 1; i >= 0; --i) {
        if (i >= resultDigits.length)
          return H.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      return xUsed + n;
    },
    _BigIntImpl__lsh: function(xDigits, xUsed, n, resultDigits) {
      var digitShift, bitShift, carryBitShift, bitMask, i, carry, digit, t1, t2;
      H.interceptedTypeCheck(xDigits, "$isUint16List");
      H.intTypeCheck(xUsed);
      H.intTypeCheck(n);
      H.interceptedTypeCheck(resultDigits, "$isUint16List");
      if (typeof n !== "number")
        return n.$tdiv();
      digitShift = C.JSInt_methods._tdivFast$1(n, 16);
      bitShift = C.JSInt_methods.$mod(n, 16);
      carryBitShift = 16 - bitShift;
      bitMask = C.JSInt_methods.$shl(1, carryBitShift) - 1;
      if (typeof xUsed !== "number")
        return xUsed.$sub();
      i = xUsed - 1;
      carry = 0;
      for (; i >= 0; --i) {
        if (i >= xDigits.length)
          return H.ioore(xDigits, i);
        digit = xDigits[i];
        t1 = i + digitShift + 1;
        if (typeof digit !== "number")
          return digit.$shr();
        t2 = C.JSInt_methods.$shr(digit, carryBitShift);
        if (t1 < 0 || t1 >= resultDigits.length)
          return H.ioore(resultDigits, t1);
        resultDigits[t1] = (t2 | carry) >>> 0;
        carry = C.JSInt_methods.$shl((digit & bitMask) >>> 0, bitShift);
      }
      if (digitShift < 0 || digitShift >= resultDigits.length)
        return H.ioore(resultDigits, digitShift);
      resultDigits[digitShift] = carry;
    },
    _BigIntImpl__lShiftDigits: function(xDigits, xUsed, n, resultDigits) {
      var digitsShift, resultUsed, i, t1;
      H.interceptedTypeCheck(xDigits, "$isUint16List");
      H.intTypeCheck(xUsed);
      H.intTypeCheck(n);
      H.interceptedTypeCheck(resultDigits, "$isUint16List");
      if (typeof n !== "number")
        return n.$tdiv();
      digitsShift = C.JSInt_methods._tdivFast$1(n, 16);
      if (C.JSInt_methods.$mod(n, 16) === 0)
        return P._BigIntImpl__dlShiftDigits(xDigits, xUsed, digitsShift, resultDigits);
      if (typeof xUsed !== "number")
        return xUsed.$add();
      resultUsed = xUsed + digitsShift + 1;
      P._BigIntImpl__lsh(xDigits, xUsed, n, resultDigits);
      for (i = digitsShift; --i, i >= 0;) {
        if (i >= resultDigits.length)
          return H.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      t1 = resultUsed - 1;
      if (t1 < 0 || t1 >= resultDigits.length)
        return H.ioore(resultDigits, t1);
      if (J.$eq$(resultDigits[t1], 0))
        resultUsed = t1;
      return resultUsed;
    },
    _BigIntImpl__rsh: function(xDigits, xUsed, n, resultDigits) {
      var digitsShift, bitShift, carryBitShift, bitMask, t1, carry, last, i, t2, digit;
      H.interceptedTypeCheck(xDigits, "$isUint16List");
      H.intTypeCheck(xUsed);
      H.intTypeCheck(n);
      H.interceptedTypeCheck(resultDigits, "$isUint16List");
      if (typeof n !== "number")
        return n.$tdiv();
      digitsShift = C.JSInt_methods._tdivFast$1(n, 16);
      bitShift = C.JSInt_methods.$mod(n, 16);
      carryBitShift = 16 - bitShift;
      bitMask = C.JSInt_methods.$shl(1, bitShift) - 1;
      t1 = xDigits.length;
      if (digitsShift < 0 || digitsShift >= t1)
        return H.ioore(xDigits, digitsShift);
      carry = J.$shr$n(xDigits[digitsShift], bitShift);
      if (typeof xUsed !== "number")
        return xUsed.$sub();
      last = xUsed - digitsShift - 1;
      for (i = 0; i < last; ++i) {
        t2 = i + digitsShift + 1;
        if (t2 >= t1)
          return H.ioore(xDigits, t2);
        digit = xDigits[t2];
        if (typeof digit !== "number")
          return digit.$and();
        t2 = C.JSInt_methods.$shl((digit & bitMask) >>> 0, carryBitShift);
        if (typeof carry !== "number")
          return H.iae(carry);
        if (i >= resultDigits.length)
          return H.ioore(resultDigits, i);
        resultDigits[i] = (t2 | carry) >>> 0;
        carry = C.JSInt_methods.$shr(digit, bitShift);
      }
      (resultDigits && C.NativeUint16List_methods).$indexSet(resultDigits, last, carry);
    },
    _BigIntImpl__compareDigits: function(digits, used, otherDigits, otherUsed) {
      var result, i, t1;
      H.interceptedTypeCheck(digits, "$isUint16List");
      H.intTypeCheck(used);
      H.interceptedTypeCheck(otherDigits, "$isUint16List");
      H.intTypeCheck(otherUsed);
      if (typeof used !== "number")
        return used.$sub();
      if (typeof otherUsed !== "number")
        return H.iae(otherUsed);
      result = used - otherUsed;
      if (result === 0)
        for (i = used - 1; i >= 0; --i) {
          if (i >= digits.length)
            return H.ioore(digits, i);
          t1 = digits[i];
          if (i >= otherDigits.length)
            return H.ioore(otherDigits, i);
          result = J.$sub$n(t1, otherDigits[i]);
          if (result !== 0)
            return result;
        }
      return result;
    },
    _BigIntImpl__absAdd: function(digits, used, otherDigits, otherUsed, resultDigits) {
      var carry, i, t1;
      H.interceptedTypeCheck(digits, "$isUint16List");
      H.intTypeCheck(used);
      H.interceptedTypeCheck(otherDigits, "$isUint16List");
      H.intTypeCheck(otherUsed);
      H.interceptedTypeCheck(resultDigits, "$isUint16List");
      if (typeof otherUsed !== "number")
        return H.iae(otherUsed);
      carry = 0;
      i = 0;
      for (; i < otherUsed; ++i) {
        if (i >= digits.length)
          return H.ioore(digits, i);
        t1 = digits[i];
        if (i >= otherDigits.length)
          return H.ioore(otherDigits, i);
        t1 = J.$add$ansx(t1, otherDigits[i]);
        if (typeof t1 !== "number")
          return H.iae(t1);
        carry += t1;
        if (i >= resultDigits.length)
          return H.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = C.JSInt_methods._shrOtherPositive$1(carry, 16);
      }
      if (typeof used !== "number")
        return H.iae(used);
      i = otherUsed;
      for (; i < used; ++i) {
        if (i < 0 || i >= digits.length)
          return H.ioore(digits, i);
        t1 = digits[i];
        if (typeof t1 !== "number")
          return H.iae(t1);
        carry += t1;
        if (i >= resultDigits.length)
          return H.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = C.JSInt_methods._shrOtherPositive$1(carry, 16);
      }
      if (used < 0 || used >= resultDigits.length)
        return H.ioore(resultDigits, used);
      resultDigits[used] = carry;
    },
    _BigIntImpl__absSub: function(digits, used, otherDigits, otherUsed, resultDigits) {
      var carry, i, t1;
      H.interceptedTypeCheck(digits, "$isUint16List");
      H.intTypeCheck(used);
      H.interceptedTypeCheck(otherDigits, "$isUint16List");
      H.intTypeCheck(otherUsed);
      H.interceptedTypeCheck(resultDigits, "$isUint16List");
      if (typeof otherUsed !== "number")
        return H.iae(otherUsed);
      carry = 0;
      i = 0;
      for (; i < otherUsed; ++i) {
        if (i >= digits.length)
          return H.ioore(digits, i);
        t1 = digits[i];
        if (i >= otherDigits.length)
          return H.ioore(otherDigits, i);
        t1 = J.$sub$n(t1, otherDigits[i]);
        if (typeof t1 !== "number")
          return H.iae(t1);
        carry += t1;
        if (i >= resultDigits.length)
          return H.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (C.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
      if (typeof used !== "number")
        return H.iae(used);
      i = otherUsed;
      for (; i < used; ++i) {
        if (i < 0 || i >= digits.length)
          return H.ioore(digits, i);
        t1 = digits[i];
        if (typeof t1 !== "number")
          return H.iae(t1);
        carry += t1;
        if (i >= resultDigits.length)
          return H.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (C.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
    },
    _BigIntImpl__mulAdd: function(x, multiplicandDigits, i, accumulatorDigits, j, n) {
      var t1, c, i0, t2, t3, combined, j0, l;
      H.intTypeCheck(x);
      H.interceptedTypeCheck(multiplicandDigits, "$isUint16List");
      H.intTypeCheck(i);
      H.interceptedTypeCheck(accumulatorDigits, "$isUint16List");
      H.intTypeCheck(j);
      H.intTypeCheck(n);
      if (x === 0)
        return;
      t1 = accumulatorDigits && C.NativeUint16List_methods;
      c = 0;
      while (true) {
        if (typeof n !== "number")
          return n.$sub();
        --n;
        if (!(n >= 0))
          break;
        if (typeof i !== "number")
          return i.$add();
        i0 = i + 1;
        if (i < 0 || i >= multiplicandDigits.length)
          return H.ioore(multiplicandDigits, i);
        t2 = multiplicandDigits[i];
        if (typeof x !== "number")
          return x.$mul();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = t1.$index(accumulatorDigits, j);
        if (typeof t3 !== "number")
          return H.iae(t3);
        combined = x * t2 + t3 + c;
        if (typeof j !== "number")
          return j.$add();
        j0 = j + 1;
        if (j < 0 || j >= accumulatorDigits.length)
          return H.ioore(accumulatorDigits, j);
        accumulatorDigits[j] = combined & 65535;
        c = C.JSInt_methods._tdivFast$1(combined, 65536);
        j = j0;
        i = i0;
      }
      for (; c !== 0; j = j0) {
        l = J.$add$ansx(t1.$index(accumulatorDigits, j), c);
        if (typeof j !== "number")
          return j.$add();
        j0 = j + 1;
        if (typeof l !== "number")
          return l.$and();
        if (j < 0 || j >= accumulatorDigits.length)
          return H.ioore(accumulatorDigits, j);
        accumulatorDigits[j] = l & 65535;
        c = C.JSInt_methods._tdivFast$1(l, 65536);
      }
    },
    _BigIntImpl__estimateQuotientDigit: function(topDigitDivisor, digits, i) {
      var t1, t2, quotientDigit;
      H.intTypeCheck(topDigitDivisor);
      H.interceptedTypeCheck(digits, "$isUint16List");
      H.intTypeCheck(i);
      if (J.$eq$((digits && C.NativeUint16List_methods).$index(digits, i), topDigitDivisor))
        return 65535;
      t1 = J.$shl$n(C.NativeUint16List_methods.$index(digits, i), 16);
      if (typeof i !== "number")
        return i.$sub();
      t2 = i - 1;
      if (t2 < 0 || t2 >= digits.length)
        return H.ioore(digits, t2);
      quotientDigit = J.$tdiv$n(J.$or$bn(t1, digits[t2]), topDigitDivisor);
      if (typeof quotientDigit !== "number")
        return quotientDigit.$gt();
      if (quotientDigit > 65535)
        return 65535;
      return quotientDigit;
    },
    Comparable_compare: function(a, b) {
      return J.compareTo$1$ns(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
    },
    DateTime$now: function() {
      return new P.DateTime(H.Primitives_dateNow(), false, []);
    },
    DateTime__fourDigits: function(n) {
      var absN, sign;
      H.intTypeCheck(n);
      if (typeof n !== "number")
        return n.abs$0();
      absN = Math.abs(n);
      sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits: function(n) {
      H.intTypeCheck(n);
      if (typeof n !== "number")
        return n.$ge();
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits: function(n) {
      H.intTypeCheck(n);
      if (typeof n !== "number")
        return n.$ge();
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Duration$: function(microseconds, seconds) {
      if (typeof seconds !== "number")
        return H.iae(seconds);
      if (typeof microseconds !== "number")
        return H.iae(microseconds);
      return new P.Duration(1000000 * seconds + microseconds, []);
    },
    Duration$_microseconds: function(_duration) {
      return new P.Duration(_duration, []);
    },
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return P.Error__stringToSafeString(object);
      return P.Error__objectToString(object);
    },
    NullThrownError$: function() {
      return new P.NullThrownError([]);
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message, []);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message, []);
    },
    ArgumentError$notNull: function($name) {
      return new P.ArgumentError(false, null, $name, "Must not be null", []);
    },
    ArgumentError_checkNotNull: function(argument, $name) {
      H.stringTypeCheck($name);
      if (argument == null)
        throw H.wrapException(P.ArgumentError$notNull($name));
    },
    RangeError$: function(message) {
      var _null = null;
      return new P.RangeError(_null, _null, false, _null, _null, message, []);
    },
    RangeError$value: function(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range", []);
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
      var t1 = message != null ? message : "Invalid value";
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, t1, []);
    },
    RangeError_checkValueInInterval: function(value, minValue, maxValue, $name) {
      var t1;
      H.intTypeCheck(value);
      H.intTypeCheck(minValue);
      H.intTypeCheck(maxValue);
      H.stringTypeCheck($name);
      if (typeof value !== "number")
        return value.$lt();
      if (typeof minValue !== "number")
        return H.iae(minValue);
      if (value >= minValue) {
        if (typeof maxValue !== "number")
          return H.iae(maxValue);
        t1 = value > maxValue;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(value, minValue, maxValue, $name, null));
    },
    RangeError_checkValidIndex: function(index, indexable) {
      var $length, t1;
      H.intTypeCheck(index);
      $length = H.intTypeCheck(J.get$length$asx(indexable));
      if (typeof index !== "number")
        return H.iae(index);
      if (0 <= index) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.IndexError$(index, indexable, "index", null, $length));
    },
    RangeError_checkValidRange: function(start, end, $length) {
      var t1;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.intTypeCheck($length);
      if (typeof start !== "number")
        return H.iae(start);
      if (0 <= start) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = start > $length;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (!(start > end)) {
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = end > $length;
        } else
          t1 = true;
        if (t1)
          throw H.wrapException(P.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative: function(value, $name) {
      H.intTypeCheck(value);
      H.stringTypeCheck($name);
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0)
        throw H.wrapException(P.RangeError$range(value, 0, null, $name, null));
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      var t1 = H.intTypeCheck($length == null ? J.get$length$asx(indexable) : $length),
        t2 = message != null ? message : "Index out of range";
      return new P.IndexError(t1, true, invalidValue, $name, t2, []);
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message, []);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message, []);
    },
    StateError$: function(message) {
      return new P.StateError(message, []);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject, []);
    },
    StackOverflowError$: function() {
      return new P.StackOverflowError([]);
    },
    CyclicInitializationError$: function(variableName) {
      return new P.CyclicInitializationError(variableName, []);
    },
    Exception_Exception: function(message) {
      return P._Exception$(message);
    },
    _Exception$: function(message) {
      return new P._Exception(message, []);
    },
    FormatException$: function(message, source, offset) {
      return new P.FormatException(message, source, offset, []);
    },
    IntegerDivisionByZeroException$: function() {
      return new P.IntegerDivisionByZeroException([]);
    },
    Iterable_castFrom: function(source, $S, $T) {
      return H.CastIterable_CastIterable(H.assertSubtype(source, "$isIterable", [$S], "$asIterable"), $S, $T);
    },
    List_List$generate: function($length, generator, growable, $E) {
      var result, t1, i;
      H.intTypeCheck($length);
      H.functionTypeCheck(generator, {func: 1, ret: $E, args: [P.int]});
      if (H.boolTypeCheck(growable)) {
        result = H.setRuntimeTypeInfo([], [$E]);
        C.JSArray_methods.set$length(result, $length);
      } else {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = new Array($length);
        t1.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t1, [$E]);
      }
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i)
        C.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    List_castFrom: function(source, $S, $T) {
      return H.CastList$(H.assertSubtype(source, "$isList", [$S], "$asList"), $S, $T);
    },
    Map_castFrom: function(source, $K, $V, K2, V2) {
      return H.CastMap$(H.assertSubtype(source, "$isMap", [$K, $V], "$asMap"), $K, $V, K2, V2);
    },
    print: function(object) {
      H.printToConsole(H.S(object));
    },
    Set_castFrom: function(source, newSet, $S, $T) {
      return H.CastSet$(H.assertSubtype(source, "$isSet", [$S], "$asSet"), H.functionTypeCheck(newSet, {func: 1, bounds: [P.Object], ret: [P.Set, 0]}), $S, $T);
    },
    Uri_parse: function(uri) {
      var end, dataDelta, t1, indices, state, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t2, schemeAuth, delta, queryStart0, pathStart0, _null = null;
      H.stringTypeCheck(uri);
      end = uri.length;
      if (end >= 5) {
        dataDelta = P._startsWithData(uri, 0);
        if (dataDelta === 0)
          return P.UriData__parse(end < end ? J.substring$2$s(uri, 0, end) : uri, 5, _null).get$uri();
        else if (dataDelta === 32)
          return P.UriData__parse(J.substring$2$s(uri, 5, end), 0, _null).get$uri();
      }
      t1 = new Array(8);
      t1.fixed$length = Array;
      indices = H.setRuntimeTypeInfo(t1, [P.int]);
      C.JSArray_methods.$indexSet(indices, 0, 0);
      C.JSArray_methods.$indexSet(indices, 1, -1);
      C.JSArray_methods.$indexSet(indices, 2, -1);
      C.JSArray_methods.$indexSet(indices, 7, -1);
      C.JSArray_methods.$indexSet(indices, 3, 0);
      C.JSArray_methods.$indexSet(indices, 4, 0);
      C.JSArray_methods.$indexSet(indices, 5, end);
      C.JSArray_methods.$indexSet(indices, 6, end);
      state = P._scan(uri, 0, end, 0, indices);
      if (typeof state !== "number")
        return state.$ge();
      if (state >= 14)
        C.JSArray_methods.$indexSet(indices, 7, end);
      t1 = indices.length;
      if (1 >= t1)
        return H.ioore(indices, 1);
      schemeEnd = indices[1];
      if (typeof schemeEnd !== "number")
        return schemeEnd.$ge();
      if (schemeEnd >= 0)
        if (P._scan(uri, 0, schemeEnd, 20, indices) === 20)
          C.JSArray_methods.$indexSet(indices, 7, schemeEnd);
      if (2 >= t1)
        return H.ioore(indices, 2);
      hostStart = J.$add$ansx(indices[2], 1);
      if (3 >= t1)
        return H.ioore(indices, 3);
      portStart = indices[3];
      if (4 >= t1)
        return H.ioore(indices, 4);
      pathStart = indices[4];
      if (5 >= t1)
        return H.ioore(indices, 5);
      queryStart = indices[5];
      if (6 >= t1)
        return H.ioore(indices, 6);
      fragmentStart = indices[6];
      if (typeof fragmentStart !== "number")
        return fragmentStart.$lt();
      if (typeof queryStart !== "number")
        return H.iae(queryStart);
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (typeof pathStart !== "number")
        return pathStart.$lt();
      if (typeof hostStart !== "number")
        return H.iae(hostStart);
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (typeof portStart !== "number")
        return portStart.$lt();
      if (portStart < hostStart)
        portStart = pathStart;
      if (7 >= t1)
        return H.ioore(indices, 7);
      isSimple = J.$lt$n(indices[7], 0);
      if (isSimple)
        if (hostStart > schemeEnd + 3) {
          scheme = _null;
          isSimple = false;
        } else {
          t1 = portStart > 0;
          if (t1 && portStart + 1 === pathStart) {
            scheme = _null;
            isSimple = false;
          } else {
            if (!(queryStart < end && queryStart === pathStart + 2 && J.startsWith$2$s(uri, "..", pathStart)))
              t2 = queryStart > pathStart + 2 && J.startsWith$2$s(uri, "/..", queryStart - 3);
            else
              t2 = true;
            if (t2) {
              scheme = _null;
              isSimple = false;
            } else {
              if (schemeEnd === 4)
                if (J.startsWith$2$s(uri, "file", 0)) {
                  if (hostStart <= 0) {
                    if (!C.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                      schemeAuth = "file:///";
                      delta = 3;
                    } else {
                      schemeAuth = "file://";
                      delta = 2;
                    }
                    uri = C.JSString_methods.$add(schemeAuth, C.JSString_methods.substring$2(uri, pathStart, end));
                    schemeEnd -= 0;
                    t1 = delta - 0;
                    queryStart += t1;
                    fragmentStart += t1;
                    end = uri.length;
                    hostStart = 7;
                    portStart = 7;
                    pathStart = 7;
                  } else if (pathStart === queryStart) {
                    queryStart0 = queryStart + 1;
                    ++fragmentStart;
                    uri = C.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                    ++end;
                    queryStart = queryStart0;
                  }
                  scheme = "file";
                } else if (C.JSString_methods.startsWith$2(uri, "http", 0)) {
                  if (t1 && portStart + 3 === pathStart && C.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                    pathStart0 = pathStart - 3;
                    queryStart -= 3;
                    fragmentStart -= 3;
                    uri = C.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "http";
                } else
                  scheme = _null;
              else if (schemeEnd === 5 && J.startsWith$2$s(uri, "https", 0)) {
                if (t1 && portStart + 4 === pathStart && J.startsWith$2$s(uri, "443", portStart + 1)) {
                  pathStart0 = pathStart - 4;
                  queryStart -= 4;
                  fragmentStart -= 4;
                  uri = J.replaceRange$3$asx(uri, portStart, pathStart, "");
                  end -= 3;
                  pathStart = pathStart0;
                }
                scheme = "https";
              } else
                scheme = _null;
              isSimple = true;
            }
          }
        }
      else
        scheme = _null;
      if (isSimple) {
        t1 = uri.length;
        if (end < t1) {
          uri = J.substring$2$s(uri, 0, end);
          schemeEnd -= 0;
          hostStart -= 0;
          portStart -= 0;
          pathStart -= 0;
          queryStart -= 0;
          fragmentStart -= 0;
        }
        return P._SimpleUri$(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      }
      return P._Uri__Uri$notSimple(uri, 0, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
    },
    Uri_encodeQueryComponent: function(component, encoding) {
      return P._Uri__uriEncode(C.List_nxB, H.stringTypeCheck(component), H.interceptedTypeCheck(encoding, "$isEncoding"), true);
    },
    Uri_decodeComponent: function(encodedComponent) {
      H.stringTypeCheck(encodedComponent);
      return P._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, C.C_Utf8Codec, false);
    },
    Uri__parseIPv4Address: function(host, start, end) {
      var error, result, t1, i, partStart, partIndex, char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _null = null,
        _s37_ = "each part must be in the range 0..255";
      H.stringTypeCheck(host);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      error = new P.Uri__parseIPv4Address_error(host);
      result = H.NativeUint8List_NativeUint8List(4);
      t1 = J.getInterceptor$s(host);
      i = start;
      partStart = i;
      partIndex = 0;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        char = t1.codeUnitAt$1(host, i);
        if (char !== 46) {
          if (typeof char !== "number")
            return char.$xor();
          if ((char ^ 48) >>> 0 > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = P.int_parse(C.JSString_methods.substring$2(host, partStart, i), _null, _null);
          if (typeof part !== "number")
            return part.$gt();
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          if (partIndex >= result.length)
            return H.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
        ++i;
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = P.int_parse(t1.substring$2(host, partStart, end), _null, _null);
      if (typeof part !== "number")
        return part.$gt();
      if (part > 255)
        error.call$2(_s37_, partStart);
      if (partIndex >= result.length)
        return H.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address: function(host, start, end) {
      var error, parseHex, parts, t1, i, partStart, wildcardSeen, seenDot, char, atEnd, isLastWildcard, last, bytes, wildCardLength, index, value, j, t2, t3;
      H.stringTypeCheck(host);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (end == null)
        end = host.length;
      error = new P.Uri_parseIPv6Address_error(host);
      parseHex = new P.Uri_parseIPv6Address_parseHex(error, host);
      if (host.length < 2)
        error.call$1("address is too short");
      parts = H.setRuntimeTypeInfo([], [P.int]);
      t1 = J.getInterceptor$s(host);
      i = start;
      partStart = i;
      wildcardSeen = false;
      seenDot = false;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (!(i < end))
          break;
        char = t1.codeUnitAt$1(host, i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (!J.$eq$(C.JSString_methods.codeUnitAt$1(host, i), 58))
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            C.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            C.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
        ++i;
      }
      if (parts.length === 0)
        error.call$1("too few parts");
      atEnd = partStart === end;
      isLastWildcard = J.$eq$(C.JSArray_methods.get$last(parts), -1);
      if (atEnd && !isLastWildcard)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          C.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = P.Uri__parseIPv4Address(host, partStart, end);
          t1 = J.getInterceptor$asx(last);
          C.JSArray_methods.add$1(parts, J.$or$bn(J.$shl$n(t1.$index(last, 0), 8), t1.$index(last, 1)));
          C.JSArray_methods.add$1(parts, J.$or$bn(J.$shl$n(t1.$index(last, 2), 8), t1.$index(last, 3)));
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$1("an address with a wildcard must have less than 7 parts");
      } else if (parts.length !== 8)
        error.call$1("an address without a wildcard must contain exactly 8 parts");
      bytes = H.NativeUint8List_NativeUint8List(16);
      for (t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            t2 = bytes.length;
            if (index < 0 || index >= t2)
              return H.ioore(bytes, index);
            bytes[index] = 0;
            t3 = index + 1;
            if (t3 >= t2)
              return H.ioore(bytes, t3);
            bytes[t3] = 0;
            index += 2;
          }
        else {
          if (typeof value !== "number")
            return value.$shr();
          t2 = C.JSInt_methods._shrOtherPositive$1(value, 8);
          t3 = bytes.length;
          if (index < 0 || index >= t3)
            return H.ioore(bytes, index);
          bytes[index] = t2;
          t2 = index + 1;
          if (t2 >= t3)
            return H.ioore(bytes, t2);
          bytes[t2] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri$_internal: function(scheme, _userInfo, _host, _port, path, _query, _fragment) {
      return new P._Uri(scheme, _userInfo, _host, _port, path, _query, _fragment, []);
    },
    _Uri__Uri$notSimple: function(uri, start, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme) {
      var userInfoStart, userInfo, host, t1, port, path, query, _null = null;
      H.stringTypeCheck(uri);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.intTypeCheck(schemeEnd);
      H.intTypeCheck(hostStart);
      H.intTypeCheck(portStart);
      H.intTypeCheck(pathStart);
      H.intTypeCheck(queryStart);
      H.intTypeCheck(fragmentStart);
      H.stringTypeCheck(scheme);
      if (scheme == null) {
        if (typeof schemeEnd !== "number")
          return schemeEnd.$gt();
        if (typeof start !== "number")
          return H.iae(start);
        if (schemeEnd > start)
          scheme = P._Uri__makeScheme(uri, start, schemeEnd);
        else {
          if (schemeEnd === start)
            P._Uri__fail(uri, start, "Invalid empty scheme");
          scheme = "";
        }
      }
      if (typeof hostStart !== "number")
        return hostStart.$gt();
      if (typeof start !== "number")
        return H.iae(start);
      if (hostStart > start) {
        if (typeof schemeEnd !== "number")
          return schemeEnd.$add();
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? P._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = P._Uri__makeHost(uri, hostStart, portStart, false);
        if (typeof portStart !== "number")
          return portStart.$add();
        t1 = portStart + 1;
        if (typeof pathStart !== "number")
          return H.iae(pathStart);
        port = t1 < pathStart ? P._Uri__makePort(P.int_parse(J.substring$2$s(uri, t1, pathStart), new P._Uri__Uri$notSimple_closure(uri, portStart), _null), scheme) : _null;
      } else {
        port = _null;
        host = port;
        userInfo = "";
      }
      path = P._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      if (typeof queryStart !== "number")
        return queryStart.$lt();
      if (typeof fragmentStart !== "number")
        return H.iae(fragmentStart);
      query = queryStart < fragmentStart ? P._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      if (typeof end !== "number")
        return H.iae(end);
      return P._Uri$_internal(scheme, userInfo, host, port, path, query, fragmentStart < end ? P._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    _Uri__Uri: function(path) {
      var scheme, userInfo, host, query, fragment, port, isFile, t1, hasAuthority, _null = null;
      H.stringTypeCheck(path);
      scheme = P._Uri__makeScheme(_null, 0, P._stringOrNullLength(_null));
      userInfo = P._Uri__makeUserInfo(_null, 0, P._stringOrNullLength(_null));
      host = P._Uri__makeHost(_null, 0, P._stringOrNullLength(_null), false);
      query = P._Uri__makeQuery(_null, 0, P._stringOrNullLength(_null), _null);
      fragment = P._Uri__makeFragment(_null, 0, P._stringOrNullLength(_null));
      port = P._Uri__makePort(_null, scheme);
      isFile = scheme === "file";
      if (host == null)
        t1 = J.get$isNotEmpty$asx(userInfo) || port != null || isFile;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = P._Uri__makePath(path, 0, P._stringOrNullLength(path), _null, scheme, hasAuthority);
      if (J.getInterceptor$asx(scheme).get$isEmpty(scheme) && t1 && !J.startsWith$1$s(path, "/"))
        path = P._Uri__normalizeRelativePath(path, C.JSString_methods.get$isNotEmpty(scheme) || hasAuthority);
      else
        path = P._Uri__removeDotSegments(path);
      return P._Uri$_internal(scheme, userInfo, t1 && J.startsWith$1$s(path, "//") ? "" : host, port, path, query, fragment);
    },
    _Uri__defaultPort: function(scheme) {
      H.stringTypeCheck(scheme);
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail: function(uri, index, message) {
      H.stringTypeCheck(uri);
      H.intTypeCheck(index);
      throw H.wrapException(P.FormatException$(H.stringTypeCheck(message), uri, index));
    },
    _Uri__checkNonWindowsPathReservedCharacters: function(segments, argumentError) {
      J.forEach$1$ax(H.assertSubtype(segments, "$isList", [P.String], "$asList"), new P._Uri__checkNonWindowsPathReservedCharacters_closure(H.boolTypeCheck(argumentError)));
    },
    _Uri__checkWindowsPathReservedCharacters: function(segments, argumentError, firstSegment) {
      var t1, t2;
      H.assertSubtype(segments, "$isList", [P.String], "$asList");
      H.boolTypeCheck(argumentError);
      for (t1 = J.get$iterator$ax(J.skip$1$ax(segments, H.intTypeCheck(firstSegment))); t1.moveNext$0();) {
        t2 = t1.get$current();
        if (J.contains$1$asx(t2, P.RegExp_RegExp('["*/:<>?\\\\|]', true)))
          if (argumentError)
            throw H.wrapException(P.ArgumentError$("Illegal character in path"));
          else
            throw H.wrapException(P.UnsupportedError$("Illegal character in path: " + t2));
      }
    },
    _Uri__checkWindowsDriveLetter: function(charCode, argumentError) {
      var t1,
        _s21_ = "Illegal drive letter ";
      H.intTypeCheck(charCode);
      H.boolTypeCheck(argumentError);
      if (typeof charCode !== "number")
        return H.iae(charCode);
      if (!(65 <= charCode && charCode <= 90))
        t1 = 97 <= charCode && charCode <= 122;
      else
        t1 = true;
      if (t1)
        return;
      if (argumentError)
        throw H.wrapException(P.ArgumentError$(C.JSString_methods.$add(_s21_, P.String_String$fromCharCode(charCode))));
      else
        throw H.wrapException(P.UnsupportedError$(C.JSString_methods.$add(_s21_, P.String_String$fromCharCode(charCode))));
    },
    _Uri__makePort: function(port, scheme) {
      H.intTypeCheck(port);
      H.stringTypeCheck(scheme);
      if (port != null && port === P._Uri__defaultPort(scheme))
        return;
      return port;
    },
    _Uri__makeHost: function(host, start, end, strictIPv6) {
      var t1, i;
      H.stringTypeCheck(host);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.boolTypeCheck(strictIPv6);
      if (host == null)
        return;
      if (start == end)
        return "";
      if (J.$eq$(C.JSString_methods.codeUnitAt$1(host, start), 91)) {
        if (typeof end !== "number")
          return end.$sub();
        t1 = end - 1;
        if (!J.$eq$(C.JSString_methods.codeUnitAt$1(host, t1), 93))
          P._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        if (typeof start !== "number")
          return start.$add();
        P.Uri_parseIPv6Address(host, start + 1, t1);
        return J.toLowerCase$0$s(C.JSString_methods.substring$2(host, start, end));
      }
      if (!strictIPv6) {
        i = start;
        while (true) {
          if (typeof i !== "number")
            return i.$lt();
          if (typeof end !== "number")
            return H.iae(end);
          if (!(i < end))
            break;
          if (J.$eq$(C.JSString_methods.codeUnitAt$1(host, i), 58)) {
            P.Uri_parseIPv6Address(host, start, end);
            return "[" + host + "]";
          }
          ++i;
        }
      }
      return P._Uri__normalizeRegName(host, start, end);
    },
    _Uri__isRegNameChar: function(char) {
      var t1;
      H.intTypeCheck(char);
      if (typeof char !== "number")
        return char.$lt();
      if (char < 127) {
        t1 = C.JSInt_methods._shrOtherPositive$1(char, 4);
        if (t1 >= 8)
          return H.ioore(C.List_qNA, t1);
        t1 = !J.$eq$(J.$and$bn(C.List_qNA[t1], 1 << (char & 15) >>> 0), 0);
      } else
        t1 = false;
      return t1;
    },
    _Uri__normalizeRegName: function(host, start, end) {
      var t1, index, sectionStart, buffer, isNormalized, char, replacement, t2, slice, sourceLength, tail;
      H.stringTypeCheck(host);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      t1 = J.getInterceptor$s(host);
      index = start;
      sectionStart = index;
      buffer = null;
      isNormalized = true;
      while (true) {
        if (typeof index !== "number")
          return index.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(index < end))
          break;
        c$0: {
          char = t1.codeUnitAt$1(host, index);
          if (char === 37) {
            replacement = P._Uri__normalizeEscape(host, index, true);
            t2 = replacement == null;
            if (t2 && isNormalized) {
              index += 3;
              break c$0;
            }
            if (buffer == null)
              buffer = P.StringBuffer$("");
            slice = C.JSString_methods.substring$2(host, sectionStart, index);
            buffer.write$1(!isNormalized ? J.toLowerCase$0$s(slice) : slice);
            if (t2) {
              replacement = C.JSString_methods.substring$2(host, index, index + 3);
              sourceLength = 3;
            } else if (replacement === "%") {
              replacement = "%25";
              sourceLength = 1;
            } else
              sourceLength = 3;
            buffer.write$1(replacement);
            index += sourceLength;
            sectionStart = index;
            isNormalized = true;
          } else if (P._Uri__isRegNameChar(char)) {
            if (isNormalized) {
              if (typeof char !== "number")
                return H.iae(char);
              t2 = 65 <= char && 90 >= char;
            } else
              t2 = false;
            if (t2) {
              if (buffer == null)
                buffer = P.StringBuffer$("");
              if (typeof sectionStart !== "number")
                return sectionStart.$lt();
              if (sectionStart < index) {
                buffer.write$1(C.JSString_methods.substring$2(host, sectionStart, index));
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else if (P._Uri__isGeneralDelimiter(char))
            P._Uri__fail(host, index, "Invalid character");
          else {
            if (typeof char !== "number")
              return char.$and();
            if ((char & 64512) === 55296 && index + 1 < end) {
              tail = C.JSString_methods.codeUnitAt$1(host, index + 1);
              if (typeof tail !== "number")
                return tail.$and();
              if ((tail & 64512) === 56320) {
                char = 65536 | (char & 1023) << 10 | tail & 1023;
                sourceLength = 2;
              } else
                sourceLength = 1;
            } else
              sourceLength = 1;
            if (buffer == null)
              buffer = P.StringBuffer$("");
            slice = C.JSString_methods.substring$2(host, sectionStart, index);
            buffer.write$1(!isNormalized ? J.toLowerCase$0$s(slice) : slice);
            buffer.write$1(P._Uri__escapeChar(char));
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return t1.substring$2(host, start, end);
      if (typeof sectionStart !== "number")
        return sectionStart.$lt();
      if (sectionStart < end) {
        slice = t1.substring$2(host, sectionStart, end);
        buffer.write$1(!isNormalized ? J.toLowerCase$0$s(slice) : slice);
      }
      return buffer.toString$0(0);
    },
    _Uri__makeScheme: function(scheme, start, end) {
      var i, containsUpperCase, codeUnit;
      H.stringTypeCheck(scheme);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (start == end)
        return "";
      if (!P._Uri__isAlphabeticCharacter(J.getInterceptor$s(scheme).codeUnitAt$1(scheme, start)))
        P._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      i = start;
      containsUpperCase = false;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        codeUnit = C.JSString_methods.codeUnitAt$1(scheme, i);
        if (!P._Uri__isSchemeCharacter(codeUnit))
          P._Uri__fail(scheme, i, "Illegal scheme character");
        if (typeof codeUnit !== "number")
          return H.iae(codeUnit);
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
        ++i;
      }
      scheme = C.JSString_methods.substring$2(scheme, start, end);
      return P._Uri__canonicalizeScheme(containsUpperCase ? J.toLowerCase$0$s(scheme) : scheme);
    },
    _Uri__canonicalizeScheme: function(scheme) {
      H.stringTypeCheck(scheme);
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo: function(userInfo, start, end) {
      H.stringTypeCheck(userInfo);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (userInfo == null)
        return "";
      return P._Uri__normalizeOrSubstring(userInfo, start, end, C.List_gRj, false);
    },
    _Uri__makePath: function(path, start, end, pathSegments, scheme, hasAuthority) {
      var t1, isFile, ensureLeadingSlash, t2, result;
      H.stringTypeCheck(path);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      t1 = P.String;
      H.assertSubtype(pathSegments, "$isIterable", [t1], "$asIterable");
      H.stringTypeCheck(scheme);
      H.boolTypeCheck(hasAuthority);
      isFile = scheme === "file";
      ensureLeadingSlash = isFile || hasAuthority;
      t2 = path == null;
      if (t2 && pathSegments == null)
        return isFile ? "/" : "";
      t2 = !t2;
      if (t2 && pathSegments != null)
        throw H.wrapException(P.ArgumentError$("Both path and pathSegments specified"));
      result = t2 ? P._Uri__normalizeOrSubstring(path, start, end, C.List_qg4, true) : J.join$1$ax(J.map$1$1$ax(pathSegments, new P._Uri__makePath_closure(), t1), "/");
      if (J.getInterceptor$asx(result).get$isEmpty(result)) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !C.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return P._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath: function(path, scheme, hasAuthority) {
      H.stringTypeCheck(path);
      H.stringTypeCheck(scheme);
      H.boolTypeCheck(hasAuthority);
      if (J.getInterceptor$asx(scheme).get$isEmpty(scheme) && !hasAuthority && !J.startsWith$1$s(path, "/"))
        return P._Uri__normalizeRelativePath(path, C.JSString_methods.get$isNotEmpty(scheme) || hasAuthority);
      return P._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery: function(query, start, end, queryParameters) {
      var result, t1 = {};
      H.stringTypeCheck(query);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(queryParameters, "$isMap", [P.String, null], "$asMap");
      if (query != null) {
        if (queryParameters != null)
          throw H.wrapException(P.ArgumentError$("Both query and queryParameters specified"));
        return P._Uri__normalizeOrSubstring(query, start, end, C.List_CVk, true);
      }
      if (queryParameters == null)
        return;
      result = P.StringBuffer$("");
      t1.separator = "";
      queryParameters.forEach$1(0, new P._Uri__makeQuery_closure(new P._Uri__makeQuery_writeParameter(t1, result)));
      return result.toString$0(0);
    },
    _Uri__makeFragment: function(fragment, start, end) {
      H.stringTypeCheck(fragment);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (fragment == null)
        return;
      return P._Uri__normalizeOrSubstring(fragment, start, end, C.List_CVk, true);
    },
    _Uri__normalizeEscape: function(source, index, lowerCase) {
      var t1, firstDigit, secondDigit, firstDigitValue, secondDigitValue, value;
      H.stringTypeCheck(source);
      H.intTypeCheck(index);
      H.boolTypeCheck(lowerCase);
      if (typeof index !== "number")
        return index.$add();
      t1 = index + 2;
      if (t1 >= source.length)
        return "%";
      firstDigit = J.getInterceptor$s(source).codeUnitAt$1(source, index + 1);
      secondDigit = C.JSString_methods.codeUnitAt$1(source, t1);
      firstDigitValue = H.hexDigitValue(firstDigit);
      secondDigitValue = H.hexDigitValue(secondDigit);
      if (typeof firstDigitValue !== "number")
        return firstDigitValue.$lt();
      if (firstDigitValue >= 0) {
        if (typeof secondDigitValue !== "number")
          return secondDigitValue.$lt();
        t1 = secondDigitValue < 0;
      } else
        t1 = true;
      if (t1)
        return "%";
      if (typeof secondDigitValue !== "number")
        return H.iae(secondDigitValue);
      value = firstDigitValue * 16 + secondDigitValue;
      if (P._Uri__isUnreservedChar(value))
        return P.String_String$fromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (typeof firstDigit !== "number")
        return firstDigit.$ge();
      if (firstDigit < 97) {
        if (typeof secondDigit !== "number")
          return secondDigit.$ge();
        t1 = secondDigit >= 97;
      } else
        t1 = true;
      if (t1)
        return J.toUpperCase$0$s(C.JSString_methods.substring$2(source, index, index + 3));
      return;
    },
    _Uri__escapeChar: function(char) {
      var t1, codeUnits, flag, encodedBytes, index, byte,
        _s16_ = "0123456789ABCDEF";
      H.intTypeCheck(char);
      if (typeof char !== "number")
        return char.$lt();
      if (char < 128) {
        t1 = new Array(3);
        t1.fixed$length = Array;
        codeUnits = H.setRuntimeTypeInfo(t1, [P.int]);
        C.JSArray_methods.$indexSet(codeUnits, 0, 37);
        C.JSArray_methods.$indexSet(codeUnits, 1, C.JSString_methods._codeUnitAt$1(_s16_, C.JSInt_methods._shrOtherPositive$1(char, 4)));
        C.JSArray_methods.$indexSet(codeUnits, 2, C.JSString_methods._codeUnitAt$1(_s16_, char & 15));
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        t1 = new Array(3 * encodedBytes);
        t1.fixed$length = Array;
        codeUnits = H.setRuntimeTypeInfo(t1, [P.int]);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = C.JSInt_methods.$shr(char, 6 * encodedBytes) & 63 | flag;
          C.JSArray_methods.$indexSet(codeUnits, index, 37);
          C.JSArray_methods.$indexSet(codeUnits, index + 1, C.JSString_methods._codeUnitAt$1(_s16_, byte >>> 4));
          C.JSArray_methods.$indexSet(codeUnits, index + 2, C.JSString_methods._codeUnitAt$1(_s16_, byte & 15));
          index += 3;
        }
      }
      return P.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring: function(component, start, end, charTable, escapeDelimiters) {
      var t1;
      H.stringTypeCheck(component);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      t1 = P._Uri__normalize(component, start, end, H.assertSubtype(charTable, "$isList", [P.int], "$asList"), H.boolTypeCheck(escapeDelimiters));
      return t1 == null ? J.substring$2$s(component, start, end) : t1;
    },
    _Uri__normalize: function(component, start, end, charTable, escapeDelimiters) {
      var t1, t2, t3, index, sectionStart, buffer, char, replacement, sourceLength, t4, tail;
      H.stringTypeCheck(component);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(charTable, "$isList", [P.int], "$asList");
      t1 = !H.boolTypeCheck(escapeDelimiters);
      t2 = J.getInterceptor$s(component);
      t3 = J.getInterceptor$asx(charTable);
      index = start;
      sectionStart = index;
      buffer = null;
      while (true) {
        if (typeof index !== "number")
          return index.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(index < end))
          break;
        c$0: {
          char = t2.codeUnitAt$1(component, index);
          if (typeof char !== "number")
            return char.$lt();
          if (char < 127 && !J.$eq$(J.$and$bn(t3.$index(charTable, C.JSInt_methods._shrOtherPositive$1(char, 4)), 1 << (char & 15) >>> 0), 0))
            ++index;
          else {
            if (char === 37) {
              replacement = P._Uri__normalizeEscape(component, index, false);
              if (replacement == null) {
                index += 3;
                break c$0;
              }
              if ("%" === replacement) {
                replacement = "%25";
                sourceLength = 1;
              } else
                sourceLength = 3;
            } else if (t1 && P._Uri__isGeneralDelimiter(char)) {
              P._Uri__fail(component, index, "Invalid character");
              replacement = null;
              sourceLength = null;
            } else {
              if ((char & 64512) === 55296) {
                t4 = index + 1;
                if (t4 < end) {
                  tail = C.JSString_methods.codeUnitAt$1(component, t4);
                  if (typeof tail !== "number")
                    return tail.$and();
                  if ((tail & 64512) === 56320) {
                    char = 65536 | (char & 1023) << 10 | tail & 1023;
                    sourceLength = 2;
                  } else
                    sourceLength = 1;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              replacement = P._Uri__escapeChar(char);
            }
            if (buffer == null)
              buffer = P.StringBuffer$("");
            buffer.write$1(C.JSString_methods.substring$2(component, sectionStart, index));
            buffer.write$1(replacement);
            if (typeof sourceLength !== "number")
              return H.iae(sourceLength);
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return;
      if (typeof sectionStart !== "number")
        return sectionStart.$lt();
      if (sectionStart < end)
        buffer.write$1(t2.substring$2(component, sectionStart, end));
      return buffer.toString$0(0);
    },
    _Uri__isSchemeCharacter: function(ch) {
      var t1;
      H.intTypeCheck(ch);
      if (typeof ch !== "number")
        return ch.$lt();
      if (ch < 128) {
        t1 = C.JSInt_methods._shrOtherPositive$1(ch, 4);
        if (t1 >= 8)
          return H.ioore(C.List_JYB, t1);
        t1 = !J.$eq$(J.$and$bn(C.List_JYB[t1], 1 << (ch & 15) >>> 0), 0);
      } else
        t1 = false;
      return t1;
    },
    _Uri__isGeneralDelimiter: function(ch) {
      var t1;
      H.intTypeCheck(ch);
      if (typeof ch !== "number")
        return ch.$le();
      if (ch <= 93) {
        t1 = C.JSInt_methods._shrOtherPositive$1(ch, 4);
        if (t1 >= 8)
          return H.ioore(C.List_2Vk, t1);
        t1 = !J.$eq$(J.$and$bn(C.List_2Vk[t1], 1 << (ch & 15) >>> 0), 0);
      } else
        t1 = false;
      return t1;
    },
    _Uri__mayContainDotSegments: function(path) {
      H.stringTypeCheck(path);
      if (J.getInterceptor$s(path).startsWith$1(path, "."))
        return true;
      return C.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments: function(path) {
      var t1, output, appendSlash, t2;
      H.stringTypeCheck(path);
      if (!P._Uri__mayContainDotSegments(path))
        return path;
      t1 = P.String;
      output = H.setRuntimeTypeInfo([], [t1]);
      for (t1 = C.JSArray_methods.get$iterator(H.setRuntimeTypeInfo(path.split("/"), [t1])), appendSlash = false; t1.moveNext$0();) {
        t2 = t1.get$current();
        if (t2 === "..") {
          if (C.JSArray_methods.get$isNotEmpty(output)) {
            if (0 >= output.length)
              return H.ioore(output, -1);
            output.pop();
            if (C.JSArray_methods.get$isEmpty(output))
              C.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else if ("." === t2)
          appendSlash = true;
        else {
          C.JSArray_methods.add$1(output, t2);
          appendSlash = false;
        }
      }
      if (appendSlash)
        C.JSArray_methods.add$1(output, "");
      return C.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath: function(path, allowScheme) {
      var t1, output, appendSlash, t2;
      H.stringTypeCheck(path);
      H.boolTypeCheck(allowScheme);
      if (!P._Uri__mayContainDotSegments(path))
        return !allowScheme ? P._Uri__escapeScheme(path) : path;
      t1 = P.String;
      output = H.setRuntimeTypeInfo([], [t1]);
      for (t1 = C.JSArray_methods.get$iterator(H.setRuntimeTypeInfo(path.split("/"), [t1])), appendSlash = false; t1.moveNext$0();) {
        t2 = t1.get$current();
        if (".." === t2)
          if (!C.JSArray_methods.get$isEmpty(output) && !J.$eq$(C.JSArray_methods.get$last(output), "..")) {
            if (0 >= output.length)
              return H.ioore(output, -1);
            output.pop();
            appendSlash = true;
          } else {
            C.JSArray_methods.add$1(output, "..");
            appendSlash = false;
          }
        else if ("." === t2)
          appendSlash = true;
        else {
          C.JSArray_methods.add$1(output, t2);
          appendSlash = false;
        }
      }
      if (!C.JSArray_methods.get$isEmpty(output)) {
        t1 = output.length;
        if (t1 === 1) {
          if (0 >= t1)
            return H.ioore(output, 0);
          t1 = J.get$isEmpty$asx(output[0]);
        } else
          t1 = false;
      } else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || J.$eq$(C.JSArray_methods.get$last(output), ".."))
        C.JSArray_methods.add$1(output, "");
      if (!allowScheme) {
        if (0 >= output.length)
          return H.ioore(output, 0);
        C.JSArray_methods.$indexSet(output, 0, P._Uri__escapeScheme(output[0]));
      }
      return C.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme: function(path) {
      var t1, i, char, t2;
      H.stringTypeCheck(path);
      t1 = path.length;
      if (t1 >= 2 && P._Uri__isAlphabeticCharacter(J._codeUnitAt$1$s(path, 0)))
        for (i = 1; i < t1; ++i) {
          char = C.JSString_methods._codeUnitAt$1(path, i);
          if (char === 58)
            return H.S(C.JSString_methods.substring$2(path, 0, i)) + "%3A" + H.S(C.JSString_methods.substring$1(path, i + 1));
          if (typeof char !== "number")
            return char.$gt();
          if (char <= 127) {
            t2 = C.JSInt_methods._shrOtherPositive$1(char, 4);
            if (t2 >= 8)
              return H.ioore(C.List_JYB, t2);
            t2 = J.$eq$(J.$and$bn(C.List_JYB[t2], 1 << (char & 15) >>> 0), 0);
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__toWindowsFilePath: function(uri) {
      var segments, t1, hasDriveLetter, result, host;
      H.interceptedTypeCheck(uri, "$isUri");
      segments = uri.get$pathSegments();
      t1 = J.getInterceptor$asx(segments);
      if (J.$gt$n(t1.get$length(segments), 0) && J.$eq$(J.get$length$asx(t1.$index(segments, 0)), 2) && J.$eq$(J.codeUnitAt$1$s(t1.$index(segments, 0), 1), 58)) {
        P._Uri__checkWindowsDriveLetter(J.codeUnitAt$1$s(t1.$index(segments, 0), 0), false);
        P._Uri__checkWindowsPathReservedCharacters(segments, false, 1);
        hasDriveLetter = true;
      } else {
        P._Uri__checkWindowsPathReservedCharacters(segments, false, 0);
        hasDriveLetter = false;
      }
      result = P.StringBuffer$("");
      if (uri.get$hasAbsolutePath() && !hasDriveLetter)
        result.write$1("\\");
      if (uri.get$hasAuthority()) {
        host = uri.get$host(uri);
        if (J.get$isNotEmpty$asx(host)) {
          result.write$1("\\");
          result.write$1(host);
          result.write$1("\\");
        }
      }
      result.writeAll$2(segments, "\\");
      if (hasDriveLetter && J.$eq$(t1.get$length(segments), 1))
        result.write$1("\\");
      return result.toString$0(0);
    },
    _Uri__hexCharPairToByte: function(s, pos) {
      var t1, byte, i, charCode;
      H.stringTypeCheck(s);
      H.intTypeCheck(pos);
      for (t1 = J.getInterceptor$s(s), byte = 0, i = 0; i < 2; ++i) {
        if (typeof pos !== "number")
          return pos.$add();
        charCode = t1.codeUnitAt$1(s, pos + i);
        if (typeof charCode !== "number")
          return H.iae(charCode);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode = (charCode | 32) >>> 0;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw H.wrapException(P.ArgumentError$("Invalid URL encoding"));
        }
      }
      return byte;
    },
    _Uri__uriDecode: function(text, start, end, encoding, plusToSpace) {
      var simple, t1, i, codeUnit, t2, bytes;
      H.stringTypeCheck(text);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.interceptedTypeCheck(encoding, "$isEncoding");
      H.boolTypeCheck(plusToSpace);
      t1 = J.getInterceptor$s(text);
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end)) {
          simple = true;
          break;
        }
        codeUnit = t1.codeUnitAt$1(text, i);
        if (typeof codeUnit !== "number")
          return codeUnit.$gt();
        if (codeUnit <= 127)
          if (codeUnit !== 37)
            t2 = plusToSpace && codeUnit === 43;
          else
            t2 = true;
        else
          t2 = true;
        if (t2) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple)
        if (C.C_Utf8Codec === encoding || C.C_Latin1Codec === encoding || C.C_AsciiCodec === encoding)
          return t1.substring$2(text, start, end);
        else
          bytes = J.get$codeUnits$s(t1.substring$2(text, start, end));
      else {
        bytes = H.setRuntimeTypeInfo([], [P.int]);
        i = start;
        while (true) {
          if (typeof i !== "number")
            return i.$lt();
          if (!(i < end))
            break;
          codeUnit = t1.codeUnitAt$1(text, i);
          if (typeof codeUnit !== "number")
            return codeUnit.$gt();
          if (codeUnit > 127)
            throw H.wrapException(P.ArgumentError$("Illegal percent encoding in URI"));
          if (codeUnit === 37) {
            if (i + 3 > text.length)
              throw H.wrapException(P.ArgumentError$("Truncated URI"));
            C.JSArray_methods.add$1(bytes, P._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else if (plusToSpace && codeUnit === 43)
            C.JSArray_methods.add$1(bytes, 32);
          else
            C.JSArray_methods.add$1(bytes, codeUnit);
          ++i;
        }
      }
      return encoding.decode$1(bytes);
    },
    _Uri__isAlphabeticCharacter: function(codeUnit) {
      var lowerCase;
      H.intTypeCheck(codeUnit);
      if (typeof codeUnit !== "number")
        return codeUnit.$or();
      lowerCase = (codeUnit | 32) >>> 0;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    _Uri__isUnreservedChar: function(char) {
      var t1;
      H.intTypeCheck(char);
      if (typeof char !== "number")
        return char.$lt();
      if (char < 127) {
        t1 = C.JSInt_methods._shrOtherPositive$1(char, 4);
        if (t1 >= 8)
          return H.ioore(C.List_nxB, t1);
        t1 = !J.$eq$(J.$and$bn(C.List_nxB[t1], 1 << (char & 15) >>> 0), 0);
      } else
        t1 = false;
      return t1;
    },
    UriData$_: function(_text, _separatorIndices, _uriCache) {
      return new P.UriData(_text, _separatorIndices, _uriCache, []);
    },
    UriData__parse: function(text, start, sourceUri) {
      var indices, t1, i, slashIndex, char, t2, equalsIndex, lastSeparator, data,
        _s17_ = "Invalid MIME type";
      H.stringTypeCheck(text);
      H.intTypeCheck(start);
      H.interceptedTypeCheck(sourceUri, "$isUri");
      if (typeof start !== "number")
        return start.$sub();
      indices = H.setRuntimeTypeInfo([start - 1], [P.int]);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = C.JSString_methods.codeUnitAt$1(text, i);
        t2 = J.getInterceptor$(char);
        if (t2.$eq(char, 44) || t2.$eq(char, 59))
          break;
        if (t2.$eq(char, 47)) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw H.wrapException(P.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw H.wrapException(P.FormatException$(_s17_, text, i));
      for (; !J.$eq$(char, 44);) {
        C.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          char = C.JSString_methods.codeUnitAt$1(text, i);
          t2 = J.getInterceptor$(char);
          if (t2.$eq(char, 61)) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (t2.$eq(char, 59) || t2.$eq(char, 44))
            break;
        }
        if (equalsIndex >= 0)
          C.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = C.JSArray_methods.get$last(indices);
          if (J.$eq$(char, 44)) {
            if (typeof lastSeparator !== "number")
              return lastSeparator.$add();
            t2 = i !== lastSeparator + 7 || !C.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1);
          } else
            t2 = true;
          if (t2)
            throw H.wrapException(P.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      C.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if (C.JSInt_methods.get$isOdd(indices.length))
        text = C.Base64Codec_Base64Encoder_false.normalize$3(text, t2, t1);
      else {
        data = P._Uri__normalize(text, t2, t1, C.List_CVk, true);
        if (data != null)
          text = C.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return P.UriData$_(text, indices, sourceUri);
    },
    _createTables: function() {
      var _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "?", _s1_3 = "#",
        tables = P.List_List$generate(22, new P._createTables_closure(), true, P.Uint8List),
        t1 = new P._createTables_build(tables),
        t2 = new P._createTables_setChars(),
        t3 = new P._createTables_setRange(),
        b = H.interceptedTypeCheck(t1.call$2(0, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 14);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 3);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(14, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 15);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(15, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, "%", 225);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(1, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(2, 235), "$isUint8List");
      t2.call$3(b, _s77_, 139);
      t2.call$3(b, _s1_1, 131);
      t2.call$3(b, _s1_, 146);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(3, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 68);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(4, 229), "$isUint8List");
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "[", 232);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(5, 229), "$isUint8List");
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(6, 231), "$isUint8List");
      t3.call$3(b, "19", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(7, 231), "$isUint8List");
      t3.call$3(b, "09", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      t2.call$3(H.interceptedTypeCheck(t1.call$2(8, 8), "$isUint8List"), "]", 5);
      b = H.interceptedTypeCheck(t1.call$2(9, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 16);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(16, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 17);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(17, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(10, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(18, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 19);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(19, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(11, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(12, 236), "$isUint8List");
      t2.call$3(b, _s77_, 12);
      t2.call$3(b, _s1_2, 12);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(13, 237), "$isUint8List");
      t2.call$3(b, _s77_, 13);
      t2.call$3(b, _s1_2, 13);
      t3.call$3(H.interceptedTypeCheck(t1.call$2(20, 245), "$isUint8List"), "az", 21);
      b = H.interceptedTypeCheck(t1.call$2(21, 245), "$isUint8List");
      t3.call$3(b, "az", 21);
      t3.call$3(b, "09", 21);
      t2.call$3(b, "+-.", 21);
      return tables;
    },
    _scan: function(uri, start, end, state, indices) {
      var tables, t1, t2, t3, i, table, char, transition;
      H.stringTypeCheck(uri);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.intTypeCheck(state);
      H.assertSubtype(indices, "$isList", [P.int], "$asList");
      tables = $.$get$_scannerTables();
      t1 = J.getInterceptor$ax(indices);
      t2 = J.getInterceptor$asx(tables);
      t3 = J.getInterceptor$s(uri);
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        table = t2.$index(tables, state);
        char = J.$xor$n(t3.codeUnitAt$1(uri, i), 96);
        if (typeof char !== "number")
          return char.$gt();
        if (char > 95)
          char = 31;
        if (char < 0 || char >= table.length)
          return H.ioore(table, char);
        transition = table[char];
        if (typeof transition !== "number")
          return transition.$and();
        state = transition & 31;
        t1.$indexSet(indices, C.JSInt_methods._shrOtherPositive$1(transition, 5), i);
        ++i;
      }
      return state;
    },
    _SimpleUri$: function(_uri, _schemeEnd, _hostStart, _portStart, _pathStart, _queryStart, _fragmentStart, _schemeCache) {
      return new P._SimpleUri(_uri, _schemeEnd, _hostStart, _portStart, _pathStart, _queryStart, _fragmentStart, _schemeCache, []);
    },
    _DataUri$: function(_data, path, query) {
      var _null = null;
      return new P._DataUri("data", _null, _null, _null, path, query, _null, []);
    },
    _startsWithData: function(text, start) {
      var delta, t1, t2, t3, t4;
      H.stringTypeCheck(text);
      H.intTypeCheck(start);
      if (typeof start !== "number")
        return start.$add();
      delta = J.$mul$ns(J.$xor$n(J.getInterceptor$s(text).codeUnitAt$1(text, start + 4), 58), 3);
      t1 = J.$xor$n(C.JSString_methods.codeUnitAt$1(text, start), 100);
      if (typeof delta !== "number")
        return delta.$or();
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = J.$xor$n(C.JSString_methods.codeUnitAt$1(text, start + 1), 97);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = J.$xor$n(C.JSString_methods.codeUnitAt$1(text, start + 2), 116);
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = J.$xor$n(C.JSString_methods.codeUnitAt$1(text, start + 3), 97);
      if (typeof t4 !== "number")
        return H.iae(t4);
      return (delta | t1 | t2 | t3 | t4) >>> 0;
    },
    _stringOrNullLength: function(s) {
      H.stringTypeCheck(s);
      return s == null ? 0 : s.length;
    },
    _symbolMapToStringMap_closure: function _symbolMapToStringMap_closure() {
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.sb = t1;
      this.$ti = t2;
    },
    _CompileTimeError: function _CompileTimeError() {
    },
    _DuplicatedFieldInitializerError: function _DuplicatedFieldInitializerError() {
    },
    _BigIntImpl: function _BigIntImpl(t0, t1, t2, t3) {
      var _ = this;
      _._isNegative = t0;
      _._digits = t1;
      _._used = t2;
      _.$ti = t3;
    },
    _BigIntImpl_hashCode_combine: function _BigIntImpl_hashCode_combine(t0) {
      this.$ti = t0;
    },
    _BigIntImpl_hashCode_finish: function _BigIntImpl_hashCode_finish(t0) {
      this.$ti = t0;
    },
    _BigIntImpl_toDouble_readBits: function _BigIntImpl_toDouble_readBits(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.$ti = t2;
    },
    _BigIntImpl_toDouble_roundUp: function _BigIntImpl_toDouble_roundUp(t0, t1) {
      this.resultBits = t0;
      this.$ti = t1;
    },
    _BigIntReduction: function _BigIntReduction() {
    },
    _BigIntClassic: function _BigIntClassic() {
    },
    Deprecated: function Deprecated() {
    },
    _Override: function _Override() {
    },
    Provisional: function Provisional() {
    },
    _Proxy0: function _Proxy0() {
    },
    pragma: function pragma() {
    },
    BigInt: function BigInt() {
    },
    bool: function bool(t0) {
      this.$ti = t0;
    },
    Comparable: function Comparable() {
    },
    DateTime: function DateTime(t0, t1, t2) {
      this._value = t0;
      this.isUtc = t1;
      this.$ti = t2;
    },
    double: function double() {
    },
    Duration: function Duration(t0, t1) {
      this._duration = t0;
      this.$ti = t1;
    },
    Duration_toString_sixDigits: function Duration_toString_sixDigits(t0) {
      this.$ti = t0;
    },
    Duration_toString_twoDigits: function Duration_toString_twoDigits(t0) {
      this.$ti = t0;
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError() {
    },
    TypeError: function TypeError() {
    },
    CastError: function CastError() {
    },
    NullThrownError: function NullThrownError(t0) {
      this.$ti = t0;
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3, t4) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
      _.$ti = t4;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
      _.$ti = t6;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
      _.$ti = t5;
    },
    FallThroughError: function FallThroughError() {
    },
    AbstractClassInstantiationError: function AbstractClassInstantiationError() {
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._core$_receiver = t0;
      _._memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
      _._existingArgumentNames = t4;
      _.$ti = t5;
    },
    UnsupportedError: function UnsupportedError(t0, t1) {
      this.message = t0;
      this.$ti = t1;
    },
    UnimplementedError: function UnimplementedError(t0, t1) {
      this.message = t0;
      this.$ti = t1;
    },
    StateError: function StateError(t0, t1) {
      this.message = t0;
      this.$ti = t1;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0, t1) {
      this.modifiedObject = t0;
      this.$ti = t1;
    },
    OutOfMemoryError: function OutOfMemoryError(t0) {
      this.$ti = t0;
    },
    StackOverflowError: function StackOverflowError(t0) {
      this.$ti = t0;
    },
    CyclicInitializationError: function CyclicInitializationError(t0, t1) {
      this.variableName = t0;
      this.$ti = t1;
    },
    Exception: function Exception() {
    },
    _Exception: function _Exception(t0, t1) {
      this.message = t0;
      this.$ti = t1;
    },
    FormatException: function FormatException(t0, t1, t2, t3) {
      var _ = this;
      _.message = t0;
      _.source = t1;
      _.offset = t2;
      _.$ti = t3;
    },
    IntegerDivisionByZeroException: function IntegerDivisionByZeroException(t0) {
      this.$ti = t0;
    },
    Expando: function Expando() {
    },
    Function: function Function() {
    },
    int: function int() {
    },
    Invocation: function Invocation() {
    },
    _Invocation: function _Invocation() {
    },
    Iterable: function Iterable() {
    },
    _GeneratorIterable: function _GeneratorIterable() {
    },
    BidirectionalIterator: function BidirectionalIterator() {
    },
    Iterator: function Iterator() {
    },
    List: function List() {
    },
    Map: function Map() {
    },
    MapEntry: function MapEntry() {
    },
    Null: function Null(t0) {
      this.$ti = t0;
    },
    num: function num() {
    },
    Object: function Object(t0) {
      this.$ti = t0;
    },
    Pattern: function Pattern() {
    },
    Match: function Match() {
    },
    RegExp: function RegExp() {
    },
    Set: function Set() {
    },
    Sink: function Sink() {
    },
    StackTrace: function StackTrace() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    Stopwatch: function Stopwatch() {
    },
    String: function String() {
    },
    Runes: function Runes() {
    },
    RuneIterator: function RuneIterator() {
    },
    StringBuffer: function StringBuffer(t0, t1) {
      this._contents = t0;
      this.$ti = t1;
    },
    StringSink: function StringSink() {
    },
    Symbol0: function Symbol0() {
    },
    Type: function Type() {
    },
    Uri: function Uri() {
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0, t1) {
      this.host = t0;
      this.$ti = t1;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0, t1) {
      this.host = t0;
      this.$ti = t1;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1, t2) {
      this.error = t0;
      this.host = t1;
      this.$ti = t2;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _._hashCodeCache = _._text = _._pathSegments = null;
      _.$ti = t7;
    },
    _Uri__Uri$notSimple_closure: function _Uri__Uri$notSimple_closure(t0, t1, t2) {
      this.uri = t0;
      this.portStart = t1;
      this.$ti = t2;
    },
    _Uri__checkNonWindowsPathReservedCharacters_closure: function _Uri__checkNonWindowsPathReservedCharacters_closure(t0, t1) {
      this.argumentError = t0;
      this.$ti = t1;
    },
    _Uri__makePath_closure: function _Uri__makePath_closure(t0) {
      this.$ti = t0;
    },
    _Uri__makeQuery_writeParameter: function _Uri__makeQuery_writeParameter(t0, t1, t2) {
      this._box_0 = t0;
      this.result = t1;
      this.$ti = t2;
    },
    _Uri__makeQuery_closure: function _Uri__makeQuery_closure(t0, t1) {
      this.writeParameter = t0;
      this.$ti = t1;
    },
    UriData: function UriData(t0, t1, t2, t3) {
      var _ = this;
      _._text = t0;
      _._separatorIndices = t1;
      _._uriCache = t2;
      _.$ti = t3;
    },
    _createTables_closure: function _createTables_closure(t0) {
      this.$ti = t0;
    },
    _createTables_build: function _createTables_build(t0, t1) {
      this.tables = t0;
      this.$ti = t1;
    },
    _createTables_setChars: function _createTables_setChars(t0) {
      this.$ti = t0;
    },
    _createTables_setRange: function _createTables_setRange(t0) {
      this.$ti = t0;
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
      _.$ti = t8;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _._hashCodeCache = _._text = _._pathSegments = null;
      _.$ti = t7;
    },
    _FakeUserTag: function _FakeUserTag() {
    },
    ServiceExtensionResponse: function ServiceExtensionResponse() {
    },
    UserTag: function UserTag() {
    },
    Metric: function Metric() {
    },
    Gauge: function Gauge() {
    },
    Counter: function Counter() {
    },
    Metrics: function Metrics() {
    },
    ServiceProtocolInfo: function ServiceProtocolInfo() {
    },
    Service: function Service() {
    },
    Flow: function Flow() {
    },
    Timeline: function Timeline() {
    },
    TimelineTask: function TimelineTask() {
    },
    _AsyncBlock: function _AsyncBlock() {
    },
    _SyncBlock: function _SyncBlock() {
    },
    convertNativeToDart_SerializedScriptValue: function(object) {
      return P.convertNativeToDart_AcceptStructuredClone(object, true);
    },
    convertDartToNative_Dictionary: function(dict) {
      var object;
      H.interceptedTypeCheck(dict, "$isMap");
      if (dict == null)
        return;
      object = {};
      dict.forEach$1(0, new P.convertDartToNative_Dictionary_closure(object));
      return object;
    },
    convertNativeToDart_DateTime: function(date) {
      return P.DateTime$fromMillisecondsSinceEpoch(date.getTime(), true);
    },
    convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
      return P._AcceptStructuredCloneDart2Js$().convertNativeToDart_AcceptStructuredClone$2$mustCopy(object, mustCopy);
    },
    _AcceptStructuredCloneDart2Js$: function() {
      return new P._AcceptStructuredCloneDart2Js([], [], []);
    },
    isJavaScriptDate: function(value) {
      return value instanceof Date;
    },
    isJavaScriptRegExp: function(value) {
      return value instanceof RegExp;
    },
    isJavaScriptArray: function(value) {
      return value instanceof Array;
    },
    isJavaScriptSimpleObject: function(value) {
      var proto = Object.getPrototypeOf(value);
      return proto === Object.prototype || proto === null;
    },
    isJavaScriptPromise: function(value) {
      return typeof Promise != "undefined" && value instanceof Promise;
    },
    convertNativePromiseToDartFuture: function(promise) {
      var completer = P.Completer_Completer(null);
      promise.then(H.convertDartClosureToJS(new P.convertNativePromiseToDartFuture_closure(completer), 1))["catch"](H.convertDartClosureToJS(new P.convertNativePromiseToDartFuture_closure0(completer), 1));
      return completer.get$future();
    },
    _StructuredClone: function _StructuredClone() {
    },
    _AcceptStructuredClone: function _AcceptStructuredClone() {
    },
    _AcceptStructuredClone_walk_closure: function _AcceptStructuredClone_walk_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.$ti = t2;
    },
    ContextAttributes: function ContextAttributes() {
    },
    _TypedImageData: function _TypedImageData() {
    },
    convertDartToNative_Dictionary_closure: function convertDartToNative_Dictionary_closure(t0, t1) {
      this.object = t0;
      this.$ti = t1;
    },
    _StructuredCloneDart2Js: function _StructuredCloneDart2Js() {
    },
    _AcceptStructuredCloneDart2Js: function _AcceptStructuredCloneDart2Js(t0, t1, t2) {
      var _ = this;
      _.values = t0;
      _.copies = t1;
      _.mustCopy = false;
      _.$ti = t2;
    },
    convertNativePromiseToDartFuture_closure: function convertNativePromiseToDartFuture_closure(t0, t1) {
      this.completer = t0;
      this.$ti = t1;
    },
    convertNativePromiseToDartFuture_closure0: function convertNativePromiseToDartFuture_closure0(t0, t1) {
      this.completer = t0;
      this.$ti = t1;
    },
    CssClassSetImpl: function CssClassSetImpl() {
    },
    Device: function Device() {
    },
    FilteredElementList: function FilteredElementList() {
    },
    Lists: function Lists() {
    },
    NodeListWrapper: function NodeListWrapper() {
    },
    _KeyRangeFactoryProvider: function _KeyRangeFactoryProvider() {
    },
    Cursor: function Cursor() {
    },
    CursorWithValue: function CursorWithValue() {
    },
    Database: function Database() {
    },
    IdbFactory: function IdbFactory() {
    },
    Index: function Index() {
    },
    KeyRange: function KeyRange() {
    },
    ObjectStore: function ObjectStore() {
    },
    Observation: function Observation() {
    },
    Observer: function Observer() {
    },
    ObserverChanges: function ObserverChanges() {
    },
    OpenDBRequest: function OpenDBRequest() {
    },
    Request0: function Request0() {
    },
    Transaction: function Transaction() {
    },
    VersionChangeEvent: function VersionChangeEvent() {
    },
    BytesBuilder: function BytesBuilder() {
    },
    _CopyingBytesBuilder0: function _CopyingBytesBuilder0() {
    },
    _BytesBuilder: function _BytesBuilder() {
    },
    IOException: function IOException() {
    },
    OSError: function OSError() {
    },
    _BufferAndStart: function _BufferAndStart() {
    },
    _IOCrypto: function _IOCrypto() {
    },
    ZLibOption: function ZLibOption() {
    },
    ZLibCodec: function ZLibCodec() {
    },
    GZipCodec: function GZipCodec() {
    },
    ZLibEncoder: function ZLibEncoder() {
    },
    ZLibDecoder: function ZLibDecoder() {
    },
    RawZLibFilter: function RawZLibFilter() {
    },
    _BufferSink: function _BufferSink() {
    },
    _ZLibEncoderSink: function _ZLibEncoderSink() {
    },
    _ZLibDecoderSink: function _ZLibDecoderSink() {
    },
    _FilterSink: function _FilterSink() {
    },
    Directory: function Directory() {
    },
    _Directory: function _Directory() {
    },
    _AsyncDirectoryListerOps: function _AsyncDirectoryListerOps() {
    },
    _AsyncDirectoryLister: function _AsyncDirectoryLister() {
    },
    _EmbedderConfig: function _EmbedderConfig() {
    },
    _EventHandler: function _EventHandler() {
    },
    FileMode: function FileMode() {
    },
    FileLock: function FileLock() {
    },
    File0: function File0() {
    },
    RandomAccessFile: function RandomAccessFile() {
    },
    FileSystemException: function FileSystemException() {
    },
    _FileStream: function _FileStream() {
    },
    _FileStreamConsumer: function _FileStreamConsumer() {
    },
    _File: function _File() {
    },
    _RandomAccessFileOps: function _RandomAccessFileOps() {
    },
    _RandomAccessFile: function _RandomAccessFile() {
    },
    FileSystemEntityType: function FileSystemEntityType() {
    },
    FileStat: function FileStat() {
    },
    FileSystemEntity: function FileSystemEntity() {
    },
    FileSystemEvent: function FileSystemEvent() {
    },
    FileSystemCreateEvent: function FileSystemCreateEvent() {
    },
    FileSystemModifyEvent: function FileSystemModifyEvent() {
    },
    FileSystemDeleteEvent: function FileSystemDeleteEvent() {
    },
    FileSystemMoveEvent: function FileSystemMoveEvent() {
    },
    _FileSystemWatcher: function _FileSystemWatcher() {
    },
    _IOResourceInfo: function _IOResourceInfo() {
    },
    _ReadWriteResourceInfo: function _ReadWriteResourceInfo() {
    },
    _FileResourceInfo: function _FileResourceInfo() {
    },
    _ProcessResourceInfo: function _ProcessResourceInfo() {
    },
    _SocketResourceInfo: function _SocketResourceInfo() {
    },
    _IOService: function _IOService() {
    },
    IOSink: function IOSink() {
    },
    _StreamSinkImpl0: function _StreamSinkImpl0() {
    },
    _IOSinkImpl0: function _IOSinkImpl0() {
    },
    Link: function Link() {
    },
    _Link: function _Link() {
    },
    _Namespace: function _Namespace() {
    },
    IOOverrides: function IOOverrides() {
    },
    _IOOverridesScope: function _IOOverridesScope() {
    },
    Platform0: function Platform0() {
    },
    _Platform: function _Platform() {
    },
    _CaseInsensitiveStringMap: function _CaseInsensitiveStringMap() {
    },
    _ProcessUtils: function _ProcessUtils() {
    },
    ProcessInfo: function ProcessInfo() {
    },
    ProcessStartMode: function ProcessStartMode() {
    },
    Process: function Process() {
    },
    ProcessResult: function ProcessResult() {
    },
    ProcessSignal: function ProcessSignal() {
    },
    SignalException: function SignalException() {
    },
    ProcessException: function ProcessException() {
    },
    SecureServerSocket: function SecureServerSocket() {
    },
    RawSecureServerSocket: function RawSecureServerSocket() {
    },
    SecureSocket: function SecureSocket() {
    },
    RawSecureSocket: function RawSecureSocket() {
    },
    X509Certificate: function X509Certificate() {
    },
    _FilterStatus: function _FilterStatus() {
    },
    _RawSecureSocket: function _RawSecureSocket() {
    },
    _ExternalBuffer: function _ExternalBuffer() {
    },
    _SecureFilter: function _SecureFilter() {
    },
    TlsException: function TlsException() {
    },
    HandshakeException: function HandshakeException() {
    },
    CertificateException: function CertificateException() {
    },
    SecurityContext: function SecurityContext() {
    },
    _ServiceObject0: function _ServiceObject0() {
    },
    InternetAddressType: function InternetAddressType() {
    },
    InternetAddress: function InternetAddress() {
    },
    NetworkInterface: function NetworkInterface() {
    },
    RawServerSocket: function RawServerSocket() {
    },
    ServerSocket: function ServerSocket() {
    },
    SocketDirection: function SocketDirection() {
    },
    SocketOption: function SocketOption() {
    },
    _RawSocketOptions: function _RawSocketOptions() {
    },
    RawSocketOption: function RawSocketOption() {
    },
    RawSocketEvent: function RawSocketEvent() {
    },
    ConnectionTask: function ConnectionTask() {
    },
    RawSocket: function RawSocket() {
    },
    Socket: function Socket() {
    },
    Datagram: function Datagram() {
    },
    RawDatagramSocket: function RawDatagramSocket() {
    },
    SocketException: function SocketException() {
    },
    _StdStream: function _StdStream() {
    },
    Stdin: function Stdin() {
    },
    Stdout: function Stdout() {
    },
    StdoutException: function StdoutException() {
    },
    StdinException: function StdinException() {
    },
    _StdConsumer: function _StdConsumer() {
    },
    _StdSink: function _StdSink() {
    },
    StdioType: function StdioType() {
    },
    _StdIOUtils: function _StdIOUtils() {
    },
    SystemEncoding: function SystemEncoding() {
    },
    _WindowsCodePageEncoder: function _WindowsCodePageEncoder() {
    },
    _WindowsCodePageEncoderSink: function _WindowsCodePageEncoderSink() {
    },
    _WindowsCodePageDecoder: function _WindowsCodePageDecoder() {
    },
    _WindowsCodePageDecoderSink: function _WindowsCodePageDecoderSink() {
    },
    RawSynchronousSocket: function RawSynchronousSocket() {
    },
    _ReceivePortImpl: function _ReceivePortImpl() {
    },
    Capability: function Capability() {
    },
    IsolateSpawnException: function IsolateSpawnException() {
    },
    Isolate: function Isolate() {
    },
    SendPort: function SendPort() {
    },
    ReceivePort: function ReceivePort() {
    },
    RawReceivePort: function RawReceivePort() {
    },
    RemoteError: function RemoteError() {
    },
    _convertDartFunctionFast: function(f) {
      var existing, ret;
      H.interceptedTypeCheck(f, "$isFunction");
      existing = f.$dart_jsFunction;
      if (existing != null)
        return existing;
      ret = function(_call, f) {
        return function() {
          return _call(f, Array.prototype.slice.apply(arguments));
        };
      }(P._callDartFunctionFast, f);
      ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      f.$dart_jsFunction = ret;
      return ret;
    },
    _callDartFunctionFast: function(callback, $arguments) {
      H.listTypeCheck($arguments);
      return P.Function_apply(H.interceptedTypeCheck(callback, "$isFunction"), $arguments);
    },
    allowInterop: function(f, $F) {
      H.assertIsSubtype($F, P.Function, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'F' in 'allowInterop'.");
      H.assertSubtypeOfRuntimeType(f, $F);
      if (typeof f == "function")
        return f;
      else
        return H.assertSubtypeOfRuntimeType(P._convertDartFunctionFast(f), $F);
    },
    JsObject: function JsObject() {
    },
    JsFunction: function JsFunction() {
    },
    JsArray: function JsArray() {
    },
    _JsArray_JsObject_ListMixin: function _JsArray_JsObject_ListMixin() {
    },
    min: function(a, b, $T) {
      H.assertIsSubtype($T, P.num, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in 'min'.");
      H.assertSubtypeOfRuntimeType(a, $T);
      H.assertSubtypeOfRuntimeType(b, $T);
      return Math.min(H.checkNum(a), H.checkNum(b));
    },
    max: function(a, b, $T) {
      H.assertIsSubtype($T, P.num, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in 'max'.");
      H.assertSubtypeOfRuntimeType(a, $T);
      H.assertSubtypeOfRuntimeType(b, $T);
      return Math.max(H.checkNum(a), H.checkNum(b));
    },
    pow: function(x, exponent) {
      H.numTypeCheck(x);
      H.numTypeCheck(exponent);
      H.checkNum(x);
      H.checkNum(exponent);
      return Math.pow(x, exponent);
    },
    Random_Random$secure: function() {
      return $.$get$Random__secureRandom();
    },
    _JSSecureRandom$: function() {
      var t1 = new P._JSSecureRandom(H.NativeByteData_NativeByteData(8), []);
      t1._JSSecureRandom$0();
      return t1;
    },
    _JSRandom: function _JSRandom() {
    },
    _Random: function _Random() {
    },
    _JSSecureRandom: function _JSSecureRandom(t0, t1) {
      this._math$_buffer = t0;
      this.$ti = t1;
    },
    _JenkinsSmiHash0: function _JenkinsSmiHash0() {
    },
    Point: function Point() {
    },
    Random: function Random() {
    },
    _RectangleBase: function _RectangleBase() {
    },
    Rectangle: function Rectangle() {
    },
    MutableRectangle: function MutableRectangle() {
    },
    MirrorSystem: function MirrorSystem() {
    },
    Mirror: function Mirror() {
    },
    IsolateMirror: function IsolateMirror() {
    },
    DeclarationMirror: function DeclarationMirror() {
    },
    ObjectMirror: function ObjectMirror() {
    },
    InstanceMirror: function InstanceMirror() {
    },
    ClosureMirror: function ClosureMirror() {
    },
    LibraryMirror: function LibraryMirror() {
    },
    LibraryDependencyMirror: function LibraryDependencyMirror() {
    },
    CombinatorMirror: function CombinatorMirror() {
    },
    TypeMirror: function TypeMirror() {
    },
    ClassMirror: function ClassMirror() {
    },
    FunctionTypeMirror: function FunctionTypeMirror() {
    },
    TypeVariableMirror: function TypeVariableMirror() {
    },
    TypedefMirror: function TypedefMirror() {
    },
    MethodMirror: function MethodMirror() {
    },
    VariableMirror: function VariableMirror() {
    },
    ParameterMirror: function ParameterMirror() {
    },
    SourceLocation0: function SourceLocation0() {
    },
    Comment0: function Comment0() {
    },
    MirrorsUsed: function MirrorsUsed() {
    },
    _SvgElementFactoryProvider: function _SvgElementFactoryProvider() {
    },
    AElement: function AElement() {
    },
    Angle: function Angle() {
    },
    AnimateElement: function AnimateElement() {
    },
    AnimateMotionElement: function AnimateMotionElement() {
    },
    AnimateTransformElement: function AnimateTransformElement() {
    },
    AnimatedAngle: function AnimatedAngle() {
    },
    AnimatedBoolean: function AnimatedBoolean() {
    },
    AnimatedEnumeration: function AnimatedEnumeration() {
    },
    AnimatedInteger: function AnimatedInteger() {
    },
    AnimatedLength: function AnimatedLength() {
    },
    AnimatedLengthList: function AnimatedLengthList() {
    },
    AnimatedNumber: function AnimatedNumber() {
    },
    AnimatedNumberList: function AnimatedNumberList() {
    },
    AnimatedPreserveAspectRatio: function AnimatedPreserveAspectRatio() {
    },
    AnimatedRect: function AnimatedRect() {
    },
    AnimatedString: function AnimatedString() {
    },
    AnimatedTransformList: function AnimatedTransformList() {
    },
    AnimationElement: function AnimationElement() {
    },
    CircleElement: function CircleElement() {
    },
    ClipPathElement: function ClipPathElement() {
    },
    DefsElement: function DefsElement() {
    },
    DescElement: function DescElement() {
    },
    DiscardElement: function DiscardElement() {
    },
    EllipseElement: function EllipseElement() {
    },
    FEBlendElement: function FEBlendElement() {
    },
    FEColorMatrixElement: function FEColorMatrixElement() {
    },
    FEComponentTransferElement: function FEComponentTransferElement() {
    },
    FECompositeElement: function FECompositeElement() {
    },
    FEConvolveMatrixElement: function FEConvolveMatrixElement() {
    },
    FEDiffuseLightingElement: function FEDiffuseLightingElement() {
    },
    FEDisplacementMapElement: function FEDisplacementMapElement() {
    },
    FEDistantLightElement: function FEDistantLightElement() {
    },
    FEFloodElement: function FEFloodElement() {
    },
    FEFuncAElement: function FEFuncAElement() {
    },
    FEFuncBElement: function FEFuncBElement() {
    },
    FEFuncGElement: function FEFuncGElement() {
    },
    FEFuncRElement: function FEFuncRElement() {
    },
    FEGaussianBlurElement: function FEGaussianBlurElement() {
    },
    FEImageElement: function FEImageElement() {
    },
    FEMergeElement: function FEMergeElement() {
    },
    FEMergeNodeElement: function FEMergeNodeElement() {
    },
    FEMorphologyElement: function FEMorphologyElement() {
    },
    FEOffsetElement: function FEOffsetElement() {
    },
    FEPointLightElement: function FEPointLightElement() {
    },
    FESpecularLightingElement: function FESpecularLightingElement() {
    },
    FESpotLightElement: function FESpotLightElement() {
    },
    FETileElement: function FETileElement() {
    },
    FETurbulenceElement: function FETurbulenceElement() {
    },
    FilterElement: function FilterElement() {
    },
    FilterPrimitiveStandardAttributes: function FilterPrimitiveStandardAttributes() {
    },
    FitToViewBox: function FitToViewBox() {
    },
    ForeignObjectElement: function ForeignObjectElement() {
    },
    GElement: function GElement() {
    },
    GeometryElement: function GeometryElement() {
    },
    GraphicsElement: function GraphicsElement() {
    },
    ImageElement0: function ImageElement0() {
    },
    Length: function Length() {
    },
    LengthList: function LengthList() {
    },
    LineElement: function LineElement() {
    },
    LinearGradientElement: function LinearGradientElement() {
    },
    MarkerElement: function MarkerElement() {
    },
    MaskElement: function MaskElement() {
    },
    Matrix: function Matrix() {
    },
    MetadataElement: function MetadataElement() {
    },
    Number: function Number() {
    },
    NumberList: function NumberList() {
    },
    PathElement: function PathElement() {
    },
    PatternElement: function PatternElement() {
    },
    Point0: function Point0() {
    },
    PointList: function PointList() {
    },
    PolygonElement: function PolygonElement() {
    },
    PolylineElement: function PolylineElement() {
    },
    PreserveAspectRatio: function PreserveAspectRatio() {
    },
    RadialGradientElement: function RadialGradientElement() {
    },
    Rect: function Rect() {
    },
    RectElement: function RectElement() {
    },
    ScriptElement0: function ScriptElement0() {
    },
    SetElement: function SetElement() {
    },
    StopElement: function StopElement() {
    },
    StringList: function StringList() {
    },
    StyleElement0: function StyleElement0() {
    },
    AttributeClassSet: function AttributeClassSet() {
    },
    SvgElement: function SvgElement() {
    },
    SvgSvgElement: function SvgSvgElement() {
    },
    SwitchElement: function SwitchElement() {
    },
    SymbolElement: function SymbolElement() {
    },
    TSpanElement: function TSpanElement() {
    },
    Tests: function Tests() {
    },
    TextContentElement: function TextContentElement() {
    },
    TextElement: function TextElement() {
    },
    TextPathElement: function TextPathElement() {
    },
    TextPositioningElement: function TextPositioningElement() {
    },
    TitleElement0: function TitleElement0() {
    },
    Transform: function Transform() {
    },
    TransformList: function TransformList() {
    },
    UnitTypes: function UnitTypes() {
    },
    UriReference: function UriReference() {
    },
    UseElement: function UseElement() {
    },
    ViewElement: function ViewElement() {
    },
    ZoomAndPan: function ZoomAndPan() {
    },
    _GradientElement: function _GradientElement() {
    },
    _SVGComponentTransferFunctionElement: function _SVGComponentTransferFunctionElement() {
    },
    _SVGFEDropShadowElement: function _SVGFEDropShadowElement() {
    },
    _SVGMPathElement: function _SVGMPathElement() {
    },
    _LengthList_Interceptor_ListMixin: function _LengthList_Interceptor_ListMixin() {
    },
    _LengthList_Interceptor_ListMixin_ImmutableListMixin: function _LengthList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NumberList_Interceptor_ListMixin: function _NumberList_Interceptor_ListMixin() {
    },
    _NumberList_Interceptor_ListMixin_ImmutableListMixin: function _NumberList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _StringList_Interceptor_ListMixin: function _StringList_Interceptor_ListMixin() {
    },
    _StringList_Interceptor_ListMixin_ImmutableListMixin: function _StringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TransformList_Interceptor_ListMixin: function _TransformList_Interceptor_ListMixin() {
    },
    _TransformList_Interceptor_ListMixin_ImmutableListMixin: function _TransformList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    Uint8List_Uint8List$view: function(buffer) {
      H.interceptedTypeCheck(buffer, "$isByteBuffer");
      return (buffer && C.NativeByteBuffer_methods).asUint8List$2(buffer, 0, null);
    },
    ByteBuffer: function ByteBuffer() {
    },
    TypedData: function TypedData() {
    },
    _TypedIntList: function _TypedIntList() {
    },
    _TypedFloatList: function _TypedFloatList() {
    },
    Endian: function Endian(t0) {
      this.$ti = t0;
    },
    ByteData: function ByteData() {
    },
    Int8List: function Int8List() {
    },
    Uint8List: function Uint8List() {
    },
    Uint8ClampedList: function Uint8ClampedList() {
    },
    Int16List: function Int16List() {
    },
    Uint16List: function Uint16List() {
    },
    Int32List: function Int32List() {
    },
    Uint32List: function Uint32List() {
    },
    Int64List: function Int64List() {
    },
    Uint64List: function Uint64List() {
    },
    Float32List: function Float32List() {
    },
    Float64List: function Float64List() {
    },
    Float32x4List: function Float32x4List() {
    },
    Int32x4List: function Int32x4List() {
    },
    Float64x2List: function Float64x2List() {
    },
    Float32x4: function Float32x4() {
    },
    Int32x4: function Int32x4() {
    },
    Float64x2: function Float64x2() {
    },
    UnmodifiableByteBufferView: function UnmodifiableByteBufferView() {
    },
    UnmodifiableByteDataView: function UnmodifiableByteDataView() {
    },
    _UnmodifiableListMixin: function _UnmodifiableListMixin() {
    },
    UnmodifiableUint8ListView: function UnmodifiableUint8ListView() {
    },
    UnmodifiableInt8ListView: function UnmodifiableInt8ListView() {
    },
    UnmodifiableUint8ClampedListView: function UnmodifiableUint8ClampedListView() {
    },
    UnmodifiableUint16ListView: function UnmodifiableUint16ListView() {
    },
    UnmodifiableInt16ListView: function UnmodifiableInt16ListView() {
    },
    UnmodifiableUint32ListView: function UnmodifiableUint32ListView() {
    },
    UnmodifiableInt32ListView: function UnmodifiableInt32ListView() {
    },
    UnmodifiableUint64ListView: function UnmodifiableUint64ListView() {
    },
    UnmodifiableInt64ListView: function UnmodifiableInt64ListView() {
    },
    UnmodifiableInt32x4ListView: function UnmodifiableInt32x4ListView() {
    },
    UnmodifiableFloat32x4ListView: function UnmodifiableFloat32x4ListView() {
    },
    UnmodifiableFloat64x2ListView: function UnmodifiableFloat64x2ListView() {
    },
    UnmodifiableFloat32ListView: function UnmodifiableFloat32ListView() {
    },
    UnmodifiableFloat64ListView: function UnmodifiableFloat64ListView() {
    },
    _UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    AnalyserNode: function AnalyserNode() {
    },
    AudioBuffer: function AudioBuffer() {
    },
    AudioBufferSourceNode: function AudioBufferSourceNode() {
    },
    AudioContext: function AudioContext() {
    },
    AudioDestinationNode: function AudioDestinationNode() {
    },
    AudioListener: function AudioListener() {
    },
    AudioNode: function AudioNode() {
    },
    AudioParam: function AudioParam() {
    },
    AudioParamMap: function AudioParamMap() {
    },
    AudioProcessingEvent: function AudioProcessingEvent() {
    },
    AudioScheduledSourceNode: function AudioScheduledSourceNode() {
    },
    AudioTrack: function AudioTrack() {
    },
    AudioTrackList: function AudioTrackList() {
    },
    AudioWorkletGlobalScope: function AudioWorkletGlobalScope() {
    },
    AudioWorkletNode: function AudioWorkletNode() {
    },
    AudioWorkletProcessor: function AudioWorkletProcessor() {
    },
    BaseAudioContext: function BaseAudioContext() {
    },
    BiquadFilterNode: function BiquadFilterNode() {
    },
    ChannelMergerNode: function ChannelMergerNode() {
    },
    ChannelSplitterNode: function ChannelSplitterNode() {
    },
    ConstantSourceNode: function ConstantSourceNode() {
    },
    ConvolverNode: function ConvolverNode() {
    },
    DelayNode: function DelayNode() {
    },
    DynamicsCompressorNode: function DynamicsCompressorNode() {
    },
    GainNode: function GainNode() {
    },
    IirFilterNode: function IirFilterNode() {
    },
    MediaElementAudioSourceNode: function MediaElementAudioSourceNode() {
    },
    MediaStreamAudioDestinationNode: function MediaStreamAudioDestinationNode() {
    },
    MediaStreamAudioSourceNode: function MediaStreamAudioSourceNode() {
    },
    OfflineAudioCompletionEvent: function OfflineAudioCompletionEvent() {
    },
    OfflineAudioContext: function OfflineAudioContext() {
    },
    OscillatorNode: function OscillatorNode() {
    },
    PannerNode: function PannerNode() {
    },
    PeriodicWave: function PeriodicWave() {
    },
    ScriptProcessorNode: function ScriptProcessorNode() {
    },
    StereoPannerNode: function StereoPannerNode() {
    },
    WaveShaperNode: function WaveShaperNode() {
    },
    _AudioParamMap_Interceptor_MapMixin: function _AudioParamMap_Interceptor_MapMixin() {
    },
    ActiveInfo: function ActiveInfo() {
    },
    AngleInstancedArrays: function AngleInstancedArrays() {
    },
    Buffer: function Buffer() {
    },
    Canvas: function Canvas() {
    },
    ColorBufferFloat: function ColorBufferFloat() {
    },
    CompressedTextureAstc: function CompressedTextureAstc() {
    },
    CompressedTextureAtc: function CompressedTextureAtc() {
    },
    CompressedTextureETC1: function CompressedTextureETC1() {
    },
    CompressedTextureEtc: function CompressedTextureEtc() {
    },
    CompressedTexturePvrtc: function CompressedTexturePvrtc() {
    },
    CompressedTextureS3TC: function CompressedTextureS3TC() {
    },
    CompressedTextureS3TCsRgb: function CompressedTextureS3TCsRgb() {
    },
    ContextEvent: function ContextEvent() {
    },
    DebugRendererInfo: function DebugRendererInfo() {
    },
    DebugShaders: function DebugShaders() {
    },
    DepthTexture: function DepthTexture() {
    },
    DrawBuffers: function DrawBuffers() {
    },
    EXTsRgb: function EXTsRgb() {
    },
    ExtBlendMinMax: function ExtBlendMinMax() {
    },
    ExtColorBufferFloat: function ExtColorBufferFloat() {
    },
    ExtColorBufferHalfFloat: function ExtColorBufferHalfFloat() {
    },
    ExtDisjointTimerQuery: function ExtDisjointTimerQuery() {
    },
    ExtDisjointTimerQueryWebGL2: function ExtDisjointTimerQueryWebGL2() {
    },
    ExtFragDepth: function ExtFragDepth() {
    },
    ExtShaderTextureLod: function ExtShaderTextureLod() {
    },
    ExtTextureFilterAnisotropic: function ExtTextureFilterAnisotropic() {
    },
    Framebuffer: function Framebuffer() {
    },
    GetBufferSubDataAsync: function GetBufferSubDataAsync() {
    },
    LoseContext: function LoseContext() {
    },
    OesElementIndexUint: function OesElementIndexUint() {
    },
    OesStandardDerivatives: function OesStandardDerivatives() {
    },
    OesTextureFloat: function OesTextureFloat() {
    },
    OesTextureFloatLinear: function OesTextureFloatLinear() {
    },
    OesTextureHalfFloat: function OesTextureHalfFloat() {
    },
    OesTextureHalfFloatLinear: function OesTextureHalfFloatLinear() {
    },
    OesVertexArrayObject: function OesVertexArrayObject() {
    },
    Program: function Program() {
    },
    Query: function Query() {
    },
    Renderbuffer: function Renderbuffer() {
    },
    RenderingContext: function RenderingContext() {
    },
    RenderingContext2: function RenderingContext2() {
    },
    Sampler: function Sampler() {
    },
    Shader: function Shader() {
    },
    ShaderPrecisionFormat: function ShaderPrecisionFormat() {
    },
    Sync: function Sync() {
    },
    Texture: function Texture() {
    },
    TimerQueryExt: function TimerQueryExt() {
    },
    TransformFeedback: function TransformFeedback() {
    },
    UniformLocation: function UniformLocation() {
    },
    VertexArrayObject: function VertexArrayObject() {
    },
    VertexArrayObjectOes: function VertexArrayObjectOes() {
    },
    WebGL: function WebGL() {
    },
    _WebGL2RenderingContextBase: function _WebGL2RenderingContextBase() {
    },
    _WebGLRenderingContextBase: function _WebGLRenderingContextBase() {
    },
    SqlDatabase: function SqlDatabase() {
    },
    SqlError: function SqlError() {
    },
    SqlResultSet: function SqlResultSet() {
    },
    SqlResultSetRowList: function SqlResultSetRowList() {
    },
    SqlTransaction: function SqlTransaction() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin: function _SqlResultSetRowList_Interceptor_ListMixin() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin: function _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    hasProperty: function(o, $name) {
      return $name in o;
    }
  },
  W = {
    window: function() {
      return window;
    },
    Blob_Blob: function(blobParts) {
      var t1;
      H.listTypeCheck(blobParts);
      t1 = H.interceptedTypeCheck(W.Blob__create_1(blobParts), "$isBlob");
      return t1;
    },
    Blob__create_1: function(parts) {
      return new self.Blob(parts);
    },
    EventSource_EventSource: function(url, withCredentials) {
      return W.EventSource__factoryEventSource(H.stringTypeCheck(url), P.LinkedHashMap_LinkedHashMap$_literal(["withCredentials", withCredentials], P.String, null));
    },
    EventSource__factoryEventSource: function(url, eventSourceInitDict) {
      H.stringTypeCheck(url);
      H.interceptedTypeCheck(eventSourceInitDict, "$isMap");
      if (eventSourceInitDict != null)
        return W.EventSource__create_1(url, P.convertDartToNative_Dictionary(eventSourceInitDict));
      return W.EventSource__create_2(url);
    },
    EventSource__create_1: function(url, eventSourceInitDict) {
      return new EventSource(url, eventSourceInitDict);
    },
    EventSource__create_2: function(url) {
      return new EventSource(url);
    },
    FileReader_FileReader: function() {
      return W.FileReader__create_1();
    },
    FileReader__create_1: function() {
      return new FileReader();
    },
    HttpRequest_request: function(url, method, responseType) {
      var completer, xhr;
      H.stringTypeCheck(url);
      H.stringTypeCheck(method);
      H.stringTypeCheck(responseType);
      completer = P.Completer_Completer(W.HttpRequest);
      xhr = W.HttpRequest_HttpRequest();
      if (method == null)
        method = "GET";
      (xhr && C.HttpRequest_methods).open$3$async(xhr, method, url, true);
      if (responseType != null)
        xhr.responseType = responseType;
      C.HttpRequest_methods.get$onLoad(xhr).listen$1(new W.HttpRequest_request_closure(xhr, completer));
      C.HttpRequest_methods.get$onError(xhr).listen$1(completer.get$completeError());
      C.HttpRequest_methods.send$0(xhr);
      return completer.get$future();
    },
    HttpRequest_HttpRequest: function() {
      return W.HttpRequest__create_1();
    },
    HttpRequest__create_1: function() {
      return new XMLHttpRequest();
    },
    _EventStream$: function(_target, _eventType, _useCapture, $T) {
      return new W._EventStream(_target, _eventType, _useCapture, [$T]);
    },
    _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
      var t1 = onData == null ? null : W._wrapZone(new W._EventStreamSubscription_closure(onData), W.Event);
      t1 = new W._EventStreamSubscription(_target, _eventType, t1, _useCapture, [$T]);
      t1._EventStreamSubscription$4(_target, _eventType, onData, _useCapture, $T);
      return t1;
    },
    _convertNativeToDart_XHR_Response: function(o) {
      if (!!J.getInterceptor$(o).$isDocument)
        return o;
      return P.convertNativeToDart_SerializedScriptValue(o);
    },
    _wrapZone: function(callback, $T) {
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [$T]});
      if (J.$eq$(P.Zone_current(), C.C__RootZone))
        return callback;
      if (callback == null)
        return;
      return P.Zone_current().bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    HtmlElement: function HtmlElement() {
    },
    AbortPaymentEvent: function AbortPaymentEvent() {
    },
    AbsoluteOrientationSensor: function AbsoluteOrientationSensor() {
    },
    AbstractWorker: function AbstractWorker() {
    },
    Accelerometer: function Accelerometer() {
    },
    AccessibleNode: function AccessibleNode() {
    },
    AccessibleNodeList: function AccessibleNodeList() {
    },
    AmbientLightSensor: function AmbientLightSensor() {
    },
    AnchorElement: function AnchorElement() {
    },
    Animation: function Animation() {
    },
    AnimationEffectReadOnly: function AnimationEffectReadOnly() {
    },
    AnimationEffectTiming: function AnimationEffectTiming() {
    },
    AnimationEffectTimingReadOnly: function AnimationEffectTimingReadOnly() {
    },
    AnimationEvent: function AnimationEvent() {
    },
    AnimationPlaybackEvent: function AnimationPlaybackEvent() {
    },
    AnimationTimeline: function AnimationTimeline() {
    },
    AnimationWorkletGlobalScope: function AnimationWorkletGlobalScope() {
    },
    ApplicationCache: function ApplicationCache() {
    },
    ApplicationCacheErrorEvent: function ApplicationCacheErrorEvent() {
    },
    AreaElement: function AreaElement() {
    },
    AudioElement: function AudioElement() {
    },
    AuthenticatorAssertionResponse: function AuthenticatorAssertionResponse() {
    },
    AuthenticatorAttestationResponse: function AuthenticatorAttestationResponse() {
    },
    AuthenticatorResponse: function AuthenticatorResponse() {
    },
    BRElement: function BRElement() {
    },
    BackgroundFetchClickEvent: function BackgroundFetchClickEvent() {
    },
    BackgroundFetchEvent: function BackgroundFetchEvent() {
    },
    BackgroundFetchFailEvent: function BackgroundFetchFailEvent() {
    },
    BackgroundFetchFetch: function BackgroundFetchFetch() {
    },
    BackgroundFetchManager: function BackgroundFetchManager() {
    },
    BackgroundFetchRegistration: function BackgroundFetchRegistration() {
    },
    BackgroundFetchSettledFetch: function BackgroundFetchSettledFetch() {
    },
    BackgroundFetchedEvent: function BackgroundFetchedEvent() {
    },
    BarProp: function BarProp() {
    },
    BarcodeDetector: function BarcodeDetector() {
    },
    BaseElement: function BaseElement() {
    },
    BatteryManager: function BatteryManager() {
    },
    BeforeInstallPromptEvent: function BeforeInstallPromptEvent() {
    },
    BeforeUnloadEvent: function BeforeUnloadEvent() {
    },
    Blob: function Blob() {
    },
    BlobEvent: function BlobEvent() {
    },
    BluetoothRemoteGattDescriptor: function BluetoothRemoteGattDescriptor() {
    },
    Body: function Body() {
    },
    BodyElement: function BodyElement() {
    },
    BroadcastChannel: function BroadcastChannel() {
    },
    BudgetState: function BudgetState() {
    },
    ButtonElement: function ButtonElement() {
    },
    CDataSection: function CDataSection() {
    },
    CacheStorage: function CacheStorage() {
    },
    CanMakePaymentEvent: function CanMakePaymentEvent() {
    },
    CanvasCaptureMediaStreamTrack: function CanvasCaptureMediaStreamTrack() {
    },
    CanvasElement: function CanvasElement() {
    },
    CanvasGradient: function CanvasGradient() {
    },
    CanvasPattern: function CanvasPattern() {
    },
    CanvasRenderingContext: function CanvasRenderingContext() {
    },
    CanvasRenderingContext2D: function CanvasRenderingContext2D() {
    },
    CharacterData: function CharacterData() {
    },
    ChildNode: function ChildNode() {
    },
    Client: function Client() {
    },
    Clients: function Clients() {
    },
    ClipboardEvent: function ClipboardEvent() {
    },
    CloseEvent: function CloseEvent() {
    },
    Comment: function Comment() {
    },
    CompositionEvent: function CompositionEvent() {
    },
    ContentElement: function ContentElement() {
    },
    CookieStore: function CookieStore() {
    },
    Coordinates: function Coordinates() {
    },
    Credential: function Credential() {
    },
    CredentialUserData: function CredentialUserData() {
    },
    CredentialsContainer: function CredentialsContainer() {
    },
    Crypto: function Crypto() {
    },
    CryptoKey: function CryptoKey() {
    },
    Css: function Css() {
    },
    CssCharsetRule: function CssCharsetRule() {
    },
    CssConditionRule: function CssConditionRule() {
    },
    CssFontFaceRule: function CssFontFaceRule() {
    },
    CssGroupingRule: function CssGroupingRule() {
    },
    CssImageValue: function CssImageValue() {
    },
    CssImportRule: function CssImportRule() {
    },
    CssKeyframeRule: function CssKeyframeRule() {
    },
    CssKeyframesRule: function CssKeyframesRule() {
    },
    CssKeywordValue: function CssKeywordValue() {
    },
    CssMatrixComponent: function CssMatrixComponent() {
    },
    CssMediaRule: function CssMediaRule() {
    },
    CssNamespaceRule: function CssNamespaceRule() {
    },
    CssNumericValue: function CssNumericValue() {
    },
    CssPageRule: function CssPageRule() {
    },
    CssPerspective: function CssPerspective() {
    },
    CssPositionValue: function CssPositionValue() {
    },
    CssResourceValue: function CssResourceValue() {
    },
    CssRotation: function CssRotation() {
    },
    CssRule: function CssRule() {
    },
    CssScale: function CssScale() {
    },
    CssSkew: function CssSkew() {
    },
    CssStyleDeclaration: function CssStyleDeclaration() {
    },
    _CssStyleDeclarationSet: function _CssStyleDeclarationSet() {
    },
    CssStyleDeclarationBase: function CssStyleDeclarationBase() {
    },
    CssStyleRule: function CssStyleRule() {
    },
    CssStyleSheet: function CssStyleSheet() {
    },
    CssStyleValue: function CssStyleValue() {
    },
    CssSupportsRule: function CssSupportsRule() {
    },
    CssTransformComponent: function CssTransformComponent() {
    },
    CssTransformValue: function CssTransformValue() {
    },
    CssTranslation: function CssTranslation() {
    },
    CssUnitValue: function CssUnitValue() {
    },
    CssUnparsedValue: function CssUnparsedValue() {
    },
    CssVariableReferenceValue: function CssVariableReferenceValue() {
    },
    CssViewportRule: function CssViewportRule() {
    },
    CssurlImageValue: function CssurlImageValue() {
    },
    CustomElementRegistry: function CustomElementRegistry() {
    },
    CustomEvent: function CustomEvent() {
    },
    DListElement: function DListElement() {
    },
    DataElement: function DataElement() {
    },
    DataListElement: function DataListElement() {
    },
    DataTransfer: function DataTransfer() {
    },
    DataTransferItem: function DataTransferItem() {
    },
    DataTransferItemList: function DataTransferItemList() {
    },
    DedicatedWorkerGlobalScope: function DedicatedWorkerGlobalScope() {
    },
    DeprecatedStorageInfo: function DeprecatedStorageInfo() {
    },
    DeprecatedStorageQuota: function DeprecatedStorageQuota() {
    },
    DeprecationReport: function DeprecationReport() {
    },
    DetailsElement: function DetailsElement() {
    },
    DetectedBarcode: function DetectedBarcode() {
    },
    DetectedFace: function DetectedFace() {
    },
    DetectedText: function DetectedText() {
    },
    DeviceAcceleration: function DeviceAcceleration() {
    },
    DeviceMotionEvent: function DeviceMotionEvent() {
    },
    DeviceOrientationEvent: function DeviceOrientationEvent() {
    },
    DeviceRotationRate: function DeviceRotationRate() {
    },
    DialogElement: function DialogElement() {
    },
    DirectoryEntry: function DirectoryEntry() {
    },
    DirectoryReader: function DirectoryReader() {
    },
    DivElement: function DivElement() {
    },
    Document: function Document() {
    },
    DocumentFragment: function DocumentFragment() {
    },
    DocumentOrShadowRoot: function DocumentOrShadowRoot() {
    },
    DocumentTimeline: function DocumentTimeline() {
    },
    DomError: function DomError() {
    },
    DomException: function DomException() {
    },
    DomImplementation: function DomImplementation() {
    },
    DomIterator: function DomIterator() {
    },
    DomMatrix: function DomMatrix() {
    },
    DomMatrixReadOnly: function DomMatrixReadOnly() {
    },
    DomParser: function DomParser() {
    },
    DomPoint: function DomPoint() {
    },
    DomPointReadOnly: function DomPointReadOnly() {
    },
    DomQuad: function DomQuad() {
    },
    DomRectList: function DomRectList() {
    },
    DomRectReadOnly: function DomRectReadOnly() {
    },
    DomStringList: function DomStringList() {
    },
    DomStringMap: function DomStringMap() {
    },
    DomTokenList: function DomTokenList() {
    },
    _ChildrenElementList: function _ChildrenElementList() {
    },
    ElementList: function ElementList() {
    },
    _FrozenElementList: function _FrozenElementList() {
    },
    Element: function Element() {
    },
    _ElementFactoryProvider: function _ElementFactoryProvider() {
    },
    ScrollAlignment: function ScrollAlignment() {
    },
    EmbedElement: function EmbedElement() {
    },
    Entry: function Entry() {
    },
    ErrorEvent: function ErrorEvent() {
    },
    Event: function Event() {
    },
    EventSource: function EventSource() {
    },
    Events: function Events() {
    },
    ElementEvents: function ElementEvents() {
    },
    EventTarget: function EventTarget() {
    },
    ExtendableEvent: function ExtendableEvent() {
    },
    ExtendableMessageEvent: function ExtendableMessageEvent() {
    },
    External: function External() {
    },
    FaceDetector: function FaceDetector() {
    },
    FederatedCredential: function FederatedCredential() {
    },
    FetchEvent: function FetchEvent() {
    },
    FieldSetElement: function FieldSetElement() {
    },
    File: function File() {
    },
    FileEntry: function FileEntry() {
    },
    FileList: function FileList() {
    },
    FileReader: function FileReader() {
    },
    FileSystem: function FileSystem() {
    },
    FileWriter: function FileWriter() {
    },
    FocusEvent: function FocusEvent() {
    },
    FontFace: function FontFace() {
    },
    FontFaceSet: function FontFaceSet() {
    },
    FontFaceSetLoadEvent: function FontFaceSetLoadEvent() {
    },
    FontFaceSource: function FontFaceSource() {
    },
    ForeignFetchEvent: function ForeignFetchEvent() {
    },
    FormData: function FormData() {
    },
    FormElement: function FormElement() {
    },
    Gamepad: function Gamepad() {
    },
    GamepadButton: function GamepadButton() {
    },
    GamepadEvent: function GamepadEvent() {
    },
    GamepadPose: function GamepadPose() {
    },
    Geolocation: function Geolocation() {
    },
    _GeopositionWrapper: function _GeopositionWrapper() {
    },
    Geoposition: function Geoposition() {
    },
    GlobalEventHandlers: function GlobalEventHandlers() {
    },
    Gyroscope: function Gyroscope() {
    },
    HRElement: function HRElement() {
    },
    HashChangeEvent: function HashChangeEvent() {
    },
    HeadElement: function HeadElement() {
    },
    Headers: function Headers() {
    },
    HeadingElement: function HeadingElement() {
    },
    History: function History() {
    },
    HtmlCollection: function HtmlCollection() {
    },
    HtmlDocument: function HtmlDocument() {
    },
    HtmlFormControlsCollection: function HtmlFormControlsCollection() {
    },
    HtmlHtmlElement: function HtmlHtmlElement() {
    },
    HtmlHyperlinkElementUtils: function HtmlHyperlinkElementUtils() {
    },
    HtmlOptionsCollection: function HtmlOptionsCollection() {
    },
    HttpRequest: function HttpRequest() {
    },
    HttpRequest_request_closure0: function HttpRequest_request_closure0() {
    },
    HttpRequest_request_closure: function HttpRequest_request_closure(t0, t1, t2) {
      this.xhr = t0;
      this.completer = t1;
      this.$ti = t2;
    },
    HttpRequestEventTarget: function HttpRequestEventTarget() {
    },
    HttpRequestUpload: function HttpRequestUpload() {
    },
    IFrameElement: function IFrameElement() {
    },
    IdleDeadline: function IdleDeadline() {
    },
    ImageBitmap: function ImageBitmap() {
    },
    ImageBitmapRenderingContext: function ImageBitmapRenderingContext() {
    },
    ImageCapture: function ImageCapture() {
    },
    ImageData: function ImageData() {
    },
    ImageElement: function ImageElement() {
    },
    InputDeviceCapabilities: function InputDeviceCapabilities() {
    },
    InputElement: function InputElement() {
    },
    InputElementBase: function InputElementBase() {
    },
    HiddenInputElement: function HiddenInputElement() {
    },
    TextInputElementBase: function TextInputElementBase() {
    },
    SearchInputElement: function SearchInputElement() {
    },
    TextInputElement: function TextInputElement() {
    },
    UrlInputElement: function UrlInputElement() {
    },
    TelephoneInputElement: function TelephoneInputElement() {
    },
    EmailInputElement: function EmailInputElement() {
    },
    PasswordInputElement: function PasswordInputElement() {
    },
    RangeInputElementBase: function RangeInputElementBase() {
    },
    DateInputElement: function DateInputElement() {
    },
    MonthInputElement: function MonthInputElement() {
    },
    WeekInputElement: function WeekInputElement() {
    },
    TimeInputElement: function TimeInputElement() {
    },
    LocalDateTimeInputElement: function LocalDateTimeInputElement() {
    },
    NumberInputElement: function NumberInputElement() {
    },
    RangeInputElement: function RangeInputElement() {
    },
    CheckboxInputElement: function CheckboxInputElement() {
    },
    RadioButtonInputElement: function RadioButtonInputElement() {
    },
    FileUploadInputElement: function FileUploadInputElement() {
    },
    SubmitButtonInputElement: function SubmitButtonInputElement() {
    },
    ImageButtonInputElement: function ImageButtonInputElement() {
    },
    ResetButtonInputElement: function ResetButtonInputElement() {
    },
    ButtonInputElement: function ButtonInputElement() {
    },
    InstallEvent: function InstallEvent() {
    },
    IntersectionObserver: function IntersectionObserver() {
    },
    IntersectionObserverEntry: function IntersectionObserverEntry() {
    },
    InterventionReport: function InterventionReport() {
    },
    KeyboardEvent: function KeyboardEvent() {
    },
    KeyframeEffect: function KeyframeEffect() {
    },
    KeyframeEffectReadOnly: function KeyframeEffectReadOnly() {
    },
    LIElement: function LIElement() {
    },
    LabelElement: function LabelElement() {
    },
    LegendElement: function LegendElement() {
    },
    LinearAccelerationSensor: function LinearAccelerationSensor() {
    },
    LinkElement: function LinkElement() {
    },
    Location: function Location() {
    },
    Magnetometer: function Magnetometer() {
    },
    MapElement: function MapElement() {
    },
    MediaCapabilities: function MediaCapabilities() {
    },
    MediaCapabilitiesInfo: function MediaCapabilitiesInfo() {
    },
    MediaDeviceInfo: function MediaDeviceInfo() {
    },
    MediaDevices: function MediaDevices() {
    },
    MediaElement: function MediaElement() {
    },
    MediaEncryptedEvent: function MediaEncryptedEvent() {
    },
    MediaError: function MediaError() {
    },
    MediaKeyMessageEvent: function MediaKeyMessageEvent() {
    },
    MediaKeySession: function MediaKeySession() {
    },
    MediaKeyStatusMap: function MediaKeyStatusMap() {
    },
    MediaKeySystemAccess: function MediaKeySystemAccess() {
    },
    MediaKeys: function MediaKeys() {
    },
    MediaKeysPolicy: function MediaKeysPolicy() {
    },
    MediaList: function MediaList() {
    },
    MediaMetadata: function MediaMetadata() {
    },
    MediaQueryList: function MediaQueryList() {
    },
    MediaQueryListEvent: function MediaQueryListEvent() {
    },
    MediaRecorder: function MediaRecorder() {
    },
    MediaSession: function MediaSession() {
    },
    MediaSettingsRange: function MediaSettingsRange() {
    },
    MediaSource: function MediaSource() {
    },
    MediaStream: function MediaStream() {
    },
    MediaStreamEvent: function MediaStreamEvent() {
    },
    MediaStreamTrack: function MediaStreamTrack() {
    },
    MediaStreamTrackEvent: function MediaStreamTrackEvent() {
    },
    MemoryInfo: function MemoryInfo() {
    },
    MenuElement: function MenuElement() {
    },
    MessageChannel: function MessageChannel() {
    },
    MessageEvent: function MessageEvent() {
    },
    MessagePort: function MessagePort() {
    },
    MetaElement: function MetaElement() {
    },
    Metadata: function Metadata() {
    },
    MeterElement: function MeterElement() {
    },
    MidiAccess: function MidiAccess() {
    },
    MidiConnectionEvent: function MidiConnectionEvent() {
    },
    MidiInput: function MidiInput() {
    },
    MidiInputMap: function MidiInputMap() {
    },
    MidiMessageEvent: function MidiMessageEvent() {
    },
    MidiOutput: function MidiOutput() {
    },
    MidiOutputMap: function MidiOutputMap() {
    },
    MidiPort: function MidiPort() {
    },
    MimeType: function MimeType() {
    },
    MimeTypeArray: function MimeTypeArray() {
    },
    ModElement: function ModElement() {
    },
    MouseEvent: function MouseEvent() {
    },
    MutationEvent: function MutationEvent() {
    },
    MutationObserver: function MutationObserver() {
    },
    MutationRecord: function MutationRecord() {
    },
    NavigationPreloadManager: function NavigationPreloadManager() {
    },
    Navigator: function Navigator() {
    },
    NavigatorAutomationInformation: function NavigatorAutomationInformation() {
    },
    NavigatorConcurrentHardware: function NavigatorConcurrentHardware() {
    },
    NavigatorCookies: function NavigatorCookies() {
    },
    NavigatorID: function NavigatorID() {
    },
    NavigatorLanguage: function NavigatorLanguage() {
    },
    NavigatorOnLine: function NavigatorOnLine() {
    },
    NavigatorUserMediaError: function NavigatorUserMediaError() {
    },
    NetworkInformation: function NetworkInformation() {
    },
    _ChildNodeListLazy: function _ChildNodeListLazy() {
    },
    Node: function Node() {
    },
    NodeFilter: function NodeFilter() {
    },
    NodeIterator: function NodeIterator() {
    },
    NodeList: function NodeList() {
    },
    NonDocumentTypeChildNode: function NonDocumentTypeChildNode() {
    },
    NonElementParentNode: function NonElementParentNode() {
    },
    NoncedElement: function NoncedElement() {
    },
    Notification: function Notification() {
    },
    NotificationEvent: function NotificationEvent() {
    },
    OListElement: function OListElement() {
    },
    ObjectElement: function ObjectElement() {
    },
    OffscreenCanvas: function OffscreenCanvas() {
    },
    OffscreenCanvasRenderingContext2D: function OffscreenCanvasRenderingContext2D() {
    },
    OptGroupElement: function OptGroupElement() {
    },
    OptionElement: function OptionElement() {
    },
    OrientationSensor: function OrientationSensor() {
    },
    OutputElement: function OutputElement() {
    },
    OverconstrainedError: function OverconstrainedError() {
    },
    PageTransitionEvent: function PageTransitionEvent() {
    },
    PaintRenderingContext2D: function PaintRenderingContext2D() {
    },
    PaintSize: function PaintSize() {
    },
    PaintWorkletGlobalScope: function PaintWorkletGlobalScope() {
    },
    ParagraphElement: function ParagraphElement() {
    },
    ParamElement: function ParamElement() {
    },
    ParentNode: function ParentNode() {
    },
    PasswordCredential: function PasswordCredential() {
    },
    Path2D: function Path2D() {
    },
    PaymentAddress: function PaymentAddress() {
    },
    PaymentInstruments: function PaymentInstruments() {
    },
    PaymentManager: function PaymentManager() {
    },
    PaymentRequest: function PaymentRequest() {
    },
    PaymentRequestEvent: function PaymentRequestEvent() {
    },
    PaymentRequestUpdateEvent: function PaymentRequestUpdateEvent() {
    },
    PaymentResponse: function PaymentResponse() {
    },
    Performance: function Performance() {
    },
    PerformanceEntry: function PerformanceEntry() {
    },
    PerformanceLongTaskTiming: function PerformanceLongTaskTiming() {
    },
    PerformanceMark: function PerformanceMark() {
    },
    PerformanceMeasure: function PerformanceMeasure() {
    },
    PerformanceNavigation: function PerformanceNavigation() {
    },
    PerformanceNavigationTiming: function PerformanceNavigationTiming() {
    },
    PerformanceObserver: function PerformanceObserver() {
    },
    PerformanceObserverEntryList: function PerformanceObserverEntryList() {
    },
    PerformancePaintTiming: function PerformancePaintTiming() {
    },
    PerformanceResourceTiming: function PerformanceResourceTiming() {
    },
    PerformanceServerTiming: function PerformanceServerTiming() {
    },
    PerformanceTiming: function PerformanceTiming() {
    },
    PermissionStatus: function PermissionStatus() {
    },
    Permissions: function Permissions() {
    },
    PhotoCapabilities: function PhotoCapabilities() {
    },
    PictureElement: function PictureElement() {
    },
    Plugin: function Plugin() {
    },
    PluginArray: function PluginArray() {
    },
    PointerEvent: function PointerEvent() {
    },
    PopStateEvent: function PopStateEvent() {
    },
    PositionError: function PositionError() {
    },
    PreElement: function PreElement() {
    },
    Presentation: function Presentation() {
    },
    PresentationAvailability: function PresentationAvailability() {
    },
    PresentationConnection: function PresentationConnection() {
    },
    PresentationConnectionAvailableEvent: function PresentationConnectionAvailableEvent() {
    },
    PresentationConnectionCloseEvent: function PresentationConnectionCloseEvent() {
    },
    PresentationConnectionList: function PresentationConnectionList() {
    },
    PresentationReceiver: function PresentationReceiver() {
    },
    PresentationRequest: function PresentationRequest() {
    },
    ProcessingInstruction: function ProcessingInstruction() {
    },
    ProgressElement: function ProgressElement() {
    },
    ProgressEvent: function ProgressEvent() {
    },
    PromiseRejectionEvent: function PromiseRejectionEvent() {
    },
    PublicKeyCredential: function PublicKeyCredential() {
    },
    PushEvent: function PushEvent() {
    },
    PushManager: function PushManager() {
    },
    PushMessageData: function PushMessageData() {
    },
    PushSubscription: function PushSubscription() {
    },
    PushSubscriptionOptions: function PushSubscriptionOptions() {
    },
    QuoteElement: function QuoteElement() {
    },
    Range: function Range() {
    },
    RelatedApplication: function RelatedApplication() {
    },
    RelativeOrientationSensor: function RelativeOrientationSensor() {
    },
    RemotePlayback: function RemotePlayback() {
    },
    ReportBody: function ReportBody() {
    },
    ReportingObserver: function ReportingObserver() {
    },
    ResizeObserver: function ResizeObserver() {
    },
    ResizeObserverEntry: function ResizeObserverEntry() {
    },
    RtcCertificate: function RtcCertificate() {
    },
    RtcDataChannel: function RtcDataChannel() {
    },
    RtcDataChannelEvent: function RtcDataChannelEvent() {
    },
    RtcDtmfSender: function RtcDtmfSender() {
    },
    RtcDtmfToneChangeEvent: function RtcDtmfToneChangeEvent() {
    },
    RtcIceCandidate: function RtcIceCandidate() {
    },
    RtcLegacyStatsReport: function RtcLegacyStatsReport() {
    },
    RtcPeerConnection: function RtcPeerConnection() {
    },
    RtcPeerConnectionIceEvent: function RtcPeerConnectionIceEvent() {
    },
    RtcRtpContributingSource: function RtcRtpContributingSource() {
    },
    RtcRtpReceiver: function RtcRtpReceiver() {
    },
    RtcRtpSender: function RtcRtpSender() {
    },
    RtcSessionDescription: function RtcSessionDescription() {
    },
    RtcStatsReport: function RtcStatsReport() {
    },
    RtcStatsResponse: function RtcStatsResponse() {
    },
    RtcTrackEvent: function RtcTrackEvent() {
    },
    Screen: function Screen() {
    },
    ScreenOrientation: function ScreenOrientation() {
    },
    ScriptElement: function ScriptElement() {
    },
    ScrollState: function ScrollState() {
    },
    ScrollTimeline: function ScrollTimeline() {
    },
    SecurityPolicyViolationEvent: function SecurityPolicyViolationEvent() {
    },
    SelectElement: function SelectElement() {
    },
    Selection: function Selection() {
    },
    Sensor: function Sensor() {
    },
    SensorErrorEvent: function SensorErrorEvent() {
    },
    ServiceWorker: function ServiceWorker() {
    },
    ServiceWorkerContainer: function ServiceWorkerContainer() {
    },
    ServiceWorkerGlobalScope: function ServiceWorkerGlobalScope() {
    },
    ServiceWorkerRegistration: function ServiceWorkerRegistration() {
    },
    ShadowElement: function ShadowElement() {
    },
    ShadowRoot: function ShadowRoot() {
    },
    SharedArrayBuffer: function SharedArrayBuffer() {
    },
    SharedWorker: function SharedWorker() {
    },
    SharedWorkerGlobalScope: function SharedWorkerGlobalScope() {
    },
    SlotElement: function SlotElement() {
    },
    SourceBuffer: function SourceBuffer() {
    },
    SourceBufferList: function SourceBufferList() {
    },
    SourceElement: function SourceElement() {
    },
    SpanElement: function SpanElement() {
    },
    SpeechGrammar: function SpeechGrammar() {
    },
    SpeechGrammarList: function SpeechGrammarList() {
    },
    SpeechRecognition: function SpeechRecognition() {
    },
    SpeechRecognitionAlternative: function SpeechRecognitionAlternative() {
    },
    SpeechRecognitionError: function SpeechRecognitionError() {
    },
    SpeechRecognitionEvent: function SpeechRecognitionEvent() {
    },
    SpeechRecognitionResult: function SpeechRecognitionResult() {
    },
    SpeechSynthesis: function SpeechSynthesis() {
    },
    SpeechSynthesisEvent: function SpeechSynthesisEvent() {
    },
    SpeechSynthesisUtterance: function SpeechSynthesisUtterance() {
    },
    SpeechSynthesisVoice: function SpeechSynthesisVoice() {
    },
    StaticRange: function StaticRange() {
    },
    Storage: function Storage() {
    },
    StorageEvent: function StorageEvent() {
    },
    StorageManager: function StorageManager() {
    },
    StyleElement: function StyleElement() {
    },
    StyleMedia: function StyleMedia() {
    },
    StylePropertyMap: function StylePropertyMap() {
    },
    StylePropertyMapReadonly: function StylePropertyMapReadonly() {
    },
    StyleSheet: function StyleSheet() {
    },
    SyncEvent: function SyncEvent() {
    },
    SyncManager: function SyncManager() {
    },
    TableCaptionElement: function TableCaptionElement() {
    },
    TableCellElement: function TableCellElement() {
    },
    TableColElement: function TableColElement() {
    },
    TableElement: function TableElement() {
    },
    TableRowElement: function TableRowElement() {
    },
    TableSectionElement: function TableSectionElement() {
    },
    TaskAttributionTiming: function TaskAttributionTiming() {
    },
    TemplateElement: function TemplateElement() {
    },
    Text: function Text() {
    },
    TextAreaElement: function TextAreaElement() {
    },
    TextDetector: function TextDetector() {
    },
    TextEvent: function TextEvent() {
    },
    TextMetrics: function TextMetrics() {
    },
    TextTrack: function TextTrack() {
    },
    TextTrackCue: function TextTrackCue() {
    },
    TextTrackCueList: function TextTrackCueList() {
    },
    TextTrackList: function TextTrackList() {
    },
    TimeElement: function TimeElement() {
    },
    TimeRanges: function TimeRanges() {
    },
    TitleElement: function TitleElement() {
    },
    Touch: function Touch() {
    },
    TouchEvent: function TouchEvent() {
    },
    TouchList: function TouchList() {
    },
    TrackDefault: function TrackDefault() {
    },
    TrackDefaultList: function TrackDefaultList() {
    },
    TrackElement: function TrackElement() {
    },
    TrackEvent: function TrackEvent() {
    },
    TransitionEvent: function TransitionEvent() {
    },
    TreeWalker: function TreeWalker() {
    },
    TrustedHtml: function TrustedHtml() {
    },
    TrustedScriptUrl: function TrustedScriptUrl() {
    },
    TrustedUrl: function TrustedUrl() {
    },
    UIEvent: function UIEvent() {
    },
    UListElement: function UListElement() {
    },
    UnderlyingSourceBase: function UnderlyingSourceBase() {
    },
    UnknownElement: function UnknownElement() {
    },
    Url: function Url() {
    },
    UrlSearchParams: function UrlSearchParams() {
    },
    UrlUtilsReadOnly: function UrlUtilsReadOnly() {
    },
    VR: function VR() {
    },
    VRCoordinateSystem: function VRCoordinateSystem() {
    },
    VRDevice: function VRDevice() {
    },
    VRDeviceEvent: function VRDeviceEvent() {
    },
    VRDisplay: function VRDisplay() {
    },
    VRDisplayCapabilities: function VRDisplayCapabilities() {
    },
    VRDisplayEvent: function VRDisplayEvent() {
    },
    VREyeParameters: function VREyeParameters() {
    },
    VRFrameData: function VRFrameData() {
    },
    VRFrameOfReference: function VRFrameOfReference() {
    },
    VRPose: function VRPose() {
    },
    VRSession: function VRSession() {
    },
    VRSessionEvent: function VRSessionEvent() {
    },
    VRStageBounds: function VRStageBounds() {
    },
    VRStageBoundsPoint: function VRStageBoundsPoint() {
    },
    VRStageParameters: function VRStageParameters() {
    },
    ValidityState: function ValidityState() {
    },
    VideoElement: function VideoElement() {
    },
    VideoPlaybackQuality: function VideoPlaybackQuality() {
    },
    VideoTrack: function VideoTrack() {
    },
    VideoTrackList: function VideoTrackList() {
    },
    VisualViewport: function VisualViewport() {
    },
    VttCue: function VttCue() {
    },
    VttRegion: function VttRegion() {
    },
    WebSocket0: function WebSocket0() {
    },
    WheelEvent: function WheelEvent() {
    },
    Window: function Window() {
    },
    _BeforeUnloadEvent: function _BeforeUnloadEvent() {
    },
    _BeforeUnloadEventStreamProvider: function _BeforeUnloadEventStreamProvider() {
    },
    WindowBase64: function WindowBase64() {
    },
    WindowClient: function WindowClient() {
    },
    WindowEventHandlers: function WindowEventHandlers() {
    },
    Worker: function Worker() {
    },
    WorkerGlobalScope: function WorkerGlobalScope() {
    },
    WorkerPerformance: function WorkerPerformance() {
    },
    WorkletAnimation: function WorkletAnimation() {
    },
    WorkletGlobalScope: function WorkletGlobalScope() {
    },
    XPathEvaluator: function XPathEvaluator() {
    },
    XPathExpression: function XPathExpression() {
    },
    XPathNSResolver: function XPathNSResolver() {
    },
    XPathResult: function XPathResult() {
    },
    XmlDocument: function XmlDocument() {
    },
    XmlSerializer: function XmlSerializer() {
    },
    XsltProcessor: function XsltProcessor() {
    },
    _Attr: function _Attr() {
    },
    _Bluetooth: function _Bluetooth() {
    },
    _BluetoothCharacteristicProperties: function _BluetoothCharacteristicProperties() {
    },
    _BluetoothDevice: function _BluetoothDevice() {
    },
    _BluetoothRemoteGATTCharacteristic: function _BluetoothRemoteGATTCharacteristic() {
    },
    _BluetoothRemoteGATTServer: function _BluetoothRemoteGATTServer() {
    },
    _BluetoothRemoteGATTService: function _BluetoothRemoteGATTService() {
    },
    _BluetoothUUID: function _BluetoothUUID() {
    },
    _BudgetService: function _BudgetService() {
    },
    _Cache: function _Cache() {
    },
    _CanvasPath: function _CanvasPath() {
    },
    _Clipboard: function _Clipboard() {
    },
    _CssRuleList: function _CssRuleList() {
    },
    _DOMFileSystemSync: function _DOMFileSystemSync() {
    },
    _DirectoryEntrySync: function _DirectoryEntrySync() {
    },
    _DirectoryReaderSync: function _DirectoryReaderSync() {
    },
    _DocumentType: function _DocumentType() {
    },
    _DomRect: function _DomRect() {
    },
    _JenkinsSmiHash: function _JenkinsSmiHash() {
    },
    _EntrySync: function _EntrySync() {
    },
    _FileEntrySync: function _FileEntrySync() {
    },
    _FileReaderSync: function _FileReaderSync() {
    },
    _FileWriterSync: function _FileWriterSync() {
    },
    _GamepadList: function _GamepadList() {
    },
    _HTMLAllCollection: function _HTMLAllCollection() {
    },
    _HTMLDirectoryElement: function _HTMLDirectoryElement() {
    },
    _HTMLFontElement: function _HTMLFontElement() {
    },
    _HTMLFrameElement: function _HTMLFrameElement() {
    },
    _HTMLFrameSetElement: function _HTMLFrameSetElement() {
    },
    _HTMLMarqueeElement: function _HTMLMarqueeElement() {
    },
    _Mojo: function _Mojo() {
    },
    _MojoHandle: function _MojoHandle() {
    },
    _MojoInterfaceInterceptor: function _MojoInterfaceInterceptor() {
    },
    _MojoInterfaceRequestEvent: function _MojoInterfaceRequestEvent() {
    },
    _MojoWatcher: function _MojoWatcher() {
    },
    _NFC: function _NFC() {
    },
    _NamedNodeMap: function _NamedNodeMap() {
    },
    _PagePopupController: function _PagePopupController() {
    },
    _Report: function _Report() {
    },
    _Request: function _Request() {
    },
    _ResourceProgressEvent: function _ResourceProgressEvent() {
    },
    _Response: function _Response() {
    },
    _SpeechRecognitionResultList: function _SpeechRecognitionResultList() {
    },
    _StyleSheetList: function _StyleSheetList() {
    },
    _SubtleCrypto: function _SubtleCrypto() {
    },
    _USB: function _USB() {
    },
    _USBAlternateInterface: function _USBAlternateInterface() {
    },
    _USBConfiguration: function _USBConfiguration() {
    },
    _USBConnectionEvent: function _USBConnectionEvent() {
    },
    _USBDevice: function _USBDevice() {
    },
    _USBEndpoint: function _USBEndpoint() {
    },
    _USBInTransferResult: function _USBInTransferResult() {
    },
    _USBInterface: function _USBInterface() {
    },
    _USBIsochronousInTransferPacket: function _USBIsochronousInTransferPacket() {
    },
    _USBIsochronousInTransferResult: function _USBIsochronousInTransferResult() {
    },
    _USBIsochronousOutTransferPacket: function _USBIsochronousOutTransferPacket() {
    },
    _USBIsochronousOutTransferResult: function _USBIsochronousOutTransferResult() {
    },
    _USBOutTransferResult: function _USBOutTransferResult() {
    },
    _WindowTimers: function _WindowTimers() {
    },
    _WorkerLocation: function _WorkerLocation() {
    },
    _WorkerNavigator: function _WorkerNavigator() {
    },
    _Worklet: function _Worklet() {
    },
    _AttributeMap: function _AttributeMap() {
    },
    _ElementAttributeMap: function _ElementAttributeMap() {
    },
    _NamespacedAttributeMap: function _NamespacedAttributeMap() {
    },
    _DataAttributeMap: function _DataAttributeMap() {
    },
    CanvasImageSource: function CanvasImageSource() {
    },
    WindowBase: function WindowBase() {
    },
    LocationBase: function LocationBase() {
    },
    HistoryBase: function HistoryBase() {
    },
    CssClassSet: function CssClassSet() {
    },
    _ContentCssRect: function _ContentCssRect() {
    },
    _ContentCssListRect: function _ContentCssListRect() {
    },
    _PaddingCssRect: function _PaddingCssRect() {
    },
    _BorderCssRect: function _BorderCssRect() {
    },
    _MarginCssRect: function _MarginCssRect() {
    },
    CssRect: function CssRect() {
    },
    _MultiElementCssClassSet: function _MultiElementCssClassSet() {
    },
    _ElementCssClassSet: function _ElementCssClassSet() {
    },
    Dimension: function Dimension() {
    },
    EventStreamProvider: function EventStreamProvider(t0, t1) {
      this._eventType = t0;
      this.$ti = t1;
    },
    ElementStream: function ElementStream() {
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._html$_target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _ElementEventStreamImpl: function _ElementEventStreamImpl() {
    },
    _ElementListEventStreamImpl: function _ElementListEventStreamImpl() {
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._pauseCount = 0;
      _._html$_target = t0;
      _._eventType = t1;
      _._html$_onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0, t1) {
      this.onData = t0;
      this.$ti = t1;
    },
    CustomStream: function CustomStream() {
    },
    _CustomEventStreamImpl: function _CustomEventStreamImpl() {
    },
    _CustomKeyEventStreamImpl: function _CustomKeyEventStreamImpl() {
    },
    _StreamPool: function _StreamPool() {
    },
    _CustomEventStreamProvider: function _CustomEventStreamProvider() {
    },
    _Html5NodeValidator: function _Html5NodeValidator() {
    },
    ImmutableListMixin: function ImmutableListMixin() {
    },
    KeyCode: function KeyCode() {
    },
    KeyLocation: function KeyLocation() {
    },
    _KeyName: function _KeyName() {
    },
    _KeyboardEventHandler: function _KeyboardEventHandler() {
    },
    KeyboardEventStream: function KeyboardEventStream() {
    },
    NodeValidatorBuilder: function NodeValidatorBuilder() {
    },
    _SimpleNodeValidator: function _SimpleNodeValidator() {
    },
    _CustomElementNodeValidator: function _CustomElementNodeValidator() {
    },
    _TemplatingNodeValidator: function _TemplatingNodeValidator() {
    },
    _SvgNodeValidator: function _SvgNodeValidator() {
    },
    ReadyState: function ReadyState() {
    },
    _WrappedList: function _WrappedList() {
    },
    _WrappedIterator: function _WrappedIterator() {
    },
    _HttpRequestUtils: function _HttpRequestUtils() {
    },
    FixedSizeListIterator: function FixedSizeListIterator() {
    },
    _VariableSizeListIterator: function _VariableSizeListIterator() {
    },
    Console: function Console() {
    },
    _JSElementUpgrader: function _JSElementUpgrader() {
    },
    _DOMWindowCrossFrame: function _DOMWindowCrossFrame() {
    },
    _LocationCrossFrame: function _LocationCrossFrame() {
    },
    _HistoryCrossFrame: function _HistoryCrossFrame() {
    },
    KeyEvent: function KeyEvent() {
    },
    Platform: function Platform() {
    },
    _WrappedEvent: function _WrappedEvent() {
    },
    ElementUpgrader: function ElementUpgrader() {
    },
    NodeValidator: function NodeValidator() {
    },
    NodeTreeSanitizer: function NodeTreeSanitizer() {
    },
    _TrustedHtmlTreeSanitizer: function _TrustedHtmlTreeSanitizer() {
    },
    UriPolicy: function UriPolicy() {
    },
    _SameOriginUriPolicy: function _SameOriginUriPolicy() {
    },
    _ThrowsNodeValidator: function _ThrowsNodeValidator() {
    },
    _ValidatingTreeSanitizer: function _ValidatingTreeSanitizer() {
    },
    _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase: function _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase() {
    },
    _DomRectList_Interceptor_ListMixin: function _DomRectList_Interceptor_ListMixin() {
    },
    _DomRectList_Interceptor_ListMixin_ImmutableListMixin: function _DomRectList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _DomStringList_Interceptor_ListMixin: function _DomStringList_Interceptor_ListMixin() {
    },
    _DomStringList_Interceptor_ListMixin_ImmutableListMixin: function _DomStringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _FileList_Interceptor_ListMixin: function _FileList_Interceptor_ListMixin() {
    },
    _FileList_Interceptor_ListMixin_ImmutableListMixin: function _FileList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin: function _HtmlCollection_Interceptor_ListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin: function _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _MidiInputMap_Interceptor_MapMixin: function _MidiInputMap_Interceptor_MapMixin() {
    },
    _MidiOutputMap_Interceptor_MapMixin: function _MidiOutputMap_Interceptor_MapMixin() {
    },
    _MimeTypeArray_Interceptor_ListMixin: function _MimeTypeArray_Interceptor_ListMixin() {
    },
    _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin: function _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NodeList_Interceptor_ListMixin: function _NodeList_Interceptor_ListMixin() {
    },
    _NodeList_Interceptor_ListMixin_ImmutableListMixin: function _NodeList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _PluginArray_Interceptor_ListMixin: function _PluginArray_Interceptor_ListMixin() {
    },
    _PluginArray_Interceptor_ListMixin_ImmutableListMixin: function _PluginArray_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _RtcStatsReport_Interceptor_MapMixin: function _RtcStatsReport_Interceptor_MapMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin: function _SourceBufferList_EventTarget_ListMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin: function _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _SpeechGrammarList_Interceptor_ListMixin: function _SpeechGrammarList_Interceptor_ListMixin() {
    },
    _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin: function _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _Storage_Interceptor_MapMixin: function _Storage_Interceptor_MapMixin() {
    },
    _TextTrackCueList_Interceptor_ListMixin: function _TextTrackCueList_Interceptor_ListMixin() {
    },
    _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin: function _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin: function _TextTrackList_EventTarget_ListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin_ImmutableListMixin: function _TextTrackList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _TouchList_Interceptor_ListMixin: function _TouchList_Interceptor_ListMixin() {
    },
    _TouchList_Interceptor_ListMixin_ImmutableListMixin: function _TouchList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __CssRuleList_Interceptor_ListMixin: function __CssRuleList_Interceptor_ListMixin() {
    },
    __CssRuleList_Interceptor_ListMixin_ImmutableListMixin: function __CssRuleList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __CssStyleDeclarationSet_Object_CssStyleDeclarationBase: function __CssStyleDeclarationSet_Object_CssStyleDeclarationBase() {
    },
    __GamepadList_Interceptor_ListMixin: function __GamepadList_Interceptor_ListMixin() {
    },
    __GamepadList_Interceptor_ListMixin_ImmutableListMixin: function __GamepadList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin: function __NamedNodeMap_Interceptor_ListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin: function __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin() {
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __StyleSheetList_Interceptor_ListMixin: function __StyleSheetList_Interceptor_ListMixin() {
    },
    __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin: function __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin() {
    }
  },
  S = {AsyncCache: function AsyncCache() {
    }, AsyncMemoizer: function AsyncMemoizer() {
    }, NullStreamSink: function NullStreamSink() {
    }, CopyOnWriteMap: function CopyOnWriteMap() {
    },
    BuiltList_BuiltList: function(iterable, $E) {
      return S.BuiltList_BuiltList$from(H.listSuperNativeTypeCheck(iterable, "$isIterable"), $E);
    },
    BuiltList_BuiltList$from: function(iterable, $E) {
      H.listSuperNativeTypeCheck(iterable, "$isIterable");
      if (iterable instanceof S._BuiltList && iterable.hasExactElementType$1(H.createRuntimeType($E)))
        return H.subtypeCast(iterable, "$isBuiltList", [$E], "$asBuiltList");
      else
        return S._BuiltList$copyAndCheckTypes(iterable, $E);
    },
    _BuiltList$withSafeList: function(list, $E) {
      var t1 = new S._BuiltList(list, [$E]);
      t1.BuiltList$_$1(list, $E);
      return t1;
    },
    _BuiltList$copyAndCheckTypes: function(iterable, $E) {
      var t1 = P.List_List$from(iterable, false, $E),
        t2 = new S._BuiltList(t1, [$E]);
      t2.BuiltList$_$1(t1, $E);
      t2._BuiltList$copyAndCheckTypes$1(iterable, $E);
      return t2;
    },
    ListBuilder_ListBuilder: function(iterable, $E) {
      var t1;
      H.listSuperNativeTypeCheck(iterable, "$isIterable");
      t1 = S.ListBuilder$_uninitialized($E);
      t1.replace$1(0, iterable);
      return t1;
    },
    ListBuilder$_uninitialized: function($E) {
      var t1 = new S.ListBuilder([$E]);
      t1.ListBuilder$_uninitialized$0($E);
      return t1;
    },
    OverriddenHashcodeBuiltList: function OverriddenHashcodeBuiltList() {
    },
    BuiltList: function BuiltList() {
    },
    _BuiltList: function _BuiltList(t0, t1) {
      this._list = t0;
      this._list$_hashCode = null;
      this.$ti = t1;
    },
    ListBuilder: function ListBuilder(t0) {
      this._listOwner = this._list = null;
      this.$ti = t0;
    },
    CombinedIterableView: function CombinedIterableView() {
    },
    _CombinedIterator: function _CombinedIterator() {
    },
    ChunkedCodingCodec: function ChunkedCodingCodec() {
    },
    BiMap: function BiMap() {
    },
    HashBiMap: function HashBiMap() {
    },
    DelegatingIterable0: function DelegatingIterable0() {
    },
    DelegatingList0: function DelegatingList0() {
    },
    DelegatingMap0: function DelegatingMap0() {
    },
    DelegatingQueue0: function DelegatingQueue0() {
    },
    DelegatingSet0: function DelegatingSet0() {
    },
    LruMap: function LruMap() {
    },
    _LinkedEntry: function _LinkedEntry() {
    },
    LinkedLruHashMap: function LinkedLruHashMap() {
    },
    Multimap: function Multimap() {
    },
    _BaseMultimap: function _BaseMultimap() {
    },
    ListMultimap: function ListMultimap() {
    },
    SetMultimap: function SetMultimap() {
    },
    _WrappedMap: function _WrappedMap() {
    },
    _WrappedIterable: function _WrappedIterable() {
    },
    _WrappedList0: function _WrappedList0() {
    },
    _WrappedSet: function _WrappedSet() {
    },
    TreeSet: function TreeSet() {
    },
    TreeSearch: function TreeSearch() {
    },
    _TreeNode: function _TreeNode() {
    },
    AvlTreeSet: function AvlTreeSet() {
    },
    _AvlTreeIterator: function _AvlTreeIterator() {
    },
    AvlNode: function AvlNode() {
    },
    SpanScanner: function SpanScanner() {
    },
    _SpanScannerState0: function _SpanScannerState0() {
    }
  },
  E = {CancelableOperation: function CancelableOperation() {
    }, CancelableCompleter: function CancelableCompleter() {
    }, Result: function Result() {
    },
    _BuiltSetMultimap$withSafeMap: function(map, $K, $V) {
      var t1 = new E._BuiltSetMultimap(map, L.BuiltSet_BuiltSet(C.List_empty0, $V), [$K, $V]);
      t1.BuiltSetMultimap$_$1(map, $K, $V);
      return t1;
    },
    SetMultimapBuilder_SetMultimapBuilder: function($K, $V) {
      var t1 = E.SetMultimapBuilder$_uninitialized($K, $V);
      t1.replace$1(0, C.Map_empty);
      return t1;
    },
    SetMultimapBuilder$_uninitialized: function($K, $V) {
      var t1 = new E.SetMultimapBuilder([$K, $V]);
      t1.SetMultimapBuilder$_uninitialized$0($K, $V);
      return t1;
    },
    OverriddenHashcodeBuiltSetMultimap: function OverriddenHashcodeBuiltSetMultimap() {
    },
    BuiltSetMultimap: function BuiltSetMultimap() {
    },
    BuiltSetMultimap_hashCode_closure: function BuiltSetMultimap_hashCode_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    _BuiltSetMultimap: function _BuiltSetMultimap(t0, t1, t2) {
      var _ = this;
      _._set_multimap$_map = t0;
      _._set_multimap$_emptySet = t1;
      _._set_multimap$_keys = _._set_multimap$_hashCode = null;
      _.$ti = t2;
    },
    SetMultimapBuilder: function SetMultimapBuilder(t0) {
      var _ = this;
      _._builderMap = _._builtMapOwner = _._builtMap = null;
      _.$ti = t0;
    },
    SetMultimapBuilder_replace_closure: function SetMultimapBuilder_replace_closure(t0, t1) {
      this.multimap = t0;
      this.$ti = t1;
    },
    EqualitySet: function EqualitySet() {
    },
    _IdentityConverter: function _IdentityConverter() {
    },
    IdentityCodec: function IdentityCodec() {
    },
    BaseClient: function BaseClient() {
    },
    ClientException$: function(message, uri) {
      return new E.ClientException(message, []);
    },
    ClientException: function ClientException(t0, t1) {
      this.message = t0;
      this.$ti = t1;
    },
    AuthenticationChallenge: function AuthenticationChallenge() {
    },
    ChunkedCodingEncoder: function ChunkedCodingEncoder() {
    },
    _Sink0: function _Sink0() {
    },
    PosixStyle$: function() {
      return new E.PosixStyle(P.RegExp_RegExp("/", true), P.RegExp_RegExp("[^/]$", true), P.RegExp_RegExp("^/", true), []);
    },
    PosixStyle: function PosixStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.$ti = t3;
    },
    StringScannerException$: function(message, span, source) {
      return new E.StringScannerException(source, message, span, []);
    },
    StringScannerException: function StringScannerException(t0, t1, t2, t3) {
      var _ = this;
      _._span_exception$_source = t0;
      _._span_exception$_message = t1;
      _._span = t2;
      _.$ti = t3;
    },
    GlyphSet: function GlyphSet() {
    },
    ConnectRequest_serializer: function() {
      return $.$get$_$connectRequestSerializer();
    },
    _$ConnectRequestSerializer$: function() {
      return new E._$ConnectRequestSerializer([]);
    },
    _$ConnectRequest__$ConnectRequest: function(updates) {
      var t1;
      H.functionTypeCheck(updates, {func: 1, ret: -1, args: [E.ConnectRequestBuilder]});
      t1 = E.ConnectRequestBuilder$();
      t1.update$1(updates);
      return t1.build$0();
    },
    _$ConnectRequest$_: function(appId, instanceId) {
      var t1 = new E._$ConnectRequest(appId, instanceId, []);
      t1._$ConnectRequest$_$2$appId$instanceId(appId, instanceId);
      return t1;
    },
    ConnectRequestBuilder$: function() {
      return new E.ConnectRequestBuilder([]);
    },
    ConnectRequest: function ConnectRequest() {
    },
    _$ConnectRequestSerializer: function _$ConnectRequestSerializer(t0) {
      this.$ti = t0;
    },
    _$ConnectRequest: function _$ConnectRequest(t0, t1, t2) {
      this.appId = t0;
      this.instanceId = t1;
      this.$ti = t2;
    },
    ConnectRequestBuilder: function ConnectRequestBuilder(t0) {
      var _ = this;
      _._connect_request$_instanceId = _._connect_request$_appId = _._connect_request$_$v = null;
      _.$ti = t0;
    }
  },
  V = {DelegatingEventSink: function DelegatingEventSink() {
    }, LazyStream: function LazyStream() {
    }, ErrorResult: function ErrorResult() {
    }, Sha256: function Sha256() {
    }, _Sha256Sink: function _Sha256Sink() {
    },
    Int32__decodeDigit: function(c) {
      H.intTypeCheck(c);
      if (typeof c !== "number")
        return c.$ge();
      if (c >= 48 && c <= 57)
        return c - 48;
      else if (c >= 97 && c <= 122)
        return c - 97 + 10;
      else if (c >= 65 && c <= 90)
        return c - 65 + 10;
      else
        return -1;
    },
    Int64$_bits: function(_l, _m, _h) {
      return new V.Int64(_l, _m, _h, []);
    },
    Int64__parseRadix: function(s, radix) {
      var t1, i, negative, d0, d1, d2, c, digit, t2, d00, d10;
      H.stringTypeCheck(s);
      H.intTypeCheck(radix);
      t1 = s.length;
      if (0 >= t1)
        return H.ioore(s, 0);
      if (J.$eq$(s[0], "-")) {
        i = 1;
        negative = true;
      } else {
        i = 0;
        negative = false;
      }
      for (d0 = 0, d1 = 0, d2 = 0; i < t1; ++i, d1 = d10, d0 = d00) {
        c = C.JSString_methods._codeUnitAt$1(s, i);
        digit = V.Int32__decodeDigit(c);
        if (typeof digit !== "number")
          return digit.$lt();
        if (digit >= 0) {
          if (typeof radix !== "number")
            return H.iae(radix);
          t2 = digit >= radix;
        } else
          t2 = true;
        if (t2)
          throw H.wrapException(P.FormatException$("Non-radix char code: " + H.S(c), null, null));
        if (typeof radix !== "number")
          return H.iae(radix);
        d0 = d0 * radix + digit;
        d00 = 4194303 & d0;
        d1 = d1 * radix + C.JSInt_methods._shrOtherPositive$1(d0, 22);
        d10 = 4194303 & d1;
        d2 = 1048575 & d2 * radix + C.JSInt_methods._shrOtherPositive$1(d1, 22);
      }
      if (negative)
        return V.Int64__negate(d0, d1, d2);
      return V.Int64__masked(d0, d1, d2);
    },
    Int64_parseInt: function(s) {
      return V.Int64__parseRadix(H.stringTypeCheck(s), 10);
    },
    Int64_Int64: function(value) {
      var negative, v2, v1;
      H.intTypeCheck(value);
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0) {
        value = -value;
        negative = true;
      } else
        negative = false;
      v2 = C.JSInt_methods._tdivFast$1(value, 17592186044416);
      value -= v2 * 17592186044416;
      v1 = C.JSInt_methods._tdivFast$1(value, 4194304);
      value -= v1 * 4194304;
      return negative ? V.Int64__negate(4194303 & value, 4194303 & v1, 1048575 & v2) : V.Int64__masked(value, v1, v2);
    },
    Int64__promote: function(value) {
      if (value instanceof V.Int64)
        return value;
      else if (typeof value === "number" && Math.floor(value) === value)
        return V.Int64_Int64(value);
      throw H.wrapException(P.ArgumentError$value(value, null, null));
    },
    Int64__toRadixStringUnsigned: function(radix, d0, d1, d2, sign) {
      var d4, d3, fatRadix, chunk1, chunk2, chunk3, q, q0, q1, q2, q3, chunk10, residue, leadingDigits;
      H.intTypeCheck(radix);
      H.intTypeCheck(d0);
      H.intTypeCheck(d1);
      H.intTypeCheck(d2);
      H.stringTypeCheck(sign);
      if (d0 === 0 && d1 === 0 && d2 === 0)
        return "0";
      if (typeof d2 !== "number")
        return d2.$shl();
      if (typeof d1 !== "number")
        return d1.$shr();
      d4 = (d2 << 4 | C.JSInt_methods._shrOtherPositive$1(d1, 18)) >>> 0;
      d3 = C.JSInt_methods._shrOtherPositive$1(d1, 8) & 1023;
      if (typeof d0 !== "number")
        return d0.$shr();
      d2 = (d1 << 2 | C.JSInt_methods._shrOtherPositive$1(d0, 20)) & 1023;
      d1 = C.JSInt_methods._shrOtherPositive$1(d0, 10) & 1023;
      d0 &= 1023;
      fatRadix = C.JSArray_methods.$index(C.List_WrN, radix);
      chunk1 = "";
      chunk2 = "";
      chunk3 = "";
      while (true) {
        if (!!(d4 === 0 && d3 === 0))
          break;
        if (typeof fatRadix !== "number")
          return H.iae(fatRadix);
        q = C.JSInt_methods.$tdiv(d4, fatRadix);
        d3 += d4 - q * fatRadix << 10 >>> 0;
        q0 = C.JSInt_methods.$tdiv(d3, fatRadix);
        d2 += d3 - q0 * fatRadix << 10 >>> 0;
        q1 = C.JSInt_methods.$tdiv(d2, fatRadix);
        d1 += d2 - q1 * fatRadix << 10 >>> 0;
        q2 = C.JSInt_methods.$tdiv(d1, fatRadix);
        d0 += d1 - q2 * fatRadix << 10 >>> 0;
        q3 = C.JSInt_methods.$tdiv(d0, fatRadix);
        chunk10 = J.substring$1$s(C.JSInt_methods.toRadixString$1(fatRadix + (d0 - q3 * fatRadix), radix), 1);
        chunk3 = chunk2;
        chunk2 = chunk1;
        chunk1 = chunk10;
        d3 = q0;
        d4 = q;
        d2 = q1;
        d1 = q2;
        d0 = q3;
      }
      residue = (d2 << 20 >>> 0) + (d1 << 10 >>> 0) + d0;
      leadingDigits = residue === 0 ? "" : C.JSInt_methods.toRadixString$1(residue, radix);
      return H.S(sign) + H.S(leadingDigits) + H.S(chunk1) + H.S(chunk2) + H.S(chunk3);
    },
    Int64__masked: function(a0, a1, a2) {
      H.intTypeCheck(a0);
      H.intTypeCheck(a1);
      H.intTypeCheck(a2);
      if (typeof a0 !== "number")
        return H.iae(a0);
      if (typeof a1 !== "number")
        return H.iae(a1);
      if (typeof a2 !== "number")
        return H.iae(a2);
      return V.Int64$_bits(4194303 & a0, 4194303 & a1, 1048575 & a2);
    },
    Int64__sub: function(a0, a1, a2, b0, b1, b2) {
      var diff0, diff1;
      H.intTypeCheck(a0);
      H.intTypeCheck(a1);
      H.intTypeCheck(a2);
      H.intTypeCheck(b0);
      H.intTypeCheck(b1);
      H.intTypeCheck(b2);
      if (typeof a0 !== "number")
        return a0.$sub();
      if (typeof b0 !== "number")
        return H.iae(b0);
      diff0 = a0 - b0;
      if (typeof a1 !== "number")
        return a1.$sub();
      if (typeof b1 !== "number")
        return H.iae(b1);
      diff1 = a1 - b1 - (C.JSInt_methods._shrOtherPositive$1(diff0, 22) & 1);
      if (typeof a2 !== "number")
        return a2.$sub();
      if (typeof b2 !== "number")
        return H.iae(b2);
      return V.Int64__masked(diff0, diff1, a2 - b2 - (C.JSInt_methods._shrOtherPositive$1(diff1, 22) & 1));
    },
    Int64__negate: function(b0, b1, b2) {
      return V.Int64__sub(0, 0, 0, H.intTypeCheck(b0), H.intTypeCheck(b1), H.intTypeCheck(b2));
    },
    Int64__shiftRight: function(x, n) {
      var shifted;
      H.intTypeCheck(x);
      H.intTypeCheck(n);
      if (typeof x !== "number")
        return x.$ge();
      if (x >= 0) {
        if (typeof n !== "number")
          return H.iae(n);
        return C.JSInt_methods.$shr(x, n);
      } else {
        if (typeof n !== "number")
          return H.iae(n);
        shifted = C.JSInt_methods.$shr(x, n);
        return shifted >= 2147483648 ? shifted - 4294967296 : shifted;
      }
    },
    Int64__divide: function(a, other, what) {
      var b, aNeg, bNeg;
      H.interceptedTypeCheck(a, "$isInt64");
      H.intTypeCheck(what);
      b = V.Int64__promote(other);
      if (b.get$isZero())
        throw H.wrapException(C.C_IntegerDivisionByZeroException);
      if (a.get$isZero())
        return C.Int64_0_0_0;
      aNeg = a.get$isNegative(a);
      bNeg = b.get$isNegative(b);
      a = a.abs$0(0);
      b = b.abs$0(0);
      return V.Int64__divideHelper(a._l, a._m, a._h, aNeg, b._l, b._m, b._h, bNeg, what);
    },
    Int64__divideHelper: function(a0, a1, a2, aNeg, b0, b1, b2, bNeg, what) {
      var t1, q2, d1, q1, d0, q0, r0, r1, r2, qd, q2d, q1d, q0d, p0d, p0carry, p1d, p1carry, diff0, diff1, m;
      H.intTypeCheck(a0);
      H.intTypeCheck(a1);
      H.intTypeCheck(a2);
      H.boolTypeCheck(aNeg);
      H.intTypeCheck(b0);
      H.intTypeCheck(b1);
      H.intTypeCheck(b2);
      H.boolTypeCheck(bNeg);
      H.intTypeCheck(what);
      if (b2 === 0)
        if (b1 === 0) {
          if (typeof b0 !== "number")
            return b0.$lt();
          t1 = b0 < 256;
        } else
          t1 = false;
      else
        t1 = false;
      if (t1) {
        if (typeof a2 !== "number")
          return a2.$tdiv();
        if (typeof b0 !== "number")
          return H.iae(b0);
        q2 = C.JSInt_methods.$tdiv(a2, b0);
        if (typeof a1 !== "number")
          return a1.$add();
        d1 = a1 + (a2 - q2 * b0 << 22 >>> 0);
        q1 = C.JSInt_methods.$tdiv(d1, b0);
        if (typeof a0 !== "number")
          return a0.$add();
        d0 = a0 + (d1 - q1 * b0 << 22 >>> 0);
        q0 = C.JSInt_methods.$tdiv(d0, b0);
        r0 = d0 - q0 * b0;
        r1 = 0;
        r2 = 0;
      } else {
        if (typeof a1 !== "number")
          return H.iae(a1);
        if (typeof a0 !== "number")
          return a0.$add();
        if (typeof a2 !== "number")
          return H.iae(a2);
        if (typeof b1 !== "number")
          return H.iae(b1);
        if (typeof b0 !== "number")
          return b0.$add();
        if (typeof b2 !== "number")
          return H.iae(b2);
        qd = C.JSDouble_methods.floorToDouble$0((a0 + 4194304 * a1 + 17592186044416 * a2) / (b0 + 4194304 * b1 + 17592186044416 * b2));
        if (typeof qd !== "number")
          return qd.$div();
        q2d = C.JSDouble_methods.floorToDouble$0(qd / 17592186044416);
        if (typeof q2d !== "number")
          return H.iae(q2d);
        qd -= 17592186044416 * q2d;
        q1d = C.JSDouble_methods.floorToDouble$0(qd / 4194304);
        if (typeof q1d !== "number")
          return H.iae(q1d);
        q0d = qd - 4194304 * q1d;
        q2 = C.JSNumber_methods.toInt$0(q2d);
        q1 = C.JSNumber_methods.toInt$0(q1d);
        q0 = C.JSNumber_methods.toInt$0(q0d);
        p0d = q0d * b0;
        p0carry = C.JSDouble_methods.floorToDouble$0(p0d / 4194304);
        if (typeof p0carry !== "number")
          return p0carry.$mul();
        p1d = q1d * b0 + q0d * b1 + p0carry;
        p1carry = C.JSDouble_methods.floorToDouble$0(p1d / 4194304);
        if (typeof p1carry !== "number")
          return p1carry.$mul();
        t1 = C.JSNumber_methods.toInt$0(p0d - p0carry * 4194304);
        if (typeof t1 !== "number")
          return H.iae(t1);
        diff0 = a0 - t1;
        t1 = C.JSNumber_methods.toInt$0(p1d - p1carry * 4194304);
        if (typeof t1 !== "number")
          return H.iae(t1);
        diff1 = a1 - t1 - (C.JSInt_methods._shrOtherPositive$1(diff0, 22) & 1);
        t1 = C.JSNumber_methods.toInt$0(q2d * b0 + q1d * b1 + q0d * b2 + p1carry);
        if (typeof t1 !== "number")
          return H.iae(t1);
        r0 = 4194303 & diff0;
        r1 = 4194303 & diff1;
        r2 = 1048575 & a2 - t1 - (C.JSInt_methods._shrOtherPositive$1(diff1, 22) & 1);
        while (true) {
          if (r2 < 524288)
            if (r2 <= b2)
              if (r2 === b2)
                if (r1 <= b1)
                  t1 = r1 === b1 && r0 >= b0;
                else
                  t1 = true;
              else
                t1 = false;
            else
              t1 = true;
          else
            t1 = true;
          if (!t1)
            break;
          m = (r2 & 524288) === 0 ? 1 : -1;
          d0 = r0 - m * b0;
          d1 = r1 - m * (b1 + (C.JSInt_methods._shrOtherPositive$1(d0, 22) & 1));
          r0 = 4194303 & d0;
          r1 = 4194303 & d1;
          r2 = 1048575 & r2 - m * (b2 + (C.JSInt_methods._shrOtherPositive$1(d1, 22) & 1));
          if (typeof q0 !== "number")
            return q0.$add();
          d0 = q0 + m;
          t1 = C.JSInt_methods._shrOtherPositive$1(d0, 22);
          if (typeof q1 !== "number")
            return q1.$add();
          d1 = q1 + m * (t1 & 1);
          t1 = C.JSInt_methods._shrOtherPositive$1(d1, 22);
          if (typeof q2 !== "number")
            return q2.$add();
          q0 = 4194303 & d0;
          q1 = 4194303 & d1;
          q2 = 1048575 & q2 + m * (t1 & 1);
        }
      }
      if (what === 1) {
        if (aNeg != bNeg)
          return V.Int64__negate(q0, q1, q2);
        return V.Int64__masked(q0, q1, q2);
      }
      if (!aNeg)
        return V.Int64__masked(r0, r1, r2);
      if (what === 3)
        if (r0 === 0 && r1 === 0 && r2 === 0)
          return C.Int64_0_0_0;
        else
          return V.Int64__sub(b0, b1, b2, r0, r1, r2);
      else
        return V.Int64__negate(r0, r1, r2);
    },
    Int32: function Int32() {
    },
    Int64: function Int64(t0, t1, t2, t3) {
      var _ = this;
      _._l = t0;
      _._m = t1;
      _._h = t2;
      _.$ti = t3;
    },
    IntX: function IntX() {
    },
    SourceLocation$: function(offset, column, line, sourceUrl) {
      var t1 = H.interceptedTypeCheck(typeof sourceUrl === "string" ? P.Uri_parse(sourceUrl) : sourceUrl, "$isUri"),
        t2 = line == null ? 0 : line,
        t3 = column == null ? offset : column;
      t3 = new V.SourceLocation(t1, offset, t2, t3, []);
      t3.SourceLocation$4$column$line$sourceUrl(offset, column, line, sourceUrl);
      return t3;
    },
    SourceLocation: function SourceLocation(t0, t1, t2, t3, t4) {
      var _ = this;
      _.sourceUrl = t0;
      _.offset = t1;
      _.line = t2;
      _.column = t3;
      _.$ti = t4;
    },
    SourceLocationBase: function SourceLocationBase() {
    },
    SourceSpan: function SourceSpan() {
    },
    SourceSpanBase: function SourceSpanBase() {
    }
  },
  R = {DelegatingFuture: function DelegatingFuture() {
    }, ResultFuture: function ResultFuture() {
    },
    BoolSerializer$: function() {
      return new R.BoolSerializer(S.BuiltList_BuiltList([C.Type_bool_lhE], P.Type), []);
    },
    BoolSerializer: function BoolSerializer(t0, t1) {
      this.types = t0;
      this.$ti = t1;
    },
    BuiltListMultimapSerializer$: function() {
      var t1 = P.Object;
      return new R.BuiltListMultimapSerializer(S.BuiltList_BuiltList([C.Type_BuiltListMultimap_2Mt, J.get$runtimeType$(M.BuiltListMultimap_BuiltListMultimap(t1, t1))], P.Type), []);
    },
    BuiltListMultimapSerializer: function BuiltListMultimapSerializer(t0, t1) {
      this.types = t0;
      this.$ti = t1;
    },
    BuiltListMultimapSerializer_serialize_closure: function BuiltListMultimapSerializer_serialize_closure(t0, t1, t2) {
      this.serializers = t0;
      this.valueType = t1;
      this.$ti = t2;
    },
    BuiltListMultimapSerializer_deserialize_closure: function BuiltListMultimapSerializer_deserialize_closure(t0, t1, t2) {
      this.serializers = t0;
      this.valueType = t1;
      this.$ti = t2;
    },
    BuiltSetMultimapSerializer$: function() {
      return new R.BuiltSetMultimapSerializer(L.BuiltSet_BuiltSet([C.Type_BuiltSetMultimap_9Fi], P.Type), []);
    },
    BuiltSetMultimapSerializer: function BuiltSetMultimapSerializer(t0, t1) {
      this.types = t0;
      this.$ti = t1;
    },
    BuiltSetMultimapSerializer_serialize_closure: function BuiltSetMultimapSerializer_serialize_closure(t0, t1, t2) {
      this.serializers = t0;
      this.valueType = t1;
      this.$ti = t2;
    },
    BuiltSetMultimapSerializer_deserialize_closure: function BuiltSetMultimapSerializer_deserialize_closure(t0, t1, t2) {
      this.serializers = t0;
      this.valueType = t1;
      this.$ti = t2;
    },
    _convert: function(bytes, start, end) {
      var buffer, t1, t2, i, bufferIndex, byteOr, byte, bufferIndex0;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      buffer = H.NativeUint8List_NativeUint8List((end - start) * 2);
      for (t1 = J.getInterceptor$asx(bytes), t2 = buffer && C.NativeUint8List_methods, i = start, bufferIndex = 0, byteOr = 0; i < end; ++i) {
        byte = t1.$index(bytes, i);
        if (typeof byte !== "number")
          return H.iae(byte);
        byteOr = (byteOr | byte) >>> 0;
        bufferIndex0 = bufferIndex + 1;
        t2.$indexSet(buffer, bufferIndex, R._codeUnitForDigit((byte & 240) >>> 4));
        bufferIndex = bufferIndex0 + 1;
        C.NativeUint8List_methods.$indexSet(buffer, bufferIndex0, R._codeUnitForDigit(byte & 15));
      }
      if (byteOr >= 0 && byteOr <= 255)
        return P.String_String$fromCharCodes(buffer, 0, null);
      for (i = start; i < end; ++i) {
        byte = t1.$index(bytes, i);
        if (typeof byte !== "number")
          return byte.$ge();
        if (byte >= 0 && byte <= 255)
          continue;
        throw H.wrapException(P.FormatException$("Invalid byte " + (byte < 0 ? "-" : "") + "0x" + H.S(C.JSInt_methods.toRadixString$1(Math.abs(byte), 16)) + ".", bytes, i));
      }
      throw H.wrapException("unreachable");
    },
    _codeUnitForDigit: function(digit) {
      H.intTypeCheck(digit);
      if (typeof digit !== "number")
        return digit.$lt();
      return digit < 10 ? digit + 48 : digit + 97 - 10;
    },
    HexEncoder: function HexEncoder(t0) {
      this.$ti = t0;
    },
    _HexEncoderSink: function _HexEncoderSink() {
    },
    DigestSink: function DigestSink() {
    },
    MediaType_MediaType$parse: function(mediaType) {
      H.stringTypeCheck(mediaType);
      return B.wrapFormatException("media type", mediaType, new R.MediaType_MediaType$parse_closure(mediaType), R.MediaType);
    },
    MediaType$: function(type, subtype, parameters) {
      var t1 = J.toLowerCase$0$s(type),
        t2 = J.toLowerCase$0$s(subtype),
        t3 = P.String;
      return new R.MediaType(t1, t2, P.UnmodifiableMapView$(parameters == null ? P.LinkedHashMap_LinkedHashMap$_empty(t3, t3) : Z.CaseInsensitiveMap$from(parameters, t3), t3, t3), []);
    },
    MediaType: function MediaType(t0, t1, t2, t3) {
      var _ = this;
      _.type = t0;
      _.subtype = t1;
      _.parameters = t2;
      _.$ti = t3;
    },
    MediaType_MediaType$parse_closure: function MediaType_MediaType$parse_closure(t0, t1) {
      this.mediaType = t0;
      this.$ti = t1;
    },
    MediaType_toString_closure: function MediaType_toString_closure(t0, t1) {
      this.buffer = t0;
      this.$ti = t1;
    },
    MediaType_toString__closure: function MediaType_toString__closure(t0) {
      this.$ti = t0;
    },
    StreamChannel: function StreamChannel() {
    },
    _StreamChannel: function _StreamChannel() {
    },
    StreamChannelMixin: function StreamChannelMixin() {
    },
    RelativeSpanScanner: function RelativeSpanScanner() {
    },
    _SpanScannerState: function _SpanScannerState() {
    }
  },
  O = {DelegatingSink: function DelegatingSink() {
    }, DelegatingStreamSink: function DelegatingStreamSink() {
    },
    BigIntSerializer$: function() {
      return new O.BigIntSerializer(S.BuiltList_BuiltList([C.Type_BigInt_8OV, J.get$runtimeType$(P.BigInt_zero())], P.Type), []);
    },
    BigIntSerializer: function BigIntSerializer(t0, t1) {
      this.types = t0;
      this.$ti = t1;
    },
    BuiltSetSerializer$: function() {
      return new O.BuiltSetSerializer(S.BuiltList_BuiltList([C.Type_BuiltSet_fcN, J.get$runtimeType$(L.BuiltSet_BuiltSet(C.List_empty0, P.Object))], P.Type), []);
    },
    BuiltSetSerializer: function BuiltSetSerializer(t0, t1) {
      this.types = t0;
      this.$ti = t1;
    },
    BuiltSetSerializer_serialize_closure: function BuiltSetSerializer_serialize_closure(t0, t1, t2) {
      this.serializers = t0;
      this.elementType = t1;
      this.$ti = t2;
    },
    BuiltSetSerializer_deserialize_closure: function BuiltSetSerializer_deserialize_closure(t0, t1, t2) {
      this.serializers = t0;
      this.elementType = t1;
      this.$ti = t2;
    },
    JsonObjectSerializer$: function() {
      return new O.JsonObjectSerializer(S.BuiltList_BuiltList([C.Type_JsonObject_gyf, C.Type_BoolJsonObject_8HQ, C.Type_ListJsonObject_yPV, C.Type_MapJsonObject_bBG, C.Type_NumJsonObject_H9C, C.Type_StringJsonObject_GAC], P.Type), []);
    },
    JsonObjectSerializer: function JsonObjectSerializer(t0, t1) {
      this.types = t0;
      this.$ti = t1;
    },
    UriSerializer$: function() {
      return new O.UriSerializer(S.BuiltList_BuiltList([C.Type_Uri_EFX, J.get$runtimeType$(P.Uri_parse("http://example.com")), J.get$runtimeType$(P.Uri_parse("http://example.com:"))], P.Type), []);
    },
    UriSerializer: function UriSerializer(t0, t1) {
      this.types = t0;
      this.$ti = t1;
    },
    EmptyUnmodifiableSet: function EmptyUnmodifiableSet() {
    },
    BrowserClient$: function() {
      return new O.BrowserClient(P.LinkedHashSet_LinkedHashSet(W.HttpRequest), []);
    },
    BrowserClient: function BrowserClient(t0, t1) {
      this._xhrs = t0;
      this.withCredentials = false;
      this.$ti = t1;
    },
    BrowserClient_send_closure: function BrowserClient_send_closure(t0, t1, t2, t3) {
      var _ = this;
      _.xhr = t0;
      _.completer = t1;
      _.request = t2;
      _.$ti = t3;
    },
    BrowserClient_send__closure: function BrowserClient_send__closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.reader = t0;
      _.completer = t1;
      _.xhr = t2;
      _.request = t3;
      _.$ti = t4;
    },
    BrowserClient_send__closure0: function BrowserClient_send__closure0(t0, t1, t2) {
      this.completer = t0;
      this.request = t1;
      this.$ti = t2;
    },
    BrowserClient_send_closure0: function BrowserClient_send_closure0(t0, t1, t2) {
      this.completer = t0;
      this.request = t1;
      this.$ti = t2;
    },
    Request$: function(method, url) {
      var t1 = P.String;
      return new O.Request(C.C_Utf8Codec, H.NativeUint8List_NativeUint8List(0), method, url, P.LinkedHashMap_LinkedHashMap(new G.BaseRequest_closure(), new G.BaseRequest_closure0(), t1, t1), []);
    },
    Request: function Request(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._defaultEncoding = t0;
      _._bodyBytes = t1;
      _.method = t2;
      _.url = t3;
      _.headers = t4;
      _._finalized = false;
      _.$ti = t5;
    },
    Style__getPlatformStyle: function() {
      if (!J.$eq$(P.Uri_base().get$scheme(), "file"))
        return $.$get$Style_url();
      if (!J.endsWith$1$s(J.get$path$z(P.Uri_base()), "/"))
        return $.$get$Style_url();
      if (J.$eq$(P._Uri__Uri("a/b").toFilePath$0(), "a\\b"))
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    }
  },
  Y = {DelegatingStream: function DelegatingStream() {
    }, DelegatingStreamSubscription: function DelegatingStreamSubscription() {
    }, StreamCompleter: function StreamCompleter() {
    }, _CompleterStream: function _CompleterStream() {
    }, TypeSafeStreamSubscription: function TypeSafeStreamSubscription() {
    },
    $jc: function(hash, value) {
      H.intTypeCheck(hash);
      H.intTypeCheck(value);
      if (typeof hash !== "number")
        return hash.$add();
      if (typeof value !== "number")
        return H.iae(value);
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    $jf: function(hash) {
      H.intTypeCheck(hash);
      if (typeof hash !== "number")
        return H.iae(hash);
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    IndentingBuiltValueToStringHelper$: function(className) {
      var t1 = new Y.IndentingBuiltValueToStringHelper(P.StringBuffer$(""), []);
      t1.IndentingBuiltValueToStringHelper$1(className);
      return t1;
    },
    BuiltValueNullFieldError$: function(type, field) {
      return new Y.BuiltValueNullFieldError(type, field, []);
    },
    Built: function Built() {
    },
    Builder: function Builder() {
    },
    BuiltValue: function BuiltValue() {
    },
    BuiltValueField: function BuiltValueField() {
    },
    BuiltValueSerializer: function BuiltValueSerializer() {
    },
    BuiltValueEnum: function BuiltValueEnum() {
    },
    BuiltValueEnumConst: function BuiltValueEnumConst() {
    },
    EnumClass: function EnumClass() {
    },
    closure: function closure(t0) {
      this.$ti = t0;
    },
    BuiltValueToStringHelper: function BuiltValueToStringHelper() {
    },
    IndentingBuiltValueToStringHelper: function IndentingBuiltValueToStringHelper(t0, t1) {
      this._result = t0;
      this.$ti = t1;
    },
    FlatBuiltValueToStringHelper: function FlatBuiltValueToStringHelper() {
    },
    BuiltValueNullFieldError: function BuiltValueNullFieldError(t0, t1, t2) {
      this.type = t0;
      this.field = t1;
      this.$ti = t2;
    },
    BuiltValueMissingGenericsError: function BuiltValueMissingGenericsError() {
    },
    BuiltValueNestedFieldError: function BuiltValueNestedFieldError() {
    },
    BuiltJsonSerializers$_: function(_typeToSerializer, _wireNameToSerializer, _typeNameToSerializer, _builderFactories, _plugins) {
      return new Y.BuiltJsonSerializers(_typeToSerializer, _wireNameToSerializer, _typeNameToSerializer, _builderFactories, _plugins, []);
    },
    BuiltJsonSerializersBuilder_BuiltJsonSerializersBuilder: function() {
      var t1 = [U.Serializer,,],
        t2 = P.String;
      return Y.BuiltJsonSerializersBuilder$_(A.MapBuilder_MapBuilder(P.Type, t1), A.MapBuilder_MapBuilder(t2, t1), A.MapBuilder_MapBuilder(t2, t1), A.MapBuilder_MapBuilder(U.FullType, P.Function), S.ListBuilder_ListBuilder(C.List_empty0, U.SerializerPlugin));
    },
    BuiltJsonSerializersBuilder$_: function(_typeToSerializer, _wireNameToSerializer, _typeNameToSerializer, _builderFactories, _plugins) {
      return new Y.BuiltJsonSerializersBuilder(_typeToSerializer, _wireNameToSerializer, _typeNameToSerializer, _builderFactories, _plugins, []);
    },
    _getRawName: function(type) {
      var $name = J.toString$0$(H.interceptedTypeCheck(type, "$isType")),
        genericsStart = J.getInterceptor$s($name).indexOf$1($name, "<");
      return genericsStart === -1 ? $name : C.JSString_methods.substring$2($name, 0, genericsStart);
    },
    BuiltJsonSerializers: function BuiltJsonSerializers(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._typeToSerializer = t0;
      _._wireNameToSerializer = t1;
      _._typeNameToSerializer = t2;
      _._builderFactories = t3;
      _._plugins = t4;
      _.$ti = t5;
    },
    BuiltJsonSerializersBuilder: function BuiltJsonSerializersBuilder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._typeToSerializer = t0;
      _._wireNameToSerializer = t1;
      _._typeNameToSerializer = t2;
      _._builderFactories = t3;
      _._plugins = t4;
      _.$ti = t5;
    },
    PriorityQueue: function PriorityQueue() {
    },
    HeapPriorityQueue: function HeapPriorityQueue() {
    },
    UnionSetController: function UnionSetController() {
    },
    AccumulatorSink: function AccumulatorSink() {
    },
    SourceFile$fromString: function(text, url) {
      var t1 = J.get$codeUnits$s(text),
        t2 = H.setRuntimeTypeInfo([0], [P.int]);
      t2 = new Y.SourceFile(H.interceptedTypeCheck(typeof url === "string" ? P.Uri_parse(url) : url, "$isUri"), t2, H.NativeUint32List_NativeUint32List$fromList(J.toList$0$ax(t1)), null, []);
      t2.SourceFile$decoded$2$url(t1, url);
      return t2;
    },
    FileLocation$_: function(file, offset) {
      var t1 = new Y.FileLocation(file, offset, []);
      t1.FileLocation$_$2(file, offset);
      return t1;
    },
    _FileSpan$: function(file, _start, _end) {
      var t1 = new Y._FileSpan(file, _start, _end, []);
      t1._FileSpan$3(file, _start, _end);
      return t1;
    },
    SourceFile: function SourceFile(t0, t1, t2, t3, t4) {
      var _ = this;
      _.url = t0;
      _._lineStarts = t1;
      _._decodedChars = t2;
      _._cachedLine = t3;
      _.$ti = t4;
    },
    FileLocation: function FileLocation(t0, t1, t2) {
      this.file = t0;
      this.offset = t1;
      this.$ti = t2;
    },
    FileSpan: function FileSpan() {
    },
    _FileSpan: function _FileSpan(t0, t1, t2, t3) {
      var _ = this;
      _.file = t0;
      _._file$_start = t1;
      _._file$_end = t2;
      _.$ti = t3;
    },
    SourceSpanMixin: function SourceSpanMixin() {
    },
    JsonDocumentTransformer: function JsonDocumentTransformer() {
    },
    StreamChannelTransformer: function StreamChannelTransformer() {
    }
  },
  G = {DelegatingStreamConsumer: function DelegatingStreamConsumer() {
    }, StreamQueue: function StreamQueue() {
    }, StreamQueueTransaction: function StreamQueueTransaction() {
    }, _EventRequest: function _EventRequest() {
    }, _NextRequest: function _NextRequest() {
    }, _PeekRequest: function _PeekRequest() {
    }, _SkipRequest: function _SkipRequest() {
    }, _ListRequest: function _ListRequest() {
    }, _TakeRequest: function _TakeRequest() {
    }, _LookAheadRequest: function _LookAheadRequest() {
    }, _CancelRequest: function _CancelRequest() {
    }, _RestRequest: function _RestRequest() {
    }, _HasNextRequest: function _HasNextRequest() {
    }, _TransactionRequest: function _TransactionRequest() {
    }, HashSink: function HashSink() {
    }, BaseRequest: function BaseRequest() {
    }, BaseRequest_closure: function BaseRequest_closure(t0) {
      this.$ti = t0;
    }, BaseRequest_closure0: function BaseRequest_closure0(t0) {
      this.$ti = t0;
    },
    SourceSpanFormatException$: function(message, span, _source) {
      return new G.SourceSpanFormatException(_source, message, span, []);
    },
    SourceSpanException: function SourceSpanException() {
    },
    SourceSpanFormatException: function SourceSpanFormatException(t0, t1, t2, t3) {
      var _ = this;
      _._span_exception$_source = t0;
      _._span_exception$_message = t1;
      _._span = t2;
      _.$ti = t3;
    },
    Module$: function(libraries) {
      return new G.Module(libraries, []);
    },
    Library: function Library() {
    },
    Module: function Module(t0, t1) {
      this.libraries = t0;
      this.$ti = t1;
    }
  },
  F = {FutureGroup: function FutureGroup() {
    }, ValueResult: function ValueResult() {
    }, StreamSinkTransformer: function StreamSinkTransformer() {
    },
    UrlStyle$: function() {
      return new F.UrlStyle(P.RegExp_RegExp("/", true), P.RegExp_RegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", true), P.RegExp_RegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", true), P.RegExp_RegExp("^/", true), []);
    },
    UrlStyle: function UrlStyle(t0, t1, t2, t3, t4) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
      _.$ti = t4;
    },
    CloseGuaranteeChannel: function CloseGuaranteeChannel() {
    },
    _CloseGuaranteeStream: function _CloseGuaranteeStream() {
    },
    _CloseGuaranteeSink: function _CloseGuaranteeSink() {
    },
    Disconnector: function Disconnector() {
    },
    _DisconnectorSink: function _DisconnectorSink() {
    },
    Uuid$: function() {
      var t1 = new F.Uuid([]);
      t1.Uuid$0();
      return t1;
    },
    Uuid: function Uuid(t0) {
      var _ = this;
      _._clockSeq = _._nodeId = _._seedBytes = null;
      _._lastNSecs = _._lastMSecs = 0;
      _._hexToByte = _._byteToHex = null;
      _.$ti = t0;
    }
  },
  L = {RestartableTimer: function RestartableTimer() {
    }, StreamGroup: function StreamGroup() {
    }, _StreamGroupState: function _StreamGroupState() {
    }, StreamZip: function StreamZip() {
    },
    BuiltSet_BuiltSet: function(iterable, $E) {
      return L.BuiltSet_BuiltSet$from(H.listSuperNativeTypeCheck(iterable, "$isIterable"), $E);
    },
    BuiltSet_BuiltSet$from: function(iterable, $E) {
      H.listSuperNativeTypeCheck(iterable, "$isIterable");
      if (iterable instanceof L._BuiltSet && iterable.hasExactElementType$1(H.createRuntimeType($E)))
        return H.subtypeCast(iterable, "$isBuiltSet", [$E], "$asBuiltSet");
      else
        return L._BuiltSet$copyAndCheckTypes(iterable, $E);
    },
    _BuiltSet$withSafeSet: function(setFactory, set, $E) {
      var t1 = new L._BuiltSet(setFactory, set, [$E]);
      t1.BuiltSet$_$2(setFactory, set, $E);
      return t1;
    },
    _BuiltSet$copyAndCheckTypes: function(iterable, $E) {
      var t1 = P.LinkedHashSet_LinkedHashSet($E),
        t2 = new L._BuiltSet(null, t1, [$E]);
      t2.BuiltSet$_$2(null, t1, $E);
      t2._BuiltSet$copyAndCheckTypes$1(iterable, $E);
      return t2;
    },
    SetBuilder_SetBuilder: function($E) {
      var t1 = L.SetBuilder$_uninitialized($E);
      t1.replace$1(0, C.List_empty0);
      return t1;
    },
    SetBuilder$_uninitialized: function($E) {
      var t1 = new L.SetBuilder(null, null, null, [$E]);
      t1.SetBuilder$_uninitialized$0($E);
      return t1;
    },
    SetBuilder$_fromBuiltSet: function(set, $E) {
      return new L.SetBuilder(set._setFactory, set._set$_set, set, [$E]);
    },
    OverriddenHashcodeBuiltSet: function OverriddenHashcodeBuiltSet() {
    },
    BuiltSet: function BuiltSet() {
    },
    BuiltSet_hashCode_closure: function BuiltSet_hashCode_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    _BuiltSet: function _BuiltSet(t0, t1, t2) {
      var _ = this;
      _._setFactory = t0;
      _._set$_set = t1;
      _._set$_hashCode = null;
      _.$ti = t2;
    },
    SetBuilder: function SetBuilder(t0, t1, t2, t3) {
      var _ = this;
      _._setFactory = t0;
      _._set$_set = t1;
      _._setOwner = t2;
      _.$ti = t3;
    },
    CombinedMapView: function CombinedMapView() {
    },
    NonGrowableListView: function NonGrowableListView() {
    },
    NonGrowableListMixin: function NonGrowableListMixin() {
    },
    UnmodifiableSetView: function UnmodifiableSetView() {
    },
    UnmodifiableSetMixin: function UnmodifiableSetMixin() {
    },
    UnmodifiableMapMixin: function UnmodifiableMapMixin() {
    },
    _NonGrowableListView_DelegatingList_NonGrowableListMixin: function _NonGrowableListView_DelegatingList_NonGrowableListMixin() {
    },
    _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin: function _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin() {
    },
    Sha1: function Sha1() {
    },
    _Sha1Sink: function _Sha1Sink() {
    },
    stronglyConnectedComponents: function(nodes, edges, $T) {
      var equals, result, t1, lowLinks, indexes, onStack, strongConnect, node, _null = null, _box_0 = {};
      _box_0.equals = equals;
      _box_0.equals = null;
      H.assertSubtype(nodes, "$isIterable", [$T], "$asIterable");
      H.functionTypeCheck(edges, {func: 1, ret: [P.Iterable, $T], args: [$T]});
      H.functionTypeCheck(equals, {func: 1, ret: P.bool, args: [$T, $T]});
      result = H.setRuntimeTypeInfo([], [[P.List, $T]]);
      t1 = P.int;
      lowLinks = P.HashMap_HashMap(_null, _null, _null, $T, t1);
      indexes = P.HashMap_HashMap(_null, _null, _null, $T, t1);
      onStack = P.HashSet_HashSet(_null, _null, $T);
      _box_0.equals = L.strongly_connected_components___defaultEquals$closure();
      _box_0.index = 0;
      strongConnect = new L.stronglyConnectedComponents_strongConnect(_box_0, indexes, lowLinks, P.ListQueue$($T), onStack, edges, result, $T);
      for (t1 = J.get$iterator$ax(nodes); t1.moveNext$0();) {
        node = t1.get$current();
        if (!indexes.containsKey$1(node))
          strongConnect.call$1(node);
      }
      return result;
    },
    _defaultEquals0: function(a, b) {
      return J.$eq$(a, b);
    },
    stronglyConnectedComponents_strongConnect: function stronglyConnectedComponents_strongConnect(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._box_0 = t0;
      _.indexes = t1;
      _.lowLinks = t2;
      _.lastVisited = t3;
      _.onStack = t4;
      _.edges = t5;
      _.result = t6;
      _.T = t7;
      _.$ti = t8;
    },
    WindowsStyle$: function() {
      return new L.WindowsStyle(P.RegExp_RegExp("[/\\\\]", true), P.RegExp_RegExp("[^/\\\\]$", true), P.RegExp_RegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])", true), P.RegExp_RegExp("^[/\\\\](?![/\\\\])", true), []);
    },
    WindowsStyle: function WindowsStyle(t0, t1, t2, t3, t4) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
      _.$ti = t4;
    },
    _Count: function _Count() {
    },
    _CountIterator: function _CountIterator() {
    },
    _Cycle: function _Cycle() {
    },
    _CycleIterator: function _CycleIterator() {
    },
    IndexedValue: function IndexedValue() {
    },
    EnumerateIterable: function EnumerateIterable() {
    },
    EnumerateIterator: function EnumerateIterator() {
    },
    GeneratingIterable: function GeneratingIterable() {
    },
    _GeneratingIterator: function _GeneratingIterator() {
    },
    InfiniteIterable: function InfiniteIterable() {
    },
    _Merge: function _Merge() {
    },
    _IteratorPeeker: function _IteratorPeeker() {
    },
    _MergeIterator: function _MergeIterator() {
    },
    Extent: function Extent() {
    },
    _Partition: function _Partition() {
    },
    _PartitionIterator: function _PartitionIterator() {
    },
    DelegatingStreamChannel: function DelegatingStreamChannel() {
    },
    HotReloadFailedException$: function(_s) {
      return new L.HotReloadFailedException(_s, []);
    },
    ReloadingManager$: function(_reloadModule, _moduleLibraries, _reloadPage, _moduleParents, _allModules) {
      var t1 = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.int),
        t2 = P.Completer_Completer(-1);
      t2.complete$0();
      t2 = new L.ReloadingManager(_reloadModule, _moduleLibraries, _reloadPage, _moduleParents, _allModules, t1, t2, []);
      t2.ReloadingManager$5(_reloadModule, _moduleLibraries, _reloadPage, _moduleParents, _allModules);
      return t2;
    },
    HotReloadFailedException: function HotReloadFailedException(t0, t1) {
      this._s = t0;
      this.$ti = t1;
    },
    ReloadingManager: function ReloadingManager(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._reloadModule = t0;
      _._moduleLibraries = t1;
      _._reloadPage = t2;
      _._moduleParents = t3;
      _._allModules = t4;
      _._moduleOrdering = t5;
      _._dirtyModules = null;
      _._running = t6;
      _.$ti = t7;
    }
  },
  U = {CaptureSink: function CaptureSink() {
    },
    Serializers_Serializers: function() {
      var t1 = Y.BuiltJsonSerializersBuilder_BuiltJsonSerializersBuilder(),
        t2 = J.getInterceptor$ax(t1);
      t2.add$1(t1, O.BigIntSerializer$());
      t2.add$1(t1, R.BoolSerializer$());
      t2.add$1(t1, K.BuiltListSerializer$());
      t2.add$1(t1, R.BuiltListMultimapSerializer$());
      t2.add$1(t1, K.BuiltMapSerializer$());
      t2.add$1(t1, O.BuiltSetSerializer$());
      t2.add$1(t1, R.BuiltSetMultimapSerializer$());
      t2.add$1(t1, Z.DateTimeSerializer$());
      t2.add$1(t1, D.DoubleSerializer$());
      t2.add$1(t1, K.DurationSerializer$());
      t2.add$1(t1, B.IntSerializer$());
      t2.add$1(t1, Q.Int64Serializer$());
      t2.add$1(t1, O.JsonObjectSerializer$());
      t2.add$1(t1, K.NumSerializer$());
      t2.add$1(t1, K.RegExpSerializer$());
      t2.add$1(t1, M.StringSerializer$());
      t2.add$1(t1, O.UriSerializer$());
      t1.addBuilderFactory$2(C.FullType_GJM, new U.Serializers_Serializers_closure());
      t1.addBuilderFactory$2(C.FullType_UGJ, new U.Serializers_Serializers_closure0());
      t1.addBuilderFactory$2(C.FullType_sEu, new U.Serializers_Serializers_closure1());
      t1.addBuilderFactory$2(C.FullType_ECn, new U.Serializers_Serializers_closure2());
      t1.addBuilderFactory$2(C.FullType_C1B, new U.Serializers_Serializers_closure3());
      return t1.build$0();
    },
    FullType__getRawName: function(type) {
      var $name = J.toString$0$(H.interceptedTypeCheck(type, "$isType")),
        genericsStart = J.getInterceptor$s($name).indexOf$1($name, "<");
      return genericsStart === -1 ? $name : C.JSString_methods.substring$2($name, 0, genericsStart);
    },
    DeserializationError_DeserializationError: function(json, type, error) {
      var limitedJson, t1;
      H.interceptedTypeCheck(type, "$isFullType");
      H.interceptedTypeCheck(error, "$isError");
      limitedJson = J.toString$0$(json);
      t1 = limitedJson.length;
      return U.DeserializationError$_(t1 > 80 ? J.replaceRange$3$asx(limitedJson, 77, t1, "...") : limitedJson, type, error);
    },
    DeserializationError$_: function(json, type, error) {
      return new U.DeserializationError(json, type, error, []);
    },
    SerializersFor: function SerializersFor() {
    },
    Serializers: function Serializers() {
    },
    Serializers_Serializers_closure: function Serializers_Serializers_closure(t0) {
      this.$ti = t0;
    },
    Serializers_Serializers_closure0: function Serializers_Serializers_closure0(t0) {
      this.$ti = t0;
    },
    Serializers_Serializers_closure1: function Serializers_Serializers_closure1(t0) {
      this.$ti = t0;
    },
    Serializers_Serializers_closure2: function Serializers_Serializers_closure2(t0) {
      this.$ti = t0;
    },
    Serializers_Serializers_closure3: function Serializers_Serializers_closure3(t0) {
      this.$ti = t0;
    },
    SerializerPlugin: function SerializerPlugin() {
    },
    SerializersBuilder: function SerializersBuilder() {
    },
    FullType: function FullType(t0, t1, t2) {
      this.root = t0;
      this.parameters = t1;
      this.$ti = t2;
    },
    Serializer: function Serializer() {
    },
    PrimitiveSerializer: function PrimitiveSerializer() {
    },
    StructuredSerializer: function StructuredSerializer() {
    },
    DeserializationError: function DeserializationError(t0, t1, t2, t3) {
      var _ = this;
      _.json = t0;
      _.type = t1;
      _.error = t2;
      _.$ti = t3;
    },
    IterableEquality$: function(elementEquality, $E) {
      return new U.IterableEquality(elementEquality, [$E]);
    },
    ListEquality$: function(elementEquality, $E) {
      return new U.ListEquality(elementEquality, [$E]);
    },
    UnorderedIterableEquality$: function(elementEquality, $E) {
      return new U.UnorderedIterableEquality(elementEquality, [$E]);
    },
    SetEquality$: function(elementEquality, $E) {
      return new U.SetEquality(elementEquality, [$E]);
    },
    _MapEntry$: function(equality, key, value) {
      return new U._MapEntry(equality, key, value, []);
    },
    MapEquality$: function(keys, values, $K, $V) {
      return new U.MapEquality(keys, values, [$K, $V]);
    },
    Equality: function Equality() {
    },
    EqualityBy: function EqualityBy() {
    },
    DefaultEquality: function DefaultEquality(t0) {
      this.$ti = t0;
    },
    IdentityEquality: function IdentityEquality() {
    },
    IterableEquality: function IterableEquality(t0, t1) {
      this._elementEquality = t0;
      this.$ti = t1;
    },
    ListEquality: function ListEquality(t0, t1) {
      this._elementEquality = t0;
      this.$ti = t1;
    },
    _UnorderedEquality: function _UnorderedEquality() {
    },
    UnorderedIterableEquality: function UnorderedIterableEquality(t0, t1) {
      this._elementEquality = t0;
      this.$ti = t1;
    },
    SetEquality: function SetEquality(t0, t1) {
      this._elementEquality = t0;
      this.$ti = t1;
    },
    _MapEntry: function _MapEntry(t0, t1, t2, t3) {
      var _ = this;
      _.equality = t0;
      _.key = t1;
      _.value = t2;
      _.$ti = t3;
    },
    MapEquality: function MapEquality(t0, t1, t2) {
      this._keyEquality = t0;
      this._valueEquality = t1;
      this.$ti = t2;
    },
    MultiEquality: function MultiEquality() {
    },
    DeepCollectionEquality: function DeepCollectionEquality(t0, t1, t2) {
      this._base = t0;
      this._unordered = t1;
      this.$ti = t2;
    },
    CaseInsensitiveEquality: function CaseInsensitiveEquality() {
    },
    PercentCodec: function PercentCodec() {
    },
    Client0: function Client0() {
    },
    Response$bytes: function(bodyBytes, statusCode, headers, isRedirect, persistentConnection, reasonPhrase, request) {
      var t1, t2;
      B.toUint8List(bodyBytes);
      t1 = J.get$length$asx(bodyBytes);
      t2 = new U.Response(request, statusCode, reasonPhrase, t1, headers, isRedirect, persistentConnection, []);
      t2.BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(statusCode, t1, headers, isRedirect, persistentConnection, reasonPhrase, request);
      return t2;
    },
    Response_fromStream: function(response) {
      H.interceptedTypeCheck(response, "$isStreamedResponse");
      return response.stream.toBytes$0().then$1$1(new U.Response_fromStream_closure(response), U.Response);
    },
    Response: function Response(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.request = t0;
      _.statusCode = t1;
      _.reasonPhrase = t2;
      _.contentLength = t3;
      _.headers = t4;
      _.isRedirect = t5;
      _.persistentConnection = t6;
      _.$ti = t7;
    },
    Response_fromStream_closure: function Response_fromStream_closure(t0, t1) {
      this.response = t0;
      this.$ti = t1;
    },
    Highlighter_Highlighter: function(span, color) {
      H.interceptedTypeCheck(span, "$isSourceSpan");
      if (J.$eq$(color, true))
        color = "\x1b[31m";
      if (J.$eq$(color, false))
        color = null;
      return U.Highlighter$_(U.Highlighter__normalizeEndOfLine(U.Highlighter__normalizeTrailingNewline(U.Highlighter__normalizeNewlines(U.Highlighter__normalizeContext(span)))), H.stringTypeCheck(color));
    },
    Highlighter__normalizeContext: function(span) {
      var t1, t2, t3, t4;
      H.interceptedTypeCheck(span, "$isSourceSpan");
      if (!!J.getInterceptor$(span).$isSourceSpanWithContext && B.findLineStart(span.get$context(), span.get$text(span), span.get$start().get$column()) != null)
        t1 = span;
      else {
        t1 = V.SourceLocation$(J.get$offset$z(span.get$start()), 0, 0, span.get$sourceUrl());
        t2 = J.get$offset$z(span.get$end());
        t3 = span.get$sourceUrl();
        t4 = B.countCodeUnits(span.get$text(span), 10);
        t3 = X.SourceSpanWithContext$(t1, V.SourceLocation$(t2, U.Highlighter__lastLineLength(span.get$text(span)), t4, t3), span.get$text(span), span.get$text(span));
        t1 = t3;
      }
      return t1;
    },
    Highlighter__normalizeNewlines: function(span) {
      var text, endOffset, t1, i, t2, t3;
      H.interceptedTypeCheck(span, "$isSourceSpanWithContext");
      text = span.get$text(span);
      if (!J.getInterceptor$asx(text).contains$1(text, "\r\n"))
        return span;
      endOffset = J.get$offset$z(span.get$end());
      for (t1 = text.length - 1, i = 0; i < t1; ++i)
        if (J.$eq$(C.JSString_methods._codeUnitAt$1(text, i), 13) && J.$eq$(C.JSString_methods._codeUnitAt$1(text, i + 1), 10)) {
          if (typeof endOffset !== "number")
            return endOffset.$sub();
          --endOffset;
        }
      t1 = span.get$start();
      t2 = span.get$sourceUrl();
      t3 = span.get$end().get$line();
      return X.SourceSpanWithContext$(t1, V.SourceLocation$(endOffset, span.get$end().get$column(), t3, t2), C.JSString_methods.replaceAll$2(text, "\r\n", "\n"), J.replaceAll$2$s(span.get$context(), "\r\n", "\n"));
    },
    Highlighter__normalizeTrailingNewline: function(span) {
      var context, text, start, end, t1, t2, t3;
      H.interceptedTypeCheck(span, "$isSourceSpanWithContext");
      if (!J.endsWith$1$s(span.get$context(), "\n"))
        return span;
      if (J.endsWith$1$s(span.get$text(span), "\n\n"))
        return span;
      context = J.substring$2$s(span.get$context(), 0, J.$sub$n(J.get$length$asx(span.get$context()), 1));
      text = span.get$text(span);
      start = span.get$start();
      end = span.get$end();
      if (J.endsWith$1$s(span.get$text(span), "\n") && U.Highlighter__isTextAtEndOfContext(span)) {
        text = J.substring$2$s(span.get$text(span), 0, J.$sub$n(J.get$length$asx(span.get$text(span)), 1));
        t1 = J.$sub$n(J.get$offset$z(span.get$end()), 1);
        t2 = span.get$sourceUrl();
        t3 = J.$sub$n(span.get$end().get$line(), 1);
        end = V.SourceLocation$(t1, U.Highlighter__lastLineLength(text), t3, t2);
        start = J.$eq$(J.get$offset$z(span.get$start()), J.get$offset$z(span.get$end())) ? end : span.get$start();
      }
      return X.SourceSpanWithContext$(start, end, text, context);
    },
    Highlighter__normalizeEndOfLine: function(span) {
      var text, t1, t2, t3, t4;
      H.interceptedTypeCheck(span, "$isSourceSpanWithContext");
      if (!J.$eq$(span.get$end().get$column(), 0))
        return span;
      if (J.$eq$(span.get$end().get$line(), span.get$start().get$line()))
        return span;
      text = J.substring$2$s(span.get$text(span), 0, J.$sub$n(J.get$length$asx(span.get$text(span)), 1));
      t1 = span.get$start();
      t2 = J.$sub$n(J.get$offset$z(span.get$end()), 1);
      t3 = span.get$sourceUrl();
      t4 = J.$sub$n(span.get$end().get$line(), 1);
      return X.SourceSpanWithContext$(t1, V.SourceLocation$(t2, U.Highlighter__lastLineLength(text), t4, t3), text, span.get$context());
    },
    Highlighter__lastLineLength: function(text) {
      var t1, t2;
      H.stringTypeCheck(text);
      if (J.getInterceptor$asx(text).get$isEmpty(text))
        return 0;
      t1 = text.length;
      if (J.$eq$(C.JSString_methods.codeUnitAt$1(text, t1 - 1), 10)) {
        if (t1 === 1)
          t1 = 0;
        else {
          t2 = C.JSString_methods.lastIndexOf$2(text, "\n", t1 - 2);
          if (typeof t2 !== "number")
            return H.iae(t2);
          t2 = t1 - t2 - 1;
          t1 = t2;
        }
        return t1;
      } else {
        t2 = C.JSString_methods.lastIndexOf$1(text, "\n");
        if (typeof t2 !== "number")
          return H.iae(t2);
        return t1 - t2 - 1;
      }
    },
    Highlighter__isTextAtEndOfContext: function(span) {
      H.interceptedTypeCheck(span, "$isSourceSpanWithContext");
      return J.$eq$(J.$add$ansx(J.$add$ansx(B.findLineStart(span.get$context(), span.get$text(span), span.get$start().get$column()), span.get$start().get$column()), span.get$length(span)), J.get$length$asx(span.get$context()));
    },
    Highlighter$_: function(_span, _color) {
      var t1 = P.StringBuffer$("");
      return new U.Highlighter(_span, _color, !J.$eq$(_span.get$start().get$line(), _span.get$end().get$line()), J.$add$ansx(J.get$length$asx(J.toString$0$(_span.get$end().get$line())), 1), t1, []);
    },
    Highlighter: function Highlighter(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._highlighter$_span = t0;
      _._color = t1;
      _._multiline = t2;
      _._paddingBeforeSidebar = t3;
      _._highlighter$_buffer = t4;
      _.$ti = t5;
    },
    Highlighter__writeFirstLine_closure: function Highlighter__writeFirstLine_closure(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.$ti = t2;
    },
    Highlighter__writeFirstLine_closure0: function Highlighter__writeFirstLine_closure0(t0, t1, t2) {
      this.$this = t0;
      this.textInside = t1;
      this.$ti = t2;
    },
    Highlighter__writeFirstLine_closure1: function Highlighter__writeFirstLine_closure1(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.$ti = t2;
    },
    Highlighter__writeFirstLine_closure2: function Highlighter__writeFirstLine_closure2(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.$ti = t2;
    },
    Highlighter__writeIntermediateLines_closure: function Highlighter__writeIntermediateLines_closure(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.$ti = t2;
    },
    Highlighter__writeLastLine_closure: function Highlighter__writeLastLine_closure(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.$ti = t2;
    },
    Highlighter__writeLastLine_closure0: function Highlighter__writeLastLine_closure0(t0, t1, t2) {
      this.$this = t0;
      this.textInside = t1;
      this.$ti = t2;
    },
    Highlighter__writeLastLine_closure1: function Highlighter__writeLastLine_closure1(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.$ti = t2;
    },
    Highlighter__writeSidebar_closure: function Highlighter__writeSidebar_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.line = t1;
      _.end = t2;
      _.$ti = t3;
    },
    IsolateChannel: function IsolateChannel() {
    },
    UuidUtil_cryptoRNG: function() {
      var b, rand, i,
        t1 = new Array(16);
      t1.fixed$length = Array;
      b = H.setRuntimeTypeInfo(t1, [P.int]);
      rand = P.Random_Random$secure();
      for (i = 0; i < 16; ++i)
        C.JSArray_methods.$indexSet(b, i, rand.nextInt$1(256));
      return b;
    },
    UuidUtil: function UuidUtil() {
    }
  },
  Z = {CaptureStreamTransformer: function CaptureStreamTransformer() {
    }, BuiltIterable: function BuiltIterable() {
    },
    DateTimeSerializer$: function() {
      return new Z.DateTimeSerializer(S.BuiltList_BuiltList([C.Type_DateTime_8AS], P.Type), []);
    },
    DateTimeSerializer: function DateTimeSerializer(t0, t1) {
      this.types = t0;
      this.$ti = t1;
    },
    ByteStream$: function(stream) {
      return new Z.ByteStream(stream, []);
    },
    ByteStream_ByteStream$fromBytes: function(bytes) {
      var t1 = [P.List, P.int];
      return Z.ByteStream$(P.Stream_Stream$fromIterable(H.setRuntimeTypeInfo([H.assertSubtype(bytes, "$isList", [P.int], "$asList")], [t1]), t1));
    },
    ByteStream: function ByteStream(t0, t1) {
      this._stream = t0;
      this.$ti = t1;
    },
    ByteStream_toBytes_closure: function ByteStream_toBytes_closure(t0, t1) {
      this.completer = t0;
      this.$ti = t1;
    },
    CaseInsensitiveMap$from: function(other, $V) {
      var t1 = new Z.CaseInsensitiveMap$from_closure(),
        t2 = new Z.CaseInsensitiveMap$from_closure0(),
        t3 = P.String,
        t4 = new Z.CaseInsensitiveMap(t1, t2, H.JsLinkedHashMap_JsLinkedHashMap$es6(t3, [B.Pair, t3, $V]), [$V]);
      t4.CanonicalizedMap$from$3$isValidKey(other, t1, t2, t3, t3, $V);
      return t4;
    },
    CaseInsensitiveMap: function CaseInsensitiveMap(t0, t1, t2, t3) {
      var _ = this;
      _._canonicalize = t0;
      _._isValidKeyFn = t1;
      _._canonicalized_map$_base = t2;
      _.$ti = t3;
    },
    CaseInsensitiveMap$from_closure: function CaseInsensitiveMap$from_closure(t0) {
      this.$ti = t0;
    },
    CaseInsensitiveMap$from_closure0: function CaseInsensitiveMap$from_closure0(t0) {
      this.$ti = t0;
    },
    LineScanner: function LineScanner() {
    },
    LineScannerState: function LineScannerState() {
    }
  },
  A = {ReleaseSink: function ReleaseSink() {
    }, CopyOnWriteSet: function CopyOnWriteSet() {
    },
    BuiltMap_BuiltMap: function($K, $V) {
      var t1 = A._BuiltMap$copyAndCheckTypes(H.listSuperNativeTypeCheck(C.Map_empty.get$keys(C.Map_empty), "$isIterable"), new A.BuiltMap_BuiltMap_closure(C.Map_empty), $K, $V);
      return t1;
    },
    _BuiltMap$withSafeMap: function(mapFactory, map, $K, $V) {
      var t1 = new A._BuiltMap(mapFactory, map, [$K, $V]);
      t1.BuiltMap$_$2(mapFactory, map, $K, $V);
      return t1;
    },
    _BuiltMap$copyAndCheckTypes: function(keys, lookup, $K, $V) {
      var t1 = H.JsLinkedHashMap_JsLinkedHashMap$es6($K, $V),
        t2 = new A._BuiltMap(null, t1, [$K, $V]);
      t2.BuiltMap$_$2(null, t1, $K, $V);
      t2._BuiltMap$copyAndCheckTypes$2(keys, lookup, $K, $V);
      return t2;
    },
    MapBuilder_MapBuilder: function($K, $V) {
      var t1 = A.MapBuilder$_uninitialized($K, $V);
      t1.replace$1(0, C.Map_empty);
      return t1;
    },
    MapBuilder$_uninitialized: function($K, $V) {
      var t1 = new A.MapBuilder(null, null, null, [$K, $V]);
      t1.MapBuilder$_uninitialized$0($K, $V);
      return t1;
    },
    MapBuilder$_fromBuiltMap: function(map, $K, $V) {
      return new A.MapBuilder(map._mapFactory, map._map$_map, map, [$K, $V]);
    },
    OverriddenHashcodeBuiltMap: function OverriddenHashcodeBuiltMap() {
    },
    BuiltMap: function BuiltMap() {
    },
    BuiltMap_BuiltMap_closure: function BuiltMap_BuiltMap_closure(t0, t1) {
      this.map = t0;
      this.$ti = t1;
    },
    BuiltMap_hashCode_closure: function BuiltMap_hashCode_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    _BuiltMap: function _BuiltMap(t0, t1, t2) {
      var _ = this;
      _._mapFactory = t0;
      _._map$_map = t1;
      _._map$_keys = _._map$_hashCode = null;
      _.$ti = t2;
    },
    MapBuilder: function MapBuilder(t0, t1, t2, t3) {
      var _ = this;
      _._mapFactory = t0;
      _._map$_map = t1;
      _._mapOwner = t2;
      _.$ti = t3;
    },
    MapBuilder_replace_closure: function MapBuilder_replace_closure(t0, t1, t2) {
      this.$this = t0;
      this.replacement = t1;
      this.$ti = t2;
    },
    MapBuilder_replace_closure0: function MapBuilder_replace_closure0(t0, t1, t2) {
      this.$this = t0;
      this.replacement = t1;
      this.$ti = t2;
    },
    JsonObject_JsonObject: function(value) {
      if (typeof value === "number")
        return A.NumJsonObject$(value);
      else if (typeof value === "string")
        return A.StringJsonObject$(value);
      else if (typeof value === "boolean")
        return A.BoolJsonObject$(value);
      else if (!!J.getInterceptor$(value).$isList)
        return A.ListJsonObject$(value);
      else if (H.checkSubtype(value, "$isMap", [P.String, P.Object], "$asMap"))
        return A.MapJsonObject$(value);
      else
        throw H.wrapException(P.ArgumentError$value(value, "value", "Must be bool, List<Object>, Map<String, Object>, num or String"));
    },
    BoolJsonObject$: function(value) {
      return new A.BoolJsonObject(value, []);
    },
    ListJsonObject$: function(value) {
      return new A.ListJsonObject(P.UnmodifiableListView$(value, P.Object), []);
    },
    MapJsonObject$: function(value) {
      return new A.MapJsonObject(P.UnmodifiableMapView$(value, P.String, P.Object), []);
    },
    NumJsonObject$: function(value) {
      return new A.NumJsonObject(value, []);
    },
    StringJsonObject$: function(value) {
      return new A.StringJsonObject(value, []);
    },
    JsonObject: function JsonObject() {
    },
    BoolJsonObject: function BoolJsonObject(t0, t1) {
      this.value = t0;
      this.$ti = t1;
    },
    ListJsonObject: function ListJsonObject(t0, t1) {
      this.value = t0;
      this.$ti = t1;
    },
    MapJsonObject: function MapJsonObject(t0, t1) {
      this.value = t0;
      this.$ti = t1;
    },
    NumJsonObject: function NumJsonObject(t0, t1) {
      this.value = t0;
      this.$ti = t1;
    },
    StringJsonObject: function StringJsonObject(t0, t1) {
      this.value = t0;
      this.$ti = t1;
    },
    IterableZip: function IterableZip() {
    },
    _IteratorZip: function _IteratorZip() {
    },
    ByteAccumulatorSink: function ByteAccumulatorSink() {
    },
    _decode: function(codeUnits, sourceStart, sourceEnd, destination, destinationStart) {
      var t2, i, destinationIndex, firstDigit, secondDigit, destinationIndex0,
        t1 = [P.int];
      H.assertSubtype(codeUnits, "$isList", t1, "$asList");
      H.intTypeCheck(sourceStart);
      H.intTypeCheck(sourceEnd);
      H.assertSubtype(destination, "$isList", t1, "$asList");
      H.intTypeCheck(destinationStart);
      if (typeof sourceEnd !== "number")
        return sourceEnd.$sub();
      t1 = sourceEnd - 1;
      t2 = J.getInterceptor$ax(destination);
      i = sourceStart;
      destinationIndex = destinationStart;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (!(i < t1))
          break;
        firstDigit = T.digitForCodeUnit(codeUnits, i);
        secondDigit = T.digitForCodeUnit(codeUnits, i + 1);
        if (typeof destinationIndex !== "number")
          return destinationIndex.$add();
        destinationIndex0 = destinationIndex + 1;
        if (typeof firstDigit !== "number")
          return H.iae(firstDigit);
        if (typeof secondDigit !== "number")
          return H.iae(secondDigit);
        t2.$indexSet(destination, destinationIndex, 16 * firstDigit + secondDigit);
        i += 2;
        destinationIndex = destinationIndex0;
      }
      if (typeof sourceStart !== "number")
        return H.iae(sourceStart);
      if (C.JSInt_methods.get$isEven(sourceEnd - sourceStart))
        return;
      t1 = T.digitForCodeUnit(codeUnits, t1);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 16 * t1;
    },
    HexDecoder: function HexDecoder(t0) {
      this.$ti = t0;
    },
    _HexDecoderSink: function _HexDecoderSink() {
    },
    _HexDecoderByteSink: function _HexDecoderByteSink() {
    },
    Hash: function Hash() {
    },
    AsciiGlyphSet: function AsciiGlyphSet() {
    },
    RunRequest_serializer: function() {
      return $.$get$_$runRequestSerializer();
    },
    _$RunRequestSerializer$: function() {
      return new A._$RunRequestSerializer([]);
    },
    _$RunRequest$_: function() {
      return new A._$RunRequest([]);
    },
    RunRequestBuilder$: function() {
      return new A.RunRequestBuilder([]);
    },
    RunRequest: function RunRequest() {
    },
    _$RunRequestSerializer: function _$RunRequestSerializer(t0) {
      this.$ti = t0;
    },
    _$RunRequest: function _$RunRequest(t0) {
      this.$ti = t0;
    },
    RunRequestBuilder: function RunRequestBuilder(t0) {
      this._run_request$_$v = null;
      this.$ti = t0;
    }
  },
  D = {ReleaseStreamTransformer: function ReleaseStreamTransformer() {
    }, _TransformedSubscription: function _TransformedSubscription() {
    },
    DoubleSerializer$: function() {
      return new D.DoubleSerializer(S.BuiltList_BuiltList([C.Type_double_K1J], P.Type), []);
    },
    DoubleSerializer: function DoubleSerializer(t0, t1) {
      this.types = t0;
      this.$ti = t1;
    },
    Hmac: function Hmac() {
    },
    _HmacSink: function _HmacSink() {
    },
    SourceLocationMixin: function SourceLocationMixin() {
    },
    MultiChannel: function MultiChannel() {
    },
    _MultiChannel: function _MultiChannel() {
    },
    VirtualChannel: function VirtualChannel() {
    },
    EagerSpanScanner: function EagerSpanScanner() {
    },
    _EagerSpanScannerState: function _EagerSpanScannerState() {
    },
    main: function() {
      return D.main$body();
    },
    main$body: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(-1),
        manager, client, t1, t2, $async$temp1;
      var $async$main = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t2 = F.Uuid$().v1$0();
              self.$dartAppInstanceId = t2;
              $async$temp1 = t1;
              $async$goto = 2;
              return P._asyncAwait(D._getDigests(), $async$main);
            case 2:
              // returning from await.
              $async$temp1.currentDigests = $async$result;
              manager = L.ReloadingManager$(D.client___reloadModule$closure(), D.client___moduleLibraries$closure(), D.client___reloadPage$closure(), new D.main_closure(), new D.main_closure0());
              client = M.SseClient$("/$sseHandler");
              t1 = P.allowInterop(new D.main_closure1(t1, manager), {func: 1, ret: [P.Future, -1]});
              self.$dartHotRestart = t1;
              client.get$stream(client).listen$1(new D.main_closure2());
              J.get$onKeyDown$x(W.window()).listen$1(new D.main_closure3(client));
              $async$goto = 3;
              return P._asyncAwait(J.get$first$ax(client.get$onOpen(client)), $async$main);
            case 3:
              // returning from await.
              J.add$1$ax(client.get$sink(), P.jsonEncode($.$get$serializers().serialize$1(E._$ConnectRequest__$ConnectRequest(new D.main_closure4()))));
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$main, $async$completer);
    },
    keys: function(map, $K, $V) {
      var t1 = J.keys$0$x(H.assertSubtype(map, "$isJsMap", [$K, $V], "$asJsMap"));
      return P.List_List$from(self.Array.from(t1), true, $K);
    },
    _getDigests: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter([P.Map, P.String, P.String]),
        $async$returnValue, request, t1;
      var $async$_getDigests = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(W.HttpRequest_request(J.get$appDigests$x(self.$dartLoader), "GET", "json"), $async$_getDigests);
            case 3:
              // returning from await.
              request = $async$result;
              t1 = P.String;
              $async$returnValue = H.interceptedTypeCast((request && C.HttpRequest_methods).get$response(request), "$isMap").cast$2$0(0, t1, t1);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_getDigests, $async$completer);
    },
    _moduleLibraries: function(moduleId) {
      var moduleObj, t1;
      H.stringTypeCheck(moduleId);
      moduleObj = J.getModuleLibraries$1$x(self.$dartLoader, moduleId);
      if (moduleObj == null)
        throw H.wrapException(L.HotReloadFailedException$("Failed to get module '" + H.S(moduleId) + "'. This error might appear if such module doesn't exist or isn't already loaded"));
      t1 = P.String;
      return G.Module$(P.LinkedHashMap_LinkedHashMap$fromIterables(P.List_List$from(self.Object.keys(moduleObj), true, t1), J.map$1$1$ax(P.List_List$from(self.Object.values(moduleObj), true, D.HotReloadableLibrary), new D._moduleLibraries_closure(), D.LibraryWrapper), t1, G.Library));
    },
    _reloadModule: function(moduleId) {
      var completer, stackTrace;
      H.stringTypeCheck(moduleId);
      completer = P.Completer_Completer(G.Module);
      stackTrace = P.StackTrace_current();
      J.forceLoadModule$3$x(self.$dartLoader, moduleId, P.allowInterop(new D._reloadModule_closure(completer, moduleId), {func: 1, ret: -1}), P.allowInterop(new D._reloadModule_closure0(completer, stackTrace), {func: 1, ret: -1, args: [D.JsError]}));
      return completer.get$future();
    },
    _reloadPage: function() {
      J.reload$0$x(J.get$location$x(W.window()));
    },
    LibraryWrapper$: function(_internal) {
      return new D.LibraryWrapper(_internal, []);
    },
    main_closure: function main_closure(t0) {
      this.$ti = t0;
    },
    main_closure0: function main_closure0(t0) {
      this.$ti = t0;
    },
    main_closure1: function main_closure1(t0, t1, t2) {
      this._box_0 = t0;
      this.manager = t1;
      this.$ti = t2;
    },
    main_closure2: function main_closure2(t0) {
      this.$ti = t0;
    },
    main_closure3: function main_closure3(t0, t1) {
      this.client = t0;
      this.$ti = t1;
    },
    main__closure: function main__closure(t0) {
      this.$ti = t0;
    },
    main_closure4: function main_closure4(t0) {
      this.$ti = t0;
    },
    _moduleLibraries_closure: function _moduleLibraries_closure(t0) {
      this.$ti = t0;
    },
    _reloadModule_closure: function _reloadModule_closure(t0, t1, t2) {
      this.completer = t0;
      this.moduleId = t1;
      this.$ti = t2;
    },
    _reloadModule_closure0: function _reloadModule_closure0(t0, t1, t2) {
      this.completer = t0;
      this.stackTrace = t1;
      this.$ti = t2;
    },
    DartLoader: function DartLoader() {
    },
    HotReloadableLibrary: function HotReloadableLibrary() {
    },
    JsError: function JsError() {
    },
    JsMap: function JsMap() {
    },
    LibraryWrapper: function LibraryWrapper(t0, t1) {
      this._internal = t0;
      this.$ti = t1;
    },
    current: function() {
      var path, lastIndex,
        uri = P.Uri_base();
      if (J.$eq$(uri, $._currentUriBase))
        return $._current;
      $._currentUriBase = uri;
      if (J.$eq$($.$get$Style_platform(), $.$get$Style_url()))
        return $._current = J.toString$0$(uri.resolve$1("."));
      else {
        path = uri.toFilePath$0();
        lastIndex = path.length - 1;
        return $._current = lastIndex === 0 ? path : J.substring$2$s(path, 0, lastIndex);
      }
    },
    prettyUri: function(uri) {
      return $.$get$context().prettyUri$1(uri);
    },
    glyphs: function() {
      return C.C_UnicodeGlyphSet;
    },
    glyphOrAscii: function(glyph, alternative) {
      H.stringTypeCheck(glyph);
      H.stringTypeCheck(alternative);
      return D.glyphs().glyphOrAscii$2(glyph, alternative);
    }
  },
  B = {SingleSubscriptionTransformer: function SingleSubscriptionTransformer() {
    },
    IntSerializer$: function() {
      return new B.IntSerializer(S.BuiltList_BuiltList([C.Type_int_tHn], P.Type), []);
    },
    IntSerializer: function IntSerializer(t0, t1) {
      this.types = t0;
      this.$ti = t1;
    },
    CombinedListView: function CombinedListView() {
    },
    Pair$: function(first, last, $E, $F) {
      return new B.Pair(first, last, [$E, $F]);
    },
    Pair: function Pair(t0, t1, t2) {
      this.first = t0;
      this.last = t1;
      this.$ti = t2;
    },
    PercentDecoder: function PercentDecoder() {
    },
    _PercentDecoderSink: function _PercentDecoderSink() {
    },
    _PercentDecoderByteSink: function _PercentDecoderByteSink() {
    },
    PercentEncoder: function PercentEncoder() {
    },
    _PercentEncoderSink: function _PercentEncoderSink() {
    },
    Digest: function Digest() {
    },
    _CrawlAsync: function _CrawlAsync() {
    },
    mapToQuery: function(map, encoding) {
      var pairs,
        t1 = P.String;
      H.assertSubtype(map, "$isMap", [t1, t1], "$asMap");
      H.interceptedTypeCheck(encoding, "$isEncoding");
      pairs = H.setRuntimeTypeInfo([], [[P.List, P.String]]);
      map.forEach$1(0, new B.mapToQuery_closure(pairs, encoding));
      return J.join$1$ax(C.JSArray_methods.map$1$1(pairs, new B.mapToQuery_closure0(), t1), "&");
    },
    requiredEncodingForCharset: function(charset) {
      var encoding;
      H.stringTypeCheck(charset);
      encoding = P.Encoding_getByName(charset);
      if (encoding != null)
        return encoding;
      throw H.wrapException(P.FormatException$('Unsupported encoding "' + H.S(charset) + '".', null, null));
    },
    toUint8List: function(input) {
      var t1;
      H.assertSubtype(input, "$isList", [P.int], "$asList");
      t1 = J.getInterceptor$(input);
      if (!!t1.$isUint8List)
        return input;
      if (!!t1.$isTypedData)
        return P.Uint8List_Uint8List$view(input.buffer);
      return H.NativeUint8List_NativeUint8List$fromList(input);
    },
    toByteStream: function(stream) {
      H.assertSubtype(stream, "$isStream", [[P.List, P.int]], "$asStream");
      if (stream instanceof Z.ByteStream)
        return stream;
      return Z.ByteStream$(stream);
    },
    mapToQuery_closure: function mapToQuery_closure(t0, t1, t2) {
      this.pairs = t0;
      this.encoding = t1;
      this.$ti = t2;
    },
    mapToQuery_closure0: function mapToQuery_closure0(t0) {
      this.$ti = t0;
    },
    Pair0: function Pair0() {
    },
    ChunkedCodingDecoder: function ChunkedCodingDecoder() {
    },
    _Sink: function _Sink() {
    },
    _State0: function _State0() {
    },
    InternalStyle: function InternalStyle() {
    },
    PathSet: function PathSet() {
    },
    StreamChannelController: function StreamChannelController() {
    },
    wrapFormatException: function($name, value, body, $T) {
      var error, error0, t1, exception, t2;
      H.stringTypeCheck($name);
      H.stringTypeCheck(value);
      H.functionTypeCheck(body, {func: 1, ret: $T});
      try {
        t1 = body.call$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        t2 = J.getInterceptor$(t1);
        if (!!t2.$isSourceSpanFormatException) {
          error = t1;
          throw H.wrapException(G.SourceSpanFormatException$("Invalid " + H.S($name) + ": " + H.S(J.get$message$x(error)), error.get$span(), J.get$source$z(error)));
        } else if (!!t2.$isFormatException) {
          error0 = t1;
          throw H.wrapException(P.FormatException$("Invalid " + H.S($name) + ' "' + H.S(value) + '": ' + H.S(J.get$message$x(error0)), J.get$source$z(error0), J.get$offset$z(error0)));
        } else
          throw exception;
      }
    },
    isAlphabetic: function(char) {
      var t1;
      H.intTypeCheck(char);
      if (typeof char !== "number")
        return char.$ge();
      if (!(char >= 65 && char <= 90))
        t1 = char >= 97 && char <= 122;
      else
        t1 = true;
      return t1;
    },
    isDriveLetter: function(path, index) {
      var t1, t2;
      H.stringTypeCheck(path);
      H.intTypeCheck(index);
      t1 = path.length;
      if (typeof index !== "number")
        return index.$add();
      t2 = index + 2;
      if (t1 < t2)
        return false;
      if (!B.isAlphabetic(J.getInterceptor$s(path).codeUnitAt$1(path, index)))
        return false;
      if (!J.$eq$(C.JSString_methods.codeUnitAt$1(path, index + 1), 58))
        return false;
      if (t1 === t2)
        return true;
      return J.$eq$(C.JSString_methods.codeUnitAt$1(path, t2), 47);
    },
    countCodeUnits: function(string, codeUnit) {
      var t1, count;
      H.stringTypeCheck(string);
      H.intTypeCheck(codeUnit);
      for (t1 = J.get$iterator$ax(J.get$codeUnits$s(string)), count = 0; t1.moveNext$0();)
        if (t1.get$current() == codeUnit)
          ++count;
      return count;
    },
    findLineStart: function(context, text, column) {
      var t1, beginningOfLine, index, lineStart;
      H.stringTypeCheck(context);
      H.stringTypeCheck(text);
      H.intTypeCheck(column);
      if (J.get$isEmpty$asx(text))
        for (t1 = J.getInterceptor$s(context), beginningOfLine = 0; true;) {
          index = t1.indexOf$2(context, "\n", beginningOfLine);
          if (index === -1) {
            t1 = context.length;
            if (typeof column !== "number")
              return H.iae(column);
            return t1 - beginningOfLine >= column ? beginningOfLine : null;
          }
          if (typeof index !== "number")
            return index.$sub();
          if (typeof column !== "number")
            return H.iae(column);
          if (index - beginningOfLine >= column)
            return beginningOfLine;
          beginningOfLine = index + 1;
        }
      index = J.getInterceptor$s(context).indexOf$1(context, text);
      for (; index !== -1;) {
        if (index === 0)
          lineStart = 0;
        else {
          if (typeof index !== "number")
            return index.$sub();
          lineStart = J.$add$ansx(C.JSString_methods.lastIndexOf$2(context, "\n", index - 1), 1);
        }
        if (typeof index !== "number")
          return index.$sub();
        if (typeof lineStart !== "number")
          return H.iae(lineStart);
        if (column === index - lineStart)
          return lineStart;
        index = C.JSString_methods.indexOf$2(context, text, index + 1);
      }
      return;
    },
    validateErrorArgs: function(string, match, position, $length) {
      var t1, t2;
      H.stringTypeCheck(string);
      H.interceptedTypeCheck(match, "$isMatch");
      H.intTypeCheck(position);
      H.intTypeCheck($length);
      if (match != null)
        t1 = position != null || $length != null;
      else
        t1 = false;
      if (t1)
        throw H.wrapException(P.ArgumentError$("Can't pass both match and position/length."));
      t1 = position != null;
      if (t1)
        if (position < 0)
          throw H.wrapException(P.RangeError$("position must be greater than or equal to 0."));
        else if (position > string.length)
          throw H.wrapException(P.RangeError$("position must be less than or equal to the string length."));
      t2 = $length != null;
      if (t2 && $length < 0)
        throw H.wrapException(P.RangeError$("length must be greater than or equal to 0."));
      if (t1 && t2 && position + $length > string.length)
        throw H.wrapException(P.RangeError$("position plus length must not go beyond the end of the string."));
    }
  },
  T = {StreamSinkCompleter: function StreamSinkCompleter() {
    }, _CompleterSink: function _CompleterSink() {
    }, SubscriptionStream: function SubscriptionStream() {
    }, _CancelOnErrorSubscriptionWrapper: function _CancelOnErrorSubscriptionWrapper() {
    }, BaseResponse: function BaseResponse() {
    },
    digitForCodeUnit: function(codeUnits, index) {
      var codeUnit, digit, letter;
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      H.intTypeCheck(index);
      codeUnit = J.$index$asx(codeUnits, index);
      if (typeof codeUnit !== "number")
        return H.iae(codeUnit);
      digit = (48 ^ codeUnit) >>> 0;
      if (digit <= 9)
        return digit;
      else {
        letter = (32 | codeUnit) >>> 0;
        if (97 <= letter && letter <= 102)
          return letter - 97 + 10;
      }
      throw H.wrapException(P.FormatException$("Invalid hexadecimal code unit U+" + H.S(J.padLeft$2$s(C.JSInt_methods.toRadixString$1(codeUnit, 16), 4, "0")) + ".", codeUnits, index));
    }
  },
  X = {HandlerTransformer: function HandlerTransformer() {
    }, _HandlerSink: function _HandlerSink() {
    }, _SafeCloseSink: function _SafeCloseSink() {
    },
    StreamedResponse$: function(stream, statusCode, contentLength, headers, reasonPhrase, request) {
      var t1 = new X.StreamedResponse(B.toByteStream(stream), request, statusCode, reasonPhrase, contentLength, headers, false, true, []);
      t1.BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(statusCode, contentLength, headers, false, true, reasonPhrase, request);
      return t1;
    },
    StreamedResponse: function StreamedResponse(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.stream = t0;
      _.request = t1;
      _.statusCode = t2;
      _.reasonPhrase = t3;
      _.contentLength = t4;
      _.headers = t5;
      _.isRedirect = t6;
      _.persistentConnection = t7;
      _.$ti = t8;
    },
    ParsedPath_ParsedPath$parse: function(path, style) {
      var root, isRootRelative, t1, parts, separators, start, i;
      H.stringTypeCheck(path);
      H.interceptedTypeCheck(style, "$isInternalStyle");
      root = style.getRoot$1(path);
      isRootRelative = style.isRootRelative$1(path);
      if (root != null)
        path = J.substring$1$s(path, root.length);
      t1 = [P.String];
      parts = H.setRuntimeTypeInfo([], t1);
      separators = H.setRuntimeTypeInfo([], t1);
      if (J.get$isNotEmpty$asx(path) && style.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 0))) {
        if (0 >= path.length)
          return H.ioore(path, 0);
        C.JSArray_methods.add$1(separators, path[0]);
        start = 1;
      } else {
        C.JSArray_methods.add$1(separators, "");
        start = 0;
      }
      for (t1 = path.length, i = start; i < t1; ++i)
        if (style.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, i))) {
          C.JSArray_methods.add$1(parts, C.JSString_methods.substring$2(path, start, i));
          C.JSArray_methods.add$1(separators, path[i]);
          start = i + 1;
        }
      if (start < t1) {
        C.JSArray_methods.add$1(parts, C.JSString_methods.substring$1(path, start));
        C.JSArray_methods.add$1(separators, "");
      }
      return X.ParsedPath$_(style, root, isRootRelative, parts, separators);
    },
    ParsedPath$_: function(style, root, isRootRelative, parts, separators) {
      return new X.ParsedPath(style, root, parts, separators, []);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3, t4) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.parts = t2;
      _.separators = t3;
      _.$ti = t4;
    },
    ParsedPath_normalize_closure: function ParsedPath_normalize_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    PathException$: function(message) {
      return new X.PathException(message, []);
    },
    PathException: function PathException(t0, t1) {
      this.message = t0;
      this.$ti = t1;
    },
    hashObjects: function(objects) {
      return X._finish(J.fold$1$2$ax(H.listSuperNativeTypeCheck(objects, "$isIterable"), 0, new X.hashObjects_closure(), P.int));
    },
    hash2: function(a, b) {
      return X._finish(X._combine(X._combine(0, J.get$hashCode$(a)), J.get$hashCode$(b)));
    },
    _combine: function(hash, value) {
      H.intTypeCheck(hash);
      H.intTypeCheck(value);
      if (typeof hash !== "number")
        return hash.$add();
      if (typeof value !== "number")
        return H.iae(value);
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _finish: function(hash) {
      H.intTypeCheck(hash);
      if (typeof hash !== "number")
        return H.iae(hash);
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    hashObjects_closure: function hashObjects_closure(t0) {
      this.$ti = t0;
    },
    Optional: function Optional() {
    },
    SourceSpanWithContext$: function(start, end, text, _context) {
      var t1 = new X.SourceSpanWithContext(_context, start, end, text, []);
      t1.SourceSpanBase$3(start, end, text);
      t1.SourceSpanWithContext$4(start, end, text, _context);
      return t1;
    },
    SourceSpanWithContext: function SourceSpanWithContext(t0, t1, t2, t3, t4) {
      var _ = this;
      _._context = t0;
      _.start = t1;
      _.end = t2;
      _.text = t3;
      _.$ti = t4;
    },
    StringScanner$: function(string) {
      var t1 = new X.StringScanner(null, string, []);
      t1.StringScanner$3$position$sourceUrl(string, null, null);
      return t1;
    },
    StringScanner: function StringScanner(t0, t1, t2) {
      var _ = this;
      _.sourceUrl = t0;
      _.string = t1;
      _._string_scanner$_position = 0;
      _._lastMatchPosition = _._lastMatch = null;
      _.$ti = t2;
    }
  },
  Q = {StreamTransformerWrapper: function StreamTransformerWrapper() {
    }, _StreamTransformerWrapperSink: function _StreamTransformerWrapperSink() {
    },
    CopyOnWriteList$: function(_list, _growable, $E) {
      return new Q.CopyOnWriteList(_growable, _list, [$E]);
    },
    CopyOnWriteList: function CopyOnWriteList(t0, t1, t2) {
      var _ = this;
      _._copyBeforeWrite = true;
      _._growable = t0;
      _._copy_on_write_list$_list = t1;
      _.$ti = t2;
    },
    Int64Serializer$: function() {
      return new Q.Int64Serializer(S.BuiltList_BuiltList([C.Type_Int64_gc6], P.Type), []);
    },
    Int64Serializer: function Int64Serializer(t0, t1) {
      this.types = t0;
      this.$ti = t1;
    },
    QueueList: function QueueList() {
    },
    _CastQueueList: function _CastQueueList() {
    },
    _QueueList_Object_ListMixin: function _QueueList_Object_ListMixin() {
    },
    JS: function JS() {
    },
    _Anonymous: function _Anonymous() {
    },
    Immutable: function Immutable() {
    },
    Required: function Required() {
    },
    _AlwaysThrows: function _AlwaysThrows() {
    },
    _Checked: function _Checked() {
    },
    _Experimental: function _Experimental() {
    },
    _Factory: function _Factory() {
    },
    _IsTest: function _IsTest() {
    },
    _IsTestGroup: function _IsTestGroup() {
    },
    _Literal: function _Literal() {
    },
    _MustCallSuper: function _MustCallSuper() {
    },
    _OptionalTypeArgs: function _OptionalTypeArgs() {
    },
    _Protected: function _Protected() {
    },
    _Sealed: function _Sealed() {
    },
    _Virtual: function _Virtual() {
    },
    _VisibleForOverriding: function _VisibleForOverriding() {
    },
    _VisibleForTesting: function _VisibleForTesting() {
    }
  },
  M = {TypeSafeStreamSinkTransformer: function TypeSafeStreamSinkTransformer() {
    }, _TypeSafeStreamTransformer: function _TypeSafeStreamTransformer() {
    },
    BuildStatus_serializer: function() {
      return $.$get$_$buildStatusSerializer();
    },
    BuildStatus_valueOf: function($name) {
      return M._$valueOf(H.stringTypeCheck($name));
    },
    DefaultBuildResult_serializer: function() {
      return $.$get$_$defaultBuildResultSerializer();
    },
    _$valueOf: function($name) {
      H.stringTypeCheck($name);
      switch ($name) {
        case "started":
          return C.BuildStatus_started;
        case "succeeded":
          return C.BuildStatus_succeeded;
        case "failed":
          return C.BuildStatus_failed;
        default:
          throw H.wrapException(P.ArgumentError$($name));
      }
    },
    _$BuildStatusSerializer$: function() {
      return new M._$BuildStatusSerializer([]);
    },
    _$DefaultBuildResultSerializer$: function() {
      return new M._$DefaultBuildResultSerializer([]);
    },
    _$DefaultBuildResult$_: function(buildId, error, isCached, $status, target) {
      var t1 = new M._$DefaultBuildResult($status, target, buildId, error, isCached, []);
      t1._$DefaultBuildResult$_$5$buildId$error$isCached$status$target(buildId, error, isCached, $status, target);
      return t1;
    },
    DefaultBuildResultBuilder$: function() {
      return new M.DefaultBuildResultBuilder([]);
    },
    BuildStatus: function BuildStatus(t0, t1) {
      this.name = t0;
      this.$ti = t1;
    },
    BuildResult: function BuildResult() {
    },
    DefaultBuildResult: function DefaultBuildResult() {
    },
    BuildResults: function BuildResults() {
    },
    _$BuildStatusSerializer: function _$BuildStatusSerializer(t0) {
      this.$ti = t0;
    },
    _$DefaultBuildResultSerializer: function _$DefaultBuildResultSerializer(t0) {
      this.$ti = t0;
    },
    _$BuildResultsSerializer: function _$BuildResultsSerializer() {
    },
    _$DefaultBuildResult: function _$DefaultBuildResult(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.status = t0;
      _.target = t1;
      _.buildId = t2;
      _.error = t3;
      _.isCached = t4;
      _.$ti = t5;
    },
    DefaultBuildResultBuilder: function DefaultBuildResultBuilder(t0) {
      var _ = this;
      _._isCached = _._build_status$_error = _._buildId = _._build_status$_target = _._status = _._build_status$_$v = null;
      _.$ti = t0;
    },
    _$BuildResults: function _$BuildResults() {
    },
    BuildResultsBuilder: function BuildResultsBuilder() {
    },
    BuiltListMultimap_BuiltListMultimap: function($K, $V) {
      var t1 = M._BuiltListMultimap$copyAndCheck(H.listSuperNativeTypeCheck(C.Map_empty.get$keys(C.Map_empty), "$isIterable"), new M.BuiltListMultimap_BuiltListMultimap_closure(C.Map_empty), $K, $V);
      return t1;
    },
    _BuiltListMultimap$withSafeMap: function(map, $K, $V) {
      var t1 = new M._BuiltListMultimap(map, S.BuiltList_BuiltList(C.List_empty0, $V), [$K, $V]);
      t1.BuiltListMultimap$_$1(map, $K, $V);
      return t1;
    },
    _BuiltListMultimap$copyAndCheck: function(keys, lookup, $K, $V) {
      var t1 = H.JsLinkedHashMap_JsLinkedHashMap$es6($K, [S.BuiltList, $V]),
        t2 = new M._BuiltListMultimap(t1, S.BuiltList_BuiltList(C.List_empty0, $V), [$K, $V]);
      t2.BuiltListMultimap$_$1(t1, $K, $V);
      t2._BuiltListMultimap$copyAndCheck$2(keys, lookup, $K, $V);
      return t2;
    },
    ListMultimapBuilder_ListMultimapBuilder: function($K, $V) {
      var t1 = M.ListMultimapBuilder$_uninitialized($K, $V);
      t1.replace$1(0, C.Map_empty);
      return t1;
    },
    ListMultimapBuilder$_uninitialized: function($K, $V) {
      var t1 = new M.ListMultimapBuilder([$K, $V]);
      t1.ListMultimapBuilder$_uninitialized$0($K, $V);
      return t1;
    },
    OverriddenHashcodeBuiltListMultimap: function OverriddenHashcodeBuiltListMultimap() {
    },
    BuiltListMultimap: function BuiltListMultimap() {
    },
    BuiltListMultimap_BuiltListMultimap_closure: function BuiltListMultimap_BuiltListMultimap_closure(t0, t1) {
      this.multimap = t0;
      this.$ti = t1;
    },
    BuiltListMultimap_hashCode_closure: function BuiltListMultimap_hashCode_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    _BuiltListMultimap: function _BuiltListMultimap(t0, t1, t2) {
      var _ = this;
      _._list_multimap$_map = t0;
      _._emptyList = t1;
      _._list_multimap$_keys = _._list_multimap$_hashCode = null;
      _.$ti = t2;
    },
    ListMultimapBuilder: function ListMultimapBuilder(t0) {
      var _ = this;
      _._list_multimap$_builderMap = _._list_multimap$_builtMapOwner = _._list_multimap$_builtMap = null;
      _.$ti = t0;
    },
    ListMultimapBuilder_replace_closure: function ListMultimapBuilder_replace_closure(t0, t1) {
      this.multimap = t0;
      this.$ti = t1;
    },
    StringSerializer$: function() {
      return new M.StringSerializer(S.BuiltList_BuiltList([C.Type_String_k8F], P.Type), []);
    },
    StringSerializer: function StringSerializer(t0, t1) {
      this.types = t0;
      this.$ti = t1;
    },
    _isToStringVisiting0: function(o) {
      return J.any$1$ax($.$get$_toStringVisiting0(), new M._isToStringVisiting_closure(o));
    },
    CanonicalizedMap: function CanonicalizedMap() {
    },
    CanonicalizedMap_addAll_closure: function CanonicalizedMap_addAll_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    CanonicalizedMap_forEach_closure: function CanonicalizedMap_forEach_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.$ti = t2;
    },
    CanonicalizedMap_keys_closure: function CanonicalizedMap_keys_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    CanonicalizedMap_map_closure: function CanonicalizedMap_map_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.transform = t1;
      _.K2 = t2;
      _.V2 = t3;
      _.$ti = t4;
    },
    CanonicalizedMap_putIfAbsent_closure: function CanonicalizedMap_putIfAbsent_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.key = t1;
      _.ifAbsent = t2;
      _.$ti = t3;
    },
    CanonicalizedMap_values_closure: function CanonicalizedMap_values_closure(t0, t1) {
      this.$this = t0;
      this.$ti = t1;
    },
    CanonicalizedMap_toString_closure: function CanonicalizedMap_toString_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.result = t2;
      _.$ti = t3;
    },
    _isToStringVisiting_closure: function _isToStringVisiting_closure(t0, t1) {
      this.o = t0;
      this.$ti = t1;
    },
    UnionSet: function UnionSet() {
    },
    _UnionSet_SetBase_UnmodifiableSetMixin: function _UnionSet_SetBase_UnmodifiableSetMixin() {
    },
    _DelegatingIterableBase: function _DelegatingIterableBase() {
    },
    DelegatingIterable: function DelegatingIterable() {
    },
    DelegatingList: function DelegatingList() {
    },
    DelegatingSet: function DelegatingSet() {
    },
    DelegatingQueue: function DelegatingQueue() {
    },
    DelegatingMap: function DelegatingMap() {
    },
    MapKeySet: function MapKeySet() {
    },
    MapValueSet: function MapValueSet() {
    },
    _MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin: function _MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin() {
    },
    MD5: function MD5() {
    },
    _MD5Sink: function _MD5Sink() {
    },
    createInternal: function() {
      return M.Context$_internal();
    },
    Context$_internal: function() {
      return new M.Context(H.interceptedTypeCast($.$get$Style_platform(), "$isInternalStyle"), null, []);
    },
    _parseUri: function(uri) {
      if (typeof uri === "string")
        return P.Uri_parse(uri);
      if (!!J.getInterceptor$(uri).$isUri)
        return uri;
      throw H.wrapException(P.ArgumentError$value(uri, "uri", "Value must be a String or a Uri"));
    },
    _validateArgList: function(method, args) {
      var t1, t2, i, t3, numArgs, numArgs0, message;
      H.stringTypeCheck(method);
      t1 = P.String;
      H.assertSubtype(args, "$isList", [t1], "$asList");
      t2 = J.getInterceptor$asx(args);
      i = 1;
      while (true) {
        t3 = t2.get$length(args);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        c$0: {
          if (t2.$index(args, i) == null || t2.$index(args, i - 1) != null)
            break c$0;
          numArgs = t2.get$length(args);
          while (true) {
            if (typeof numArgs !== "number")
              return numArgs.$ge();
            if (!(numArgs >= 1))
              break;
            numArgs0 = numArgs - 1;
            if (t2.$index(args, numArgs0) != null)
              break;
            numArgs = numArgs0;
          }
          message = P.StringBuffer$("");
          message.write$1(H.S(method) + "(");
          message.write$1(J.join$1$ax(J.map$1$1$ax(t2.take$1(args, numArgs), new M._validateArgList_closure(), t1), ", "));
          message.write$1("): part " + (i - 1) + " was null, but part " + i + " was not.");
          throw H.wrapException(P.ArgumentError$(message.toString$0(0)));
        }
        ++i;
      }
    },
    Context: function Context(t0, t1, t2) {
      this.style = t0;
      this._context$_current = t1;
      this.$ti = t2;
    },
    Context_join_closure: function Context_join_closure(t0) {
      this.$ti = t0;
    },
    Context_joinAll_closure: function Context_joinAll_closure(t0) {
      this.$ti = t0;
    },
    Context_split_closure: function Context_split_closure(t0) {
      this.$ti = t0;
    },
    _validateArgList_closure: function _validateArgList_closure(t0) {
      this.$ti = t0;
    },
    _PathDirection: function _PathDirection() {
    },
    _PathRelation: function _PathRelation() {
    },
    SseClient$: function(serverUrl) {
      var t3,
        t1 = P.String,
        t2 = P.StreamController_StreamController(t1);
      t1 = P.StreamController_StreamController(t1);
      t3 = O.BrowserClient$();
      t3.withCredentials = true;
      t3 = new M.SseClient(t2, t1, t3, N.Logger_Logger("SseClient"), []);
      t3.SseClient$1(serverUrl);
      return t3;
    },
    SseClient: function SseClient(t0, t1, t2, t3, t4) {
      var _ = this;
      _._incomingController = t0;
      _._outgoingController = t1;
      _._client = t2;
      _._logger = t3;
      _._serverUrl = _._eventSource = null;
      _.$ti = t4;
    },
    TypeSafeStreamChannelTransformer: function TypeSafeStreamChannelTransformer() {
    },
    DevToolsRequest_serializer: function() {
      return $.$get$_$devToolsRequestSerializer();
    },
    DevToolsResponse_serializer: function() {
      return $.$get$_$devToolsResponseSerializer();
    },
    _$DevToolsRequestSerializer$: function() {
      return new M._$DevToolsRequestSerializer([]);
    },
    _$DevToolsResponseSerializer$: function() {
      return new M._$DevToolsResponseSerializer([]);
    },
    _$DevToolsRequest__$DevToolsRequest: function(updates) {
      var t1;
      H.functionTypeCheck(updates, {func: 1, ret: -1, args: [M.DevToolsRequestBuilder]});
      t1 = M.DevToolsRequestBuilder$();
      t1.update$1(updates);
      return t1.build$0();
    },
    _$DevToolsRequest$_: function(appId, instanceId) {
      var t1 = new M._$DevToolsRequest(appId, instanceId, []);
      t1._$DevToolsRequest$_$2$appId$instanceId(appId, instanceId);
      return t1;
    },
    DevToolsRequestBuilder$: function() {
      return new M.DevToolsRequestBuilder([]);
    },
    _$DevToolsResponse$_: function(error, success) {
      var t1 = new M._$DevToolsResponse(success, error, []);
      t1._$DevToolsResponse$_$2$error$success(error, success);
      return t1;
    },
    DevToolsResponseBuilder$: function() {
      return new M.DevToolsResponseBuilder([]);
    },
    DevToolsRequest: function DevToolsRequest() {
    },
    DevToolsResponse: function DevToolsResponse() {
    },
    _$DevToolsRequestSerializer: function _$DevToolsRequestSerializer(t0) {
      this.$ti = t0;
    },
    _$DevToolsResponseSerializer: function _$DevToolsResponseSerializer(t0) {
      this.$ti = t0;
    },
    _$DevToolsRequest: function _$DevToolsRequest(t0, t1, t2) {
      this.appId = t0;
      this.instanceId = t1;
      this.$ti = t2;
    },
    DevToolsRequestBuilder: function DevToolsRequestBuilder(t0) {
      var _ = this;
      _._instanceId = _._appId = _._$v = null;
      _.$ti = t0;
    },
    _$DevToolsResponse: function _$DevToolsResponse(t0, t1, t2) {
      this.success = t0;
      this.error = t1;
      this.$ti = t2;
    },
    DevToolsResponseBuilder: function DevToolsResponseBuilder(t0) {
      var _ = this;
      _._devtools_request$_error = _._success = _._$v = null;
      _.$ti = t0;
    }
  },
  N = {StreamSplitter: function StreamSplitter() {
    }, EqualityMap: function EqualityMap() {
    }, HexCodec: function HexCodec(t0) {
      this.$ti = t0;
    }, StringAccumulatorSink: function StringAccumulatorSink() {
    },
    expectQuotedString: function(scanner) {
      var string;
      H.interceptedTypeCheck(scanner, "$isStringScanner");
      scanner.expect$2$name($.$get$_quotedString(), "quoted string");
      string = J.$index$asx(scanner.get$lastMatch(), 0);
      return J.replaceAllMapped$2$s(J.substring$2$s(string, 1, string.length - 1), $.$get$_quotedPair(), new N.expectQuotedString_closure());
    },
    expectQuotedString_closure: function expectQuotedString_closure(t0) {
      this.$ti = t0;
    },
    Logger_Logger: function($name) {
      H.stringTypeCheck($name);
      return $.$get$Logger__loggers().putIfAbsent$2($name, new N.Logger_Logger_closure($name));
    },
    Logger_Logger$_named: function($name) {
      var dot, $parent, thisName;
      H.stringTypeCheck($name);
      if (J.getInterceptor$s($name).startsWith$1($name, "."))
        throw H.wrapException(P.ArgumentError$("name shouldn't start with a '.'"));
      dot = C.JSString_methods.lastIndexOf$1($name, ".");
      if (dot === -1) {
        $parent = $name !== "" ? N.Logger_Logger("") : null;
        thisName = $name;
      } else {
        $parent = N.Logger_Logger(C.JSString_methods.substring$2($name, 0, dot));
        if (typeof dot !== "number")
          return dot.$add();
        thisName = C.JSString_methods.substring$1($name, dot + 1);
      }
      return N.Logger$_internal(thisName, $parent, H.JsLinkedHashMap_JsLinkedHashMap$es6(P.String, N.Logger));
    },
    Logger$_internal: function($name, $parent, children) {
      var t1;
      P.UnmodifiableMapView$(children, P.String, N.Logger);
      t1 = new N.Logger($name, $parent, children, []);
      t1.Logger$_internal$3($name, $parent, children);
      return t1;
    },
    LogRecord$: function(level, message, loggerName, error, stackTrace, zone, object) {
      P.DateTime$now();
      $.LogRecord__nextNumber = J.$add$ansx($.LogRecord__nextNumber, 1);
      return new N.LogRecord(level, message, loggerName, []);
    },
    Logger: function Logger(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.parent = t1;
      _._children = t2;
      _.$ti = t3;
    },
    Logger_Logger_closure: function Logger_Logger_closure(t0, t1) {
      this.name = t0;
      this.$ti = t1;
    },
    Level: function Level(t0, t1, t2) {
      this.name = t0;
      this.value = t1;
      this.$ti = t2;
    },
    LogRecord: function LogRecord(t0, t1, t2, t3) {
      var _ = this;
      _.level = t0;
      _.message = t1;
      _.loggerName = t2;
      _.$ti = t3;
    },
    StreamChannelCompleter: function StreamChannelCompleter() {
    },
    _TypedDataBuffer: function _TypedDataBuffer() {
    },
    _IntBuffer: function _IntBuffer() {
    },
    _FloatBuffer: function _FloatBuffer() {
    },
    Uint8Buffer: function Uint8Buffer() {
    },
    Int8Buffer: function Int8Buffer() {
    },
    Uint8ClampedBuffer: function Uint8ClampedBuffer() {
    },
    Uint16Buffer: function Uint16Buffer() {
    },
    Int16Buffer: function Int16Buffer() {
    },
    Uint32Buffer: function Uint32Buffer() {
    },
    Int32Buffer: function Int32Buffer() {
    },
    Uint64Buffer: function Uint64Buffer() {
    },
    Int64Buffer: function Int64Buffer() {
    },
    Float32Buffer: function Float32Buffer() {
    },
    Float64Buffer: function Float64Buffer() {
    },
    Int32x4Buffer: function Int32x4Buffer() {
    },
    Float32x4Buffer: function Float32x4Buffer() {
    }
  },
  K = {
    BuiltListSerializer$: function() {
      return new K.BuiltListSerializer(S.BuiltList_BuiltList([C.Type_BuiltList_iTR, J.get$runtimeType$(S.BuiltList_BuiltList(C.List_empty0, P.Object))], P.Type), []);
    },
    BuiltListSerializer: function BuiltListSerializer(t0, t1) {
      this.types = t0;
      this.$ti = t1;
    },
    BuiltListSerializer_serialize_closure: function BuiltListSerializer_serialize_closure(t0, t1, t2) {
      this.serializers = t0;
      this.elementType = t1;
      this.$ti = t2;
    },
    BuiltListSerializer_deserialize_closure: function BuiltListSerializer_deserialize_closure(t0, t1, t2) {
      this.serializers = t0;
      this.elementType = t1;
      this.$ti = t2;
    },
    BuiltMapSerializer$: function() {
      var t1 = P.Object;
      return new K.BuiltMapSerializer(S.BuiltList_BuiltList([C.Type_BuiltMap_qd4, J.get$runtimeType$(A.BuiltMap_BuiltMap(t1, t1))], P.Type), []);
    },
    BuiltMapSerializer: function BuiltMapSerializer(t0, t1) {
      this.types = t0;
      this.$ti = t1;
    },
    DurationSerializer$: function() {
      return new K.DurationSerializer(S.BuiltList_BuiltList([C.Type_Duration_SnA], P.Type), []);
    },
    DurationSerializer: function DurationSerializer(t0, t1) {
      this.types = t0;
      this.$ti = t1;
    },
    NumSerializer$: function() {
      return new K.NumSerializer(S.BuiltList_BuiltList([C.Type_num_cv7], P.Type), []);
    },
    NumSerializer: function NumSerializer(t0, t1) {
      this.types = t0;
      this.$ti = t1;
    },
    RegExpSerializer$: function() {
      return new K.RegExpSerializer(S.BuiltList_BuiltList([C.Type_RegExp_Eeh, $.$get$_runtimeType()], P.Type), []);
    },
    RegExpSerializer: function RegExpSerializer(t0, t1) {
      this.types = t0;
      this.$ti = t1;
    },
    PathMap: function PathMap() {
    },
    GuaranteeChannel: function GuaranteeChannel() {
    },
    _GuaranteeSink: function _GuaranteeSink() {
    },
    UnicodeGlyphSet: function UnicodeGlyphSet(t0) {
      this.$ti = t0;
    },
    horizontalLine: function() {
      return D.glyphs().get$horizontalLine();
    },
    verticalLine: function() {
      return D.glyphs().get$verticalLine();
    },
    topLeftCorner: function() {
      return D.glyphs().get$topLeftCorner();
    },
    bottomLeftCorner: function() {
      return D.glyphs().get$bottomLeftCorner();
    },
    upEnd: function() {
      return D.glyphs().get$upEnd();
    },
    downEnd: function() {
      return D.glyphs().get$downEnd();
    }
  };
  var holders = [C, H, J, P, W, S, E, V, R, O, Y, G, F, L, U, Z, A, D, B, T, X, Q, M, N, K];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.ChromeObject.prototype = {};
  H.Rule.prototype = {};
  H.Event0.prototype = {};
  H.API_ChromeApp.prototype = {};
  H.API_Chrome.prototype = {};
  H.AppWindowBounds.prototype = {};
  H.AppWindowCreateWindowOptions.prototype = {};
  H.AppWindowAppWindow.prototype = {};
  H.Event_app_window_onBoundsChanged.prototype = {};
  H.Event_app_window_onClosed.prototype = {};
  H.Event_app_window_onFullscreened.prototype = {};
  H.Event_app_window_onMaximized.prototype = {};
  H.Event_app_window_onMinimized.prototype = {};
  H.Event_app_window_onRestored.prototype = {};
  H.API_app_window.prototype = {};
  H.AppRuntimeLaunchItem.prototype = {};
  H.AppRuntimeLaunchData.prototype = {};
  H.Event_app_runtime_onLaunched.prototype = {};
  H.Event_app_runtime_onRestarted.prototype = {};
  H.API_app_runtime.prototype = {};
  H.FilesystemAcceptOption.prototype = {};
  H.FilesystemChooseEntryOptions.prototype = {};
  H.API_file_system.prototype = {};
  H.JS_CONST.prototype = {};
  H._CryptoUtils.prototype = {};
  H._HashBase.prototype = {};
  H._MD5.prototype = {};
  H._SHA1.prototype = {};
  H.HttpServer.prototype = {$isStream: 1,
    $asStream: function() {
      return [H.HttpRequest0];
    }
  };
  H.HttpConnectionsInfo.prototype = {};
  H.HttpHeaders.prototype = {};
  H.HeaderValue.prototype = {};
  H.HttpSession.prototype = {$isMap: 1,
    $asMap: function() {
    }
  };
  H.ContentType.prototype = {$isHeaderValue: 1};
  H.Cookie.prototype = {};
  H.HttpRequest0.prototype = {$isStream: 1,
    $asStream: function() {
      return [[P.List, P.int]];
    }
  };
  H.HttpResponse.prototype = {$isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1
  };
  H.HttpClient.prototype = {};
  H.HttpClientRequest.prototype = {$isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1
  };
  H.HttpClientResponse.prototype = {$isStream: 1,
    $asStream: function() {
      return [[P.List, P.int]];
    }
  };
  H.HttpClientCredentials.prototype = {};
  H.HttpClientBasicCredentials.prototype = {};
  H.HttpClientDigestCredentials.prototype = {};
  H.HttpConnectionInfo.prototype = {};
  H.RedirectInfo.prototype = {};
  H.DetachedSocket.prototype = {};
  H.HttpException.prototype = {$isException: 1, $isIOException: 1};
  H.RedirectException.prototype = {$isHttpException: 1, $isException: 1, $isIOException: 1};
  H.HttpDate.prototype = {};
  H._HttpHeaders.prototype = {$isHttpHeaders: 1};
  H._HeaderValue.prototype = {$isHeaderValue: 1};
  H._ContentType.prototype = {$isContentType: 1};
  H._Cookie.prototype = {$isCookie: 1};
  H._ServiceObject.prototype = {};
  H._CopyingBytesBuilder.prototype = {$isBytesBuilder: 1};
  H._HttpIncoming.prototype = {
    $asStream: function() {
      return [[P.List, P.int]];
    }
  };
  H._HttpInboundMessage.prototype = {
    $asStream: function() {
      return [[P.List, P.int]];
    }
  };
  H._HttpRequest.prototype = {$isHttpRequest0: 1};
  H._HttpClientResponse.prototype = {$isHttpClientResponse: 1};
  H._StreamSinkImpl.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  H._IOSinkImpl.prototype = {
    $as_StreamSinkImpl: function() {
      return [[P.List, P.int]];
    },
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1
  };
  H._HttpOutboundMessage.prototype = {};
  H._HttpResponse.prototype = {$isHttpResponse: 1,
    $as_StreamSinkImpl: function() {
      return [[P.List, P.int]];
    },
    $as_HttpOutboundMessage: function() {
      return [H.HttpResponse];
    },
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $asSink: function() {
      return [[P.List, P.int]];
    }
  };
  H._HttpClientRequest.prototype = {$isHttpClientRequest: 1,
    $as_StreamSinkImpl: function() {
      return [[P.List, P.int]];
    },
    $as_HttpOutboundMessage: function() {
      return [H.HttpClientResponse];
    },
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $asSink: function() {
      return [[P.List, P.int]];
    }
  };
  H._HttpGZipSink.prototype = {};
  H._HttpOutgoing.prototype = {$isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    }
  };
  H._HttpClientConnection.prototype = {};
  H._ConnectionInfo.prototype = {};
  H._ConnectionTarget.prototype = {};
  H._HttpClient.prototype = {$isHttpClient: 1};
  H._HttpConnection.prototype = {$is_ServiceObject: 1,
    $asLinkedListEntry: function() {
      return [H._HttpConnection];
    }
  };
  H._HttpServer.prototype = {$isHttpServer: 1, $is_ServiceObject: 1,
    $asStream: function() {
      return [H.HttpRequest0];
    }
  };
  H._ProxyConfiguration.prototype = {};
  H._Proxy.prototype = {};
  H._HttpConnectionInfo.prototype = {$isHttpConnectionInfo: 1};
  H._DetachedSocket.prototype = {
    $asStream: function() {
      return [[P.List, P.int]];
    },
    $isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1,
    $isSocket: 1
  };
  H._AuthenticationScheme.prototype = {};
  H._Credentials.prototype = {};
  H._SiteCredentials.prototype = {};
  H._ProxyCredentials.prototype = {};
  H._HttpClientCredentials.prototype = {$isHttpClientCredentials: 1};
  H._HttpClientBasicCredentials.prototype = {$isHttpClientBasicCredentials: 1};
  H._HttpClientDigestCredentials.prototype = {$isHttpClientDigestCredentials: 1};
  H._RedirectInfo.prototype = {$isRedirectInfo: 1};
  H._Const.prototype = {};
  H._CharCode.prototype = {};
  H._State.prototype = {};
  H._HttpVersion.prototype = {};
  H._MessageType.prototype = {};
  H._HttpDetachedStreamSubscription.prototype = {$isStreamSubscription: 1,
    $asStreamSubscription: function() {
      return [[P.List, P.int]];
    }
  };
  H._HttpDetachedIncoming.prototype = {
    $asStream: function() {
      return [[P.List, P.int]];
    }
  };
  H._HttpParser.prototype = {
    $asStream: function() {
      return [H._HttpIncoming];
    }
  };
  H._HttpSession.prototype = {$isHttpSession: 1, $isMap: 1,
    $asMap: function() {
    }
  };
  H._HttpSessionManager.prototype = {};
  H.HttpOverrides.prototype = {};
  H._HttpOverridesScope.prototype = {};
  H.WebSocketStatus.prototype = {};
  H.CompressionOptions.prototype = {};
  H.WebSocketTransformer.prototype = {$isStreamTransformer: 1,
    $asStreamTransformer: function() {
      return [H.HttpRequest0, H.WebSocket];
    }
  };
  H.WebSocket.prototype = {$isStream: 1,
    $asStream: function() {
    },
    $isEventSink: 1,
    $asEventSink: function() {
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
    },
    $isSink: 1,
    $asSink: function() {
    }
  };
  H.WebSocketException.prototype = {$isException: 1, $isIOException: 1};
  H._WebSocketMessageType.prototype = {};
  H._WebSocketOpcode.prototype = {};
  H._EncodedString.prototype = {};
  H._CompressionMaxWindowBits.prototype = {};
  H._WebSocketProtocolTransformer.prototype = {$isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $asStreamTransformer: function() {
      return [[P.List, P.int], null];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], null];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    }
  };
  H._WebSocketPing.prototype = {};
  H._WebSocketPong.prototype = {};
  H._WebSocketTransformerImpl.prototype = {$isWebSocketTransformer: 1,
    $asStreamTransformer: function() {
      return [H.HttpRequest0, H.WebSocket];
    },
    $asStreamTransformerBase: function() {
      return [H.HttpRequest0, H.WebSocket];
    }
  };
  H._WebSocketPerMessageDeflate.prototype = {};
  H._WebSocketOutgoingTransformer.prototype = {$isEventSink: 1,
    $asEventSink: function() {
    },
    $asStreamTransformer: function() {
      return [null, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [null, [P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
    }
  };
  H._WebSocketConsumer.prototype = {$isStreamConsumer: 1,
    $asStreamConsumer: function() {
    }
  };
  H._WebSocketImpl.prototype = {$is_ServiceObject: 1, $isWebSocket: 1,
    $asStream: function() {
    },
    $isEventSink: 1,
    $asEventSink: function() {
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
    },
    $isSink: 1,
    $asSink: function() {
    }
  };
  H.__HttpConnection_LinkedListEntry__ServiceObject.prototype = {$is_ServiceObject: 1,
    $asLinkedListEntry: function() {
      return [H._HttpConnection];
    }
  };
  H.__HttpServer_Stream__ServiceObject.prototype = {$is_ServiceObject: 1,
    $asStream: function() {
      return [H.HttpRequest0];
    }
  };
  H.__WebSocketImpl_Stream__ServiceObject.prototype = {$is_ServiceObject: 1,
    $asStream: function() {
    }
  };
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToHumanReadableString(receiver);
    },
    noSuchMethod$1: function(receiver, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    get$runtimeType: function(receiver) {
      return H.getRuntimeType(receiver);
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $and: function(receiver, other) {
      return H.checkBool(H.boolTypeCheck(other)) && receiver;
    },
    $or: function(receiver, other) {
      return H.checkBool(H.boolTypeCheck(other)) || receiver;
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType: function(receiver) {
      return C.Type_bool_lhE;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_Null_Yyn;
    },
    noSuchMethod$1: function(receiver, invocation) {
      return this.super$Interceptor$noSuchMethod(receiver, H.interceptedTypeCheck(invocation, "$isInvocation"));
    },
    $isNull: 1
  };
  J.JSIndexable.prototype = {};
  J.JSMutableIndexable.prototype = {};
  J.JSObject.prototype = {};
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_JSObject_8k0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isJSObject: 1,
    $isDartLoader: 1,
    $isHotReloadableLibrary: 1,
    $isJsError: 1,
    $isJsMap: 1,
    $asJsMap: function() {
      return [-2, -2];
    },
    get$appDigests: function(obj) {
      return obj.appDigests;
    },
    get$moduleParentsGraph: function(obj) {
      return obj.moduleParentsGraph;
    },
    forceLoadModule$3: function(receiver, p0, p1, p2) {
      return receiver.forceLoadModule(p0, p1, p2);
    },
    getModuleLibraries$1: function(receiver, p0) {
      return receiver.getModuleLibraries(p0);
    },
    hot$onChildUpdate$3: function(receiver, p0, p1, p2) {
      return receiver.hot$onChildUpdate(p0, p1, p2);
    },
    hot$onDestroy$0: function(receiver) {
      return receiver.hot$onDestroy();
    },
    hot$onSelfUpdate$1: function(receiver, p0) {
      return receiver.hot$onSelfUpdate(p0);
    },
    get$message: function(obj) {
      return obj.message;
    },
    $get$1: function(receiver, p0) {
      return receiver.get(p0);
    },
    get$keys: function(obj) {
      return obj.keys;
    },
    keys$0: function(receiver) {
      return receiver.keys();
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
    },
    $signature: function() {
      return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
    },
    $isFunction: 1
  };
  J._Growable.prototype = {};
  J.JSArray.prototype = {
    checkMutable$1: function(receiver, reason) {
      if (!!receiver.immutable$list)
        throw H.wrapException(P.UnsupportedError$(H.stringTypeCheck(reason)));
    },
    checkGrowable$1: function(receiver, reason) {
      if (!!receiver.fixed$length)
        throw H.wrapException(P.UnsupportedError$(H.stringTypeCheck(reason)));
    },
    cast$1$0: function(receiver, $R) {
      return P.List_castFrom(receiver, H.getTypeArgumentByIndex(receiver, 0), $R);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      this.checkGrowable$1(receiver, "add");
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      H.intTypeCheck(index);
      this.checkGrowable$1(receiver, "removeAt");
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.argumentErrorValue(index));
      if (index < 0 || index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      this.checkGrowable$1(receiver, "insert");
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.argumentErrorValue(index));
      if (index < 0 || index > receiver.length)
        throw H.wrapException(P.RangeError$value(index, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2: function(receiver, index, iterable) {
      var t1, insertionLength, end, _this = this;
      H.intTypeCheck(index);
      H.assertSubtype(iterable, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      _this.checkGrowable$1(receiver, "insertAll");
      P.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      t1 = J.getInterceptor$(iterable);
      if (!t1.$isEfficientLengthIterable)
        iterable = t1.toList$0(iterable);
      insertionLength = J.get$length$asx(iterable);
      t1 = receiver.length;
      if (typeof insertionLength !== "number")
        return H.iae(insertionLength);
      _this.set$length(receiver, t1 + insertionLength);
      if (typeof index !== "number")
        return index.$add();
      end = index + insertionLength;
      _this.setRange$4(receiver, end, receiver.length, receiver, index);
      _this.setRange$3(receiver, index, end, iterable);
    },
    setAll$2: function(receiver, index, iterable) {
      var t1, element, index0;
      H.intTypeCheck(index);
      H.assertSubtype(iterable, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      this.checkMutable$1(receiver, "setAll");
      P.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0(); index = index0) {
        element = t1.get$current();
        if (typeof index !== "number")
          return index.$add();
        index0 = index + 1;
        this.$indexSet(receiver, index, element);
      }
    },
    removeLast$0: function(receiver) {
      this.checkGrowable$1(receiver, "removeLast");
      if (receiver.length === 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    where$1: function(receiver, f) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return H.WhereIterable$(receiver, H.functionTypeCheck(f, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    addAll$1: function(receiver, collection) {
      var t1;
      H.assertSubtype(collection, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      this.checkGrowable$1(receiver, "addAll");
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    clear$0: function(receiver) {
      this.set$length(receiver, 0);
    },
    forEach$1: function(receiver, f) {
      var end, i;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return H.MappedListIterable$(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    join$1: function(receiver, separator) {
      var list, i;
      H.stringTypeCheck(separator);
      list = new Array(receiver.length);
      list.fixed$length = Array;
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, H.S(receiver[i]));
      return list.join(separator);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    take$1: function(receiver, n) {
      return H.SubListIterable$(receiver, 0, H.intTypeCheck(n), H.getTypeArgumentByIndex(receiver, 0));
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, H.intTypeCheck(n), null, H.getTypeArgumentByIndex(receiver, 0));
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(receiver, 0)]});
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.checkNull(start);
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(H.argumentErrorValue(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, "start", null));
      if (end == null)
        end = receiver.length;
      else if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return J.JSArray_JSArray$markGrowable(receiver.slice(start, end), H.getTypeArgumentByIndex(receiver, 0));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var t1, $length, t2, otherStart, otherList, i;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      t1 = H.getTypeArgumentByIndex(receiver, 0);
      H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
      H.intTypeCheck(skipCount);
      this.checkMutable$1(receiver, "setRange");
      P.RangeError_checkValidRange(start, end, receiver.length);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      t2 = J.getInterceptor$(iterable);
      if (!!t2.$isList) {
        H.assertSubtype(iterable, "$isList", [t1], "$asList");
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.toList$1$growable$ax(t2.skip$1(iterable, skipCount), false);
        otherStart = 0;
      }
      if (typeof otherStart !== "number")
        return otherStart.$add();
      t1 = J.getInterceptor$asx(otherList);
      t2 = t1.get$length(otherList);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (otherStart + $length > t2)
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    replaceRange$3: function(receiver, start, end, replacement) {
      var t1, removeLength, insertLength, insertEnd, delta, newLength, _this = this;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(replacement, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      _this.checkGrowable$1(receiver, "replaceRange");
      P.RangeError_checkValidRange(start, end, receiver.length);
      t1 = J.getInterceptor$(replacement);
      if (!t1.$isEfficientLengthIterable)
        replacement = t1.toList$0(replacement);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      removeLength = end - start;
      insertLength = J.get$length$asx(replacement);
      if (typeof insertLength !== "number")
        return H.iae(insertLength);
      t1 = receiver.length;
      insertEnd = start + insertLength;
      if (removeLength >= insertLength) {
        delta = removeLength - insertLength;
        newLength = t1 - delta;
        _this.setRange$3(receiver, start, insertEnd, replacement);
        if (delta !== 0) {
          _this.setRange$4(receiver, insertEnd, newLength, receiver, end);
          _this.set$length(receiver, newLength);
        }
      } else {
        newLength = t1 + (insertLength - removeLength);
        _this.set$length(receiver, newLength);
        _this.setRange$4(receiver, insertEnd, newLength, receiver, end);
        _this.setRange$3(receiver, start, insertEnd, replacement);
      }
    },
    any$1: function(receiver, test) {
      var end, i;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (test.call$1(receiver[i]))
          return true;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    get$reversed: function(receiver) {
      return H.ReversedListIterable$(receiver, H.getTypeArgumentByIndex(receiver, 0));
    },
    sort$1: function(receiver, compare) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      this.checkMutable$1(receiver, "sort");
      H.Sort_sort(receiver, compare == null ? J._interceptors_JSArray__compareAny$closure() : compare, t1);
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    toString$0: function(receiver) {
      return P.ListBase_listToString(receiver);
    },
    toList$1$growable: function(receiver, growable) {
      return H.boolTypeCheck(growable) ? this._toListGrowable$0(receiver) : this._toListFixed$0(receiver);
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    _toListGrowable$0: function(receiver) {
      return J.JSArray_JSArray$markGrowable(receiver.slice(0), H.getTypeArgumentByIndex(receiver, 0));
    },
    _toListFixed$0: function(receiver) {
      return J.JSArray_JSArray$markFixed(receiver.slice(0), H.getTypeArgumentByIndex(receiver, 0));
    },
    get$iterator: function(receiver) {
      return J.ArrayIterator$(receiver, H.getTypeArgumentByIndex(receiver, 0));
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      var _s9_ = "newLength";
      H.intTypeCheck(newLength);
      this.checkGrowable$1(receiver, "set length");
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(P.ArgumentError$value(newLength, _s9_, null));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$range(newLength, 0, null, _s9_, null));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      this.checkMutable$1(receiver, "indexed set");
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $add: function(receiver, other) {
      var t2, t3, totalLength,
        t1 = [H.getTypeArgumentByIndex(receiver, 0)];
      H.assertSubtype(other, "$isList", t1, "$asList");
      t2 = receiver.length;
      t3 = J.get$length$asx(other);
      if (typeof t3 !== "number")
        return H.iae(t3);
      totalLength = t2 + t3;
      t1 = H.setRuntimeTypeInfo([], t1);
      this.set$length(t1, totalLength);
      this.setRange$3(t1, 0, receiver.length, receiver);
      this.setRange$3(t1, receiver.length, totalLength, other);
      return t1;
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (!J.$eq$(_this._length, $length))
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      if (J.$ge$n(_this._index, $length)) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t2.$index(t1, _this._index));
      _this._index = H.intTypeCheck(J.$add$ansx(_this._index, 1));
      return true;
    },
    set$_current: function(_current) {
      this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1: function(receiver, b) {
      var bIsNegative, _this = this;
      H.numTypeCheck(b);
      if (typeof b !== "number")
        throw H.wrapException(H.argumentErrorValue(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = _this.get$isNegative(b);
          if (J.$eq$(_this.get$isNegative(receiver), bIsNegative))
            return 0;
          if (_this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (_this.get$isNaN(receiver)) {
        if (_this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    get$isInfinite: function(receiver) {
      return receiver == 1 / 0 || receiver == -1 / 0;
    },
    get$isFinite: function(receiver) {
      return isFinite(receiver);
    },
    remainder$1: function(receiver, b) {
      H.numTypeCheck(b);
      if (typeof b !== "number")
        throw H.wrapException(H.argumentErrorValue(b));
      return receiver % b;
    },
    abs$0: function(receiver) {
      return Math.abs(receiver);
    },
    toInt$0: function(receiver) {
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver))
        return this.truncateToDouble$0(receiver) + 0;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".ceil()"));
    },
    round$0: function(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".round()"));
    },
    ceilToDouble$0: function(receiver) {
      return Math.ceil(receiver);
    },
    floorToDouble$0: function(receiver) {
      return Math.floor(receiver);
    },
    truncateToDouble$0: function(receiver) {
      return receiver < 0 ? this.ceilToDouble$0(receiver) : this.floorToDouble$0(receiver);
    },
    toDouble$0: function(receiver) {
      return receiver;
    },
    toRadixString$1: function(receiver, radix) {
      var result;
      H.intTypeCheck(radix);
      H.checkInt(radix);
      if (typeof radix !== "number")
        return radix.$lt();
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (!J.$eq$(C.JSString_methods.codeUnitAt$1(result, result.length - 1), 41))
        return result;
      return J.JSNumber__handleIEtoString(result);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return 536870911 & intValue;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return 536870911 & ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259;
    },
    $negate: function(receiver) {
      return -receiver;
    },
    $add: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver - other;
    },
    $div: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver / other;
    },
    $mul: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver * other;
    },
    $mod: function(receiver, other) {
      var result;
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    _isInt32$1: function(receiver, value) {
      return (value | 0) === value;
    },
    $tdiv: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      if (this._isInt32$1(receiver, receiver))
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1: function(receiver, other) {
      H.numTypeCheck(other);
      return this._isInt32$1(receiver, receiver) ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient;
      H.numTypeCheck(other);
      quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + H.S(other)));
    },
    $shl: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return this._shlPositive$1(receiver, other);
    },
    _shlPositive$1: function(receiver, other) {
      H.numTypeCheck(other);
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return this._shrOtherPositive$1(receiver, other);
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      H.numTypeCheck(other);
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        if (typeof other !== "number")
          return other.$gt();
        if (other > 31)
          t1 = 31;
        else
          t1 = other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1: function(receiver, other) {
      H.numTypeCheck(other);
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1: function(receiver, other) {
      H.numTypeCheck(other);
      return other > 31 ? 0 : receiver >>> other;
    },
    $and: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return (receiver & other) >>> 0;
    },
    $or: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return (receiver | other) >>> 0;
    },
    $xor: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return (receiver ^ other) >>> 0;
    },
    $lt: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver > other;
    },
    $le: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver <= other;
    },
    $ge: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver >= other;
    },
    get$runtimeType: function(receiver) {
      return C.Type_num_cv7;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    abs$0: function(receiver) {
      return Math.abs(receiver);
    },
    $negate: function(receiver) {
      return -receiver;
    },
    get$isEven: function(receiver) {
      return (receiver & 1) === 0;
    },
    get$isOdd: function(receiver) {
      return (receiver & 1) === 1;
    },
    get$bitLength: function(receiver) {
      var wordBits, t1,
        nonneg = receiver < 0 ? -receiver - 1 : receiver;
      for (wordBits = 32; nonneg >= 4294967296;) {
        nonneg = this._tdivFast$1(nonneg, 4294967296);
        wordBits += 32;
      }
      t1 = J.JSInt__clz32(nonneg);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return wordBits - t1;
    },
    get$runtimeType: function(receiver) {
      return C.Type_int_tHn;
    },
    $not: function(receiver) {
      return ~receiver >>> 0;
    },
    $isint: 1
  };
  J.JSDouble.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_double_K1J;
    }
  };
  J.JSString.prototype = {
    codeUnitAt$1: function(receiver, index) {
      H.intTypeCheck(index);
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return this._codeUnitAt$1(receiver, index);
    },
    _codeUnitAt$1: function(receiver, index) {
      H.intTypeCheck(index);
      if (typeof index !== "number")
        return index.$ge();
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    allMatches$2: function(receiver, string, start) {
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      H.checkString(string);
      H.checkInt(start);
      if (typeof start !== "number")
        return H.iae(start);
      if (0 > start || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return H.allMatchesInStringUnchecked(receiver, string, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    matchAsPrefix$2: function(receiver, string, start) {
      var t1, t2, i;
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      if (typeof start !== "number")
        return start.$lt();
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      t1 = receiver.length;
      if (start + t1 > string.length)
        return;
      for (t2 = J.getInterceptor$s(string), i = 0; i < t1; ++i)
        if (!J.$eq$(t2.codeUnitAt$1(string, start + i), this._codeUnitAt$1(receiver, i)))
          return;
      return H.StringMatch$(start, string, receiver);
    },
    $add: function(receiver, other) {
      H.stringTypeCheck(other);
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$value(other, null, null));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength, t1;
      H.stringTypeCheck(other);
      H.checkString(other);
      otherLength = other.length;
      t1 = receiver.length;
      if (otherLength > t1)
        return false;
      t1 = this.substring$1(receiver, t1 - otherLength);
      return other == null ? t1 == null : other === t1;
    },
    replaceAll$2: function(receiver, from, to) {
      H.stringSuperNativeTypeCheck(from, "$isPattern");
      H.stringTypeCheck(to);
      H.checkString(to);
      return H.stringTypeCheck(H.stringReplaceAllUnchecked(receiver, from, to));
    },
    replaceAllMapped$2: function(receiver, from, convert) {
      return this.splitMapJoin$2$onMatch(receiver, H.stringSuperNativeTypeCheck(from, "$isPattern"), H.functionTypeCheck(convert, {func: 1, ret: P.String, args: [P.Match]}));
    },
    splitMapJoin$2$onMatch: function(receiver, from, onMatch) {
      return H.stringTypeCheck(H.stringReplaceAllFuncUnchecked(receiver, H.stringSuperNativeTypeCheck(from, "$isPattern"), H.functionTypeCheck(onMatch, {func: 1, ret: P.String, args: [P.Match]}), null));
    },
    replaceFirst$2: function(receiver, from, to) {
      H.stringSuperNativeTypeCheck(from, "$isPattern");
      H.stringTypeCheck(to);
      H.checkString(to);
      P.RangeError_checkValueInInterval(0, 0, receiver.length, "startIndex");
      return H.stringTypeCheck(H.stringReplaceFirstUnchecked(receiver, from, to, 0));
    },
    split$1: function(receiver, pattern) {
      H.stringSuperNativeTypeCheck(pattern, "$isPattern");
      H.checkNull(pattern);
      if (typeof pattern === "string")
        return H.stringSplitUnchecked(receiver, pattern);
      else if (pattern instanceof H.JSSyntaxRegExp && J.$eq$(H.regExpCaptureCount(pattern), 0))
        return H.stringSplitUnchecked(receiver, H.regExpGetNative(pattern));
      else
        return this._defaultSplit$1(receiver, pattern);
    },
    replaceRange$3: function(receiver, start, end, replacement) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.stringTypeCheck(replacement);
      H.checkString(replacement);
      H.checkInt(start);
      end = P.RangeError_checkValidRange(start, end, receiver.length);
      H.checkInt(end);
      return H.stringReplaceRangeUnchecked(receiver, start, end, replacement);
    },
    _defaultSplit$1: function(receiver, pattern) {
      var result, t1, start, $length, t2, matchStart, matchEnd;
      H.stringSuperNativeTypeCheck(pattern, "$isPattern");
      result = H.setRuntimeTypeInfo([], [P.String]);
      for (t1 = J.get$iterator$ax(J.allMatches$1$s(pattern, receiver)), start = 0, $length = 1; t1.moveNext$0();) {
        t2 = t1.get$current();
        matchStart = t2.get$start();
        matchEnd = t2.get$end();
        if (typeof matchEnd !== "number")
          return matchEnd.$sub();
        if (typeof matchStart !== "number")
          return H.iae(matchStart);
        $length = matchEnd - matchStart;
        if ($length === 0 && start === matchStart)
          continue;
        C.JSArray_methods.add$1(result, this.substring$2(receiver, start, matchStart));
        start = matchEnd;
      }
      if (start < receiver.length || $length > 0)
        C.JSArray_methods.add$1(result, this.substring$1(receiver, start));
      return result;
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      H.stringSuperNativeTypeCheck(pattern, "$isPattern");
      H.intTypeCheck(index);
      H.checkInt(index);
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0 || index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
      if (typeof pattern === "string") {
        endIndex = index + pattern.length;
        if (endIndex > receiver.length)
          return false;
        return pattern === receiver.substring(index, endIndex);
      }
      return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      H.intTypeCheck(startIndex);
      H.intTypeCheck(endIndex);
      H.checkInt(startIndex);
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof startIndex !== "number")
        return startIndex.$lt();
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    toUpperCase$0: function(receiver) {
      return receiver.toUpperCase();
    },
    $mul: function(receiver, times) {
      var s, result;
      H.intTypeCheck(times);
      if (typeof times !== "number")
        return H.iae(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = J.$add$ansx(s, result);
        times = times >>> 1;
        if (times === 0)
          break;
        s = H.stringTypeCheck(J.$add$ansx(s, s));
      }
      return result;
    },
    padLeft$2: function(receiver, width, padding) {
      var delta;
      H.intTypeCheck(width);
      H.stringTypeCheck(padding);
      if (typeof width !== "number")
        return width.$sub();
      delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return J.$add$ansx(J.$mul$ns(padding, delta), receiver);
    },
    padRight$1: function(receiver, width) {
      var delta;
      H.intTypeCheck(width);
      if (typeof width !== "number")
        return width.$sub();
      delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$add(receiver, this.$mul(" ", delta));
    },
    get$codeUnits: function(receiver) {
      return H.CodeUnits$(receiver);
    },
    indexOf$2: function(receiver, pattern, start) {
      var t1, match, t2, i;
      H.stringSuperNativeTypeCheck(pattern, "$isPattern");
      H.intTypeCheck(start);
      H.checkNull(pattern);
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(H.argumentErrorValue(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      if (typeof pattern === "string")
        return H.intTypeCheck(H.stringIndexOfStringUnchecked(receiver, pattern, start));
      t1 = J.getInterceptor$(pattern);
      if (!!t1.$isJSSyntaxRegExp) {
        match = H.firstMatchAfter(pattern, receiver, start);
        return match == null ? -1 : match.get$start();
      }
      for (t2 = receiver.length, i = start; i <= t2; ++i)
        if (t1.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2: function(receiver, pattern, start) {
      var t1, t2, i;
      H.stringSuperNativeTypeCheck(pattern, "$isPattern");
      H.intTypeCheck(start);
      H.checkNull(pattern);
      if (start == null)
        start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      if (typeof pattern === "string") {
        t1 = pattern.length;
        t2 = receiver.length;
        return H.intTypeCheck(H.stringLastIndexOfUnchecked(receiver, pattern, start + t1 > t2 ? t2 - t1 : start));
      }
      for (t1 = J.getInterceptor$s(pattern), i = start; i >= 0; --i)
        if (t1.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    lastIndexOf$1: function($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$1: function(receiver, other) {
      H.stringSuperNativeTypeCheck(other, "$isPattern");
      H.checkNull(other);
      return H.boolTypeCheck(H.stringContainsUnchecked(receiver, other, 0));
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    compareTo$1: function(receiver, other) {
      var t1;
      H.stringTypeCheck(other);
      if (typeof other !== "string")
        throw H.wrapException(H.argumentErrorValue(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    get$runtimeType: function(receiver) {
      return C.Type_String_k8F;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1,
    $isString: 1
  };
  H.CastStream.prototype = {
    $asStream: function($S, $T) {
      return [$T];
    }
  };
  H.CastStreamSubscription.prototype = {$isStreamSubscription: 1,
    $asStreamSubscription: function($S, $T) {
      return [$T];
    }
  };
  H.CastStreamTransformer.prototype = {
    $asStreamTransformer: function(SS, ST, TS, TT) {
      return [TS, TT];
    },
    $asStreamTransformerBase: function(SS, ST, TS, TT) {
      return [TS, TT];
    }
  };
  H.CastConverter.prototype = {
    $asStreamTransformer: function(SS, ST, TS, TT) {
      return [TS, TT];
    },
    $asStreamTransformerBase: function(SS, ST, TS, TT) {
      return [TS, TT];
    },
    $asConverter: function(SS, ST, TS, TT) {
      return [TS, TT];
    }
  };
  H._CastIterableBase.prototype = {
    get$iterator: function(_) {
      return H.CastIterator$(J.get$iterator$ax(this.get$_source()), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    get$length: function(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1: function(_, count) {
      H.intTypeCheck(count);
      return H.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    take$1: function(_, count) {
      H.intTypeCheck(count);
      return H.CastIterable_CastIterable(J.take$1$ax(this.get$_source(), count), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    elementAt$1: function(_, index) {
      H.intTypeCheck(index);
      return H.subtypeOfRuntimeTypeCast(J.elementAt$1$ax(this.get$_source(), index), H.getTypeArgumentByIndex(this, 1));
    },
    get$first: function(_) {
      return H.subtypeOfRuntimeTypeCast(J.get$first$ax(this.get$_source()), H.getTypeArgumentByIndex(this, 1));
    },
    get$last: function(_) {
      return H.subtypeOfRuntimeTypeCast(J.get$last$ax(this.get$_source()), H.getTypeArgumentByIndex(this, 1));
    },
    contains$1: function(_, other) {
      return J.contains$1$asx(this.get$_source(), other);
    },
    toString$0: function(_) {
      return J.toString$0$(this.get$_source());
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.CastIterator.prototype = {
    moveNext$0: function() {
      return this._source.moveNext$0();
    },
    get$current: function() {
      return H.subtypeOfRuntimeTypeCast(this._source.get$current(), H.getTypeArgumentByIndex(this, 1));
    },
    $isIterator: 1,
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.CastIterable.prototype = {
    cast$1$0: function(_, $R) {
      return H.CastIterable_CastIterable(this._source, H.getTypeArgumentByIndex(this, 0), $R);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    get$_source: function() {
      return this._source;
    }
  };
  H._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    }
  };
  H._CastListBase.prototype = {
    $index: function(_, index) {
      return H.subtypeOfRuntimeTypeCast(J.$index$asx(this._source, H.intTypeCheck(index)), H.getTypeArgumentByIndex(this, 1));
    },
    $indexSet: function(_, index, value) {
      J.$indexSet$ax(this._source, H.intTypeCheck(index), H.subtypeOfRuntimeTypeCast(H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)), H.getTypeArgumentByIndex(this, 0)));
    },
    set$length: function(_, $length) {
      J.set$length$asx(this._source, H.intTypeCheck($length));
    },
    add$1: function(_, value) {
      J.add$1$ax(this._source, H.subtypeOfRuntimeTypeCast(H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)), H.getTypeArgumentByIndex(this, 0)));
    },
    addAll$1: function(_, values) {
      var t1 = H.getTypeArgumentByIndex(this, 1);
      J.addAll$1$ax(this._source, H.CastIterable_CastIterable(H.assertSubtype(values, "$isIterable", [t1], "$asIterable"), t1, H.getTypeArgumentByIndex(this, 0)));
    },
    sort$1: function(_, compare) {
      var t1 = H.getTypeArgumentByIndex(this, 1);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      t1 = compare == null ? null : new H._CastListBase_sort_closure(this, compare);
      J.sort$1$ax(this._source, t1);
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    insert$2: function(_, index, element) {
      J.insert$2$ax(this._source, H.intTypeCheck(index), H.subtypeOfRuntimeTypeCast(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 1)), H.getTypeArgumentByIndex(this, 0)));
    },
    insertAll$2: function(_, index, elements) {
      var t1 = H.getTypeArgumentByIndex(this, 1);
      J.insertAll$2$ax(this._source, H.intTypeCheck(index), H.CastIterable_CastIterable(H.assertSubtype(elements, "$isIterable", [t1], "$asIterable"), t1, H.getTypeArgumentByIndex(this, 0)));
    },
    setAll$2: function(_, index, elements) {
      var t1 = H.getTypeArgumentByIndex(this, 1);
      J.setAll$2$ax(this._source, H.intTypeCheck(index), H.CastIterable_CastIterable(H.assertSubtype(elements, "$isIterable", [t1], "$asIterable"), t1, H.getTypeArgumentByIndex(this, 0)));
    },
    removeAt$1: function(_, index) {
      return H.subtypeOfRuntimeTypeCast(J.removeAt$1$ax(this._source, H.intTypeCheck(index)), H.getTypeArgumentByIndex(this, 1));
    },
    removeLast$0: function(_) {
      return H.subtypeOfRuntimeTypeCast(J.removeLast$0$ax(this._source), H.getTypeArgumentByIndex(this, 1));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      var t1;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      t1 = H.getTypeArgumentByIndex(this, 1);
      H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
      H.intTypeCheck(skipCount);
      J.setRange$4$ax(this._source, start, end, H.CastIterable_CastIterable(iterable, t1, H.getTypeArgumentByIndex(this, 0)), skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    replaceRange$3: function(_, start, end, replacement) {
      var t1 = H.getTypeArgumentByIndex(this, 1);
      J.replaceRange$3$asx(this._source, H.intTypeCheck(start), H.intTypeCheck(end), H.CastIterable_CastIterable(H.assertSubtype(replacement, "$isIterable", [t1], "$asIterable"), t1, H.getTypeArgumentByIndex(this, 0)));
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $isListMixin: 1,
    $asListMixin: function($S, $T) {
      return [$T];
    },
    $isList: 1,
    $asList: function($S, $T) {
      return [$T];
    }
  };
  H._CastListBase_sort_closure.prototype = {
    call$2: function(v1, v2) {
      var t1 = this.$this,
        t2 = H.getTypeArgumentByIndex(t1, 0);
      H.assertSubtypeOfRuntimeType(v1, t2);
      H.assertSubtypeOfRuntimeType(v2, t2);
      t1 = H.getTypeArgumentByIndex(t1, 1);
      return this.compare.call$2(H.subtypeOfRuntimeTypeCast(v1, t1), H.subtypeOfRuntimeTypeCast(v2, t1));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: function() {
      var t1 = H.getTypeArgumentByIndex(this.$this, 0);
      return {func: 1, ret: P.int, args: [t1, t1]};
    }
  };
  H.CastList.prototype = {
    cast$1$0: function(_, $R) {
      return H.CastList$(this._source, H.getTypeArgumentByIndex(this, 0), $R);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    get$_source: function() {
      return this._source;
    }
  };
  H.CastSet.prototype = {
    cast$1$0: function(_, $R) {
      return H.CastSet$(this._source, this._emptySet, H.getTypeArgumentByIndex(this, 0), $R);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    add$1: function(_, value) {
      return J.add$1$ax(this._source, H.subtypeOfRuntimeTypeCast(H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)), H.getTypeArgumentByIndex(this, 0)));
    },
    addAll$1: function(_, elements) {
      var t1 = H.getTypeArgumentByIndex(this, 1);
      J.addAll$1$ax(this._source, H.CastIterable_CastIterable(H.assertSubtype(elements, "$isIterable", [t1], "$asIterable"), t1, H.getTypeArgumentByIndex(this, 0)));
    },
    remove$1: function(_, object) {
      return J.remove$1$z(this._source, object);
    },
    containsAll$1: function(objects) {
      return this._source.containsAll$1(H.assertSubtype(objects, "$isIterable", [P.Object], "$asIterable"));
    },
    clear$0: function(_) {
      J.clear$0$ax(this._source);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $isSet: 1,
    $asSet: function($S, $T) {
      return [$T];
    },
    get$_source: function() {
      return this._source;
    }
  };
  H.CastMap.prototype = {
    cast$2$0: function(_, RK, RV) {
      return H.CastMap$(this._source, H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1), RK, RV);
    },
    cast$0: function($receiver) {
      return this.cast$2$0($receiver, null, null);
    },
    containsKey$1: function(key) {
      return this._source.containsKey$1(key);
    },
    $index: function(_, key) {
      return H.subtypeOfRuntimeTypeCast(J.$index$asx(this._source, key), H.getTypeArgumentByIndex(this, 3));
    },
    $indexSet: function(_, key, value) {
      var _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 2));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 3));
      J.$indexSet$ax(_this._source, H.subtypeOfRuntimeTypeCast(key, H.getTypeArgumentByIndex(_this, 0)), H.subtypeOfRuntimeTypeCast(value, H.getTypeArgumentByIndex(_this, 1)));
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var t1, t2, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 2));
      t1 = H.getTypeArgumentByIndex(_this, 3);
      H.functionTypeCheck(ifAbsent, {func: 1, ret: t1});
      H.subtypeOfRuntimeTypeCast(key, H.getTypeArgumentByIndex(_this, 0));
      t2 = ifAbsent == null ? null : new H.CastMap_putIfAbsent_closure(_this, ifAbsent);
      return H.subtypeOfRuntimeTypeCast(_this._source.putIfAbsent$2(key, t2), t1);
    },
    addAll$1: function(_, other) {
      var _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 2),
        t2 = H.getTypeArgumentByIndex(_this, 3);
      J.addAll$1$ax(_this._source, H.CastMap$(H.assertSubtype(other, "$isMap", [t1, t2], "$asMap"), t1, t2, H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1)));
    },
    remove$1: function(_, key) {
      return H.subtypeOfRuntimeTypeCast(J.remove$1$z(this._source, key), H.getTypeArgumentByIndex(this, 3));
    },
    clear$0: function(_) {
      J.clear$0$ax(this._source);
    },
    forEach$1: function(_, f) {
      var _this = this;
      J.forEach$1$ax(_this._source, new H.CastMap_forEach_closure(_this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 2), H.getTypeArgumentByIndex(_this, 3)]})));
    },
    get$keys: function(_) {
      return H.CastIterable_CastIterable(J.get$keys$x(this._source), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 2));
    },
    get$values: function() {
      return H.CastIterable_CastIterable(this._source.get$values(), H.getTypeArgumentByIndex(this, 1), H.getTypeArgumentByIndex(this, 3));
    },
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._source);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._source);
    },
    $asMapBase: function(SK, SV, $K, $V) {
      return [$K, $V];
    },
    $asMapMixin: function(SK, SV, $K, $V) {
      return [$K, $V];
    },
    $asMap: function(SK, SV, $K, $V) {
      return [$K, $V];
    }
  };
  H.CastMap_putIfAbsent_closure.prototype = {
    call$0: function() {
      return H.subtypeOfRuntimeTypeCast(this.ifAbsent.call$0(), H.getTypeArgumentByIndex(this.$this, 1));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: function() {
      return {func: 1, ret: H.getTypeArgumentByIndex(this.$this, 1)};
    }
  };
  H.CastMap_forEach_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(t1, 1));
      this.f.call$2(H.subtypeOfRuntimeTypeCast(key, H.getTypeArgumentByIndex(t1, 2)), H.subtypeOfRuntimeTypeCast(value, H.getTypeArgumentByIndex(t1, 3)));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]};
    }
  };
  H.CastQueue.prototype = {
    cast$1$0: function(_, $R) {
      return H.CastQueue$(this._source, H.getTypeArgumentByIndex(this, 0), $R);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    clear$0: function(_) {
      J.clear$0$ax(this._source);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $isQueue: 1,
    $asQueue: function($S, $T) {
      return [$T];
    },
    get$_source: function() {
      return this._source;
    }
  };
  H.CodeUnits.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_string);
    },
    $index: function(_, i) {
      return J.codeUnitAt$1$s(this.__internal$_string, H.intTypeCheck(i));
    },
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  H.ExternalName.prototype = {};
  H.Since.prototype = {};
  H.HttpStatus.prototype = {};
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      return H.ListIterator$(this, H.getRuntimeTypeArgument(this, "ListIterable", 0));
    },
    get$isEmpty: function(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$first: function(_) {
      if (J.$eq$(this.get$length(this), 0))
        throw H.wrapException(H.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    get$last: function(_) {
      var _this = this;
      if (J.$eq$(_this.get$length(_this), 0))
        throw H.wrapException(H.IterableElementError_noElement());
      return _this.elementAt$1(0, J.$sub$n(_this.get$length(_this), 1));
    },
    contains$1: function(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (J.$eq$(_this.elementAt$1(0, i), element))
          return true;
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return false;
    },
    join$1: function(_, separator) {
      var $length, first, t1, buffer, i, _this = this;
      H.stringTypeCheck(separator);
      $length = _this.get$length(_this);
      if (!J.get$isEmpty$asx(separator)) {
        if ($length === 0)
          return "";
        first = H.S(_this.elementAt$1(0, 0));
        t1 = _this.get$length(_this);
        if ($length == null ? t1 != null : $length !== t1)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        buffer = P.StringBuffer$(first);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 1;
        for (; i < $length; ++i) {
          buffer.write$1(separator);
          buffer.write$1(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return buffer.toString$0(0);
      } else {
        buffer = P.StringBuffer$("");
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          buffer.write$1(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return buffer.toString$0(0);
      }
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    where$1: function(_, test) {
      return this.super$Iterable$where(0, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "ListIterable", 0)]}));
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "ListIterable", 0);
      return H.MappedListIterable$(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      var $length, value, i, _this = this;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getRuntimeTypeArgument(_this, "ListIterable", 0)]});
      $length = _this.get$length(_this);
      if (typeof $length !== "number")
        return H.iae($length);
      value = initialValue;
      i = 0;
      for (; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return value;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    skip$1: function(_, count) {
      return H.SubListIterable$(this, H.intTypeCheck(count), null, H.getRuntimeTypeArgument(this, "ListIterable", 0));
    },
    take$1: function(_, count) {
      return H.SubListIterable$(this, 0, H.intTypeCheck(count), H.getRuntimeTypeArgument(this, "ListIterable", 0));
    },
    toList$1$growable: function(_, growable) {
      var result, t2, i, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "ListIterable", 0);
      if (H.boolTypeCheck(growable)) {
        result = H.setRuntimeTypeInfo([], [t1]);
        C.JSArray_methods.set$length(result, _this.get$length(_this));
      } else {
        t2 = _this.get$length(_this);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = new Array(t2);
        t2.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t2, [t1]);
      }
      i = 0;
      while (true) {
        t1 = _this.get$length(_this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        C.JSArray_methods.$indexSet(result, i, _this.elementAt$1(0, i));
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.SubListIterable.prototype = {
    SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
      var t2,
        t1 = this._start;
      P.RangeError_checkNotNegative(t1, "start");
      t2 = this._endOrLength;
      if (t2 != null) {
        P.RangeError_checkNotNegative(t2, "end");
        if (J.$gt$n(t1, t2))
          throw H.wrapException(P.RangeError$range(t1, 0, t2, "start", null));
      }
    },
    get$_endIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._endOrLength;
      if (t1 == null || J.$gt$n(t1, $length))
        return $length;
      return t1;
    },
    get$_startIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (J.$gt$n(t1, $length))
        return $length;
      return t1;
    },
    get$length: function(_) {
      var t2,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (J.$ge$n(t1, $length))
        return 0;
      t2 = this._endOrLength;
      if (t2 == null || J.$ge$n(t2, $length)) {
        if (typeof $length !== "number")
          return $length.$sub();
        if (typeof t1 !== "number")
          return H.iae(t1);
        return $length - t1;
      }
      return J.$sub$n(t2, t1);
    },
    elementAt$1: function(_, index) {
      var realIndex, t1, _this = this;
      H.intTypeCheck(index);
      realIndex = J.$add$ansx(_this.get$_startIndex(), index);
      if (typeof index !== "number")
        return index.$lt();
      if (index >= 0) {
        t1 = _this.get$_endIndex();
        if (typeof realIndex !== "number")
          return realIndex.$ge();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1: function(_, count) {
      var newStart, t1, t2, _this = this;
      H.intTypeCheck(count);
      P.RangeError_checkNotNegative(count, "count");
      newStart = J.$add$ansx(_this._start, count);
      t1 = _this._endOrLength;
      if (t1 != null) {
        if (typeof newStart !== "number")
          return newStart.$ge();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = newStart >= t1;
      } else
        t2 = false;
      if (t2)
        return H.EmptyIterable$(H.getTypeArgumentByIndex(_this, 0));
      return H.SubListIterable$(_this.__internal$_iterable, newStart, t1, H.getTypeArgumentByIndex(_this, 0));
    },
    take$1: function(_, count) {
      var t1, t2, newEnd, _this = this;
      H.intTypeCheck(count);
      P.RangeError_checkNotNegative(count, "count");
      t1 = _this._endOrLength;
      t2 = _this._start;
      if (t1 == null)
        return H.SubListIterable$(_this.__internal$_iterable, t2, J.$add$ansx(t2, count), H.getTypeArgumentByIndex(_this, 0));
      else {
        newEnd = J.$add$ansx(t2, count);
        if (J.$lt$n(t1, newEnd))
          return _this;
        return H.SubListIterable$(_this.__internal$_iterable, t2, newEnd, H.getTypeArgumentByIndex(_this, 0));
      }
    },
    toList$1$growable: function(_, growable) {
      var start, t1, t2, end, end0, $length, t3, result, t4, i, _this = this;
      H.boolTypeCheck(growable);
      start = _this._start;
      t1 = _this.__internal$_iterable;
      t2 = J.getInterceptor$asx(t1);
      end = t2.get$length(t1);
      end0 = _this._endOrLength;
      if (end0 != null && J.$lt$n(end0, end))
        end = end0;
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if ($length < 0)
        $length = 0;
      t3 = _this.$ti;
      if (growable) {
        result = H.setRuntimeTypeInfo([], t3);
        C.JSArray_methods.set$length(result, $length);
      } else {
        t4 = new Array($length);
        t4.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t4, t3);
      }
      for (i = 0; i < $length; ++i) {
        C.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (J.$lt$n(t2.get$length(t1), end))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.ListIterator.prototype = {
    get$current: function() {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (!J.$eq$(_this.__internal$_length, $length))
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      if (J.$ge$n(_this.__internal$_index, $length)) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, _this.__internal$_index));
      _this.__internal$_index = H.intTypeCheck(J.$add$ansx(_this.__internal$_index, 1));
      return true;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return H.MappedIterator$(J.get$iterator$ax(_this.__internal$_iterable), _this._f, H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    get$first: function(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    get$last: function(_) {
      return this._f.call$1(J.get$last$ax(this.__internal$_iterable));
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, H.intTypeCheck(index)));
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    }
  };
  H.MappedIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current: function() {
      return this.__internal$_current;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.MappedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, H.intTypeCheck(index)));
    },
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.WhereIterable.prototype = {
    get$iterator: function(_) {
      return H.WhereIterator$(J.get$iterator$ax(this.__internal$_iterable), this._f, H.getTypeArgumentByIndex(this, 0));
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return H.MappedIterable$_(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    }
  };
  H.WhereIterator.prototype = {
    moveNext$0: function() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (t2.call$1(t1.get$current()))
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  };
  H.ExpandIterable.prototype = {
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.ExpandIterator.prototype = {$isIterator: 1,
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.TakeIterable.prototype = {
    get$iterator: function(_) {
      return H.TakeIterator$(J.get$iterator$ax(this.__internal$_iterable), this._takeCount, H.getTypeArgumentByIndex(this, 0));
    }
  };
  H.EfficientLengthTakeIterable.prototype = {
    get$length: function(_) {
      var iterableLength = J.get$length$asx(this.__internal$_iterable),
        t1 = this._takeCount;
      if (typeof iterableLength !== "number")
        return iterableLength.$gt();
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (iterableLength > t1)
        return t1;
      return iterableLength;
    },
    $isEfficientLengthIterable: 1
  };
  H.TakeIterator.prototype = {
    TakeIterator$2: function(_iterator, _remaining, $E) {
    },
    moveNext$0: function() {
      var _this = this,
        t1 = H.intTypeCheck(J.$sub$n(_this._remaining, 1));
      _this._remaining = t1;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= 0)
        return _this._iterator.moveNext$0();
      _this._remaining = -1;
      return false;
    },
    get$current: function() {
      if (J.$lt$n(this._remaining, 0))
        return;
      return this._iterator.get$current();
    }
  };
  H.TakeWhileIterable.prototype = {};
  H.TakeWhileIterator.prototype = {};
  H.SkipIterable.prototype = {
    skip$1: function(_, count) {
      return H.SkipIterable$_(this.__internal$_iterable, J.$add$ansx(this._skipCount, H._checkCount(H.intTypeCheck(count))), H.getTypeArgumentByIndex(this, 0));
    },
    get$iterator: function(_) {
      return H.SkipIterator$(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, H.getTypeArgumentByIndex(this, 0));
    }
  };
  H.EfficientLengthSkipIterable.prototype = {
    get$length: function(_) {
      var $length = J.$sub$n(J.get$length$asx(this.__internal$_iterable), this._skipCount);
      if (typeof $length !== "number")
        return $length.$ge();
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1: function(_, count) {
      return H.EfficientLengthSkipIterable$_(this.__internal$_iterable, J.$add$ansx(this._skipCount, H._checkCount(H.intTypeCheck(count))), H.getTypeArgumentByIndex(this, 0));
    },
    $isEfficientLengthIterable: 1
  };
  H.SkipIterator.prototype = {
    SkipIterator$2: function(_iterator, _skipCount, $E) {
    },
    moveNext$0: function() {
      var t2,
        t1 = this._iterator,
        i = 0;
      while (true) {
        t2 = this._skipCount;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.moveNext$0();
        ++i;
      }
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  };
  H.SkipWhileIterable.prototype = {};
  H.SkipWhileIterator.prototype = {};
  H.EmptyIterable.prototype = {
    get$iterator: function(_) {
      return C.C_EmptyIterator;
    },
    get$isEmpty: function(_) {
      return true;
    },
    get$length: function(_) {
      return 0;
    },
    get$first: function(_) {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(_) {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    elementAt$1: function(_, index) {
      throw H.wrapException(P.RangeError$range(H.intTypeCheck(index), 0, 0, "index", null));
    },
    contains$1: function(_, element) {
      return false;
    },
    join$1: function(_, separator) {
      H.stringTypeCheck(separator);
      return "";
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    where$1: function(_, test) {
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(this, 0)]});
      return this;
    },
    map$1$1: function(_, f, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $T, args: [H.getTypeArgumentByIndex(this, 0)]});
      return H.EmptyIterable$($T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(this, 0)]});
      return initialValue;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(H.intTypeCheck(count), "count");
      return this;
    },
    take$1: function(_, count) {
      P.RangeError_checkNotNegative(H.intTypeCheck(count), "count");
      return this;
    },
    toList$1$growable: function(_, growable) {
      var t2,
        t1 = this.$ti;
      if (H.boolTypeCheck(growable))
        t1 = H.setRuntimeTypeInfo([], t1);
      else {
        t2 = new Array(0);
        t2.fixed$length = Array;
        t1 = H.setRuntimeTypeInfo(t2, t1);
      }
      return t1;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.EmptyIterator.prototype = {
    moveNext$0: function() {
      return false;
    },
    get$current: function() {
      return;
    },
    $isIterator: 1
  };
  H.FollowedByIterable.prototype = {};
  H.EfficientLengthFollowedByIterable.prototype = {$isEfficientLengthIterable: 1};
  H.FollowedByIterator.prototype = {$isIterator: 1};
  H.WhereTypeIterable.prototype = {};
  H.WhereTypeIterator.prototype = {$isIterator: 1};
  H.IterableElementError.prototype = {};
  H.LinkedList.prototype = {};
  H.LinkedListEntry0.prototype = {};
  H._LinkedListIterator.prototype = {$isIterator: 1};
  H.FixedLengthListMixin.prototype = {
    set$length: function(receiver, newLength) {
      H.intTypeCheck(newLength);
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    insert$2: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    insertAll$2: function(receiver, at, iterable) {
      H.intTypeCheck(at);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    addAll$1: function(receiver, iterable) {
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    clear$0: function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot clear a fixed-length list"));
    },
    removeAt$1: function(receiver, index) {
      H.intTypeCheck(index);
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    removeLast$0: function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    replaceRange$3: function(receiver, start, end, iterable) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  };
  H.UnmodifiableListMixin.prototype = {
    $indexSet: function(_, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      H.intTypeCheck(newLength);
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    setAll$2: function(_, at, iterable) {
      H.intTypeCheck(at);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    add$1: function(_, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    insert$2: function(_, index, element) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    insertAll$2: function(_, at, iterable) {
      H.intTypeCheck(at);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    addAll$1: function(_, iterable) {
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    sort$1: function(_, compare) {
      var t1 = H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    clear$0: function(_) {
      throw H.wrapException(P.UnsupportedError$("Cannot clear an unmodifiable list"));
    },
    removeAt$1: function(_, index) {
      H.intTypeCheck(index);
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    removeLast$0: function(_) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0)], "$asIterable");
      H.intTypeCheck(skipCount);
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    replaceRange$3: function(_, start, end, iterable) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  H.FixedLengthListBase.prototype = {$isFixedLengthListMixin: 1};
  H.UnmodifiableListBase.prototype = {$isUnmodifiableListMixin: 1};
  H._ListIndicesIterable.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asListIterable: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    }
  };
  H.ListMapView.prototype = {
    $asMapBase: function($E) {
      return [P.int, $E];
    },
    $asMapMixin: function($E) {
      return [P.int, $E];
    },
    $asUnmodifiableMapBase: function($E) {
      return [P.int, $E];
    },
    $as_UnmodifiableMapMixin: function($E) {
      return [P.int, $E];
    },
    $asMap: function($E) {
      return [P.int, $E];
    }
  };
  H.ReversedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      var t1, t2;
      H.intTypeCheck(index);
      t1 = this._source;
      t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, J.$sub$n(J.$sub$n(t2.get$length(t1), 1), index));
    }
  };
  H.UnmodifiableListError.prototype = {};
  H.NonGrowableListError.prototype = {};
  H.Sort.prototype = {};
  H.Symbol.prototype = {
    get$hashCode: function(_) {
      var t1,
        hash = this._hashCode;
      if (hash != null)
        return hash;
      t1 = J.get$hashCode$(this.__internal$_name);
      if (typeof t1 !== "number")
        return H.iae(t1);
      hash = 536870911 & 664597 * t1;
      this._hashCode = hash;
      return hash;
    },
    toString$0: function(_) {
      return 'Symbol("' + H.S(this.__internal$_name) + '")';
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.Symbol && J.$eq$(this.__internal$_name, other.__internal$_name);
    },
    $isSymbol0: 1
  };
  H.__CastListBase__CastIterableBase_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $isListMixin: 1,
    $asListMixin: function($S, $T) {
      return [$T];
    },
    $isList: 1,
    $asList: function($S, $T) {
      return [$T];
    }
  };
  H.JsGetName.prototype = {};
  H.JsBuiltin.prototype = {};
  H.Native.prototype = {};
  H._Patch.prototype = {};
  H.ConstantMapView.prototype = {$isConstantMap: 1};
  H.ConstantMap.prototype = {
    cast$2$0: function(_, RK, RV) {
      return P.Map_castFrom(this, H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1), RK, RV);
    },
    cast$0: function($receiver) {
      return this.cast$2$0($receiver, null, null);
    },
    get$isEmpty: function(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $indexSet: function(_, key, val) {
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(val, H.getTypeArgumentByIndex(this, 1));
      return H.ConstantMap__throwUnmodifiable();
    },
    putIfAbsent$2: function(key, ifAbsent) {
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getTypeArgumentByIndex(this, 1)});
      return H.ConstantMap__throwUnmodifiable();
    },
    remove$1: function(_, key) {
      return H.ConstantMap__throwUnmodifiable();
    },
    clear$0: function(_) {
      return H.ConstantMap__throwUnmodifiable();
    },
    addAll$1: function(_, other) {
      H.assertSubtype(other, "$isMap", this.$ti, "$asMap");
      return H.ConstantMap__throwUnmodifiable();
    },
    map$2$1: function(_, transform, K2, V2) {
      var result, _this = this;
      H.functionTypeCheck(transform, {func: 1, ret: [P.MapEntry, K2, V2], args: [H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1)]});
      result = P.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      _this.forEach$1(0, new H.ConstantMap_map_closure(_this, transform, result));
      return result;
    },
    map$1: function($receiver, transform) {
      return this.map$2$1($receiver, transform, null, null);
    },
    $isMap: 1
  };
  H.ConstantMap_map_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this,
        entry = this.transform.call$2(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(t1, 1)));
      J.$indexSet$ax(this.result, C.JSNull_methods.get$key(entry), entry.get$value());
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]};
    }
  };
  H.ConstantStringMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$_keysArray: function() {
      return this.__js_helper$_keys;
    },
    containsKey$1: function(key) {
      if (typeof key !== "string")
        return false;
      if ("__proto__" === key)
        return false;
      return H.jsHasOwnProperty(this._jsObject, key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(key))
        return;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return H.jsPropertyAccess(this._jsObject, H.stringTypeCheck(key));
    },
    forEach$1: function(_, f) {
      var keys, t2, i, t3, key, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 1);
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0), t1]});
      keys = _this.get$_keysArray();
      t2 = J.getInterceptor$asx(keys);
      i = 0;
      while (true) {
        t3 = t2.get$length(keys);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        key = t2.$index(keys, i);
        f.call$2(key, H.assertSubtypeOfRuntimeType(_this._fetch$1(key), t1));
        ++i;
      }
    },
    get$keys: function(_) {
      return H._ConstantMapKeyIterable$(this, H.getTypeArgumentByIndex(this, 0));
    },
    get$values: function() {
      var _this = this;
      return H.MappedIterable_MappedIterable(_this.get$_keysArray(), new H.ConstantStringMap_values_closure(_this), H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    get$__js_helper$_length: function() {
      return this.__js_helper$_length;
    }
  };
  H.ConstantStringMap_values_closure.prototype = {
    call$1: function(key) {
      var t1 = this.$this;
      return H.assertSubtypeOfRuntimeType(t1._fetch$1(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0))), H.getTypeArgumentByIndex(t1, 1));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  H.ConstantProtoMap.prototype = {};
  H._ConstantMapKeyIterable.prototype = {
    get$iterator: function(_) {
      return J.get$iterator$ax(this._map.get$_keysArray());
    },
    get$length: function(_) {
      return J.get$length$asx(this._map.get$_keysArray());
    }
  };
  H.GeneralConstantMap.prototype = {};
  H.Instantiation.prototype = {};
  H.Instantiation1.prototype = {};
  H.Instantiation2.prototype = {};
  H.Instantiation3.prototype = {};
  H.Instantiation4.prototype = {};
  H.Instantiation5.prototype = {};
  H.Instantiation6.prototype = {};
  H.Instantiation7.prototype = {};
  H.Instantiation8.prototype = {};
  H.Instantiation9.prototype = {};
  H.Instantiation10.prototype = {};
  H.Instantiation11.prototype = {};
  H.Instantiation12.prototype = {};
  H.Instantiation13.prototype = {};
  H.Instantiation14.prototype = {};
  H.Instantiation15.prototype = {};
  H.Instantiation16.prototype = {};
  H.Instantiation17.prototype = {};
  H.Instantiation18.prototype = {};
  H.Instantiation19.prototype = {};
  H.Instantiation20.prototype = {};
  H.InternalMap.prototype = {};
  H.JSInvocationMirror.prototype = {
    get$memberName: function() {
      var t1 = this.__js_helper$_memberName;
      if (!!J.getInterceptor$(t1).$isSymbol0)
        return t1;
      return this.__js_helper$_memberName = H.Symbol$unvalidated(H.stringTypeCheck(t1));
    },
    get$isGetter: function() {
      return J.$eq$(this._kind, 1);
    },
    get$isAccessor: function() {
      return !J.$eq$(this._kind, 0);
    },
    get$positionalArguments: function() {
      var t1, t2, argumentCount, list, index, _this = this;
      if (_this.get$isGetter())
        return C.List_empty0;
      t1 = _this._arguments;
      t2 = J.getInterceptor$asx(t1);
      argumentCount = J.$sub$n(J.$sub$n(t2.get$length(t1), J.get$length$asx(_this._namedArgumentNames)), _this._typeArgumentCount);
      if (argumentCount === 0)
        return C.List_empty0;
      list = [];
      if (typeof argumentCount !== "number")
        return H.iae(argumentCount);
      index = 0;
      for (; index < argumentCount; ++index)
        list.push(t2.$index(t1, index));
      return J.JSArray_markUnmodifiableList(list);
    },
    get$namedArguments: function() {
      var t1, t2, namedArgumentCount, t3, t4, namedArgumentsStartIndex, t5, map, i, t6, _this = this;
      if (_this.get$isAccessor())
        return C.Map_empty0;
      t1 = _this._namedArgumentNames;
      t2 = J.getInterceptor$asx(t1);
      namedArgumentCount = t2.get$length(t1);
      t3 = _this._arguments;
      t4 = J.getInterceptor$asx(t3);
      namedArgumentsStartIndex = J.$sub$n(J.$sub$n(t4.get$length(t3), namedArgumentCount), _this._typeArgumentCount);
      if (namedArgumentCount === 0)
        return C.Map_empty0;
      t5 = P.Symbol0;
      map = H.JsLinkedHashMap_JsLinkedHashMap$es6(t5, null);
      if (typeof namedArgumentCount !== "number")
        return H.iae(namedArgumentCount);
      i = 0;
      for (; i < namedArgumentCount; ++i) {
        t6 = H.Symbol$unvalidated(H.stringTypeCheck(t2.$index(t1, i)));
        if (typeof namedArgumentsStartIndex !== "number")
          return namedArgumentsStartIndex.$add();
        map.$indexSet(0, t6, t4.$index(t3, namedArgumentsStartIndex + i));
      }
      return H.ConstantMapView$(map, t5, null);
    },
    $isInvocation: 1
  };
  H.Primitives.prototype = {};
  H.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2: function($name, argument) {
      var t1;
      H.stringTypeCheck($name);
      t1 = this._box_0;
      t1.names = H.S(t1.names) + "$" + H.S($name);
      J.add$1$ax(this.namedArgumentList, $name);
      J.add$1$ax(this.$arguments, argument);
      t1.argumentCount = J.$add$ansx(t1.argumentCount, 1);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 17
  };
  H.JsCache.prototype = {};
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return;
      result = Object.create(null);
      t1 = _this._arguments;
      if (!J.$eq$(t1, -1))
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (!J.$eq$(t1, -1))
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (!J.$eq$(t1, -1))
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (!J.$eq$(t1, -1))
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (!J.$eq$(t1, -1))
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      return "NoSuchMethodError: method not found: '" + H.S(t1) + "' on null";
    },
    $isNoSuchMethodError: 1
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(_this._message);
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + H.S(t1) + "' (" + H.S(_this._message) + ")";
      return _s38_ + H.S(t1) + "' on '" + H.S(t2) + "' (" + H.S(_this._message) + ")";
    },
    $isNoSuchMethodError: 1
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this._message;
      return J.get$isEmpty$asx(t1) ? "Error" : "Error: " + H.S(t1);
    }
  };
  H.ExceptionAndStackTrace.prototype = {};
  H.unwrapException_saveStackTrace.prototype = {
    call$1: function(error) {
      if (!!J.getInterceptor$(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex;
      return error;
    },
    $signature: 2
  };
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      return "Closure '" + H.Primitives_objectTypeName(this).trim() + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.Closure_fromTearOff_closure.prototype = {$signature: 0};
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.S(H.unminifyOrTag($name)) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this._target === other._target && _this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      t1 = H.Primitives_objectHashCode(this._target);
      if (typeof receiverHashCode !== "number")
        return receiverHashCode.$xor();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return (receiverHashCode ^ t1) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this._name) + "' of " + H.S(H.Primitives_objectToHumanReadableString(receiver));
    }
  };
  H.Creates.prototype = {};
  H.Returns.prototype = {};
  H.JSName.prototype = {};
  H.JavaScriptIndexingBehavior.prototype = {};
  H.TypeErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    },
    $isAssertionError: 1,
    $isTypeError: 1,
    message$2$color: function($receiver, arg0, arg1) {
      return this.message.call$2$color(arg0, arg1);
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  H.CastErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    },
    $isCastError: 1,
    message$2$color: function($receiver, arg0, arg1) {
      return this.message.call$2$color(arg0, arg1);
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  H.FallThroughErrorImplementation.prototype = {};
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    message$2$color: function($receiver, arg0, arg1) {
      return this.message.call$2$color(arg0, arg1);
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  H.DeferredNotLoadedError.prototype = {$isNoSuchMethodError: 1};
  H.UnimplementedNoSuchMethodError.prototype = {$isNoSuchMethodError: 1};
  H.MainError.prototype = {$isNoSuchMethodError: 1};
  H._AssertionError.prototype = {};
  H._UnreachableError.prototype = {};
  H.TypeImpl.prototype = {
    get$_typeName: function() {
      var t1 = this.__typeName;
      return t1 == null ? this.__typeName = H.stringTypeCheck(H.runtimeTypeToString(this._rti)) : t1;
    },
    toString$0: function(_) {
      return this.get$_typeName();
    },
    get$hashCode: function(_) {
      var t1 = this.__js_helper$_hashCode;
      return t1 == null ? this.__js_helper$_hashCode = H.intTypeCheck(J.get$hashCode$(this.get$_typeName())) : t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.TypeImpl && J.$eq$(this.get$_typeName(), other.get$_typeName());
    },
    $isType: 1
  };
  H.TypeVariable.prototype = {};
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return J.$eq$(this.__js_helper$_length, 0);
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    get$keys: function(_) {
      return H.LinkedHashMapKeyIterable$(this, H.getTypeArgumentByIndex(this, 0));
    },
    get$values: function() {
      var _this = this;
      return H.MappedIterable_MappedIterable(_this.get$keys(_this), new H.JsLinkedHashMap_values_closure(_this), H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums, _this = this;
      if (H.JsLinkedHashMap__isStringKey(key)) {
        strings = _this._strings;
        if (strings == null)
          return false;
        return _this._containsTableEntry$2(strings, key);
      } else if (H.JsLinkedHashMap__isNumericKey(key)) {
        nums = _this._nums;
        if (nums == null)
          return false;
        return _this._containsTableEntry$2(nums, key);
      } else
        return _this.internalContainsKey$1(key);
    },
    internalContainsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return J.$ge$n(this.internalFindBucketIndex$2(this._getBucket$2(rest, key), key), 0);
    },
    addAll$1: function(_, other) {
      H.assertSubtype(other, "$isMap", this.$ti, "$asMap").forEach$1(0, new H.JsLinkedHashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this;
      if (H.JsLinkedHashMap__isStringKey(key)) {
        strings = _this._strings;
        if (strings == null)
          return;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else if (H.JsLinkedHashMap__isNumericKey(key)) {
        nums = _this._nums;
        if (nums == null)
          return;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index,
        rest = this._rest;
      if (rest == null)
        return;
      bucket = this._getBucket$2(rest, key);
      index = this.internalFindBucketIndex$2(bucket, key);
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0)
        return;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (H.JsLinkedHashMap__isStringKey(key)) {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (H.JsLinkedHashMap__isNumericKey(key)) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      rest = _this._rest;
      if (rest == null)
        rest = _this._rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this._newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (typeof index !== "number")
          return index.$ge();
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var value, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getTypeArgumentByIndex(_this, 1)});
      if (_this.containsKey$1(key))
        return _this.$index(0, key);
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      var _this = this;
      if (H.JsLinkedHashMap__isStringKey(key))
        return _this._removeHashTableEntry$2(_this._strings, key);
      else if (H.JsLinkedHashMap__isNumericKey(key))
        return _this._removeHashTableEntry$2(_this._nums, key);
      else
        return _this.internalRemove$1(key);
    },
    internalRemove$1: function(key) {
      var bucket, index, cell, _this = this,
        rest = _this._rest;
      if (rest == null)
        return;
      bucket = _this._getBucket$2(rest, key);
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      _this._unlinkCell$1(cell);
      return cell.hashMapCellValue;
    },
    clear$0: function(_) {
      var _this = this;
      if (J.$gt$n(_this.__js_helper$_length, 0)) {
        _this._strings = _this._nums = _this._rest = _this._first = _this._last = null;
        _this.__js_helper$_length = 0;
        _this._modified$0();
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications, t1, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1)]});
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        t1 = _this._modifications;
        if (modifications == null ? t1 != null : modifications !== t1)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this._newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = this._getTableCell$2(table, key);
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      this._deleteTableEntry$2(table, key);
      return cell.hashMapCellValue;
    },
    _modified$0: function() {
      this._modifications = H.intTypeCheck(J.$and$bn(J.$add$ansx(this._modifications, 1), 67108863));
    },
    _newLinkedCell$2: function(key, value) {
      var last, _this = this,
        cell = H.LinkedHashMapCell$(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1)));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        last = _this._last;
        cell._previous = last;
        _this._last = last._next = cell;
      }
      _this.__js_helper$_length = H.intTypeCheck(J.$add$ansx(_this.__js_helper$_length, 1));
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next, _this = this;
      H.interceptedTypeCheck(cell, "$isLinkedHashMapCell");
      previous = cell._previous;
      next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      _this.__js_helper$_length = H.intTypeCheck(J.$sub$n(_this.__js_helper$_length, 1));
      _this._modified$0();
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _getBucket$2: function(table, key) {
      return this._getTableBucket$2(table, this.internalComputeHashCode$1(key));
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    $isInternalMap: 1,
    $isLinkedHashMap: 1,
    get$__js_helper$_length: function() {
      return this.__js_helper$_length;
    },
    get$_first: function() {
      return this._first;
    },
    get$_modifications: function() {
      return this._modifications;
    }
  };
  H.JsLinkedHashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this;
      return J.$index$asx(t1, H.assertSubtypeOfRuntimeType(each, H.getTypeArgumentByIndex(t1, 0)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  H.JsLinkedHashMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      J.$indexSet$ax(t1, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(t1, 1)));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]};
    }
  };
  H.Es6LinkedHashMap.prototype = {};
  H.LinkedHashMapCell.prototype = {
    get$hashMapCellKey: function() {
      return this.hashMapCellKey;
    },
    get$_next: function() {
      return this._next;
    }
  };
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return H.intTypeCheck(this._map.get$__js_helper$_length());
    },
    get$isEmpty: function(_) {
      return J.$eq$(this._map.get$__js_helper$_length(), 0);
    },
    get$iterator: function(_) {
      var t1 = this._map;
      return H.LinkedHashMapKeyIterator$(t1, H.intTypeCheck(t1.get$_modifications()), H.getTypeArgumentByIndex(this, 0));
    },
    contains$1: function(_, element) {
      return H.boolTypeCheck(this._map.containsKey$1(element));
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    LinkedHashMapKeyIterator$2: function(_map, _modifications, $E) {
      this._cell = H.interceptedTypeCheck(this._map.get$_first(), "$isLinkedHashMapCell");
    },
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._map;
      if (!J.$eq$(_this._modifications, t1.get$_modifications()))
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._cell;
        if (t1 == null) {
          _this.set$__js_helper$_current(null);
          return false;
        } else {
          _this.set$__js_helper$_current(t1.get$hashMapCellKey());
          _this._cell = H.interceptedTypeCheck(_this._cell.get$_next(), "$isLinkedHashMapCell");
          return true;
        }
      }
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1,
    get$_modifications: function() {
      return this._modifications;
    }
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 2
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, H.stringTypeCheck(tag));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 46
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H.stringTypeCheck(tag));
    },
    $signature: 56
  };
  H.JSSyntaxRegExp.prototype = {
    toString$0: function(_) {
      return "RegExp/" + H.S(this.pattern) + "/";
    },
    get$_nativeGlobalVersion: function() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      return _this._nativeGlobalRegExp = H.JSSyntaxRegExp_makeNative(_this.pattern, _this.get$_isMultiLine(), _this.get$_isCaseSensitive(), true);
    },
    get$_nativeAnchoredVersion: function() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      return _this._nativeAnchoredRegExp = H.JSSyntaxRegExp_makeNative(H.S(_this.pattern) + "|()", _this.get$_isMultiLine(), _this.get$_isCaseSensitive(), true);
    },
    get$_isMultiLine: function() {
      return this._nativeRegExp.multiline;
    },
    get$_isCaseSensitive: function() {
      return !this._nativeRegExp.ignoreCase;
    },
    firstMatch$1: function(string) {
      var m = this._nativeRegExp.exec(H.checkString(H.stringTypeCheck(string)));
      if (m == null)
        return;
      return H._MatchImplementation$(this, m);
    },
    hasMatch$1: function(string) {
      return this._nativeRegExp.test(H.checkString(H.stringTypeCheck(string)));
    },
    allMatches$2: function(_, string, start) {
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      H.checkString(string);
      H.checkInt(start);
      if (typeof start !== "number")
        return start.$lt();
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return H._AllMatchesIterable$(this, string, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    _execGlobal$2: function(string, start) {
      var regexp, match;
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      return H._MatchImplementation$(this, match);
    },
    _execAnchored$2: function(string, start) {
      var regexp, match;
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      regexp = this.get$_nativeAnchoredVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      if (0 >= match.length)
        return H.ioore(match, -1);
      if (match.pop() != null)
        return;
      return H._MatchImplementation$(this, match);
    },
    matchAsPrefix$2: function(_, string, start) {
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      if (typeof start !== "number")
        return start.$lt();
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return this._execAnchored$2(string, start);
    },
    $isPattern: 1,
    $isRegExp: 1,
    get$pattern: function() {
      return this.pattern;
    }
  };
  H._MatchImplementation.prototype = {
    _MatchImplementation$2: function(pattern, _match) {
    },
    get$start: function() {
      return this._match.index;
    },
    get$end: function() {
      return H.intTypeCheck(J.$add$ansx(this.get$start(), this._match[0].length));
    },
    group$1: function(index) {
      return J.$index$asx(this._match, H.intTypeCheck(index));
    },
    $index: function(_, index) {
      return this.group$1(H.intTypeCheck(index));
    },
    $isMatch: 1,
    get$pattern: function() {
      return null;
    }
  };
  H._AllMatchesIterable.prototype = {
    get$iterator: function(_) {
      return H._AllMatchesIterator$(this._re, this._string, this.__js_helper$_start);
    },
    $asIterableBase: function() {
      return [P.Match];
    },
    $asIterable: function() {
      return [P.Match];
    }
  };
  H._AllMatchesIterator.prototype = {
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var match, nextIndex, _this = this,
        t1 = _this._string;
      if (t1 == null)
        return false;
      if (J.$le$n(_this._nextIndex, J.get$length$asx(t1))) {
        match = _this._regExp._execGlobal$2(_this._string, _this._nextIndex);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end();
          if (J.$eq$(match.get$start(), nextIndex)) {
            if (typeof nextIndex !== "number")
              return nextIndex.$add();
            ++nextIndex;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this._string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1,
    $asIterator: function() {
      return [P.Match];
    }
  };
  H.StringMatch.prototype = {
    get$end: function() {
      return J.$add$ansx(this.start, J.get$length$asx(this.pattern));
    },
    $index: function(_, g) {
      return this.group$1(H.intTypeCheck(g));
    },
    group$1: function(group_) {
      H.intTypeCheck(group_);
      if (group_ !== 0)
        throw H.wrapException(P.RangeError$value(group_, null));
      return this.pattern;
    },
    $isMatch: 1,
    get$start: function() {
      return this.start;
    },
    get$pattern: function() {
      return this.pattern;
    }
  };
  H._StringAllMatchesIterable.prototype = {
    get$iterator: function(_) {
      return H._StringAllMatchesIterator$(this._input, this._pattern, this.__js_helper$_index);
    },
    get$first: function(_) {
      var t1 = this._input,
        t2 = this._pattern,
        index = H.intTypeCheck(H.stringIndexOfStringUnchecked(t1, t2, this.__js_helper$_index));
      if (typeof index !== "number")
        return index.$ge();
      if (index >= 0)
        return H.StringMatch$(index, t1, t2);
      throw H.wrapException(H.IterableElementError_noElement());
    },
    $asIterable: function() {
      return [P.Match];
    }
  };
  H._StringAllMatchesIterator.prototype = {
    moveNext$0: function() {
      var index, t5, end, _this = this,
        t1 = _this._pattern,
        t2 = J.getInterceptor$asx(t1),
        t3 = _this._input,
        t4 = J.getInterceptor$asx(t3);
      if (J.$gt$n(J.$add$ansx(_this.__js_helper$_index, t2.get$length(t1)), t4.get$length(t3))) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = H.stringIndexOfStringUnchecked(t3, t1, _this.__js_helper$_index);
      t5 = J.getInterceptor$n(index);
      if (H.boolTypeCheck(t5.$lt(index, 0))) {
        _this.__js_helper$_index = H.intTypeCheck(J.$add$ansx(t4.get$length(t3), 1));
        _this.__js_helper$_current = null;
        return false;
      }
      end = H.intTypeCheck(t5.$add(index, t2.get$length(t1)));
      _this.__js_helper$_current = H.StringMatch$(H.intTypeCheck(index), t3, t1);
      t1 = _this.__js_helper$_index;
      if (end == null ? t1 == null : end === t1) {
        if (typeof end !== "number")
          return end.$add();
        ++end;
      }
      _this.__js_helper$_index = end;
      return true;
    },
    get$current: function() {
      return this.__js_helper$_current;
    },
    $isIterator: 1,
    $asIterator: function() {
      return [P.Match];
    }
  };
  H._LazyMangledNamesMap.prototype = {};
  H._LazyMangledInstanceNamesMap.prototype = {};
  H._LazyReflectiveNamesMap.prototype = {};
  H.SupportedBrowser.prototype = {};
  H.Experimental.prototype = {};
  H.DomName.prototype = {};
  H.DocsEditable.prototype = {};
  H.Unstable.prototype = {};
  H.NativeByteBuffer.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_ByteBuffer_RkP;
    },
    asUint8List$2: function(receiver, offsetInBytes, $length) {
      return H.NativeUint8List_NativeUint8List$view(receiver, H.intTypeCheck(offsetInBytes), H.intTypeCheck($length));
    },
    asByteData$0: function(receiver) {
      return H.NativeByteData_NativeByteData$view(receiver, 0, null);
    },
    $isNativeByteBuffer: 1,
    $isByteBuffer: 1
  };
  H.NativeFloat32x4List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.Float32x4];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Float32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float32x4];
    },
    $isTypedData: 1,
    $isFloat32x4List: 1
  };
  H.NativeInt32x4List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.Int32x4];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Int32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Int32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Int32x4];
    },
    $isTypedData: 1,
    $isInt32x4List: 1
  };
  H.NativeFloat64x2List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float64x2];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.Float64x2];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Float64x2];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float64x2];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float64x2];
    },
    $isTypedData: 1,
    $isFloat64x2List: 1
  };
  H.NativeTypedData.prototype = {
    _invalidPosition$3: function(receiver, position, $length, $name) {
      H.intTypeCheck(position);
      H.intTypeCheck($length);
      H.stringTypeCheck($name);
      if (typeof position !== "number" || Math.floor(position) !== position)
        throw H.wrapException(P.ArgumentError$value(position, $name, "Invalid list position"));
      else
        throw H.wrapException(P.RangeError$range(position, 0, $length, $name, null));
    },
    _checkPosition$3: function(receiver, position, $length, $name) {
      var t1;
      H.intTypeCheck(position);
      H.intTypeCheck($length);
      H.stringTypeCheck($name);
      if (!(position >>> 0 !== position)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = position > $length;
      } else
        t1 = true;
      if (t1)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isNativeTypedData: 1,
    $isTypedData: 1,
    get$buffer: function(receiver) {
      return receiver.buffer;
    }
  };
  H.NativeByteData.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_ByteData_zNC;
    },
    getFloat64$2: function(receiver, byteOffset, endian) {
      return H.doubleTypeCheck(this._getFloat64$2(receiver, H.intTypeCheck(byteOffset), C.C_Endian === H.interceptedTypeCheck(endian, "$isEndian")));
    },
    _getFloat64$2: function(receiver, byteOffset, littleEndian) {
      return receiver.getFloat64(H.intTypeCheck(byteOffset), H.boolTypeCheck(littleEndian));
    },
    getUint32$1: function(receiver, byteOffset) {
      return this._getUint32$2(receiver, H.intTypeCheck(byteOffset), false);
    },
    _getUint32$2: function(receiver, byteOffset, littleEndian) {
      return receiver.getUint32(H.intTypeCheck(byteOffset), H.boolTypeCheck(littleEndian));
    },
    setUint32$2: function(receiver, byteOffset, value) {
      return this._setUint32$3(receiver, H.intTypeCheck(byteOffset), H.intTypeCheck(value), false);
    },
    _setUint32$3: function(receiver, byteOffset, value, littleEndian) {
      return receiver.setUint32(H.intTypeCheck(byteOffset), H.intTypeCheck(value), H.boolTypeCheck(littleEndian));
    },
    $isNativeByteData: 1,
    $isByteData: 1
  };
  H.NativeTypedArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var targetLength, count, sourceLength;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.interceptedTypeCheck(source, "$isNativeTypedArray");
      H.intTypeCheck(skipCount);
      targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (typeof start !== "number")
        return start.$gt();
      if (typeof end !== "number")
        return H.iae(end);
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (typeof skipCount !== "number")
        return skipCount.$lt();
      if (skipCount < 0)
        throw H.wrapException(P.ArgumentError$(skipCount));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
    }
  };
  H.NativeTypedArrayOfDouble.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.doubleTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", [P.double], "$asIterable");
      H.intTypeCheck(skipCount);
      if (!!J.getInterceptor$(iterable).$isNativeTypedArrayOfDouble) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.double];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    }
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.intTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", [P.int], "$asIterable");
      H.intTypeCheck(skipCount);
      if (!!J.getInterceptor$(iterable).$isNativeTypedArrayOfInt) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.int];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  H.NativeFloat32List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Float32List_LB7;
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeFloat32List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isNativeFloat32List: 1,
    $is_TypedFloatList: 1,
    $isFloat32List: 1
  };
  H.NativeFloat64List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Float64List_LB7;
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeFloat64List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isNativeFloat64List: 1,
    $is_TypedFloatList: 1,
    $isFloat64List: 1
  };
  H.NativeInt16List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Int16List_uXf;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeInt16List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isNativeInt16List: 1,
    $is_TypedIntList: 1,
    $isInt16List: 1
  };
  H.NativeInt32List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Int32List_O50;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeInt32List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isNativeInt32List: 1,
    $is_TypedIntList: 1,
    $isInt32List: 1
  };
  H.NativeInt8List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Int8List_ekJ;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeInt8List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isNativeInt8List: 1,
    $is_TypedIntList: 1,
    $isInt8List: 1
  };
  H.NativeUint16List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint16List_2bx;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeUint16List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isNativeUint16List: 1,
    $is_TypedIntList: 1,
    $isUint16List: 1
  };
  H.NativeUint32List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint32List_2bx;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeUint32List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isNativeUint32List: 1,
    $is_TypedIntList: 1,
    $isUint32List: 1
  };
  H.NativeUint8ClampedList.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint8ClampedList_Jik;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeUint8ClampedList__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isNativeUint8ClampedList: 1,
    $is_TypedIntList: 1,
    $isUint8ClampedList: 1
  };
  H.NativeUint8List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint8List_WLA;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeUint8List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isNativeUint8List: 1,
    $is_TypedIntList: 1,
    $isUint8List: 1
  };
  H.NativeFloat32x4.prototype = {$isFloat32x4: 1};
  H.NativeInt32x4.prototype = {$isInt32x4: 1};
  H.NativeFloat64x2.prototype = {$isFloat64x2: 1};
  H._NativeFloat32x4List_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Float32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float32x4];
    }
  };
  H._NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.Float32x4];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Float32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float32x4];
    }
  };
  H._NativeFloat64x2List_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float64x2];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Float64x2];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float64x2];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float64x2];
    }
  };
  H._NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float64x2];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.Float64x2];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Float64x2];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float64x2];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float64x2];
    }
  };
  H._NativeInt32x4List_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Int32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Int32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Int32x4];
    }
  };
  H._NativeInt32x4List_Object_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.Int32x4];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Int32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Int32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Int32x4];
    }
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    }
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.double];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    }
  };
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.int];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 24
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 54
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (P._hasTimer())
        self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    },
    set$_handle: function(_handle) {
      H.intTypeCheck(_handle);
    },
    set$_tick: function(_tick) {
      H.intTypeCheck(_tick);
    },
    $isTimer: 1
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1.set$_handle(null);
      t1.set$_tick(1);
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._AsyncAwaitCompleter.prototype = {
    complete$1: function(value) {
      var t1, _this = this;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(_this, 0)});
      if (_this.isSync)
        _this._completer.complete$1(value);
      else if (H.checkSubtype(value, "$isFuture", _this.$ti, "$asFuture")) {
        t1 = _this._completer;
        value.then$1$2$onError(t1.get$complete(), t1.get$completeError(), -1);
      } else
        P.scheduleMicrotask(new P._AsyncAwaitCompleter_complete_closure(_this, value));
    },
    complete$0: function() {
      return this.complete$1(null);
    },
    completeError$2: function(e, st) {
      H.interceptedTypeCheck(st, "$isStackTrace");
      if (this.isSync)
        this._completer.completeError$2(e, st);
      else
        P.scheduleMicrotask(new P._AsyncAwaitCompleter_completeError_closure(this, e, st));
    },
    completeError$1: function(e) {
      return this.completeError$2(e, null);
    },
    get$future: function() {
      return this._completer.get$future();
    },
    get$isCompleted: function() {
      return this._completer.get$isCompleted();
    },
    $isCompleter: 1,
    get$_completer: function() {
      return this._completer;
    }
  };
  P._AsyncAwaitCompleter_complete_closure.prototype = {
    call$0: function() {
      this.$this.get$_completer().complete$1(this.value);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._AsyncAwaitCompleter_completeError_closure.prototype = {
    call$0: function() {
      this.$this.get$_completer().completeError$2(this.e, this.st);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._awaitOnObject_closure.prototype = {
    call$1: function(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 13
  };
  P._awaitOnObject_closure0.prototype = {
    call$2: function(error, stackTrace) {
      this.bodyFunction.call$2(1, H.ExceptionAndStackTrace$(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace")));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 73
  };
  P._wrapJsFunctionForAsync_closure.prototype = {
    call$2: function(errorCode, result) {
      this.$protected(H.intTypeCheck(errorCode), result);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 75
  };
  P._AsyncStarStreamController.prototype = {};
  P._IterationMarker.prototype = {};
  P._SyncStarIterator.prototype = {$isIterator: 1};
  P._SyncStarIterable.prototype = {};
  P._BroadcastStream.prototype = {};
  P._BroadcastSubscription.prototype = {};
  P._BroadcastStreamController.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isStreamController: 1, $is_StreamControllerLifecycle: 1, $is_StreamControllerBase: 1, $is_EventSink: 1, $is_EventDispatch: 1, $isSink: 1};
  P._SyncBroadcastStreamController.prototype = {$isSynchronousStreamController: 1};
  P._AsyncBroadcastStreamController.prototype = {};
  P._AsBroadcastStreamController.prototype = {};
  P.DeferredLibrary.prototype = {};
  P.DeferredLoadException.prototype = {$isException: 1};
  P.FutureOr.prototype = {};
  P.Future.prototype = {};
  P.TimeoutException.prototype = {$isException: 1};
  P.Completer.prototype = {};
  P._Completer.prototype = {
    completeError$2: function(error, stackTrace) {
      var replacement;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      error = P._nonNullError(error);
      if (!this.future.get$_mayComplete())
        throw H.wrapException(P.StateError$("Future already completed"));
      replacement = P.Zone_current().errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = P._nonNullError(replacement.error);
        stackTrace = replacement.stackTrace;
      }
      this._completeError$2(error, stackTrace);
    },
    completeError$1: function(error) {
      return this.completeError$2(error, null);
    },
    get$isCompleted: function() {
      return !this.future.get$_mayComplete();
    },
    $isCompleter: 1,
    get$future: function() {
      return this.future;
    }
  };
  P._AsyncCompleter.prototype = {
    complete$1: function(value) {
      var t1;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(this, 0)});
      t1 = this.future;
      if (!t1.get$_mayComplete())
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncComplete$1(value);
    },
    complete$0: function() {
      return this.complete$1(null);
    },
    _completeError$2: function(error, stackTrace) {
      this.future._asyncCompleteError$2(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
    }
  };
  P._SyncCompleter.prototype = {
    complete$1: function(value) {
      var t1;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(this, 0)});
      t1 = this.future;
      if (!t1.get$_mayComplete())
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._complete$1(value);
    },
    complete$0: function() {
      return this.complete$1(null);
    },
    _completeError$2: function(error, stackTrace) {
      this.future._completeError$2(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
    }
  };
  P._FutureListener.prototype = {
    get$_zone: function() {
      return this.result.get$_zone();
    },
    get$handlesValue: function() {
      return !J.$eq$(J.$and$bn(this.state, 1), 0);
    },
    get$handlesError: function() {
      return !J.$eq$(J.$and$bn(this.state, 2), 0);
    },
    get$hasErrorTest: function() {
      return J.$eq$(this.state, 6);
    },
    get$handlesComplete: function() {
      return J.$eq$(this.state, 8);
    },
    get$_onValue: function() {
      return H.functionTypeCheck(this.callback, {func: 1, ret: {futureOr: 1, type: H.getTypeArgumentByIndex(this, 1)}, args: [H.getTypeArgumentByIndex(this, 0)]});
    },
    get$_onError: function() {
      return this.errorCallback;
    },
    get$_errorTest: function() {
      return H.functionTypeCheck(this.callback, {func: 1, ret: P.bool, args: [P.Object]});
    },
    get$_whenCompleteAction: function() {
      return H.functionTypeCheck(this.callback, {func: 1});
    },
    get$hasErrorCallback: function() {
      return this.get$_onError() != null;
    },
    handleValue$1: function(sourceResult) {
      var _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.assertSubtypeOfRuntimeType(sourceResult, t1);
      return _this.get$_zone().runUnary$2$2(_this.get$_onValue(), sourceResult, {futureOr: 1, type: H.getTypeArgumentByIndex(_this, 1)}, t1);
    },
    matchesErrorTest$1: function(asyncError) {
      H.interceptedTypeCheck(asyncError, "$isAsyncError");
      if (!this.get$hasErrorTest())
        return true;
      return this.get$_zone().runUnary$2$2(this.get$_errorTest(), asyncError.error, P.bool, P.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback, t1, t2, _this = this;
      H.interceptedTypeCheck(asyncError, "$isAsyncError");
      errorCallback = _this.errorCallback;
      t1 = P.Object;
      t2 = {futureOr: 1, type: H.getTypeArgumentByIndex(_this, 1)};
      if (H.functionTypeTest(errorCallback, {func: 1, args: [P.Object, P.StackTrace]}))
        return H.futureOrCheck(_this.get$_zone().runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, null, t1, P.StackTrace), t2);
      else
        return H.futureOrCheck(_this.get$_zone().runUnary$2$2(H.functionTypeCheck(errorCallback, {func: 1, args: [P.Object]}), asyncError.error, null, t1), t2);
    },
    handleWhenComplete$0: function() {
      return this.get$_zone().run$1$1(this.get$_whenCompleteAction(), null);
    },
    errorCallback$2: function(arg0, arg1) {
      return this.errorCallback.call$2(arg0, arg1);
    },
    get$result: function(receiver) {
      return this.result;
    }
  };
  P._Future.prototype = {
    _Future$zoneValue$2: function(value, _zone, $T) {
      this._setValue$1(value);
    },
    get$_mayComplete: function() {
      return J.$eq$(this._state, 0);
    },
    get$_mayAddListener: function() {
      return J.$le$n(this._state, 1);
    },
    get$_isChained: function() {
      return J.$eq$(this._state, 2);
    },
    get$_isComplete: function() {
      return J.$ge$n(this._state, 4);
    },
    get$_hasError: function() {
      return J.$eq$(this._state, 8);
    },
    _setChained$1: function(source) {
      H.interceptedTypeCheck(source, "$is_Future");
      this._state = 2;
      this._resultOrListeners = source;
    },
    then$1$2$onError: function(f, onError, $R) {
      var currentZone,
        t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
      H.interceptedTypeCheck(onError, "$isFunction");
      currentZone = P.Zone_current();
      if (currentZone !== C.C__RootZone) {
        f = currentZone.registerUnaryCallback$2$1(f, {futureOr: 1, type: $R}, t1);
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      return this._thenNoZoneRegistration$1$2(f, onError, $R);
    },
    then$2$onError: function(f, onError) {
      return this.then$1$2$onError(f, onError, null);
    },
    then$1$1: function(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _thenNoZoneRegistration$1$2: function(f, onError, $E) {
      var result,
        t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $E}, args: [t1]});
      H.interceptedTypeCheck(onError, "$isFunction");
      result = P._Future$($E);
      this._addListener$1(P._FutureListener$then(result, f, onError, t1, $E));
      return result;
    },
    _thenNoZoneRegistration$2: function(f, onError) {
      return this._thenNoZoneRegistration$1$2(f, onError, null);
    },
    whenComplete$1: function(action) {
      var t1, result, t2;
      H.functionTypeCheck(action, {func: 1});
      t1 = H.getTypeArgumentByIndex(this, 0);
      result = P._Future$(t1);
      t2 = result._zone;
      this._addListener$1(P._FutureListener$whenComplete(result, t2 !== C.C__RootZone ? t2.registerCallback$1$1(action, null) : action, t1, t1));
      return result;
    },
    _setPendingComplete$0: function() {
      this._state = 1;
    },
    _clearPendingComplete$0: function() {
      this._state = 0;
    },
    get$_error: function() {
      return H.interceptedTypeCheck(this._resultOrListeners, "$isAsyncError");
    },
    get$_chainSource: function() {
      return H.interceptedTypeCheck(this._resultOrListeners, "$is_Future");
    },
    _setValue$1: function(value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setErrorObject$1: function(error) {
      H.interceptedTypeCheck(error, "$isAsyncError");
      this._state = 8;
      this._resultOrListeners = error;
    },
    _setError$2: function(error, stackTrace) {
      this._setErrorObject$1(P.AsyncError$(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace")));
    },
    _cloneResult$1: function(source) {
      H.interceptedTypeCheck(source, "$is_Future");
      this._state = H.intTypeCheck(source._state);
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1: function(listener) {
      var source, _this = this;
      H.interceptedTypeCheck(listener, "$is_FutureListener");
      if (_this.get$_mayAddListener()) {
        listener._nextListener = H.interceptedTypeCheck(_this._resultOrListeners, "$is_FutureListener");
        _this._resultOrListeners = listener;
      } else {
        if (_this.get$_isChained()) {
          source = _this.get$_chainSource();
          if (!source.get$_isComplete()) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        _this._zone.scheduleMicrotask$1(new P._Future__addListener_closure(_this, listener));
      }
    },
    _prependListeners$1: function(listeners) {
      var existingListeners, cursor, cursor0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      H.interceptedTypeCheck(listeners, "$is_FutureListener");
      if (listeners == null)
        return;
      if (_this.get$_mayAddListener()) {
        existingListeners = H.interceptedTypeCheck(_this._resultOrListeners, "$is_FutureListener");
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          for (cursor = listeners; cursor0 = cursor._nextListener, cursor0 != null; cursor = cursor0)
            ;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (_this.get$_isChained()) {
          source = _this.get$_chainSource();
          if (!source.get$_isComplete()) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        _this._zone.scheduleMicrotask$1(new P._Future__prependListeners_closure(_box_0, _this));
      }
    },
    _removeListeners$0: function() {
      var current = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      H.interceptedTypeCheck(listeners, "$is_FutureListener");
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t2, listeners, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.futureOrCheck(value, {futureOr: 1, type: t1});
      t2 = _this.$ti;
      if (H.checkSubtype(value, "$isFuture", t2, "$asFuture"))
        if (H.checkSubtype(value, "$is_Future", t2, null))
          P._Future__chainCoreFuture(value, _this);
        else
          P._Future__chainForeignFuture(value, _this);
      else {
        listeners = _this._removeListeners$0();
        _this._setValue$1(H.assertSubtypeOfRuntimeType(value, t1));
        P._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners, _this = this;
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 0));
      listeners = _this._removeListeners$0();
      _this._setValue$1(value);
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2: function(error, stackTrace) {
      var listeners;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$1: function(error) {
      return this._completeError$2(error, null);
    },
    _asyncComplete$1: function(value) {
      var _this = this;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(_this, 0)});
      if (H.checkSubtype(value, "$isFuture", _this.$ti, "$asFuture")) {
        _this._chainFuture$1(value);
        return;
      }
      _this._setPendingComplete$0();
      _this._zone.scheduleMicrotask$1(new P._Future__asyncComplete_closure(_this, value));
    },
    _chainFuture$1: function(value) {
      var _this = this,
        t1 = _this.$ti;
      H.assertSubtype(value, "$isFuture", t1, "$asFuture");
      if (H.checkSubtype(value, "$is_Future", t1, null)) {
        if (value.get$_hasError()) {
          _this._setPendingComplete$0();
          _this._zone.scheduleMicrotask$1(new P._Future__chainFuture_closure(_this, value));
        } else
          P._Future__chainCoreFuture(value, _this);
        return;
      }
      P._Future__chainForeignFuture(value, _this);
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      this._setPendingComplete$0();
      this._zone.scheduleMicrotask$1(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    set$_state: function(_state) {
      this._state = H.intTypeCheck(_state);
    },
    $isFuture: 1,
    get$_state: function() {
      return this._state;
    },
    get$_zone: function() {
      return this._zone;
    },
    get$_resultOrListeners: function() {
      return this._resultOrListeners;
    }
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var t1 = this.target;
      t1._clearPendingComplete$0();
      t1._complete$1(value);
    },
    $signature: 24
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      this.target._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    },
    "call*": "call$2",
    $defaultValues: function() {
      return [null];
    },
    $signature: 34
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.target._completeError$2(this.e, this.s);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._Future__asyncComplete_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._completeWithValue$1(H.assertSubtypeOfRuntimeType(this.value, H.getTypeArgumentByIndex(t1, 0)));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._Future__chainFuture_closure.prototype = {
    call$0: function() {
      P._Future__chainCoreFuture(this.value, this.$this);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._Future__asyncCompleteError_closure.prototype = {
    call$0: function() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var e, s, exception, t1, t2, originalSource, _this = this, completeResult = null;
      try {
        completeResult = _this.listener.handleWhenComplete$0();
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (_this.hasError) {
          t1 = J.get$error$z(_this._box_1.source.get$_error());
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = _this._box_1.source.get$_error();
        else
          t2.listenerValueOrError = P.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (!!J.getInterceptor$(completeResult).$isFuture) {
        if (completeResult instanceof P._Future && completeResult.get$_isComplete()) {
          if (completeResult.get$_hasError()) {
            t1 = _this._box_0;
            t1.listenerValueOrError = completeResult.get$_error();
            t1.listenerHasError = true;
          }
          return;
        }
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), null);
        t1.listenerHasError = false;
      }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 37
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, exception, t1, _this = this;
      try {
        _this._box_0.listenerValueOrError = _this.listener.handleValue$1(_this.sourceResult);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this._box_0;
        t1.listenerValueOrError = P.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, t2, exception, t3, t4, _this = this;
      try {
        asyncError = _this._box_1.source.get$_error();
        t1 = _this.listener;
        if (t1.matchesErrorTest$1(asyncError) && t1.get$hasErrorCallback()) {
          t2 = _this._box_0;
          t2.listenerValueOrError = t1.handleError$1(asyncError);
          t2.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this._box_1;
        t2 = J.get$error$z(t1.source.get$_error());
        t3 = e;
        t4 = _this._box_0;
        if (t2 == null ? t3 == null : t2 === t3)
          t4.listenerValueOrError = t1.source.get$_error();
        else
          t4.listenerValueOrError = P.AsyncError$(e, s);
        t4.listenerHasError = true;
      }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._AsyncCallbackEntry.prototype = {
    set$next: function(next) {
      this.next = H.interceptedTypeCheck(next, "$is_AsyncCallbackEntry");
    },
    get$next: function() {
      return this.next;
    }
  };
  P._AsyncRun.prototype = {};
  P.Stream.prototype = {
    map$1: function(_, convert) {
      var t1 = H.getRuntimeTypeArgument(this, "Stream", 0);
      return P._MapStream$(this, H.functionTypeCheck(convert, {func: 1, ret: null, args: [t1]}), t1, null);
    },
    get$length: function(_) {
      var t1 = {},
        future = P._Future$(P.int);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1, this), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$isEmpty: function(_) {
      var t1 = {},
        future = P._Future$(P.bool);
      t1.subscription = null;
      t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, this, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
      return future;
    },
    get$first: function(_) {
      var t1 = {},
        future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.subscription = null;
      t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
      return future;
    }
  };
  P.Stream_Stream$fromIterable_closure.prototype = {
    call$0: function() {
      return P._IterablePendingEvents$(this.elements, this.T);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: function() {
      return {func: 1, ret: [P._IterablePendingEvents, this.T]};
    }
  };
  P.Stream_length_closure.prototype = {
    call$1: function(_) {
      var t1 = this.$this;
      H.assertSubtypeOfRuntimeType(_, H.getRuntimeTypeArgumentIntercepted(J.getInterceptor$(t1), t1, "Stream", 0));
      t1 = this._box_0;
      t1.count = J.$add$ansx(t1.count, 1);
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgumentIntercepted(J.getInterceptor$(t1), t1, "Stream", 0)]};
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this._box_0.count);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P.Stream_isEmpty_closure.prototype = {
    call$1: function(_) {
      var t1 = this.$this;
      H.assertSubtypeOfRuntimeType(_, H.getRuntimeTypeArgumentIntercepted(J.getInterceptor$(t1), t1, "Stream", 0));
      P._cancelAndValue(this._box_0.subscription, this.future, false);
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgumentIntercepted(J.getInterceptor$(t1), t1, "Stream", 0)]};
    }
  };
  P.Stream_isEmpty_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(true);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P.Stream_first_closure.prototype = {
    call$1: function(value) {
      var t1 = this.$this;
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(J.getInterceptor$(t1), t1, "Stream", 0));
      P._cancelAndValue(this._box_0.subscription, this.future, value);
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgumentIntercepted(J.getInterceptor$(t1), t1, "Stream", 0)]};
    }
  };
  P.Stream_first_closure0.prototype = {
    call$0: function() {
      var e, s, t1, exception;
      try {
        t1 = H.IterableElementError_noElement();
        throw H.wrapException(t1);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._completeWithErrorCallback(this.future, e, s);
      }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P.StreamSubscription.prototype = {};
  P.EventSink.prototype = {$isSink: 1};
  P.StreamView.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "StreamView", 0)]});
      H.interceptedTypeCheck(onError, "$isFunction");
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      return this._stream.listen$4$cancelOnError$onDone$onError(onData, H.boolTypeCheck(cancelOnError), onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$2$onDone: function(onData, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
    }
  };
  P.StreamConsumer.prototype = {};
  P.StreamSink.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isSink: 1};
  P.StreamTransformer.prototype = {};
  P.StreamTransformerBase.prototype = {$isStreamTransformer: 1};
  P.StreamIterator.prototype = {};
  P._ControllerEventSinkWrapper.prototype = {$isEventSink: 1, $isSink: 1};
  P.StreamController.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  P.SynchronousStreamController.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isStreamController: 1, $isSink: 1};
  P._StreamControllerLifecycle.prototype = {};
  P._StreamControllerBase.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isStreamController: 1, $is_StreamControllerLifecycle: 1, $is_EventSink: 1, $is_EventDispatch: 1, $isSink: 1};
  P._StreamController.prototype = {
    get$stream: function(_) {
      return P._ControllerStream$(this, H.getTypeArgumentByIndex(this, 0));
    },
    get$sink: function() {
      return P._StreamSinkWrapper$(this, H.getTypeArgumentByIndex(this, 0));
    },
    get$_isCanceled: function() {
      return !J.$eq$(J.$and$bn(this._state, 2), 0);
    },
    get$hasListener: function() {
      return !J.$eq$(J.$and$bn(this._state, 1), 0);
    },
    get$_isInitialState: function() {
      return J.$eq$(J.$and$bn(this._state, 3), 0);
    },
    get$isClosed: function() {
      return !J.$eq$(J.$and$bn(this._state, 4), 0);
    },
    get$_isAddingStream: function() {
      return !J.$eq$(J.$and$bn(this._state, 8), 0);
    },
    get$_mayAddEvent: function() {
      return J.$lt$n(this._state, 4);
    },
    get$_pendingEvents: function() {
      var t1, _this = this;
      if (!_this.get$_isAddingStream())
        return H.assertSubtype(_this._varData, "$is_PendingEvents", _this.$ti, "$as_PendingEvents");
      t1 = _this.$ti;
      return H.assertSubtype(H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", t1, "$as_StreamControllerAddStreamState").get$varData(), "$is_PendingEvents", t1, "$as_PendingEvents");
    },
    _ensurePendingEvents$0: function() {
      var t1, state, _this = this;
      if (!_this.get$_isAddingStream()) {
        t1 = _this._varData;
        if (t1 == null)
          t1 = _this._varData = P._StreamImplEvents$(H.getTypeArgumentByIndex(_this, 0));
        return H.assertSubtype(t1, "$is_StreamImplEvents", _this.$ti, "$as_StreamImplEvents");
      }
      t1 = _this.$ti;
      state = H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", t1, "$as_StreamControllerAddStreamState");
      if (state.get$varData() == null)
        state.set$varData(P._StreamImplEvents$(H.getTypeArgumentByIndex(_this, 0)));
      return H.assertSubtype(state.get$varData(), "$is_StreamImplEvents", t1, "$as_StreamImplEvents");
    },
    get$_subscription: function() {
      var t1, _this = this;
      if (_this.get$_isAddingStream()) {
        t1 = _this.$ti;
        return H.assertSubtype(H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", t1, "$as_StreamControllerAddStreamState").get$varData(), "$is_ControllerSubscription", t1, "$as_ControllerSubscription");
      }
      return H.assertSubtype(_this._varData, "$is_ControllerSubscription", _this.$ti, "$as_ControllerSubscription");
    },
    _badEventState$0: function() {
      if (this.get$isClosed())
        return P.StateError$("Cannot add event after closing");
      return P.StateError$("Cannot add event while adding a stream");
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 == null)
        t1 = this._doneFuture = H.interceptedTypeCheck(this.get$_isCanceled() ? $.$get$Future__nullFuture() : P._Future$(null), "$is_Future");
      return t1;
    },
    add$1: function(_, value) {
      var _this = this;
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 0));
      if (!_this.get$_mayAddEvent())
        throw H.wrapException(_this._badEventState$0());
      _this._async$_add$1(value);
    },
    addError$2: function(error, stackTrace) {
      var replacement;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      if (!this.get$_mayAddEvent())
        throw H.wrapException(this._badEventState$0());
      error = P._nonNullError(error);
      replacement = P.Zone_current().errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = P._nonNullError(replacement.error);
        stackTrace = replacement.stackTrace;
      }
      this._addError$2(error, stackTrace);
    },
    addError$1: function(error) {
      return this.addError$2(error, null);
    },
    close$0: function(_) {
      var _this = this;
      if (_this.get$isClosed())
        return _this._ensureDoneFuture$0();
      if (!_this.get$_mayAddEvent())
        throw H.wrapException(_this._badEventState$0());
      _this._closeUnchecked$0();
      return _this._ensureDoneFuture$0();
    },
    _closeUnchecked$0: function() {
      var _this = this;
      _this._state = H.intTypeCheck(J.$or$bn(_this._state, 4));
      if (_this.get$hasListener())
        _this._sendDone$0();
      else if (_this.get$_isInitialState())
        J.add$1$ax(_this._ensurePendingEvents$0(), C.C__DelayedDone);
    },
    _async$_add$1: function(value) {
      var _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.assertSubtypeOfRuntimeType(value, t1);
      if (_this.get$hasListener())
        _this._sendData$1(value);
      else if (_this.get$_isInitialState())
        J.add$1$ax(_this._ensurePendingEvents$0(), P._DelayedData$(value, t1));
    },
    _addError$2: function(error, stackTrace) {
      var _this = this;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      if (_this.get$hasListener())
        _this._sendError$2(error, stackTrace);
      else if (_this.get$_isInitialState())
        J.add$1$ax(_this._ensurePendingEvents$0(), P._DelayedError$(error, stackTrace));
    },
    _close$0: function() {
      var _this = this,
        addState = H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", _this.$ti, "$as_StreamControllerAddStreamState");
      _this._varData = addState.get$varData();
      _this._state = H.intTypeCheck(J.$and$bn(_this._state, 4294967287));
      addState.complete$0();
    },
    _subscribe$4: function(onData, onError, onDone, cancelOnError) {
      var subscription, pendingEvents, addState, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      H.interceptedTypeCheck(onError, "$isFunction");
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      H.boolTypeCheck(cancelOnError);
      if (!_this.get$_isInitialState())
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      subscription = P._ControllerSubscription$(_this, onData, onError, onDone, cancelOnError, t1);
      pendingEvents = _this.get$_pendingEvents();
      _this._state = H.intTypeCheck(J.$or$bn(_this._state, 1));
      if (_this.get$_isAddingStream()) {
        addState = H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", _this.$ti, "$as_StreamControllerAddStreamState");
        addState.set$varData(subscription);
        addState.resume$0();
      } else
        _this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(_this));
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      var result, e, s, exception, result0, _this = this,
        t1 = _this.$ti;
      H.assertSubtype(subscription, "$isStreamSubscription", t1, "$asStreamSubscription");
      result = null;
      if (_this.get$_isAddingStream())
        result = H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", t1, "$as_StreamControllerAddStreamState").cancel$0();
      _this._varData = null;
      _this._state = H.intTypeCheck(J.$or$bn(J.$and$bn(_this._state, 4294967286), 2));
      t1 = _this.onCancel;
      if (t1 != null)
        if (result == null)
          try {
            result = H.interceptedTypeCheck(t1.call$0(), "$isFuture");
          } catch (exception) {
            e = H.unwrapException(exception);
            s = H.getTraceFromException(exception);
            result0 = P._Future$(null);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }
        else
          result = result.whenComplete$1(t1);
      t1 = new P._StreamController__recordCancel_complete(_this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    },
    _recordPause$1: function(subscription) {
      var _this = this,
        t1 = _this.$ti;
      H.assertSubtype(subscription, "$isStreamSubscription", t1, "$asStreamSubscription");
      if (_this.get$_isAddingStream())
        H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", t1, "$as_StreamControllerAddStreamState").pause$0();
      P._runGuarded(_this.onPause);
    },
    _recordResume$1: function(subscription) {
      var _this = this,
        t1 = _this.$ti;
      H.assertSubtype(subscription, "$isStreamSubscription", t1, "$asStreamSubscription");
      if (_this.get$_isAddingStream())
        H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", t1, "$as_StreamControllerAddStreamState").resume$0();
      P._runGuarded(_this.onResume);
    },
    set$_state: function(_state) {
      this._state = H.intTypeCheck(_state);
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isStreamSink: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_StreamControllerBase: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1,
    $isSink: 1,
    get$_state: function() {
      return this._state;
    },
    get$_doneFuture: function() {
      return this._doneFuture;
    },
    get$onListen: function() {
      return this.onListen;
    }
  };
  P._StreamController__subscribe_closure.prototype = {
    call$0: function() {
      P._runGuarded(this.$this.get$onListen());
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._StreamController__recordCancel_complete.prototype = {
    call$0: function() {
      var t1 = this.$this;
      if (t1.get$_doneFuture() != null && t1.get$_doneFuture().get$_mayComplete())
        t1.get$_doneFuture()._asyncComplete$1(null);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._SyncStreamControllerDispatch.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isStreamController: 1, $isSynchronousStreamController: 1, $is_StreamControllerLifecycle: 1, $is_StreamControllerBase: 1, $is_StreamController: 1, $is_EventSink: 1, $is_EventDispatch: 1, $isSink: 1};
  P._AsyncStreamControllerDispatch.prototype = {
    _sendData$1: function(data) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      H.assertSubtypeOfRuntimeType(data, t1);
      this.get$_subscription()._addPending$1(P._DelayedData$(data, t1));
    },
    _sendError$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      this.get$_subscription()._addPending$1(P._DelayedError$(error, stackTrace));
    },
    _sendDone$0: function() {
      this.get$_subscription()._addPending$1(C.C__DelayedDone);
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isStreamSink: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_StreamControllerBase: 1,
    $is_StreamController: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1,
    $isSink: 1
  };
  P._AsyncStreamController.prototype = {$is_AsyncStreamControllerDispatch: 1};
  P._SyncStreamController.prototype = {$isSynchronousStreamController: 1, $is_SyncStreamControllerDispatch: 1};
  P._ControllerStream.prototype = {
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      return this._controller._subscribe$4(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]}), H.interceptedTypeCheck(onError, "$isFunction"), H.functionTypeCheck(onDone, {func: 1, ret: -1}), H.boolTypeCheck(cancelOnError));
    },
    get$hashCode: function(_) {
      return J.$xor$n(J.get$hashCode$(this._controller), 892482866);
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (other instanceof P._ControllerStream) {
        t1 = other._controller;
        t2 = this._controller;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    }
  };
  P._ControllerSubscription.prototype = {
    _onCancel$0: function() {
      return this._controller._recordCancel$1(this);
    },
    _onPause$0: function() {
      this._controller._recordPause$1(this);
    },
    _onResume$0: function() {
      this._controller._recordResume$1(this);
    }
  };
  P._StreamSinkWrapper.prototype = {
    add$1: function(_, data) {
      J.add$1$ax(this._async$_target, H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(this, 0)));
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isStreamSink: 1,
    $isSink: 1
  };
  P._AddStreamState.prototype = {};
  P._StreamControllerAddStreamState.prototype = {};
  P._EventSink.prototype = {};
  P._EventDispatch.prototype = {};
  P._BufferingStreamSubscription.prototype = {
    _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
      this.onData$1(onData);
      this.onError$1(0, onError);
      this.onDone$1(onDone);
    },
    _setPendingEvents$1: function(pendingEvents) {
      var _this = this;
      H.assertSubtype(pendingEvents, "$is_PendingEvents", [H.getRuntimeTypeArgument(_this, "_BufferingStreamSubscription", 0)], "$as_PendingEvents");
      if (pendingEvents == null)
        return;
      _this.set$_pending(pendingEvents);
      if (!pendingEvents.get$isEmpty(pendingEvents)) {
        _this._state = H.intTypeCheck(J.$or$bn(_this._state, 64));
        _this._pending.schedule$1(_this);
      }
    },
    onData$1: function(handleData) {
      var t1 = H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0);
      H.functionTypeCheck(handleData, {func: 1, ret: -1, args: [t1]});
      if (handleData == null)
        handleData = P.async___nullDataHandler$closure();
      this.set$_onData(this._zone.registerUnaryCallback$2$1(handleData, null, t1));
    },
    onError$1: function(_, handleError) {
      var _this = this;
      H.interceptedTypeCheck(handleError, "$isFunction");
      if (handleError == null)
        handleError = P.async___nullErrorHandler$closure();
      if (H.functionTypeTest(handleError, {func: 1, ret: -1, args: [P.Object, P.StackTrace]}))
        _this._onError = H.interceptedTypeCheck(_this._zone.registerBinaryCallback$3$1(handleError, null, P.Object, P.StackTrace), "$isFunction");
      else if (H.functionTypeTest(handleError, {func: 1, ret: -1, args: [P.Object]}))
        _this._onError = H.interceptedTypeCheck(_this._zone.registerUnaryCallback$2$1(handleError, null, P.Object), "$isFunction");
      else
        throw H.wrapException(P.ArgumentError$("handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace."));
    },
    onDone$1: function(handleDone) {
      H.functionTypeCheck(handleDone, {func: 1, ret: -1});
      if (handleDone == null)
        handleDone = P.async___nullDoneHandler$closure();
      this.set$_onDone(this._zone.registerCallback$1$1(handleDone, -1));
    },
    pause$0: function() {
      var wasPaused, wasInputPaused, _this = this;
      if (_this.get$_isCanceled())
        return;
      wasPaused = _this.get$_isPaused();
      wasInputPaused = _this.get$_isInputPaused();
      _this._state = H.intTypeCheck(J.$or$bn(J.$add$ansx(_this._state, 128), 4));
      if (!wasPaused && _this._pending != null)
        _this._pending.cancelSchedule$0();
      if (!wasInputPaused && !_this.get$_inCallback())
        _this._guardCallback$1(_this.get$_onPause());
    },
    resume$0: function() {
      var _this = this;
      if (_this.get$_isCanceled())
        return;
      if (_this.get$_isPaused()) {
        _this._decrementPauseCount$0();
        if (!_this.get$_isPaused())
          if (_this.get$_hasPending() && !J.get$isEmpty$asx(_this._pending))
            _this._pending.schedule$1(_this);
          else {
            _this._state = H.intTypeCheck(J.$and$bn(_this._state, 4294967291));
            if (!_this.get$_inCallback())
              _this._guardCallback$1(_this.get$_onResume());
          }
      }
    },
    cancel$0: function() {
      var t1, _this = this;
      _this._state = H.intTypeCheck(J.$and$bn(_this._state, 4294967279));
      if (!_this.get$_isCanceled())
        _this._cancel$0();
      t1 = _this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    get$_isInputPaused: function() {
      return !J.$eq$(J.$and$bn(this._state, 4), 0);
    },
    get$_isClosed: function() {
      return !J.$eq$(J.$and$bn(this._state, 2), 0);
    },
    get$_isCanceled: function() {
      return !J.$eq$(J.$and$bn(this._state, 8), 0);
    },
    get$_waitsForCancel: function() {
      return !J.$eq$(J.$and$bn(this._state, 16), 0);
    },
    get$_inCallback: function() {
      return !J.$eq$(J.$and$bn(this._state, 32), 0);
    },
    get$_hasPending: function() {
      return !J.$eq$(J.$and$bn(this._state, 64), 0);
    },
    get$_isPaused: function() {
      return J.$ge$n(this._state, 128);
    },
    get$_canFire: function() {
      return J.$lt$n(this._state, 32);
    },
    get$_mayResumeInput: function() {
      if (!this.get$_isPaused()) {
        var t1 = this._pending;
        t1 = t1 == null || J.get$isEmpty$asx(t1);
      } else
        t1 = false;
      return t1;
    },
    get$_cancelOnError: function() {
      return !J.$eq$(J.$and$bn(this._state, 1), 0);
    },
    _cancel$0: function() {
      var _this = this;
      _this._state = H.intTypeCheck(J.$or$bn(_this._state, 8));
      if (_this.get$_hasPending())
        _this._pending.cancelSchedule$0();
      if (!_this.get$_inCallback())
        _this.set$_pending(null);
      _this._cancelFuture = H.interceptedTypeCheck(_this._onCancel$0(), "$isFuture");
    },
    _decrementPauseCount$0: function() {
      this._state = H.intTypeCheck(J.$sub$n(this._state, 128));
    },
    _async$_add$1: function(data) {
      var _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "_BufferingStreamSubscription", 0);
      H.assertSubtypeOfRuntimeType(data, t1);
      if (_this.get$_isCanceled())
        return;
      if (_this.get$_canFire())
        _this._sendData$1(data);
      else
        _this._addPending$1(P._DelayedData$(data, t1));
    },
    _addError$2: function(error, stackTrace) {
      var _this = this;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      if (_this.get$_isCanceled())
        return;
      if (_this.get$_canFire())
        _this._sendError$2(error, stackTrace);
      else
        _this._addPending$1(P._DelayedError$(error, stackTrace));
    },
    _close$0: function() {
      var _this = this;
      if (_this.get$_isCanceled())
        return;
      _this._state = H.intTypeCheck(J.$or$bn(_this._state, 2));
      if (_this.get$_canFire())
        _this._sendDone$0();
      else
        _this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: function() {
    },
    _onResume$0: function() {
    },
    _onCancel$0: function() {
      return;
    },
    _addPending$1: function($event) {
      var t1, pending, _this = this;
      H.interceptedTypeCheck($event, "$is_DelayedEvent");
      t1 = H.getRuntimeTypeArgument(_this, "_BufferingStreamSubscription", 0);
      pending = H.assertSubtype(_this._pending, "$is_StreamImplEvents", [t1], "$as_StreamImplEvents");
      if (pending == null) {
        pending = P._StreamImplEvents$(t1);
        _this.set$_pending(pending);
      }
      pending.add$1(0, $event);
      if (!_this.get$_hasPending()) {
        _this._state = H.intTypeCheck(J.$or$bn(_this._state, 64));
        if (!_this.get$_isPaused())
          _this._pending.schedule$1(_this);
      }
    },
    _sendData$1: function(data) {
      var wasInputPaused, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "_BufferingStreamSubscription", 0);
      H.assertSubtypeOfRuntimeType(data, t1);
      wasInputPaused = _this.get$_isInputPaused();
      _this._state = H.intTypeCheck(J.$or$bn(_this._state, 32));
      _this._zone.runUnaryGuarded$1$2(_this._onData, data, t1);
      _this._state = H.intTypeCheck(J.$and$bn(_this._state, 4294967263));
      _this._checkState$1(wasInputPaused);
    },
    _sendError$2: function(error, stackTrace) {
      var wasInputPaused, t1, t2, _this = this;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      wasInputPaused = _this.get$_isInputPaused();
      t1 = new P._BufferingStreamSubscription__sendError_sendError(_this, error, stackTrace);
      if (_this.get$_cancelOnError()) {
        _this._state = H.intTypeCheck(J.$or$bn(_this._state, 16));
        _this._cancel$0();
        t2 = _this._cancelFuture;
        if (t2 != null && t2 !== $.$get$Future__nullFuture())
          t2.whenComplete$1(t1);
        else
          t1.call$0();
      } else {
        t1.call$0();
        _this._checkState$1(wasInputPaused);
      }
    },
    _sendDone$0: function() {
      var t2, _this = this,
        t1 = new P._BufferingStreamSubscription__sendDone_sendDone(_this);
      _this._cancel$0();
      _this._state = H.intTypeCheck(J.$or$bn(_this._state, 16));
      t2 = _this._cancelFuture;
      if (t2 != null && t2 !== $.$get$Future__nullFuture())
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var wasInputPaused, _this = this;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      wasInputPaused = _this.get$_isInputPaused();
      _this._state = H.intTypeCheck(J.$or$bn(_this._state, 32));
      callback.call$0();
      _this._state = H.intTypeCheck(J.$and$bn(_this._state, 4294967263));
      _this._checkState$1(wasInputPaused);
    },
    _checkState$1: function(wasInputPaused) {
      var isInputPaused, _this = this;
      H.boolTypeCheck(wasInputPaused);
      if (_this.get$_hasPending() && J.get$isEmpty$asx(_this._pending)) {
        _this._state = H.intTypeCheck(J.$and$bn(_this._state, 4294967231));
        if (_this.get$_isInputPaused() && _this.get$_mayResumeInput())
          _this._state = H.intTypeCheck(J.$and$bn(_this._state, 4294967291));
      }
      for (; true; wasInputPaused = isInputPaused) {
        if (_this.get$_isCanceled()) {
          _this.set$_pending(null);
          return;
        }
        isInputPaused = _this.get$_isInputPaused();
        if (wasInputPaused == isInputPaused)
          break;
        _this._state = H.intTypeCheck(J.$xor$n(_this._state, 32));
        if (isInputPaused)
          _this._onPause$0();
        else
          _this._onResume$0();
        _this._state = H.intTypeCheck(J.$and$bn(_this._state, 4294967263));
      }
      if (_this.get$_hasPending() && !_this.get$_isPaused())
        _this._pending.schedule$1(_this);
    },
    set$_onData: function(_onData) {
      this._onData = H.functionTypeCheck(_onData, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0)]});
    },
    set$_onDone: function(_onDone) {
      this._onDone = H.functionTypeCheck(_onDone, {func: 1, ret: -1});
    },
    set$_state: function(_state) {
      this._state = H.intTypeCheck(_state);
    },
    set$_pending: function(_pending) {
      this._pending = H.assertSubtype(_pending, "$is_PendingEvents", [H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0)], "$as_PendingEvents");
    },
    $isStreamSubscription: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1,
    get$_onError: function() {
      return this._onError;
    },
    get$_onDone: function() {
      return this._onDone;
    },
    get$_zone: function() {
      return this._zone;
    },
    get$_state: function() {
      return this._state;
    }
  };
  P._BufferingStreamSubscription__sendError_sendError.prototype = {
    call$0: function() {
      var onError, t2, t3,
        t1 = this.$this;
      if (t1.get$_isCanceled() && !t1.get$_waitsForCancel())
        return;
      t1.set$_state(J.$or$bn(t1.get$_state(), 32));
      onError = t1.get$_onError();
      t2 = this.error;
      t3 = P.Object;
      if (H.functionTypeTest(onError, {func: 1, ret: -1, args: [P.Object, P.StackTrace]}))
        t1.get$_zone().runBinaryGuarded$2$3(onError, t2, this.stackTrace, t3, P.StackTrace);
      else
        t1.get$_zone().runUnaryGuarded$1$2(H.functionTypeCheck(t1.get$_onError(), {func: 1, ret: -1, args: [P.Object]}), t2, t3);
      t1.set$_state(J.$and$bn(t1.get$_state(), 4294967263));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0: function() {
      var t1 = this.$this;
      if (!t1.get$_waitsForCancel())
        return;
      t1.set$_state(J.$or$bn(t1.get$_state(), 42));
      t1.get$_zone().runGuarded$1(t1.get$_onDone());
      t1.set$_state(J.$and$bn(t1.get$_state(), 4294967263));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var subscription = this._createSubscription$4(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]}), H.interceptedTypeCheck(onError, "$isFunction"), H.functionTypeCheck(onDone, {func: 1, ret: -1}), true === H.boolTypeCheck(cancelOnError));
      this._onListen$1(subscription);
      return subscription;
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$2$onDone: function(onData, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
    },
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return P._BufferingStreamSubscription$(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]}), H.interceptedTypeCheck(onError, "$isFunction"), H.functionTypeCheck(onDone, {func: 1, ret: -1}), H.boolTypeCheck(cancelOnError), t1);
    },
    _onListen$1: function(subscription) {
      H.interceptedTypeCheck(subscription, "$isStreamSubscription");
    }
  };
  P._GeneratedStreamImpl.prototype = {
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      var _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      H.interceptedTypeCheck(onError, "$isFunction");
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      H.boolTypeCheck(cancelOnError);
      if (_this._isUsed)
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      _this._isUsed = true;
      t1 = P._BufferingStreamSubscription$(onData, onError, onDone, cancelOnError, t1);
      t1._setPendingEvents$1(_this._pending.call$0());
      return t1;
    }
  };
  P._IterablePendingEvents.prototype = {
    get$isEmpty: function(_) {
      return this._async$_iterator == null;
    },
    handleNext$1: function(dispatch) {
      var hasMore, e, s, t1, exception, _this = this;
      H.assertSubtype(dispatch, "$is_EventDispatch", _this.$ti, "$as_EventDispatch");
      t1 = _this._async$_iterator;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No events pending."));
      hasMore = null;
      try {
        hasMore = t1.moveNext$0();
        if (hasMore)
          dispatch._sendData$1(_this._async$_iterator.get$current());
        else {
          _this.set$_async$_iterator(null);
          dispatch._sendDone$0();
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (hasMore == null) {
          _this.set$_async$_iterator(C.C_EmptyIterator);
          dispatch._sendError$2(e, s);
        } else
          dispatch._sendError$2(e, s);
      }
    },
    clear$0: function(_) {
      if (this.get$isScheduled())
        this.cancelSchedule$0();
      this.set$_async$_iterator(null);
    },
    set$_async$_iterator: function(_iterator) {
      this._async$_iterator = H.assertSubtype(_iterator, "$isIterator", this.$ti, "$asIterator");
    }
  };
  P._DelayedEvent.prototype = {
    set$next: function(next) {
      this.next = H.interceptedTypeCheck(next, "$is_DelayedEvent");
    },
    get$next: function() {
      return this.next;
    }
  };
  P._DelayedData.prototype = {
    perform$1: function(dispatch) {
      H.assertSubtype(dispatch, "$is_EventDispatch", this.$ti, "$as_EventDispatch")._sendData$1(this.value);
    }
  };
  P._DelayedError.prototype = {
    perform$1: function(dispatch) {
      H.interceptedTypeCheck(dispatch, "$is_EventDispatch")._sendError$2(this.error, this.stackTrace);
    },
    $as_DelayedEvent: function() {
    },
    get$error: function(receiver) {
      return this.error;
    }
  };
  P._DelayedDone.prototype = {
    perform$1: function(dispatch) {
      H.interceptedTypeCheck(dispatch, "$is_EventDispatch")._sendDone$0();
    },
    get$next: function() {
      return;
    },
    set$next: function(_) {
      H.interceptedTypeCheck(_, "$is_DelayedEvent");
      throw H.wrapException(P.StateError$("No events after a done."));
    },
    $is_DelayedEvent: 1,
    $as_DelayedEvent: function() {
    }
  };
  P._PendingEvents.prototype = {
    get$isScheduled: function() {
      return J.$eq$(this._state, 1);
    },
    get$_eventScheduled: function() {
      return J.$ge$n(this._state, 1);
    },
    schedule$1: function(dispatch) {
      var _this = this;
      H.assertSubtype(dispatch, "$is_EventDispatch", _this.$ti, "$as_EventDispatch");
      if (_this.get$isScheduled())
        return;
      if (_this.get$_eventScheduled()) {
        _this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(_this, dispatch));
      _this._state = 1;
    },
    cancelSchedule$0: function() {
      if (this.get$isScheduled())
        this._state = 3;
    },
    set$_state: function(_state) {
      this._state = H.intTypeCheck(_state);
    },
    get$_state: function() {
      return this._state;
    }
  };
  P._PendingEvents_schedule_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        oldState = t1.get$_state();
      t1.set$_state(0);
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._StreamImplEvents.prototype = {
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1, _this = this;
      H.interceptedTypeCheck($event, "$is_DelayedEvent");
      t1 = _this.lastPendingEvent;
      if (t1 == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else {
        t1.set$next($event);
        _this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1, _this = this;
      H.assertSubtype(dispatch, "$is_EventDispatch", _this.$ti, "$as_EventDispatch");
      $event = _this.firstPendingEvent;
      t1 = H.interceptedTypeCheck($event.get$next(), "$is_DelayedEvent");
      _this.firstPendingEvent = t1;
      if (t1 == null)
        _this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    },
    clear$0: function(_) {
      var _this = this;
      if (_this.get$isScheduled())
        _this.cancelSchedule$0();
      _this.firstPendingEvent = _this.lastPendingEvent = null;
    }
  };
  P._DoneStreamSubscription.prototype = {$isStreamSubscription: 1};
  P._AsBroadcastStream.prototype = {};
  P._BroadcastSubscriptionWrapper.prototype = {$isStreamSubscription: 1};
  P._StreamIterator.prototype = {
    get$current: function() {
      var _this = this;
      if (_this._subscription != null && _this._isPaused)
        return H.assertSubtypeOfRuntimeType(_this._stateData, H.getTypeArgumentByIndex(_this, 0));
      return;
    },
    moveNext$0: function() {
      var future, _this = this;
      if (_this._subscription != null) {
        if (_this._isPaused) {
          future = P._Future$(P.bool);
          _this._stateData = future;
          _this._isPaused = false;
          _this._subscription.resume$0();
          return future;
        }
        throw H.wrapException(P.StateError$("Already waiting for next."));
      }
      return _this._initializeOrDone$0();
    },
    _initializeOrDone$0: function() {
      var _this = this,
        stateData = _this._stateData;
      if (stateData != null) {
        _this._subscription = H.interceptedTypeCheck(H.assertSubtype(stateData, "$isStream", _this.$ti, "$asStream").listen$4$cancelOnError$onDone$onError(_this.get$_onData(), true, _this.get$_onDone(), _this.get$_onError()), "$isStreamSubscription");
        return _this._stateData = P._Future$(P.bool);
      }
      return $.$get$Future__falseFuture();
    },
    _onData$1: function(data) {
      var moveNextFuture, t1, _this = this;
      H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(_this, 0));
      moveNextFuture = H.assertSubtype(_this._stateData, "$is_Future", [P.bool], "$as_Future");
      _this._stateData = data;
      _this._isPaused = true;
      moveNextFuture._complete$1(true);
      t1 = _this._subscription;
      if (t1 != null && _this._isPaused)
        t1.pause$0();
    },
    _onError$2: function(error, stackTrace) {
      var moveNextFuture;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      moveNextFuture = H.assertSubtype(this._stateData, "$is_Future", [P.bool], "$as_Future");
      this._stateData = this._subscription = null;
      moveNextFuture._completeError$2(error, stackTrace);
    },
    _onError$1: function(error) {
      return this._onError$2(error, null);
    },
    _onDone$0: function() {
      var moveNextFuture = H.assertSubtype(this._stateData, "$is_Future", [P.bool], "$as_Future");
      this._stateData = this._subscription = null;
      moveNextFuture._complete$1(false);
    },
    $isStreamIterator: 1
  };
  P._EmptyStream.prototype = {};
  P._cancelAndValue_closure.prototype = {
    call$0: function() {
      return this.future._complete$1(this.value);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._ForwardingStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      return this._createSubscription$4(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 1)]}), H.interceptedTypeCheck(onError, "$isFunction"), H.functionTypeCheck(onDone, {func: 1, ret: -1}), true === H.boolTypeCheck(cancelOnError));
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$2$onDone: function(onData, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
    },
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      var t1 = H.getTypeArgumentByIndex(this, 1);
      return P._ForwardingStreamSubscription$(this, H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]}), H.interceptedTypeCheck(onError, "$isFunction"), H.functionTypeCheck(onDone, {func: 1, ret: -1}), H.boolTypeCheck(cancelOnError), H.getTypeArgumentByIndex(this, 0), t1);
    },
    _handleData$2: function(data, sink) {
      var t1;
      H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(this, 0));
      t1 = H.getTypeArgumentByIndex(this, 1);
      H.assertSubtype(sink, "$is_EventSink", [t1], "$as_EventSink")._async$_add$1(H.assertSubtypeOfRuntimeType(data, t1));
    },
    _handleError$3: function(error, stackTrace, sink) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      H.assertSubtype(sink, "$is_EventSink", [H.getTypeArgumentByIndex(this, 1)], "$as_EventSink")._addError$2(error, stackTrace);
    },
    _handleDone$1: function(sink) {
      H.assertSubtype(sink, "$is_EventSink", [H.getTypeArgumentByIndex(this, 1)], "$as_EventSink")._close$0();
    },
    $asStream: function($S, $T) {
      return [$T];
    },
    get$_async$_source: function() {
      return this._async$_source;
    }
  };
  P._ForwardingStreamSubscription.prototype = {
    _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
      var _this = this;
      _this.set$_subscription(_this._stream.get$_async$_source().listen$3$onDone$onError(_this.get$_handleData(), _this.get$_handleDone(), _this.get$_handleError()));
    },
    _async$_add$1: function(data) {
      H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(this, 1));
      if (this.get$_isClosed())
        return;
      this.super$_BufferingStreamSubscription$_add(data);
    },
    _addError$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      if (this.get$_isClosed())
        return;
      this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
    },
    _onPause$0: function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0();
    },
    _onResume$0: function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0();
    },
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this.set$_subscription(null);
        return t1.cancel$0();
      }
      return;
    },
    _handleData$1: function(data) {
      this._stream._handleData$2(H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(this, 0)), this);
    },
    _handleError$2: function(error, stackTrace) {
      this._stream._handleError$3(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"), this);
    },
    _handleDone$0: function() {
      this._stream._handleDone$1(this);
    },
    set$_subscription: function(_subscription) {
      this._subscription = H.assertSubtype(_subscription, "$isStreamSubscription", [H.getTypeArgumentByIndex(this, 0)], "$asStreamSubscription");
    },
    $asStreamSubscription: function($S, $T) {
      return [$T];
    },
    $as_EventSink: function($S, $T) {
      return [$T];
    },
    $as_EventDispatch: function($S, $T) {
      return [$T];
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    }
  };
  P._WhereStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._MapStream.prototype = {
    _handleData$2: function(inputEvent, sink) {
      var outputEvent, e, s, exception;
      H.assertSubtypeOfRuntimeType(inputEvent, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtype(sink, "$is_EventSink", [H.getTypeArgumentByIndex(this, 1)], "$as_EventSink");
      outputEvent = null;
      try {
        outputEvent = this._transform.call$1(inputEvent);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._addErrorWithReplacement(sink, e, s);
        return;
      }
      sink._async$_add$1(outputEvent);
    }
  };
  P._ExpandStream.prototype = {};
  P._HandleErrorStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._TakeStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._StateStreamSubscription.prototype = {$asStreamSubscription: null, $as_EventSink: null, $as_EventDispatch: null, $as_BufferingStreamSubscription: null,
    $as_ForwardingStreamSubscription: function($T) {
      return [$T, $T];
    }
  };
  P._TakeWhileStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._SkipStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._SkipWhileStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._DistinctStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._EventSinkWrapper.prototype = {$isEventSink: 1, $isSink: 1};
  P._SinkTransformerStreamSubscription.prototype = {
    $asStreamSubscription: function($S, $T) {
      return [$T];
    },
    $as_EventSink: function($S, $T) {
      return [$T];
    },
    $as_EventDispatch: function($S, $T) {
      return [$T];
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    }
  };
  P._StreamSinkTransformer.prototype = {};
  P._BoundSinkStream.prototype = {
    $asStream: function($S, $T) {
      return [$T];
    }
  };
  P._HandlerEventSink.prototype = {$isEventSink: 1,
    $asEventSink: function($S, $T) {
      return [$S];
    },
    $isSink: 1,
    $asSink: function($S, $T) {
      return [$S];
    }
  };
  P._StreamHandlerTransformer.prototype = {};
  P._StreamBindTransformer.prototype = {};
  P._StreamSubscriptionTransformer.prototype = {};
  P._BoundSubscriptionStream.prototype = {
    $asStream: function($S, $T) {
      return [$T];
    }
  };
  P.Timer.prototype = {};
  P.AsyncError.prototype = {
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1,
    get$error: function(receiver) {
      return this.error;
    }
  };
  P._ZoneFunction.prototype = {};
  P.ZoneSpecification.prototype = {};
  P._ZoneSpecification.prototype = {$isZoneSpecification: 1};
  P.ZoneDelegate.prototype = {};
  P.Zone.prototype = {};
  P._ZoneDelegate.prototype = {$isZoneDelegate: 1};
  P._Zone.prototype = {
    inSameErrorZone$1: function(otherZone) {
      var t1, t2;
      H.interceptedTypeCheck(otherZone, "$isZone");
      if (this !== otherZone) {
        t1 = this.get$errorZone();
        t2 = otherZone.get$errorZone();
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = true;
      return t1;
    },
    $isZone: 1
  };
  P._CustomZone.prototype = {};
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      var t1 = this._box_0,
        t2 = t1.error;
      t1 = t2 == null ? t1.error = P.NullThrownError$() : t2;
      t2 = this.stackTrace;
      if (t2 == null)
        throw H.wrapException(t1);
      P._rethrow(t1, t2);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._RootZone.prototype = {
    get$_scheduleMicrotask: function() {
      return C._ZoneFunction__RootZone;
    },
    get$errorZone: function() {
      return this;
    },
    runGuarded$1: function(f) {
      var e, s, exception;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(null, null, this, f, -1);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(null, null, this, f, arg, -1, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    runUnaryGuarded$2: function(f, arg) {
      return this.runUnaryGuarded$1$2(f, arg, null);
    },
    runBinaryGuarded$2$3: function(f, arg1, arg2, T1, T2) {
      var e, s, exception;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$2(arg1, arg2);
          return;
        }
        P._rootRunBinary(null, null, this, f, arg1, arg2, -1, T1, T2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    runBinaryGuarded$3: function(f, arg1, arg2) {
      return this.runBinaryGuarded$2$3(f, arg1, arg2, null, null);
    },
    bindCallback$1$1: function(f, $R) {
      return new P._RootZone_bindCallback_closure(this, H.functionTypeCheck(f, {func: 1, ret: $R}), $R);
    },
    bindCallback$1: function(f) {
      return this.bindCallback$1$1(f, null);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1}));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._RootZone_bindUnaryCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]}), $T);
    },
    bindUnaryCallbackGuarded$1: function(f) {
      return this.bindUnaryCallbackGuarded$1$1(f, null);
    },
    $index: function(_, key) {
      return;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      P._rootHandleUncaughtError(null, null, this, error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
    },
    run$1$1: function(f, $R) {
      H.functionTypeCheck(f, {func: 1, ret: $R});
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    run$1: function(f) {
      return this.run$1$1(f, null);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runUnary$2: function(f, arg) {
      return this.runUnary$2$2(f, arg, null, null);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    runBinary$3: function(f, arg1, arg2) {
      return this.runBinary$3$3(f, arg1, arg2, null, null, null);
    },
    registerCallback$1$1: function(f, $R) {
      return H.functionTypeCheck(f, {func: 1, ret: $R});
    },
    registerCallback$1: function(f) {
      return this.registerCallback$1$1(f, null);
    },
    registerUnaryCallback$2$1: function(f, $R, $T) {
      return H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
    },
    registerUnaryCallback$1: function(f) {
      return this.registerUnaryCallback$2$1(f, null, null);
    },
    registerBinaryCallback$3$1: function(f, $R, T1, T2) {
      return H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
    },
    registerBinaryCallback$1: function(f) {
      return this.registerBinaryCallback$3$1(f, null, null, null);
    },
    errorCallback$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      return;
    },
    scheduleMicrotask$1: function(f) {
      P._rootScheduleMicrotask(null, null, this, H.functionTypeCheck(f, {func: 1, ret: -1}));
    }
  };
  P._RootZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.f, this.R);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: function() {
      return {func: 1, ret: this.R};
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, H.assertSubtypeOfRuntimeType(arg, t1), t1);
    },
    $signature: function() {
      return {func: 1, ret: -1, args: [this.T]};
    }
  };
  P._HashMap.prototype = {
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return J.$eq$(this._collection$_length, 0);
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    get$keys: function(_) {
      return P._HashMapKeyIterable$(this, H.getTypeArgumentByIndex(this, 0));
    },
    get$values: function() {
      var _this = this;
      return H.MappedIterable_MappedIterable(_this.get$keys(_this), new P._HashMap_values_closure(_this), H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums;
      if (P._HashMap__isStringKey(key)) {
        strings = this._collection$_strings;
        return strings == null ? false : P._HashMap__hasTableEntry(strings, key);
      } else if (P._HashMap__isNumericKey(key)) {
        nums = this._collection$_nums;
        return nums == null ? false : P._HashMap__hasTableEntry(nums, key);
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return J.$ge$n(this._findBucketIndex$2(this._collection$_getBucket$2(rest, key), key), 0);
    },
    addAll$1: function(_, other) {
      H.assertSubtype(other, "$isMap", this.$ti, "$asMap").forEach$1(0, new P._HashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, t1, nums;
      if (P._HashMap__isStringKey(key)) {
        strings = this._collection$_strings;
        t1 = strings == null ? null : P._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (P._HashMap__isNumericKey(key)) {
        nums = this._collection$_nums;
        t1 = nums == null ? null : P._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return;
      bucket = this._collection$_getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      if (typeof index !== "number")
        return index.$lt();
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (P._HashMap__isStringKey(key)) {
        strings = _this._collection$_strings;
        _this._collection$_addHashTableEntry$3(strings == null ? _this._collection$_strings = P._HashMap__newHashTable() : strings, key, value);
      } else if (P._HashMap__isNumericKey(key)) {
        nums = _this._collection$_nums;
        _this._collection$_addHashTableEntry$3(nums == null ? _this._collection$_nums = P._HashMap__newHashTable() : nums, key, value);
      } else
        _this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._HashMap__newHashTable();
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        _this._collection$_length = H.intTypeCheck(J.$add$ansx(_this._collection$_length, 1));
        _this._keys = null;
      } else {
        index = _this._findBucketIndex$2(bucket, key);
        if (typeof index !== "number")
          return index.$ge();
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          _this._collection$_length = H.intTypeCheck(J.$add$ansx(_this._collection$_length, 1));
          _this._keys = null;
        }
      }
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var value, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getTypeArgumentByIndex(_this, 1)});
      if (_this.containsKey$1(key))
        return _this.$index(0, key);
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      var _this = this;
      if (P._HashMap__isStringKey(key))
        return _this._collection$_removeHashTableEntry$2(_this._collection$_strings, key);
      else if (P._HashMap__isNumericKey(key))
        return _this._collection$_removeHashTableEntry$2(_this._collection$_nums, key);
      else
        return _this._remove$1(key);
    },
    _remove$1: function(key) {
      var bucket, index, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return;
      bucket = _this._collection$_getBucket$2(rest, key);
      index = _this._findBucketIndex$2(bucket, key);
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0)
        return;
      _this._collection$_length = H.intTypeCheck(J.$sub$n(_this._collection$_length, 1));
      _this._keys = null;
      return bucket.splice(index, 2)[1];
    },
    clear$0: function(_) {
      var _this = this;
      if (J.$gt$n(_this._collection$_length, 0)) {
        _this._collection$_strings = _this._collection$_nums = _this._collection$_rest = _this._keys = null;
        _this._collection$_length = 0;
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [t1, H.getTypeArgumentByIndex(_this, 1)]});
      keys = _this._collection$_computeKeys$0();
      $length = J.get$length$asx(keys);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        key = keys[i];
        action.call$2(H.assertSubtypeOfRuntimeType(key, t1), _this.$index(0, key));
        if (keys !== _this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    _collection$_computeKeys$0: function() {
      var result, strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        t1 = _this._keys;
      if (t1 != null)
        return t1;
      t1 = _this._collection$_length;
      if (typeof t1 !== "number")
        return H.iae(t1);
      result = new Array(t1);
      result.fixed$length = Array;
      strings = _this._collection$_strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._keys = result;
    },
    _collection$_addHashTableEntry$3: function(table, key, value) {
      var _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (!P._HashMap__hasTableEntry(table, key)) {
        _this._collection$_length = H.intTypeCheck(J.$add$ansx(_this._collection$_length, 1));
        _this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _collection$_removeHashTableEntry$2: function(table, key) {
      var value, _this = this;
      if (table != null && P._HashMap__hasTableEntry(table, key)) {
        value = H.assertSubtypeOfRuntimeType(P._HashMap__getTableEntry(table, key), H.getTypeArgumentByIndex(_this, 1));
        P._HashMap__deleteTableEntry(table, key);
        _this._collection$_length = H.intTypeCheck(J.$sub$n(_this._collection$_length, 1));
        _this._keys = null;
        return value;
      } else
        return;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    _collection$_getBucket$2: function(table, key) {
      return table[this._computeHashCode$1(key)];
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq$(bucket[i], key))
          return i;
      return -1;
    },
    $isHashMap: 1,
    get$_collection$_length: function() {
      return this._collection$_length;
    },
    get$_keys: function() {
      return this._keys;
    }
  };
  P._HashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this;
      return J.$index$asx(t1, H.assertSubtypeOfRuntimeType(each, H.getTypeArgumentByIndex(t1, 0)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  P._HashMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      J.$indexSet$ax(t1, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(t1, 1)));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]};
    }
  };
  P._IdentityHashMap.prototype = {
    _computeHashCode$1: function(key) {
      return P.identityHashCode(key) & 1073741823;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  P._CustomHashMap.prototype = {
    $index: function(_, key) {
      if (!this._validKey.call$1(key))
        return;
      return this.super$_HashMap$_get(key);
    },
    $indexSet: function(_, key, value) {
      this.super$_HashMap$_set(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
    },
    containsKey$1: function(key) {
      if (!this._validKey.call$1(key))
        return false;
      return this.super$_HashMap$_containsKey(key);
    },
    remove$1: function(_, key) {
      if (!this._validKey.call$1(key))
        return;
      return this.super$_HashMap$_remove(key);
    },
    _computeHashCode$1: function(key) {
      return this._hashCode.call$1(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0))) & 1073741823;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, t1, t2, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = H.getTypeArgumentByIndex(this, 0), t2 = this._equals, i = 0; i < $length; i += 2)
        if (t2.call$2(bucket[i], H.assertSubtypeOfRuntimeType(key, t1)))
          return i;
      return -1;
    }
  };
  P._CustomHashMap_closure.prototype = {
    call$1: function(v) {
      return H.checkSubtypeOfRuntimeType(v, this.K);
    },
    $signature: 8
  };
  P._HashMapKeyIterable.prototype = {
    get$length: function(_) {
      return H.intTypeCheck(this._collection$_map.get$_collection$_length());
    },
    get$isEmpty: function(_) {
      return J.$eq$(this._collection$_map.get$_collection$_length(), 0);
    },
    get$iterator: function(_) {
      var t1 = this._collection$_map;
      return P._HashMapKeyIterator$(t1, H.listTypeCheck(t1._collection$_computeKeys$0()), H.getTypeArgumentByIndex(this, 0));
    },
    contains$1: function(_, element) {
      return H.boolTypeCheck(this._collection$_map.containsKey$1(element));
    }
  };
  P._HashMapKeyIterator.prototype = {
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        keys = _this._keys,
        offset = _this._offset,
        t1 = _this._collection$_map;
      if (keys !== t1.get$_keys())
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = keys.length;
        if (typeof offset !== "number")
          return offset.$ge();
        if (offset >= t1) {
          _this.set$_collection$_current(null);
          return false;
        } else {
          _this.set$_collection$_current(keys[offset]);
          _this._offset = offset + 1;
          return true;
        }
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1,
    get$_keys: function() {
      return this._keys;
    }
  };
  P._LinkedIdentityHashMap.prototype = {
    internalComputeHashCode$1: function(key) {
      return P.identityHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i].hashMapCellKey;
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  P._Es6LinkedIdentityHashMap.prototype = {};
  P._Es6LinkedIdentityHashMap_addAll_closure.prototype = {};
  P._Es6MapIterable.prototype = {};
  P._Es6MapIterator.prototype = {$isIterator: 1};
  P._LinkedCustomHashMap.prototype = {
    $index: function(_, key) {
      if (!this._validKey.call$1(key))
        return;
      return this.super$JsLinkedHashMap$internalGet(key);
    },
    $indexSet: function(_, key, value) {
      this.super$JsLinkedHashMap$internalSet(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
    },
    containsKey$1: function(key) {
      if (!this._validKey.call$1(key))
        return false;
      return this.super$JsLinkedHashMap$internalContainsKey(key);
    },
    remove$1: function(_, key) {
      if (!this._validKey.call$1(key))
        return;
      return this.super$JsLinkedHashMap$internalRemove(key);
    },
    internalComputeHashCode$1: function(key) {
      return this._hashCode.call$1(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0))) & 1073741823;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, t1, t2, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = H.getTypeArgumentByIndex(this, 0), t2 = this._equals, i = 0; i < $length; ++i)
        if (t2.call$2(H.assertSubtypeOfRuntimeType(bucket[i].hashMapCellKey, t1), H.assertSubtypeOfRuntimeType(key, t1)))
          return i;
      return -1;
    }
  };
  P._LinkedCustomHashMap_closure.prototype = {
    call$1: function(v) {
      return H.checkSubtypeOfRuntimeType(v, this.K);
    },
    $signature: 8
  };
  P._HashSet.prototype = {
    _newSimilarSet$1$0: function($R) {
      return P._HashSet$($R);
    },
    _newSimilarSet$0: function() {
      return this._newSimilarSet$1$0(null);
    },
    get$iterator: function(_) {
      return P._HashSetIterator$(this, this._computeElements$0(), H.getTypeArgumentByIndex(this, 0));
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return J.$eq$(this._collection$_length, 0);
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (P._HashSet__isStringElement(object)) {
        strings = this._collection$_strings;
        return strings == null ? false : P._HashSet__hasTableEntry(strings, object);
      } else if (P._HashSet__isNumericElement(object)) {
        nums = this._collection$_nums;
        return nums == null ? false : P._HashSet__hasTableEntry(nums, object);
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return J.$ge$n(this._findBucketIndex$2(this._collection$_getBucket$2(rest, object), object), 0);
    },
    add$1: function(_, element) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      if (P._HashSet__isStringElement(element)) {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = P._HashSet__newHashTable() : strings, element);
      } else if (P._HashSet__isNumericElement(element)) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = P._HashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket, index, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._HashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        P._HashSet__setTableEntry(rest, hash, [element]);
      else {
        index = _this._findBucketIndex$2(bucket, element);
        if (typeof index !== "number")
          return index.$ge();
        if (index >= 0)
          return false;
        bucket.push(element);
      }
      _this._collection$_length = H.intTypeCheck(J.$add$ansx(_this._collection$_length, 1));
      _this._elements = null;
      return true;
    },
    addAll$1: function(_, objects) {
      var t1;
      for (t1 = J.get$iterator$ax(H.assertSubtype(objects, "$isIterable", this.$ti, "$asIterable")); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    remove$1: function(_, object) {
      var _this = this;
      if (P._HashSet__isStringElement(object))
        return _this._collection$_removeHashTableEntry$2(_this._collection$_strings, object);
      else if (P._HashSet__isNumericElement(object))
        return _this._collection$_removeHashTableEntry$2(_this._collection$_nums, object);
      else
        return _this._remove$1(object);
    },
    _remove$1: function(object) {
      var bucket, index, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      bucket = _this._collection$_getBucket$2(rest, object);
      index = _this._findBucketIndex$2(bucket, object);
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0)
        return false;
      _this._collection$_length = H.intTypeCheck(J.$sub$n(_this._collection$_length, 1));
      _this._elements = null;
      bucket.splice(index, 1);
      return true;
    },
    clear$0: function(_) {
      var _this = this;
      if (J.$gt$n(_this._collection$_length, 0)) {
        _this._collection$_strings = _this._collection$_nums = _this._collection$_rest = _this._elements = null;
        _this._collection$_length = 0;
      }
    },
    _computeElements$0: function() {
      var result, strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        t1 = _this._elements;
      if (t1 != null)
        return t1;
      t1 = _this._collection$_length;
      if (typeof t1 !== "number")
        return H.iae(t1);
      result = new Array(t1);
      result.fixed$length = Array;
      strings = _this._collection$_strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._elements = result;
    },
    _collection$_addHashTableEntry$2: function(table, element) {
      var _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      if (P._HashSet__hasTableEntry(table, element))
        return false;
      P._HashSet__setTableEntry(table, element, 0);
      _this._collection$_length = H.intTypeCheck(J.$add$ansx(_this._collection$_length, 1));
      _this._elements = null;
      return true;
    },
    _collection$_removeHashTableEntry$2: function(table, element) {
      if (table != null && P._HashSet__hasTableEntry(table, element)) {
        P._HashSet__deleteTableEntry(table, element);
        this._collection$_length = H.intTypeCheck(J.$sub$n(this._collection$_length, 1));
        this._elements = null;
        return true;
      } else
        return false;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _collection$_getBucket$2: function(table, element) {
      return table[this._computeHashCode$1(element)];
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i], element))
          return i;
      return -1;
    },
    $isHashSet: 1,
    get$_collection$_length: function() {
      return this._collection$_length;
    },
    get$_elements: function() {
      return this._elements;
    }
  };
  P._IdentityHashSet.prototype = {
    _newSimilarSet$1$0: function($R) {
      return P._IdentityHashSet$($R);
    },
    _newSimilarSet$0: function() {
      return this._newSimilarSet$1$0(null);
    },
    _computeHashCode$1: function(key) {
      return P.identityHashCode(key) & 1073741823;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i];
        if (t1 == null ? element == null : t1 === element)
          return i;
      }
      return -1;
    }
  };
  P._CustomHashSet.prototype = {
    _newSimilarSet$1$0: function($R) {
      return P._HashSet$($R);
    },
    _newSimilarSet$0: function() {
      return this._newSimilarSet$1$0(null);
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, t1, i, t2;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = H.getTypeArgumentByIndex(this, 0), i = 0; i < $length; ++i) {
        t2 = bucket[i];
        H.assertSubtypeOfRuntimeType(element, t1);
        if (this._equality.call$2(t2, element))
          return i;
      }
      return -1;
    },
    _computeHashCode$1: function(element) {
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      return this._hasher.call$1(element) & 1073741823;
    },
    add$1: function(_, object) {
      return this.super$_HashSet$_add(H.assertSubtypeOfRuntimeType(object, H.getTypeArgumentByIndex(this, 0)));
    },
    contains$1: function(_, object) {
      if (!this._validKey.call$1(object))
        return false;
      return this.super$_HashSet$_contains(object);
    },
    remove$1: function(_, object) {
      if (!this._validKey.call$1(object))
        return false;
      return this.super$_HashSet$_remove(object);
    }
  };
  P._CustomHashSet_closure.prototype = {
    call$1: function(x) {
      return H.checkSubtypeOfRuntimeType(x, this.E);
    },
    $signature: 8
  };
  P._HashSetIterator.prototype = {
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        elements = _this._elements,
        offset = _this._offset,
        t1 = _this._set;
      if (elements !== t1.get$_elements())
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = elements.length;
        if (typeof offset !== "number")
          return offset.$ge();
        if (offset >= t1) {
          _this.set$_collection$_current(null);
          return false;
        } else {
          _this.set$_collection$_current(elements[offset]);
          _this._offset = offset + 1;
          return true;
        }
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1,
    get$_elements: function() {
      return this._elements;
    }
  };
  P._LinkedHashSet.prototype = {
    _newSimilarSet$1$0: function($R) {
      return P._LinkedHashSet$($R);
    },
    _newSimilarSet$0: function() {
      return this._newSimilarSet$1$0(null);
    },
    get$iterator: function(_) {
      return P._LinkedHashSetIterator$(this, this._collection$_modifications, H.getTypeArgumentByIndex(this, 0));
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return J.$eq$(this._collection$_length, 0);
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (P._LinkedHashSet__isStringElement(object)) {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return H.interceptedTypeCheck(P._LinkedHashSet__getTableEntry(strings, object), "$is_LinkedHashSetCell") != null;
      } else if (P._LinkedHashSet__isNumericElement(object)) {
        nums = this._collection$_nums;
        if (nums == null)
          return false;
        return H.interceptedTypeCheck(P._LinkedHashSet__getTableEntry(nums, object), "$is_LinkedHashSetCell") != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return J.$ge$n(this._findBucketIndex$2(this._collection$_getBucket$2(rest, object), object), 0);
    },
    get$first: function(_) {
      var t1 = this._collection$_first;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return H.assertSubtypeOfRuntimeType(t1.get$_element(), H.getTypeArgumentByIndex(this, 0));
    },
    get$last: function(_) {
      var t1 = this._collection$_last;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return H.assertSubtypeOfRuntimeType(t1.get$_element(), H.getTypeArgumentByIndex(this, 0));
    },
    add$1: function(_, element) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      if (P._LinkedHashSet__isStringElement(element)) {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = P._LinkedHashSet__newHashTable() : strings, element);
      } else if (P._LinkedHashSet__isNumericElement(element)) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = P._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket, index, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        P._LinkedHashSet__setTableEntry(rest, hash, [_this._collection$_newLinkedCell$1(element)]);
      else {
        index = _this._findBucketIndex$2(bucket, element);
        if (typeof index !== "number")
          return index.$ge();
        if (index >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      var _this = this;
      if (P._LinkedHashSet__isStringElement(object))
        return _this._collection$_removeHashTableEntry$2(_this._collection$_strings, object);
      else if (P._LinkedHashSet__isNumericElement(object))
        return _this._collection$_removeHashTableEntry$2(_this._collection$_nums, object);
      else
        return _this._remove$1(object);
    },
    _remove$1: function(object) {
      var bucket, index, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      bucket = _this._collection$_getBucket$2(rest, object);
      index = _this._findBucketIndex$2(bucket, object);
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0)
        return false;
      _this._collection$_unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    clear$0: function(_) {
      var _this = this;
      if (J.$gt$n(_this._collection$_length, 0)) {
        _this._collection$_strings = _this._collection$_nums = _this._collection$_rest = _this._collection$_first = _this._collection$_last = null;
        _this._collection$_length = 0;
        _this._collection$_modified$0();
      }
    },
    _collection$_addHashTableEntry$2: function(table, element) {
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      if (H.interceptedTypeCheck(P._LinkedHashSet__getTableEntry(table, element), "$is_LinkedHashSetCell") != null)
        return false;
      P._LinkedHashSet__setTableEntry(table, element, this._collection$_newLinkedCell$1(element));
      return true;
    },
    _collection$_removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = H.interceptedTypeCheck(P._LinkedHashSet__getTableEntry(table, element), "$is_LinkedHashSetCell");
      if (cell == null)
        return false;
      this._collection$_unlinkCell$1(cell);
      P._LinkedHashSet__deleteTableEntry(table, element);
      return true;
    },
    _collection$_modified$0: function() {
      var t1 = J.$add$ansx(this._collection$_modifications, 1);
      if (typeof t1 !== "number")
        return H.iae(t1);
      this._collection$_modifications = 1073741823 & t1;
    },
    _collection$_newLinkedCell$1: function(element) {
      var last, _this = this,
        cell = P._LinkedHashSetCell$(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0)));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else {
        last = _this._collection$_last;
        cell._collection$_previous = last;
        _this._collection$_last = last._collection$_next = cell;
      }
      _this._collection$_length = H.intTypeCheck(J.$add$ansx(_this._collection$_length, 1));
      _this._collection$_modified$0();
      return cell;
    },
    _collection$_unlinkCell$1: function(cell) {
      var previous, next, _this = this;
      H.interceptedTypeCheck(cell, "$is_LinkedHashSetCell");
      previous = cell._collection$_previous;
      next = cell._collection$_next;
      if (previous == null)
        _this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        _this._collection$_last = previous;
      else
        next._collection$_previous = previous;
      _this._collection$_length = H.intTypeCheck(J.$sub$n(_this._collection$_length, 1));
      _this._collection$_modified$0();
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _collection$_getBucket$2: function(table, element) {
      return table[this._computeHashCode$1(element)];
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    },
    $isLinkedHashSet: 1,
    get$_collection$_length: function() {
      return this._collection$_length;
    },
    get$_collection$_first: function() {
      return this._collection$_first;
    },
    get$_collection$_modifications: function() {
      return this._collection$_modifications;
    }
  };
  P._LinkedIdentityHashSet.prototype = {};
  P._LinkedCustomHashSet.prototype = {};
  P._LinkedCustomHashSet_closure.prototype = {$signature: 8};
  P._LinkedHashSetCell.prototype = {
    get$_element: function() {
      return this._element;
    },
    get$_collection$_next: function() {
      return this._collection$_next;
    }
  };
  P._LinkedHashSetIterator.prototype = {
    _LinkedHashSetIterator$2: function(_set, _modifications, $E) {
      this._collection$_cell = H.interceptedTypeCheck(this._set.get$_collection$_first(), "$is_LinkedHashSetCell");
    },
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._set;
      if (!J.$eq$(_this._collection$_modifications, t1.get$_collection$_modifications()))
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._collection$_cell;
        if (t1 == null) {
          _this.set$_collection$_current(null);
          return false;
        } else {
          _this.set$_collection$_current(H.assertSubtypeOfRuntimeType(t1.get$_element(), H.getTypeArgumentByIndex(_this, 0)));
          _this._collection$_cell = H.interceptedTypeCheck(_this._collection$_cell.get$_collection$_next(), "$is_LinkedHashSetCell");
          return true;
        }
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1,
    get$_collection$_modifications: function() {
      return this._collection$_modifications;
    }
  };
  P.UnmodifiableListView.prototype = {
    cast$1$0: function(_, $R) {
      return P.UnmodifiableListView$(J.cast$1$0$ax(this._collection$_source, $R), $R);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    get$length: function(_) {
      return J.get$length$asx(this._collection$_source);
    },
    $index: function(_, index) {
      return J.elementAt$1$ax(this._collection$_source, H.intTypeCheck(index));
    }
  };
  P.HashMap.prototype = {$isMap: 1};
  P.HashSet.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  P.IterableMixin.prototype = {
    cast$1$0: function(_, $R) {
      return P.Iterable_castFrom(this, H.getTypeArgumentByIndex(this, 0), $R);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return H.MappedIterable_MappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    where$1: function(_, f) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return H.WhereIterable$(this, H.functionTypeCheck(f, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    contains$1: function(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(), element))
          return true;
      return false;
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      var t1, value;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(this, 0)]});
      for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
        value = combine.call$2(value, t1.get$current());
      return value;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    join$1: function(_, separator) {
      var iterator, buffer;
      H.stringTypeCheck(separator);
      iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      buffer = P.StringBuffer$("");
      if (separator == null || separator === "") {
        do
          buffer.write$1(H.S(iterator.get$current()));
        while (iterator.moveNext$0());
      } else {
        buffer.write$1(H.S(iterator.get$current()));
        for (; iterator.moveNext$0();) {
          buffer.write$1(separator);
          buffer.write$1(H.S(iterator.get$current()));
        }
      }
      return buffer.toString$0(0);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, H.boolTypeCheck(growable), H.getTypeArgumentByIndex(this, 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    take$1: function(_, count) {
      return H.TakeIterable_TakeIterable(this, H.intTypeCheck(count), H.getTypeArgumentByIndex(this, 0));
    },
    skip$1: function(_, count) {
      return H.SkipIterable_SkipIterable(this, H.intTypeCheck(count), H.getTypeArgumentByIndex(this, 0));
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    get$last: function(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element, _s5_ = "index";
      H.intTypeCheck(index);
      P.ArgumentError_checkNotNull(index, _s5_);
      P.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, _s5_, null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    },
    $isIterable: 1
  };
  P.IterableBase.prototype = {};
  P.HasNextIterator.prototype = {};
  P.LinkedHashMap.prototype = {$isMap: 1};
  P.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2: function(k, v) {
      J.$indexSet$ax(this.result, H.assertSubtypeOfRuntimeType(k, this.K), H.assertSubtypeOfRuntimeType(v, this.V));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 10
  };
  P.LinkedHashSet.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  P.LinkedList0.prototype = {};
  P._LinkedListIterator0.prototype = {$isIterator: 1};
  P.LinkedListEntry.prototype = {};
  P.ListBase.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  P.ListMixin.prototype = {
    get$iterator: function(receiver) {
      return H.ListIterator$(receiver, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    forEach$1: function(receiver, action) {
      var $length, i, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]});
      $length = _this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        action.call$1(_this.$index(receiver, i));
        if ($length !== _this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return J.$eq$(this.get$length(receiver), 0);
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first: function(receiver) {
      if (J.$eq$(this.get$length(receiver), 0))
        throw H.wrapException(H.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    get$last: function(receiver) {
      if (J.$eq$(this.get$length(receiver), 0))
        throw H.wrapException(H.IterableElementError_noElement());
      return this.$index(receiver, J.$sub$n(this.get$length(receiver), 1));
    },
    contains$1: function(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (J.$eq$(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    any$1: function(receiver, test) {
      var $length, i, _this = this;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]});
      $length = _this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (test.call$1(_this.$index(receiver, i)))
          return true;
        if ($length !== _this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    join$1: function(receiver, separator) {
      var buffer;
      H.stringTypeCheck(separator);
      if (J.$eq$(this.get$length(receiver), 0))
        return "";
      buffer = P.StringBuffer$("");
      buffer.writeAll$2(receiver, separator);
      return buffer.toString$0(0);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    where$1: function(receiver, test) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return H.WhereIterable$(receiver, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return H.MappedListIterable$(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i, _this = this;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]});
      $length = _this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      value = initialValue;
      i = 0;
      for (; i < $length; ++i) {
        value = combine.call$2(value, _this.$index(receiver, i));
        if ($length !== _this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, H.intTypeCheck(count), null, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
    },
    take$1: function(receiver, count) {
      return H.SubListIterable$(receiver, 0, H.intTypeCheck(count), H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
    },
    toList$1$growable: function(receiver, growable) {
      var result, t2, i, _this = this,
        t1 = H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0);
      if (H.boolTypeCheck(growable)) {
        result = H.setRuntimeTypeInfo([], [t1]);
        C.JSArray_methods.set$length(result, _this.get$length(receiver));
      } else {
        t2 = _this.get$length(receiver);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = new Array(t2);
        t2.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t2, [t1]);
      }
      i = 0;
      while (true) {
        t1 = _this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        C.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0));
      t1 = _this.get$length(receiver);
      _this.set$length(receiver, J.$add$ansx(t1, 1));
      _this.$indexSet(receiver, t1, element);
    },
    addAll$1: function(receiver, iterable) {
      var i, t1, element, i0, _this = this;
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)], "$asIterable");
      i = _this.get$length(receiver);
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0(); i = i0) {
        element = t1.get$current();
        if (typeof i !== "number")
          return i.$add();
        i0 = i + 1;
        _this.set$length(receiver, i0);
        _this.$indexSet(receiver, i, element);
      }
    },
    _closeGap$2: function(receiver, start, end) {
      var $length, size, i, _this = this;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      $length = _this.get$length(receiver);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      size = end - start;
      if (typeof $length !== "number")
        return H.iae($length);
      i = end;
      for (; i < $length; ++i)
        _this.$indexSet(receiver, i - size, _this.$index(receiver, i));
      _this.set$length(receiver, $length - size);
    },
    clear$0: function(receiver) {
      this.set$length(receiver, 0);
    },
    cast$1$0: function(receiver, $R) {
      return P.List_castFrom(receiver, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0), $R);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    removeLast$0: function(receiver) {
      var result, _this = this;
      if (J.$eq$(_this.get$length(receiver), 0))
        throw H.wrapException(H.IterableElementError_noElement());
      result = _this.$index(receiver, J.$sub$n(_this.get$length(receiver), 1));
      _this.set$length(receiver, J.$sub$n(_this.get$length(receiver), 1));
      return result;
    },
    sort$1: function(receiver, compare) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      H.Sort_sort(receiver, compare == null ? P.collection_ListMixin__compareAny$closure() : compare, t1);
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    $add: function(receiver, other) {
      var result, _this = this,
        t1 = [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)];
      H.assertSubtype(other, "$isList", t1, "$asList");
      result = H.setRuntimeTypeInfo([], t1);
      C.JSArray_methods.set$length(result, J.$add$ansx(_this.get$length(receiver), J.get$length$asx(other)));
      C.JSArray_methods.setRange$3(result, 0, _this.get$length(receiver), receiver);
      C.JSArray_methods.setRange$3(result, _this.get$length(receiver), result.length, other);
      return result;
    },
    sublist$2: function(receiver, start, end) {
      var listLength, $length, result, i;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      listLength = this.get$length(receiver);
      if (end == null)
        end = listLength;
      P.RangeError_checkValidRange(start, end, listLength);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, $length);
      for (i = 0; i < $length; ++i)
        C.JSArray_methods.$indexSet(result, i, this.$index(receiver, start + i));
      return result;
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    fillRange$3: function(receiver, start, end, fill) {
      var i;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtypeOfRuntimeType(fill, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        this.$indexSet(receiver, i, fill);
        ++i;
      }
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var t1, $length, otherStart, otherList, t2, i, _this = this;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      t1 = H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0);
      H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
      H.intTypeCheck(skipCount);
      P.RangeError_checkValidRange(start, end, _this.get$length(receiver));
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      if (H.checkSubtype(iterable, "$isList", [t1], "$asList")) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.toList$1$growable$ax(J.skip$1$ax(iterable, skipCount), false);
        otherStart = 0;
      }
      if (typeof otherStart !== "number")
        return otherStart.$add();
      t1 = J.getInterceptor$asx(otherList);
      t2 = t1.get$length(otherList);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (otherStart + $length > t2)
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          _this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          _this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    replaceRange$3: function(receiver, start, end, newContents) {
      var t1, removeLength, insertLength, insertEnd, newLength, _this = this;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(newContents, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)], "$asIterable");
      P.RangeError_checkValidRange(start, end, _this.get$length(receiver));
      t1 = J.getInterceptor$(newContents);
      if (!t1.$isEfficientLengthIterable)
        newContents = t1.toList$0(newContents);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      removeLength = end - start;
      insertLength = J.get$length$asx(newContents);
      if (typeof insertLength !== "number")
        return H.iae(insertLength);
      insertEnd = start + insertLength;
      if (removeLength >= insertLength) {
        _this.setRange$3(receiver, start, insertEnd, newContents);
        if (removeLength > insertLength)
          _this._closeGap$2(receiver, insertEnd, end);
      } else {
        newLength = J.$add$ansx(_this.get$length(receiver), insertLength - removeLength);
        _this.set$length(receiver, newLength);
        _this.setRange$4(receiver, insertEnd, newLength, receiver, end);
        _this.setRange$3(receiver, start, insertEnd, newContents);
      }
    },
    insert$2: function(receiver, index, element) {
      var t1, _this = this;
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0));
      P.ArgumentError_checkNotNull(index, "index");
      P.RangeError_checkValueInInterval(index, 0, _this.get$length(receiver), "index");
      t1 = _this.get$length(receiver);
      if (index == null ? t1 == null : index === t1) {
        _this.add$1(receiver, element);
        return;
      }
      _this.set$length(receiver, J.$add$ansx(_this.get$length(receiver), 1));
      if (typeof index !== "number")
        return index.$add();
      _this.setRange$4(receiver, index + 1, _this.get$length(receiver), receiver, index);
      _this.$indexSet(receiver, index, element);
    },
    removeAt$1: function(receiver, index) {
      var result;
      H.intTypeCheck(index);
      result = this.$index(receiver, index);
      if (typeof index !== "number")
        return index.$add();
      this._closeGap$2(receiver, index, index + 1);
      return result;
    },
    insertAll$2: function(receiver, index, iterable) {
      var t1, insertionLength, _this = this;
      H.intTypeCheck(index);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)], "$asIterable");
      P.RangeError_checkValueInInterval(index, 0, _this.get$length(receiver), "index");
      t1 = J.getInterceptor$(iterable);
      if (!t1.$isEfficientLengthIterable || iterable === receiver)
        iterable = t1.toList$0(iterable);
      t1 = J.getInterceptor$asx(iterable);
      insertionLength = t1.get$length(iterable);
      _this.set$length(receiver, J.$add$ansx(_this.get$length(receiver), insertionLength));
      if (!J.$eq$(t1.get$length(iterable), insertionLength)) {
        _this.set$length(receiver, J.$sub$n(_this.get$length(receiver), insertionLength));
        throw H.wrapException(P.ConcurrentModificationError$(iterable));
      }
      if (typeof index !== "number")
        return index.$add();
      if (typeof insertionLength !== "number")
        return H.iae(insertionLength);
      _this.setRange$4(receiver, index + insertionLength, _this.get$length(receiver), receiver, index);
      _this.setAll$2(receiver, index, iterable);
    },
    setAll$2: function(receiver, index, iterable) {
      var t1, element, index0;
      H.intTypeCheck(index);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)], "$asIterable");
      t1 = J.getInterceptor$(iterable);
      if (!!t1.$isList) {
        t1 = t1.get$length(iterable);
        if (typeof index !== "number")
          return index.$add();
        if (typeof t1 !== "number")
          return H.iae(t1);
        this.setRange$3(receiver, index, index + t1, iterable);
      } else
        for (t1 = t1.get$iterator(iterable); t1.moveNext$0(); index = index0) {
          element = t1.get$current();
          if (typeof index !== "number")
            return index.$add();
          index0 = index + 1;
          this.$indexSet(receiver, index, element);
        }
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t1 = this._box_0;
      if (!t1.first)
        this.result.write$1(", ");
      t1.first = false;
      t1 = this.result;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 10
  };
  P.MapMixin.prototype = {
    cast$2$0: function(_, RK, RV) {
      return P.Map_castFrom(this, H.getRuntimeTypeArgument(this, "MapMixin", 0), H.getRuntimeTypeArgument(this, "MapMixin", 1), RK, RV);
    },
    cast$0: function($receiver) {
      return this.cast$2$0($receiver, null, null);
    },
    forEach$1: function(_, action) {
      var t1, key, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(_this, "MapMixin", 0), H.getRuntimeTypeArgument(_this, "MapMixin", 1)]});
      for (t1 = J.get$iterator$ax(_this.get$keys(_this)); t1.moveNext$0();) {
        key = t1.get$current();
        action.call$2(key, _this.$index(0, key));
      }
    },
    addAll$1: function(_, other) {
      var t1, key;
      H.assertSubtype(other, "$isMap", [H.getRuntimeTypeArgument(this, "MapMixin", 0), H.getRuntimeTypeArgument(this, "MapMixin", 1)], "$asMap");
      for (t1 = J.get$iterator$ax(other.get$keys(other)); t1.moveNext$0();) {
        key = t1.get$current();
        this.$indexSet(0, key, other.$index(0, key));
      }
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(_this, "MapMixin", 0));
      H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getRuntimeTypeArgument(_this, "MapMixin", 1)});
      if (_this.containsKey$1(key))
        return _this.$index(0, key);
      t1 = ifAbsent.call$0();
      _this.$indexSet(0, key, t1);
      return t1;
    },
    map$2$1: function(_, transform, K2, V2) {
      var result, t1, key, entry, _this = this;
      H.functionTypeCheck(transform, {func: 1, ret: [P.MapEntry, K2, V2], args: [H.getRuntimeTypeArgument(_this, "MapMixin", 0), H.getRuntimeTypeArgument(_this, "MapMixin", 1)]});
      result = P.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      for (t1 = J.get$iterator$ax(_this.get$keys(_this)); t1.moveNext$0();) {
        key = t1.get$current();
        entry = transform.call$2(key, _this.$index(0, key));
        result.$indexSet(0, C.JSNull_methods.get$key(entry), entry.get$value());
      }
      return result;
    },
    map$1: function($receiver, transform) {
      return this.map$2$1($receiver, transform, null, null);
    },
    containsKey$1: function(key) {
      return J.contains$1$asx(this.get$keys(this), key);
    },
    get$length: function(_) {
      return J.get$length$asx(this.get$keys(this));
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.get$keys(this));
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this.get$keys(this));
    },
    get$values: function() {
      return P._MapBaseValueIterable$(this, H.getRuntimeTypeArgument(this, "MapMixin", 0), H.getRuntimeTypeArgument(this, "MapMixin", 1));
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  P.UnmodifiableMapBase.prototype = {$is_UnmodifiableMapMixin: 1};
  P._MapBaseValueIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._collection$_map);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._collection$_map);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._collection$_map);
    },
    get$first: function(_) {
      var t1 = this._collection$_map,
        t2 = J.getInterceptor$x(t1);
      return t2.$index(t1, J.get$first$ax(t2.get$keys(t1)));
    },
    get$last: function(_) {
      var t1 = this._collection$_map,
        t2 = J.getInterceptor$x(t1);
      return t2.$index(t1, J.get$last$ax(t2.get$keys(t1)));
    },
    get$iterator: function(_) {
      return P._MapBaseValueIterator$(this._collection$_map, H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    $asEfficientLengthIterable: function($K, $V) {
      return [$V];
    },
    $asIterable: function($K, $V) {
      return [$V];
    }
  };
  P._MapBaseValueIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._keys;
      if (t1.moveNext$0()) {
        _this.set$_collection$_current(J.$index$asx(_this._collection$_map, t1.get$current()));
        return true;
      }
      _this.set$_collection$_current(null);
      return false;
    },
    get$current: function() {
      return this._collection$_current;
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $isIterator: 1,
    $asIterator: function($K, $V) {
      return [$V];
    },
    get$_keys: function() {
      return this._keys;
    }
  };
  P._UnmodifiableMapMixin.prototype = {
    $indexSet: function(_, key, value) {
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(this, "_UnmodifiableMapMixin", 0));
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "_UnmodifiableMapMixin", 1));
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    addAll$1: function(_, other) {
      H.assertSubtype(other, "$isMap", [H.getRuntimeTypeArgument(this, "_UnmodifiableMapMixin", 0), H.getRuntimeTypeArgument(this, "_UnmodifiableMapMixin", 1)], "$asMap");
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    clear$0: function(_) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    remove$1: function(_, key) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    putIfAbsent$2: function(key, ifAbsent) {
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(this, "_UnmodifiableMapMixin", 0));
      H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getRuntimeTypeArgument(this, "_UnmodifiableMapMixin", 1)});
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    $isMap: 1
  };
  P.MapView.prototype = {
    cast$2$0: function(_, RK, RV) {
      return J.cast$2$0$ax(this._collection$_map, RK, RV);
    },
    cast$0: function($receiver) {
      return this.cast$2$0($receiver, null, null);
    },
    $index: function(_, key) {
      return J.$index$asx(this._collection$_map, key);
    },
    $indexSet: function(_, key, value) {
      J.$indexSet$ax(this._collection$_map, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
    },
    addAll$1: function(_, other) {
      J.addAll$1$ax(this._collection$_map, H.assertSubtype(other, "$isMap", this.$ti, "$asMap"));
    },
    clear$0: function(_) {
      J.clear$0$ax(this._collection$_map);
    },
    putIfAbsent$2: function(key, ifAbsent) {
      return this._collection$_map.putIfAbsent$2(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getTypeArgumentByIndex(this, 1)}));
    },
    containsKey$1: function(key) {
      return this._collection$_map.containsKey$1(key);
    },
    forEach$1: function(_, action) {
      J.forEach$1$ax(this._collection$_map, H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]}));
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._collection$_map);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._collection$_map);
    },
    get$length: function(_) {
      return J.get$length$asx(this._collection$_map);
    },
    get$keys: function(_) {
      return J.get$keys$x(this._collection$_map);
    },
    remove$1: function(_, key) {
      return J.remove$1$z(this._collection$_map, key);
    },
    toString$0: function(_) {
      return J.toString$0$(this._collection$_map);
    },
    get$values: function() {
      return this._collection$_map.get$values();
    },
    map$2$1: function(_, transform, K2, V2) {
      return J.map$2$1$ax(this._collection$_map, H.functionTypeCheck(transform, {func: 1, ret: [P.MapEntry, K2, V2], args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]}), K2, V2);
    },
    map$1: function($receiver, transform) {
      return this.map$2$1($receiver, transform, null, null);
    },
    $isMap: 1
  };
  P.UnmodifiableMapView.prototype = {
    cast$2$0: function(_, RK, RV) {
      return P.UnmodifiableMapView$(J.cast$2$0$ax(this._collection$_map, RK, RV), RK, RV);
    },
    cast$0: function($receiver) {
      return this.cast$2$0($receiver, null, null);
    },
    $is_UnmodifiableMapMixin: 1
  };
  P.Queue.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1};
  P._DoubleLink.prototype = {};
  P.DoubleLinkedQueueEntry.prototype = {
    $as_DoubleLink: function($E) {
      return [[P.DoubleLinkedQueueEntry, $E]];
    }
  };
  P._DoubleLinkedQueueEntry.prototype = {};
  P._DoubleLinkedQueueElement.prototype = {};
  P._DoubleLinkedQueueSentinel.prototype = {};
  P.DoubleLinkedQueue.prototype = {$isEfficientLengthIterable: 1, $isQueue: 1};
  P._DoubleLinkedQueueIterator.prototype = {$isIterator: 1};
  P.ListQueue.prototype = {
    ListQueue$1: function(initialCapacity, $E) {
      var t1;
      if (initialCapacity == null || initialCapacity < 8)
        initialCapacity = 8;
      else if (!P.ListQueue__isPowerOf2(initialCapacity))
        initialCapacity = P.ListQueue__nextPowerOf2(initialCapacity);
      if (typeof initialCapacity !== "number")
        return H.iae(initialCapacity);
      t1 = new Array(initialCapacity);
      t1.fixed$length = Array;
      this.set$_table(H.setRuntimeTypeInfo(t1, [$E]));
    },
    cast$1$0: function(_, $R) {
      return P.Queue_castFrom(this, H.getTypeArgumentByIndex(this, 0), $R);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    get$iterator: function(_) {
      return P._ListQueueIterator$(this, H.getTypeArgumentByIndex(this, 0));
    },
    get$isEmpty: function(_) {
      return J.$eq$(this._head, this._tail);
    },
    get$length: function(_) {
      return J.$and$bn(J.$sub$n(this._tail, this._head), J.$sub$n(J.get$length$asx(this._table), 1));
    },
    get$first: function(_) {
      var _this = this;
      if (J.$eq$(_this._head, _this._tail))
        throw H.wrapException(H.IterableElementError_noElement());
      return J.$index$asx(_this._table, _this._head);
    },
    get$last: function(_) {
      var _this = this;
      if (J.$eq$(_this._head, _this._tail))
        throw H.wrapException(H.IterableElementError_noElement());
      return J.$index$asx(_this._table, J.$and$bn(J.$sub$n(_this._tail, 1), J.$sub$n(J.get$length$asx(_this._table), 1)));
    },
    elementAt$1: function(_, index) {
      var _this = this;
      H.intTypeCheck(index);
      P.RangeError_checkValidIndex(index, _this);
      return J.$index$asx(_this._table, J.$and$bn(J.$add$ansx(_this._head, index), J.$sub$n(J.get$length$asx(_this._table), 1)));
    },
    toList$1$growable: function(_, growable) {
      var list, t2, _this = this,
        t1 = _this.$ti;
      if (H.boolTypeCheck(growable)) {
        list = H.setRuntimeTypeInfo([], t1);
        C.JSArray_methods.set$length(list, _this.get$length(_this));
      } else {
        t2 = _this.get$length(_this);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = new Array(t2);
        t2.fixed$length = Array;
        list = H.setRuntimeTypeInfo(t2, t1);
      }
      _this._writeToList$1(list);
      return list;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    clear$0: function(_) {
      var i, t1, _this = this;
      if (!J.$eq$(_this._head, _this._tail)) {
        i = _this._head;
        while (t1 = _this._tail, i == null ? t1 != null : i !== t1) {
          J.$indexSet$ax(_this._table, i, null);
          if (typeof i !== "number")
            return i.$add();
          t1 = J.$sub$n(J.get$length$asx(_this._table), 1);
          if (typeof t1 !== "number")
            return H.iae(t1);
          i = (i + 1 & t1) >>> 0;
        }
        _this._head = _this._tail = 0;
        _this._modificationCount = H.intTypeCheck(J.$add$ansx(_this._modificationCount, 1));
      }
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    addLast$1: function(value) {
      this._add$1(H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0)));
    },
    removeLast$0: function(_) {
      var t1, result, _this = this;
      if (J.$eq$(_this._head, _this._tail))
        throw H.wrapException(H.IterableElementError_noElement());
      _this._modificationCount = H.intTypeCheck(J.$add$ansx(_this._modificationCount, 1));
      t1 = H.intTypeCheck(J.$and$bn(J.$sub$n(_this._tail, 1), J.$sub$n(J.get$length$asx(_this._table), 1)));
      _this._tail = t1;
      result = J.$index$asx(_this._table, t1);
      J.$indexSet$ax(_this._table, _this._tail, null);
      return result;
    },
    _checkModification$1: function(expectedModificationCount) {
      var t1;
      H.intTypeCheck(expectedModificationCount);
      t1 = this._modificationCount;
      if (expectedModificationCount == null ? t1 != null : expectedModificationCount !== t1)
        throw H.wrapException(P.ConcurrentModificationError$(this));
    },
    _add$1: function(element) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      J.$indexSet$ax(_this._table, _this._tail, element);
      t1 = H.intTypeCheck(J.$and$bn(J.$add$ansx(_this._tail, 1), J.$sub$n(J.get$length$asx(_this._table), 1)));
      _this._tail = t1;
      if (J.$eq$(_this._head, t1))
        _this._grow$0();
      _this._modificationCount = H.intTypeCheck(J.$add$ansx(_this._modificationCount, 1));
    },
    _grow$0: function() {
      var newTable, split, _this = this,
        t1 = J.$mul$ns(J.get$length$asx(_this._table), 2);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = new Array(t1);
      t1.fixed$length = Array;
      newTable = H.setRuntimeTypeInfo(t1, _this.$ti);
      split = J.$sub$n(J.get$length$asx(_this._table), _this._head);
      C.JSArray_methods.setRange$4(newTable, 0, split, _this._table, _this._head);
      t1 = _this._head;
      if (typeof split !== "number")
        return split.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      C.JSArray_methods.setRange$4(newTable, split, split + t1, _this._table, 0);
      _this._head = 0;
      _this._tail = H.intTypeCheck(J.get$length$asx(_this._table));
      _this.set$_table(newTable);
    },
    _writeToList$1: function(target) {
      var t1, $length, firstPartSize, t2, _this = this;
      H.assertSubtype(target, "$isList", _this.$ti, "$asList");
      t1 = J.getInterceptor$ax(target);
      if (J.$le$n(_this._head, _this._tail)) {
        $length = J.$sub$n(_this._tail, _this._head);
        t1.setRange$4(target, 0, $length, _this._table, _this._head);
        return $length;
      } else {
        firstPartSize = J.$sub$n(J.get$length$asx(_this._table), _this._head);
        t1.setRange$4(target, 0, firstPartSize, _this._table, _this._head);
        t2 = _this._tail;
        if (typeof firstPartSize !== "number")
          return firstPartSize.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t1.setRange$4(target, firstPartSize, firstPartSize + t2, _this._table, 0);
        return J.$add$ansx(_this._tail, firstPartSize);
      }
    },
    set$_table: function(_table) {
      this._table = H.assertSubtype(_table, "$isList", this.$ti, "$asList");
    },
    $isQueue: 1,
    get$_table: function() {
      return this._table;
    },
    get$_modificationCount: function() {
      return this._modificationCount;
    }
  };
  P._ListQueueIterator.prototype = {
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._queue;
      t1._checkModification$1(_this._modificationCount);
      if (J.$eq$(_this._position, _this._end)) {
        _this.set$_collection$_current(null);
        return false;
      }
      _this.set$_collection$_current(J.$index$asx(t1.get$_table(), _this._position));
      _this._position = H.intTypeCheck(J.$and$bn(J.$add$ansx(_this._position, 1), J.$sub$n(J.get$length$asx(t1.get$_table()), 1)));
      return true;
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1,
    get$_modificationCount: function() {
      return this._modificationCount;
    }
  };
  P.SetMixin.prototype = {
    get$isEmpty: function(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return !J.$eq$(this.get$length(this), 0);
    },
    cast$1$0: function(_, $R) {
      return P.Set_castFrom(this, null, H.getTypeArgumentByIndex(this, 0), $R);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    clear$0: function(_) {
      this.removeAll$1(this.toList$0(0));
    },
    addAll$1: function(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(H.assertSubtype(elements, "$isIterable", [H.getTypeArgumentByIndex(this, 0)], "$asIterable")); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    containsAll$1: function(other) {
      var t1;
      for (t1 = J.get$iterator$ax(H.assertSubtype(other, "$isIterable", [P.Object], "$asIterable")); t1.moveNext$0();)
        if (!this.contains$1(0, t1.get$current()))
          return false;
      return true;
    },
    toList$1$growable: function(_, growable) {
      var result, t2, i, i0, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      if (H.boolTypeCheck(growable)) {
        result = H.setRuntimeTypeInfo([], [t1]);
        C.JSArray_methods.set$length(result, _this.get$length(_this));
      } else {
        t2 = _this.get$length(_this);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = new Array(t2);
        t2.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t2, [t1]);
      }
      for (t1 = _this.get$iterator(_this), i = 0; t1.moveNext$0(); i = i0) {
        i0 = i + 1;
        C.JSArray_methods.$indexSet(result, i, t1.get$current());
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return H.EfficientLengthMappedIterable$(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    where$1: function(_, f) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return H.WhereIterable$(this, H.functionTypeCheck(f, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      var t1, value;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(this, 0)]});
      for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
        value = combine.call$2(value, t1.get$current());
      return value;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    join$1: function(_, separator) {
      var iterator, buffer;
      H.stringTypeCheck(separator);
      iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      buffer = P.StringBuffer$("");
      if (separator == null || separator === "") {
        do
          buffer.write$1(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        buffer.write$1(iterator.get$current());
        for (; iterator.moveNext$0();) {
          buffer.write$1(separator);
          buffer.write$1(iterator.get$current());
        }
      }
      return buffer.toString$0(0);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    take$1: function(_, n) {
      return H.TakeIterable_TakeIterable(this, H.intTypeCheck(n), H.getTypeArgumentByIndex(this, 0));
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, H.intTypeCheck(n), H.getTypeArgumentByIndex(this, 0));
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    get$last: function(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element, _s5_ = "index";
      H.intTypeCheck(index);
      P.ArgumentError_checkNotNull(index, _s5_);
      P.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, _s5_, null, elementIndex));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  P.SetBase.prototype = {$isEfficientLengthIterable: 1, $isSetMixin: 1, $isIterable: 1, $isSet: 1};
  P._SetBase.prototype = {
    cast$1$0: function(_, $R) {
      return P.Set_castFrom(this, this.get$_newSimilarSet(), H.getTypeArgumentByIndex(this, 0), $R);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    get$isEmpty: function(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return !J.$eq$(this.get$length(this), 0);
    },
    clear$0: function(_) {
      this.removeAll$1(this.toList$0(0));
    },
    addAll$1: function(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(H.assertSubtype(elements, "$isIterable", this.$ti, "$asIterable")); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    removeAll$1: function(elements) {
      var t1;
      for (t1 = J.get$iterator$ax(H.assertSubtype(elements, "$isIterable", [P.Object], "$asIterable")); t1.moveNext$0();)
        this.remove$1(0, t1.get$current());
    },
    containsAll$1: function(other) {
      var t1;
      for (t1 = J.get$iterator$ax(H.assertSubtype(other, "$isIterable", [P.Object], "$asIterable")); t1.moveNext$0();)
        if (!this.contains$1(0, t1.get$current()))
          return false;
      return true;
    },
    toList$1$growable: function(_, growable) {
      var result, t2, i, i0, _this = this,
        t1 = _this.$ti;
      if (H.boolTypeCheck(growable)) {
        result = H.setRuntimeTypeInfo([], t1);
        C.JSArray_methods.set$length(result, _this.get$length(_this));
      } else {
        t2 = _this.get$length(_this);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = new Array(t2);
        t2.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t2, t1);
      }
      for (t1 = _this.get$iterator(_this), i = 0; t1.moveNext$0(); i = i0) {
        i0 = i + 1;
        C.JSArray_methods.$indexSet(result, i, t1.get$current());
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return H.EfficientLengthMappedIterable$(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    where$1: function(_, f) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return H.WhereIterable$(this, H.functionTypeCheck(f, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      var t1, value;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(this, 0)]});
      for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
        value = combine.call$2(value, t1.get$current());
      return value;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    join$1: function(_, separator) {
      var iterator, buffer;
      H.stringTypeCheck(separator);
      iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      buffer = P.StringBuffer$("");
      if (separator == null || separator === "") {
        do
          buffer.write$1(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        buffer.write$1(iterator.get$current());
        for (; iterator.moveNext$0();) {
          buffer.write$1(separator);
          buffer.write$1(iterator.get$current());
        }
      }
      return buffer.toString$0(0);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    take$1: function(_, n) {
      return H.TakeIterable_TakeIterable(this, H.intTypeCheck(n), H.getTypeArgumentByIndex(this, 0));
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, H.intTypeCheck(n), H.getTypeArgumentByIndex(this, 0));
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    get$last: function(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element, _s5_ = "index";
      H.intTypeCheck(index);
      P.ArgumentError_checkNotNull(index, _s5_);
      P.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, _s5_, null, elementIndex));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  P._UnmodifiableSet.prototype = {};
  P._SplayTreeNode.prototype = {
    set$left: function(left) {
      this.left = H.assertSubtype(left, "$is_SplayTreeNode", this.$ti, "$as_SplayTreeNode");
    },
    set$right: function(right) {
      this.right = H.assertSubtype(right, "$is_SplayTreeNode", this.$ti, "$as_SplayTreeNode");
    },
    get$key: function(receiver) {
      return this.key;
    },
    get$left: function() {
      return this.left;
    },
    get$right: function() {
      return this.right;
    }
  };
  P._SplayTreeMapNode.prototype = {
    $as_SplayTreeNode: function($K, $V) {
      return [$K];
    }
  };
  P._SplayTree.prototype = {
    _splayMin$1: function(node) {
      var current, left,
        t1 = H.getRuntimeTypeArgument(this, "_SplayTree", 1);
      H.assertSubtypeOfRuntimeType(node, t1);
      for (current = node; current.get$left() != null; current = left) {
        left = H.assertSubtypeOfRuntimeType(current.get$left(), t1);
        current.set$left(left.get$right());
        left.set$right(current);
      }
      return current;
    },
    _splayMax$1: function(node) {
      var current, right,
        t1 = H.getRuntimeTypeArgument(this, "_SplayTree", 1);
      H.assertSubtypeOfRuntimeType(node, t1);
      for (current = node; current.get$right() != null; current = right) {
        right = H.assertSubtypeOfRuntimeType(current.get$right(), t1);
        current.set$right(right.get$left());
        right.set$left(current);
      }
      return current;
    },
    _splay$1: function(key) {
      var current, left, t1, right, left0, comp, tmp, current0, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(_this, "_SplayTree", 0));
      current = _this._root;
      if (current == null)
        return -1;
      left = _this._dummy;
      for (t1 = H.getRuntimeTypeArgument(_this, "_SplayTree", 1), right = left, left0 = right, comp = null; true;) {
        comp = _this._compare$2(J.get$key$x(current), key);
        if (typeof comp !== "number")
          return comp.$gt();
        if (comp > 0) {
          if (current.get$left() == null)
            break;
          comp = _this._compare$2(J.get$key$x(current.get$left()), key);
          if (typeof comp !== "number")
            return comp.$gt();
          if (comp > 0) {
            tmp = current.get$left();
            current.set$left(tmp.right);
            tmp.set$right(current);
            H.assertSubtypeOfRuntimeType(tmp, t1);
            if (tmp.left == null) {
              current = tmp;
              break;
            }
            current = tmp;
          }
          right.set$left(current);
          current0 = H.assertSubtypeOfRuntimeType(current.get$left(), t1);
          right = current;
          current = current0;
        } else {
          if (comp < 0) {
            if (current.get$right() == null)
              break;
            comp = _this._compare$2(J.get$key$x(current.get$right()), key);
            if (typeof comp !== "number")
              return comp.$lt();
            if (comp < 0) {
              tmp = H.assertSubtypeOfRuntimeType(current.get$right(), t1);
              current.set$right(tmp.get$left());
              tmp.set$left(current);
              if (tmp.get$right() == null) {
                current = tmp;
                break;
              }
              current = tmp;
            }
            left0.set$right(current);
            current0 = H.assertSubtypeOfRuntimeType(current.get$right(), t1);
          } else
            break;
          left0 = current;
          current = current0;
        }
      }
      left0.set$right(current.get$left());
      right.set$left(current.get$right());
      current.set$left(left.get$right());
      current.set$right(left.get$left());
      _this.set$_root(current);
      left.set$right(null);
      left.set$left(null);
      _this._splayCount = H.intTypeCheck(J.$add$ansx(_this._splayCount, 1));
      return comp;
    },
    _remove$1: function(key) {
      var result, t1, t2, t3, right, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(_this, "_SplayTree", 0));
      if (_this._root == null)
        return;
      if (_this._splay$1(key) !== 0)
        return;
      result = _this._root;
      _this._count = H.intTypeCheck(J.$sub$n(_this._count, 1));
      t1 = _this._root.get$left();
      t2 = _this._root;
      t3 = H.getRuntimeTypeArgument(_this, "_SplayTree", 1);
      if (t1 == null)
        _this.set$_root(H.assertSubtypeOfRuntimeType(t2.get$right(), t3));
      else {
        right = H.assertSubtypeOfRuntimeType(t2.get$right(), t3);
        _this.set$_root(_this._splayMax$1(H.assertSubtypeOfRuntimeType(_this._root.get$left(), t3)));
        _this._root.set$right(right);
      }
      _this._modificationCount = H.intTypeCheck(J.$add$ansx(_this._modificationCount, 1));
      return result;
    },
    _addNewRoot$2: function(node, comp) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(node, H.getRuntimeTypeArgument(_this, "_SplayTree", 1));
      H.intTypeCheck(comp);
      _this._count = H.intTypeCheck(J.$add$ansx(_this._count, 1));
      _this._modificationCount = H.intTypeCheck(J.$add$ansx(_this._modificationCount, 1));
      t1 = _this._root;
      if (t1 == null) {
        _this.set$_root(node);
        return;
      }
      if (typeof comp !== "number")
        return comp.$lt();
      if (comp < 0) {
        node.set$left(t1);
        node.set$right(_this._root.get$right());
        _this._root.set$right(null);
      } else {
        node.set$right(t1);
        node.set$left(_this._root.get$left());
        _this._root.set$left(null);
      }
      _this.set$_root(node);
    },
    get$_collection$_first: function() {
      var _this = this,
        t1 = _this._root;
      if (t1 == null)
        return;
      _this.set$_root(_this._splayMin$1(t1));
      return _this._root;
    },
    get$_collection$_last: function() {
      var _this = this,
        t1 = _this._root;
      if (t1 == null)
        return;
      _this.set$_root(_this._splayMax$1(t1));
      return _this._root;
    },
    _clear$0: function() {
      var _this = this;
      _this.set$_root(null);
      _this._count = 0;
      _this._modificationCount = H.intTypeCheck(J.$add$ansx(_this._modificationCount, 1));
    },
    _comparator$2: function(arg0, arg1) {
      return this.get$_comparator().call$2(arg0, arg1);
    },
    get$_modificationCount: function() {
      return this._modificationCount;
    },
    get$_splayCount: function() {
      return this._splayCount;
    }
  };
  P._TypeTest.prototype = {};
  P.SplayTreeMap.prototype = {$isMapMixin: 1,
    $as_SplayTree: function($K, $V) {
      return [$K, [P._SplayTreeMapNode, $K, $V]];
    },
    $isMap: 1
  };
  P._SplayTreeIterator.prototype = {
    _SplayTreeIterator$1: function(tree, $K, $T) {
      this._findLeftMostDescendent$1(tree._root);
    },
    get$current: function() {
      var t1 = this._currentNode;
      if (t1 == null)
        return;
      return this._getValue$1(t1);
    },
    _findLeftMostDescendent$1: function(node) {
      var t1, t2;
      H.assertSubtype(node, "$is_SplayTreeNode", [H.getRuntimeTypeArgument(this, "_SplayTreeIterator", 0)], "$as_SplayTreeNode");
      for (t1 = this._workList, t2 = J.getInterceptor$ax(t1); node != null;) {
        t2.add$1(t1, node);
        node = node.left;
      }
    },
    _rebuildWorkList$1: function(currentNode) {
      var t1, _this = this;
      H.assertSubtype(currentNode, "$is_SplayTreeNode", [H.getRuntimeTypeArgument(_this, "_SplayTreeIterator", 0)], "$as_SplayTreeNode");
      J.clear$0$ax(_this._workList);
      t1 = _this._tree;
      if (currentNode == null)
        _this._findLeftMostDescendent$1(t1.get$_root());
      else {
        t1._splay$1(currentNode.key);
        _this._findLeftMostDescendent$1(t1.get$_root().get$right());
      }
    },
    moveNext$0: function() {
      var t2, t3, _this = this,
        t1 = _this._tree;
      if (!J.$eq$(_this._modificationCount, t1.get$_modificationCount()))
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t2 = _this._workList;
      t3 = J.getInterceptor$asx(t2);
      if (t3.get$isEmpty(t2)) {
        _this.set$_currentNode(null);
        return false;
      }
      if (!J.$eq$(t1.get$_splayCount(), _this._splayCount) && _this._currentNode != null)
        _this._rebuildWorkList$1(_this._currentNode);
      _this.set$_currentNode(t3.removeLast$0(t2));
      _this._findLeftMostDescendent$1(_this._currentNode.get$right());
      return true;
    },
    set$_currentNode: function(_currentNode) {
      this._currentNode = H.assertSubtype(_currentNode, "$is_SplayTreeNode", [H.getRuntimeTypeArgument(this, "_SplayTreeIterator", 0)], "$as_SplayTreeNode");
    },
    $isIterator: 1,
    $asIterator: function($K, $T) {
      return [$T];
    },
    get$_modificationCount: function() {
      return this._modificationCount;
    },
    get$_splayCount: function() {
      return this._splayCount;
    }
  };
  P._SplayTreeKeyIterable.prototype = {};
  P._SplayTreeValueIterable.prototype = {
    $asEfficientLengthIterable: function($K, $V) {
      return [$V];
    },
    $asIterable: function($K, $V) {
      return [$V];
    }
  };
  P._SplayTreeKeyIterator.prototype = {
    _getValue$1: function(node) {
      return H.assertSubtype(node, "$is_SplayTreeNode", this.$ti, "$as_SplayTreeNode").key;
    },
    $as_SplayTreeIterator: function($K) {
      return [$K, $K];
    },
    $asIterator: null
  };
  P._SplayTreeValueIterator.prototype = {};
  P._SplayTreeNodeIterator.prototype = {
    $as_SplayTreeIterator: function($K) {
      return [$K, [P._SplayTreeNode, $K]];
    },
    $asIterator: function($K) {
      return [[P._SplayTreeNode, $K]];
    }
  };
  P.SplayTreeSet.prototype = {
    _newSet$1$0: function($T) {
      return P.SplayTreeSet$(new P.SplayTreeSet__newSet_closure(this, $T), this._validKey, $T);
    },
    _newSet$0: function() {
      return this._newSet$1$0(null);
    },
    cast$1$0: function(_, $R) {
      return P.Set_castFrom(this, this.get$_newSet(), H.getTypeArgumentByIndex(this, 0), $R);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    _compare$2: function(e1, e2) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      H.assertSubtypeOfRuntimeType(e1, t1);
      H.assertSubtypeOfRuntimeType(e2, t1);
      return this._comparator.call$2(e1, e2);
    },
    get$iterator: function(_) {
      return P._SplayTreeKeyIterator$(this, H.getTypeArgumentByIndex(this, 0));
    },
    get$length: function(_) {
      return this._count;
    },
    get$isEmpty: function(_) {
      return this._root == null;
    },
    get$isNotEmpty: function(_) {
      return this._root != null;
    },
    get$first: function(_) {
      if (J.$eq$(this._count, 0))
        throw H.wrapException(H.IterableElementError_noElement());
      return J.get$key$x(this.get$_collection$_first());
    },
    get$last: function(_) {
      if (J.$eq$(this._count, 0))
        throw H.wrapException(H.IterableElementError_noElement());
      return J.get$key$x(this.get$_collection$_last());
    },
    contains$1: function(_, element) {
      return this._validKey.call$1(element) && J.$eq$(this._splay$1(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0))), 0);
    },
    add$1: function(_, element) {
      var compare,
        t1 = H.getTypeArgumentByIndex(this, 0);
      H.assertSubtypeOfRuntimeType(element, t1);
      compare = this._splay$1(element);
      if (compare === 0)
        return false;
      this._addNewRoot$2(P._SplayTreeNode$(element, t1), compare);
      return true;
    },
    remove$1: function(_, object) {
      if (!this._validKey.call$1(object))
        return false;
      return this._remove$1(H.assertSubtypeOfRuntimeType(object, H.getTypeArgumentByIndex(this, 0))) != null;
    },
    addAll$1: function(_, elements) {
      var t1, t2, element, compare, _this = this;
      for (t1 = J.get$iterator$ax(H.assertSubtype(elements, "$isIterable", _this.$ti, "$asIterable")), t2 = H.getTypeArgumentByIndex(_this, 0); t1.moveNext$0();) {
        element = t1.get$current();
        compare = _this._splay$1(element);
        if (compare !== 0)
          _this._addNewRoot$2(P._SplayTreeNode$(element, t2), compare);
      }
    },
    removeAll$1: function(elements) {
      var t1, t2, element;
      for (t1 = J.get$iterator$ax(H.assertSubtype(elements, "$isIterable", [P.Object], "$asIterable")), t2 = H.getTypeArgumentByIndex(this, 0); t1.moveNext$0();) {
        element = t1.get$current();
        if (this._validKey.call$1(element))
          this._remove$1(H.assertSubtypeOfRuntimeType(element, t2));
      }
    },
    clear$0: function(_) {
      this._clear$0();
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    set$_root: function(_root) {
      this._root = H.assertSubtype(_root, "$is_SplayTreeNode", this.$ti, "$as_SplayTreeNode");
    },
    $isEfficientLengthIterable: 1,
    $isIterableMixin: 1,
    $isSetMixin: 1,
    $as_SplayTree: function($E) {
      return [$E, [P._SplayTreeNode, $E]];
    },
    $isIterable: 1,
    $isSet: 1,
    _comparator$2: function(arg0, arg1) {
      return this._comparator.call$2(arg0, arg1);
    },
    get$_root: function() {
      return this._root;
    }
  };
  P.SplayTreeSet_closure.prototype = {
    call$1: function(v) {
      return H.checkSubtypeOfRuntimeType(v, this.E);
    },
    $signature: 8
  };
  P.SplayTreeSet__newSet_closure.prototype = {
    call$2: function(a, b) {
      var t2,
        t1 = this.T;
      H.assertSubtypeOfRuntimeType(a, t1);
      H.assertSubtypeOfRuntimeType(b, t1);
      t1 = this.$this;
      t2 = H.getTypeArgumentByIndex(t1, 0);
      return t1._comparator$2(H.subtypeOfRuntimeTypeCast(a, t2), H.subtypeOfRuntimeTypeCast(b, t2));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: function() {
      var t1 = this.T;
      return {func: 1, ret: P.int, args: [t1, t1]};
    }
  };
  P._ListBase_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  P._SetBase_Object_SetMixin.prototype = {$isEfficientLengthIterable: 1, $isSetMixin: 1, $isIterable: 1, $isSet: 1};
  P._SplayTreeMap__SplayTree_MapMixin.prototype = {$isMapMixin: 1,
    $as_SplayTree: function($K, $V) {
      return [$K, [P._SplayTreeMapNode, $K, $V]];
    },
    $isMap: 1
  };
  P._SplayTreeSet__SplayTree_IterableMixin.prototype = {$isIterableMixin: 1,
    $as_SplayTree: function($E) {
      return [$E, [P._SplayTreeNode, $E]];
    },
    $isIterable: 1
  };
  P._SplayTreeSet__SplayTree_IterableMixin_SetMixin.prototype = {$isEfficientLengthIterable: 1, $isIterableMixin: 1, $isSetMixin: 1,
    $as_SplayTree: function($E) {
      return [$E, [P._SplayTreeNode, $E]];
    },
    $isIterable: 1,
    $isSet: 1
  };
  P._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {$is_UnmodifiableMapMixin: 1};
  P._convertJsonToDart_walk.prototype = {
    call$1: function(e) {
      var t1, i, map, processed, keys, t2, t3, key, _this = this;
      if (e == null || typeof e != "object")
        return e;
      if (Object.getPrototypeOf(e) === Array.prototype) {
        for (t1 = _this.reviver, i = 0; i < e.length; ++i)
          e[i] = t1.call$2(i, _this.call$1(e[i]));
        return e;
      }
      map = P._JsonMap$(e);
      processed = map._processed;
      keys = map._computeKeys$0();
      t1 = J.getInterceptor$asx(keys);
      t2 = _this.reviver;
      i = 0;
      while (true) {
        t3 = t1.get$length(keys);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        key = t1.$index(keys, i);
        processed[key] = t2.call$2(key, _this.call$1(e[key]));
        ++i;
      }
      map._original = processed;
      return map;
    },
    $signature: 2
  };
  P._JsonMap.prototype = {
    $index: function(_, key) {
      var result, _this = this;
      if (_this.get$_isUpgraded())
        return J.$index$asx(_this.get$_upgradedMap(), key);
      else if (typeof key !== "string")
        return;
      else {
        result = P._JsonMap__getProperty(_this._processed, key);
        return P._JsonMap__isUnprocessed(result) ? _this._process$1(key) : result;
      }
    },
    get$length: function(_) {
      return this.get$_isUpgraded() ? J.get$length$asx(this.get$_upgradedMap()) : J.get$length$asx(this._computeKeys$0());
    },
    get$isEmpty: function(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return J.$gt$n(this.get$length(this), 0);
    },
    get$keys: function(_) {
      if (this.get$_isUpgraded())
        return J.get$keys$x(this.get$_upgradedMap());
      return P._JsonMapKeyIterable$(this);
    },
    get$values: function() {
      var _this = this;
      if (_this.get$_isUpgraded())
        return _this.get$_upgradedMap().get$values();
      return H.MappedIterable_MappedIterable(_this._computeKeys$0(), new P._JsonMap_values_closure(_this), P.String, null);
    },
    $indexSet: function(_, key, value) {
      var processed, original, _this = this;
      H.stringTypeCheck(key);
      if (_this.get$_isUpgraded())
        J.$indexSet$ax(_this.get$_upgradedMap(), key, value);
      else if (_this.containsKey$1(key)) {
        processed = _this._processed;
        P._JsonMap__setProperty(processed, key, value);
        original = _this._original;
        if (original == null ? processed != null : original !== processed)
          P._JsonMap__setProperty(original, key, null);
      } else
        J.$indexSet$ax(_this._upgrade$0(), key, value);
    },
    addAll$1: function(_, other) {
      H.assertSubtype(other, "$isMap", [P.String, null], "$asMap").forEach$1(0, new P._JsonMap_addAll_closure(this));
    },
    containsKey$1: function(key) {
      if (this.get$_isUpgraded())
        return this.get$_upgradedMap().containsKey$1(key);
      if (typeof key !== "string")
        return false;
      return P._JsonMap__hasProperty(this._original, key);
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var value;
      H.stringTypeCheck(key);
      H.functionTypeCheck(ifAbsent, {func: 1});
      if (this.containsKey$1(key))
        return this.$index(0, key);
      value = ifAbsent.call$0();
      this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      if (!this.get$_isUpgraded() && !this.containsKey$1(key))
        return;
      return J.remove$1$z(this._upgrade$0(), key);
    },
    clear$0: function(_) {
      var t1, _this = this;
      if (_this.get$_isUpgraded())
        J.clear$0$ax(_this.get$_upgradedMap());
      else {
        t1 = _this._data;
        if (t1 != null)
          J.clear$0$ax(t1);
        _this._original = _this._processed = null;
        _this._data = P.LinkedHashMap__makeEmpty();
      }
    },
    forEach$1: function(_, f) {
      var keys, t1, i, t2, key, value, _this = this;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      if (_this.get$_isUpgraded())
        return J.forEach$1$ax(_this.get$_upgradedMap(), f);
      keys = _this._computeKeys$0();
      t1 = J.getInterceptor$asx(keys);
      i = 0;
      while (true) {
        t2 = t1.get$length(keys);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        key = t1.$index(keys, i);
        value = P._JsonMap__getProperty(_this._processed, key);
        if (P._JsonMap__isUnprocessed(value)) {
          value = P._convertJsonToDartLazy(P._JsonMap__getProperty(_this._original, key));
          P._JsonMap__setProperty(_this._processed, key, value);
        }
        f.call$2(key, value);
        if (keys !== _this._data)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        ++i;
      }
    },
    get$_isUpgraded: function() {
      return this._processed == null;
    },
    get$_upgradedMap: function() {
      return this._data;
    },
    _computeKeys$0: function() {
      var t1,
        keys = H.listTypeCheck(this._data);
      if (keys == null) {
        t1 = P.String;
        keys = this._data = H.setRuntimeTypeInfo(J.JSArray_JSArray$typed(P._JsonMap__getPropertyNames(this._original), t1), [t1]);
      }
      return keys;
    },
    _upgrade$0: function() {
      var result, keys, t1, i, t2, key, _this = this;
      if (_this.get$_isUpgraded())
        return _this.get$_upgradedMap();
      result = P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
      keys = _this._computeKeys$0();
      t1 = J.getInterceptor$asx(keys);
      i = 0;
      while (true) {
        t2 = t1.get$length(keys);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        key = t1.$index(keys, i);
        result.$indexSet(0, key, _this.$index(0, key));
        ++i;
      }
      if (t1.get$isEmpty(keys))
        t1.add$1(keys, null);
      else
        t1.clear$0(keys);
      _this._original = _this._processed = null;
      return _this._data = result;
    },
    _process$1: function(key) {
      var result;
      H.stringTypeCheck(key);
      if (!P._JsonMap__hasProperty(this._original, key))
        return;
      result = P._convertJsonToDartLazy(P._JsonMap__getProperty(this._original, key));
      return P._JsonMap__setProperty(this._processed, key, result);
    },
    $asMapBase: function() {
      return [P.String, null];
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $asMap: function() {
      return [P.String, null];
    }
  };
  P._JsonMap_values_closure.prototype = {
    call$1: function(each) {
      return J.$index$asx(this.$this, each);
    },
    $signature: 2
  };
  P._JsonMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      J.$indexSet$ax(this.$this, H.stringTypeCheck(key), value);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 17
  };
  P._JsonMapKeyIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._parent);
    },
    elementAt$1: function(_, index) {
      var t1;
      H.intTypeCheck(index);
      t1 = this._parent;
      return t1.get$_isUpgraded() ? J.elementAt$1$ax(J.get$keys$x(t1), index) : J.$index$asx(t1._computeKeys$0(), index);
    },
    get$iterator: function(_) {
      var t1 = this._parent;
      return t1.get$_isUpgraded() ? J.get$iterator$ax(J.get$keys$x(t1)) : J.get$iterator$ax(t1._computeKeys$0());
    },
    contains$1: function(_, key) {
      return this._parent.containsKey$1(key);
    },
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asListIterable: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    }
  };
  P._JsonDecoderSink.prototype = {
    $asChunkedConversionSink: function() {
      return [P.String];
    },
    $as_StringSinkConversionSink: function() {
      return [P.StringSink];
    },
    $asSink: function() {
      return [P.String];
    }
  };
  P.AsciiCodec.prototype = {
    get$name: function(_) {
      return "us-ascii";
    },
    encode$1: function(source) {
      H.stringTypeCheck(source);
      return this.get$encoder().convert$1(source);
    },
    decode$1: function(bytes) {
      var t1;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      t1 = C.AsciiDecoder_false_127.convert$1(bytes);
      return t1;
    },
    get$encoder: function() {
      return C.AsciiEncoder_127;
    },
    get$decoder: function() {
      return C.AsciiDecoder_false_127;
    }
  };
  P._UnicodeSubsetEncoder.prototype = {
    convert$1: function(string) {
      var end, $length, result, t1, t2, t3, i, codeUnit, t4;
      H.stringTypeCheck(string);
      end = P.RangeError_checkValidRange(0, null, string.length);
      if (typeof end !== "number")
        return end.$sub();
      $length = end - 0;
      result = H.NativeUint8List_NativeUint8List($length);
      for (t1 = this._subsetMask, t2 = J.getInterceptor$i(t1), t3 = J.getInterceptor$s(string), i = 0; i < $length; ++i) {
        codeUnit = t3._codeUnitAt$1(string, i);
        t4 = t2.$not(t1);
        if (typeof codeUnit !== "number")
          return codeUnit.$and();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if ((codeUnit & t4) >>> 0 !== 0)
          throw H.wrapException(P.ArgumentError$value(string, "string", "Contains invalid characters."));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = codeUnit;
      }
      return result;
    },
    $asStreamTransformer: function() {
      return [P.String, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.String, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P.AsciiEncoder.prototype = {};
  P._UnicodeSubsetEncoderSink.prototype = {};
  P._UnicodeSubsetDecoder.prototype = {
    convert$1: function(bytes) {
      var t1, byteCount, t2, t3, i, byte, t4;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      t1 = J.getInterceptor$asx(bytes);
      byteCount = t1.get$length(bytes);
      P.RangeError_checkValidRange(0, null, byteCount);
      if (typeof byteCount !== "number")
        return H.iae(byteCount);
      t2 = this._subsetMask;
      t3 = J.getInterceptor$i(t2);
      i = 0;
      for (; i < byteCount; ++i) {
        byte = t1.$index(bytes, i);
        t4 = t3.$not(t2);
        if (typeof byte !== "number")
          return byte.$and();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if ((byte & t4) >>> 0 !== 0) {
          if (!this._allowInvalid)
            throw H.wrapException(P.FormatException$("Invalid value in input: " + byte, null, null));
          return this._convertInvalid$3(bytes, 0, byteCount);
        }
      }
      return P.String_String$fromCharCodes(bytes, 0, byteCount);
    },
    _convertInvalid$3: function(bytes, start, end) {
      var buffer, t1, t2, t3, i, value, t4;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      buffer = P.StringBuffer$("");
      t1 = this._subsetMask;
      t2 = J.getInterceptor$i(t1);
      t3 = J.getInterceptor$asx(bytes);
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        value = t3.$index(bytes, i);
        t4 = t2.$not(t1);
        if (typeof value !== "number")
          return value.$and();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if ((value & t4) >>> 0 !== 0)
          value = 65533;
        buffer.writeCharCode$1(value);
        ++i;
      }
      return buffer.toString$0(0);
    },
    $asStreamTransformer: function() {
      return [[P.List, P.int], P.String];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], P.String];
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P.AsciiDecoder.prototype = {};
  P._ErrorHandlingAsciiDecoderSink.prototype = {};
  P._SimpleAsciiDecoderSink.prototype = {};
  P.Base64Codec.prototype = {
    get$encoder: function() {
      return this._encoder;
    },
    get$decoder: function() {
      return C.C_Base64Decoder;
    },
    normalize$3: function(source, start, end) {
      var inverseAlphabet, t1, t2, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, char0, value, t3, endLength, $length,
        _s31_ = "Invalid base64 encoding length ";
      H.stringTypeCheck(source);
      H.intTypeCheck(start);
      end = P.RangeError_checkValidRange(start, H.intTypeCheck(end), source.length);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      t1 = J.getInterceptor$asx(inverseAlphabet);
      t2 = J.getInterceptor$asx(source);
      i = start;
      sliceStart = i;
      buffer = null;
      firstPadding = -1;
      firstPaddingSourceIndex = -1;
      paddingCount = 0;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        c$0: {
          i0 = i + 1;
          char = t2.codeUnitAt$1(source, i);
          if (char === 37) {
            i1 = i0 + 2;
            if (i1 <= end) {
              char0 = H.parseHexByte(source, i0);
              if (char0 === 37)
                char0 = -1;
              i0 = i1;
            } else
              char0 = -1;
          } else
            char0 = char;
          if (typeof char0 !== "number")
            return H.iae(char0);
          if (0 <= char0 && char0 <= 127) {
            value = t1.$index(inverseAlphabet, char0);
            if (typeof value !== "number")
              return value.$ge();
            if (value >= 0) {
              char0 = C.JSString_methods.codeUnitAt$1("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", value);
              if (char0 == char)
                break c$0;
              char = char0;
            } else {
              if (value === -1) {
                if (typeof firstPadding !== "number")
                  return firstPadding.$lt();
                if (firstPadding < 0) {
                  t3 = buffer == null ? null : buffer.get$length(buffer);
                  if (t3 == null)
                    t3 = 0;
                  if (typeof sliceStart !== "number")
                    return H.iae(sliceStart);
                  firstPadding = J.$add$ansx(t3, i - sliceStart);
                  firstPaddingSourceIndex = i;
                }
                ++paddingCount;
                if (char === 61)
                  break c$0;
              }
              char = char0;
            }
            if (value !== -2) {
              if (buffer == null)
                buffer = P.StringBuffer$("");
              buffer.write$1(C.JSString_methods.substring$2(source, sliceStart, i));
              buffer.writeCharCode$1(char);
              sliceStart = i0;
              break c$0;
            }
          }
          throw H.wrapException(P.FormatException$("Invalid base64 data", source, i));
        }
        i = i0;
      }
      if (buffer != null) {
        buffer.write$1(t2.substring$2(source, sliceStart, end));
        if (typeof firstPadding !== "number")
          return firstPadding.$ge();
        if (firstPadding >= 0)
          P.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, buffer.get$length(buffer));
        else {
          endLength = J.$add$ansx(J.$mod$n(J.$sub$n(buffer.get$length(buffer), 1), 4), 1);
          if (endLength === 1)
            throw H.wrapException(P.FormatException$(_s31_, source, end));
          while (true) {
            if (typeof endLength !== "number")
              return endLength.$lt();
            if (!(endLength < 4))
              break;
            buffer.write$1("=");
            ++endLength;
          }
        }
        return C.JSString_methods.replaceRange$3(source, start, end, buffer.toString$0(0));
      }
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if (typeof firstPadding !== "number")
        return firstPadding.$ge();
      if (firstPadding >= 0)
        P.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = C.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw H.wrapException(P.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = t2.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    },
    $asCodec: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P.Base64Encoder.prototype = {
    convert$1: function(input) {
      var t1;
      H.assertSubtype(input, "$isList", [P.int], "$asList");
      t1 = J.getInterceptor$asx(input);
      if (t1.get$isEmpty(input))
        return "";
      return P.String_String$fromCharCodes(P._Base64Encoder$(this._urlSafe).encode$4(input, 0, t1.get$length(input), true), 0, null);
    },
    $asStreamTransformer: function() {
      return [[P.List, P.int], P.String];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], P.String];
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P._Base64Encoder.prototype = {
    createBuffer$1: function(bufferLength) {
      return H.NativeUint8List_NativeUint8List(H.intTypeCheck(bufferLength));
    },
    encode$4: function(bytes, start, end, isLast) {
      var count, byteCount, fullChunks, bufferLength, output, _this = this;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.boolTypeCheck(isLast);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      count = P._Base64Encoder__stateCount(_this._convert$_state);
      if (typeof count !== "number")
        return count.$add();
      byteCount = count + (end - start);
      fullChunks = C.JSInt_methods._tdivFast$1(byteCount, 3);
      bufferLength = fullChunks * 4;
      if (isLast && byteCount - fullChunks * 3 > 0)
        bufferLength += 4;
      output = _this.createBuffer$1(bufferLength);
      _this._convert$_state = H.intTypeCheck(P._Base64Encoder_encodeChunk(_this._alphabet, bytes, start, end, isLast, output, 0, _this._convert$_state));
      if (bufferLength > 0)
        return output;
      return;
    }
  };
  P._BufferCachingBase64Encoder.prototype = {};
  P._Base64EncoderSink.prototype = {};
  P._AsciiBase64EncoderSink.prototype = {};
  P._Utf8Base64EncoderSink.prototype = {};
  P.Base64Decoder.prototype = {
    convert$1: function(input) {
      var end, decoder, buffer;
      H.stringTypeCheck(input);
      end = P.RangeError_checkValidRange(0, null, input.length);
      if (0 === end)
        return H.NativeUint8List_NativeUint8List(0);
      decoder = P._Base64Decoder$();
      buffer = decoder.decode$3(input, 0, end);
      decoder.close$2(0, input, end);
      return buffer;
    },
    $asStreamTransformer: function() {
      return [P.String, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.String, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P._Base64Decoder.prototype = {
    decode$3: function(input, start, end) {
      var buffer, _this = this;
      H.stringTypeCheck(input);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (P._Base64Decoder__hasSeenPadding(_this._convert$_state)) {
        _this._convert$_state = H.intTypeCheck(P._Base64Decoder__checkPadding(input, start, end, _this._convert$_state));
        return;
      }
      if (start == end)
        return H.NativeUint8List_NativeUint8List(0);
      buffer = P._Base64Decoder__allocateBuffer(input, start, end, _this._convert$_state);
      _this._convert$_state = H.intTypeCheck(P._Base64Decoder_decodeChunk(input, start, end, buffer, 0, _this._convert$_state));
      return buffer;
    },
    close$2: function(_, input, end) {
      H.stringTypeCheck(input);
      H.intTypeCheck(end);
      if (J.$lt$n(this._convert$_state, P._Base64Decoder__encodePaddingState(0)))
        throw H.wrapException(P.FormatException$("Missing padding character", input, end));
      if (J.$gt$n(this._convert$_state, 0))
        throw H.wrapException(P.FormatException$("Invalid length, must be multiple of four", input, end));
      this._convert$_state = H.intTypeCheck(P._Base64Decoder__encodePaddingState(0));
    }
  };
  P._Base64DecoderSink.prototype = {};
  P.ByteConversionSink.prototype = {
    $asChunkedConversionSink: function() {
      return [[P.List, P.int]];
    },
    $asSink: function() {
      return [[P.List, P.int]];
    }
  };
  P.ByteConversionSinkBase.prototype = {};
  P._ByteAdapterSink.prototype = {};
  P._ByteCallbackSink.prototype = {
    add$1: function(_, chunk) {
      var freeCount, t1, oldLength, grown, t2, t3, _this = this;
      H.assertSubtype(chunk, "$isIterable", [P.int], "$asIterable");
      freeCount = J.$sub$n(J.get$length$asx(_this._buffer), _this._bufferIndex);
      t1 = J.getInterceptor$asx(chunk);
      if (J.$gt$n(t1.get$length(chunk), freeCount)) {
        oldLength = J.get$length$asx(_this._buffer);
        grown = H.NativeUint8List_NativeUint8List(J.$mul$ns(P._ByteCallbackSink__roundToPowerOf2(J.$add$ansx(t1.get$length(chunk), oldLength)), 2));
        (grown && C.NativeUint8List_methods).setRange$3(grown, 0, J.get$length$asx(_this._buffer), _this._buffer);
        _this.set$_buffer(grown);
      }
      t2 = _this._buffer;
      t3 = _this._bufferIndex;
      J.setRange$3$ax(t2, t3, J.$add$ansx(t3, t1.get$length(chunk)), chunk);
      _this._bufferIndex = H.intTypeCheck(J.$add$ansx(_this._bufferIndex, t1.get$length(chunk)));
    },
    close$0: function(_) {
      this._callback.call$1(J.sublist$2$ax(this._buffer, 0, this._bufferIndex));
    },
    set$_buffer: function(_buffer) {
      this._buffer = H.assertSubtype(_buffer, "$isList", [P.int], "$asList");
    }
  };
  P.ChunkedConversionSink.prototype = {$isSink: 1};
  P._SimpleCallbackSink.prototype = {};
  P._ConverterStreamEventSink.prototype = {$isEventSink: 1,
    $asEventSink: function($S, $T) {
      return [$S];
    },
    $isSink: 1,
    $asSink: function($S, $T) {
      return [$S];
    }
  };
  P.Codec.prototype = {
    encode$1: function(input) {
      H.assertSubtypeOfRuntimeType(input, H.getRuntimeTypeArgument(this, "Codec", 0));
      return this.get$encoder().convert$1(input);
    },
    decode$1: function(encoded) {
      H.assertSubtypeOfRuntimeType(encoded, H.getRuntimeTypeArgument(this, "Codec", 1));
      return this.get$decoder().convert$1(encoded);
    }
  };
  P._FusedCodec.prototype = {
    $asCodec: function($S, $M, $T) {
      return [$S, $T];
    }
  };
  P._InvertedCodec.prototype = {};
  P.Converter.prototype = {};
  P._FusedConverter.prototype = {
    $asStreamTransformer: function($S, $M, $T) {
      return [$S, $T];
    },
    $asStreamTransformerBase: function($S, $M, $T) {
      return [$S, $T];
    },
    $asConverter: function($S, $M, $T) {
      return [$S, $T];
    }
  };
  P.Encoding.prototype = {
    $asCodec: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P.HtmlEscapeMode.prototype = {};
  P.HtmlEscape.prototype = {
    $asStreamTransformer: function() {
      return [P.String, P.String];
    },
    $asStreamTransformerBase: function() {
      return [P.String, P.String];
    },
    $asConverter: function() {
      return [P.String, P.String];
    }
  };
  P._HtmlEscapeSink.prototype = {};
  P.JsonUnsupportedObjectError.prototype = {
    toString$0: function(_) {
      var safeString = P.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + H.S(safeString);
    }
  };
  P.JsonCyclicError.prototype = {
    toString$0: function(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  P.JsonCodec.prototype = {
    decode$2$reviver: function(source, reviver) {
      H.stringTypeCheck(source);
      H.functionTypeCheck(reviver, {func: 1, args: [P.Object, P.Object]});
      if (reviver == null)
        reviver = this._reviver;
      if (reviver == null)
        return this.get$decoder().convert$1(source);
      return P.JsonDecoder$(reviver).convert$1(source);
    },
    encode$2$toEncodable: function(value, toEncodable) {
      H.functionTypeCheck(toEncodable, {func: 1, args: [,]});
      if (toEncodable == null)
        toEncodable = this._toEncodable;
      if (toEncodable == null)
        return this.get$encoder().convert$1(value);
      return P.JsonEncoder$(toEncodable).convert$1(value);
    },
    encode$1: function(value) {
      return this.encode$2$toEncodable(value, null);
    },
    get$encoder: function() {
      var t1 = this._toEncodable;
      if (t1 == null)
        return C.JsonEncoder_null_null;
      return P.JsonEncoder$(t1);
    },
    get$decoder: function() {
      var t1 = this._reviver;
      if (t1 == null)
        return C.JsonDecoder_null;
      return P.JsonDecoder$(t1);
    },
    $asCodec: function() {
      return [P.Object, P.String];
    }
  };
  P.JsonEncoder.prototype = {
    convert$1: function(object) {
      return P._JsonStringStringifier_stringify(object, this._toEncodable, this.indent);
    },
    $asStreamTransformer: function() {
      return [P.Object, P.String];
    },
    $asStreamTransformerBase: function() {
      return [P.Object, P.String];
    },
    $asConverter: function() {
      return [P.Object, P.String];
    }
  };
  P.JsonUtf8Encoder.prototype = {
    $asStreamTransformer: function() {
      return [P.Object, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.Object, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.Object, [P.List, P.int]];
    }
  };
  P._JsonEncoderSink.prototype = {
    $asChunkedConversionSink: function() {
      return [P.Object];
    },
    $asSink: function() {
      return [P.Object];
    }
  };
  P._JsonUtf8EncoderSink.prototype = {
    $asChunkedConversionSink: function() {
      return [P.Object];
    },
    $asSink: function() {
      return [P.Object];
    }
  };
  P.JsonDecoder.prototype = {
    convert$1: function(input) {
      return P._parseJson(H.stringTypeCheck(input), this._reviver);
    },
    $asStreamTransformer: function() {
      return [P.String, P.Object];
    },
    $asStreamTransformerBase: function() {
      return [P.String, P.Object];
    },
    $asConverter: function() {
      return [P.String, P.Object];
    }
  };
  P._JsonStringifier.prototype = {
    writeStringContent$1: function(s) {
      var $length, t1, offset, i, charCode, _this = this;
      H.stringTypeCheck(s);
      $length = s.length;
      for (t1 = J.getInterceptor$s(s), offset = 0, i = 0; i < $length; ++i) {
        charCode = t1._codeUnitAt$1(s, i);
        if (typeof charCode !== "number")
          return charCode.$gt();
        if (charCode > 92)
          continue;
        if (charCode < 32) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          switch (charCode) {
            case 8:
              _this.writeCharCode$1(98);
              break;
            case 9:
              _this.writeCharCode$1(116);
              break;
            case 10:
              _this.writeCharCode$1(110);
              break;
            case 12:
              _this.writeCharCode$1(102);
              break;
            case 13:
              _this.writeCharCode$1(114);
              break;
            default:
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(48);
              _this.writeCharCode$1(48);
              _this.writeCharCode$1(P._JsonStringifier_hexDigit(C.JSInt_methods._shrOtherPositive$1(charCode, 4) & 15));
              _this.writeCharCode$1(P._JsonStringifier_hexDigit(charCode & 15));
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          _this.writeCharCode$1(charCode);
        }
      }
      if (offset === 0)
        _this.writeString$1(s);
      else if (offset < $length)
        _this.writeStringSlice$3(s, offset, $length);
    },
    _checkCycle$1: function(object) {
      var t3,
        t1 = this._seen,
        t2 = J.getInterceptor$asx(t1),
        i = 0;
      while (true) {
        t3 = t2.get$length(t1);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        t3 = t2.$index(t1, i);
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(P.JsonCyclicError$(object));
        ++i;
      }
      t2.add$1(t1, object);
    },
    _removeSeen$1: function(object) {
      J.removeLast$0$ax(this._seen);
    },
    writeObject$1: function(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = P.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw H.wrapException(t1);
        }
        _this._removeSeen$1(object);
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw H.wrapException(t1);
      }
    },
    writeJsonValue$1: function(object) {
      var t1, success, _this = this;
      if (typeof object === "number") {
        if (!C.JSNumber_methods.get$isFinite(object))
          return false;
        _this.writeNumber$1(object);
        return true;
      } else if (object === true) {
        _this.writeString$1("true");
        return true;
      } else if (object === false) {
        _this.writeString$1("false");
        return true;
      } else if (object == null) {
        _this.writeString$1("null");
        return true;
      } else if (typeof object === "string") {
        _this.writeString$1('"');
        _this.writeStringContent$1(object);
        _this.writeString$1('"');
        return true;
      } else {
        t1 = J.getInterceptor$(object);
        if (!!t1.$isList) {
          _this._checkCycle$1(object);
          _this.writeList$1(object);
          _this._removeSeen$1(object);
          return true;
        } else if (!!t1.$isMap) {
          _this._checkCycle$1(object);
          success = _this.writeMap$1(object);
          _this._removeSeen$1(object);
          return success;
        } else
          return false;
      }
    },
    writeList$1: function(list) {
      var t1, i, t2, _this = this;
      H.listTypeCheck(list);
      _this.writeString$1("[");
      t1 = J.getInterceptor$asx(list);
      if (t1.get$isNotEmpty(list)) {
        _this.writeObject$1(t1.$index(list, 0));
        i = 1;
        while (true) {
          t2 = t1.get$length(list);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          _this.writeString$1(",");
          _this.writeObject$1(t1.$index(list, i));
          ++i;
        }
      }
      _this.writeString$1("]");
    },
    writeMap$1: function(map) {
      var t1, keyValueList, i, separator, t2, _this = this, _box_0 = {};
      H.interceptedTypeCheck(map, "$isMap");
      if (map.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t1 = J.$mul$ns(map.get$length(map), 2);
      if (typeof t1 !== "number")
        return H.iae(t1);
      keyValueList = new Array(t1);
      keyValueList.fixed$length = Array;
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new P._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{");
      for (t1 = keyValueList.length, separator = '"'; i < t1; i += 2, separator = ',"') {
        _this.writeString$1(separator);
        _this.writeStringContent$1(H.stringTypeCheck(keyValueList[i]));
        _this.writeString$1('":');
        t2 = i + 1;
        if (t2 >= t1)
          return H.ioore(keyValueList, t2);
        _this.writeObject$1(keyValueList[t2]);
      }
      _this.writeString$1("}");
      return true;
    }
  };
  P._JsonStringifier_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2, t3, t4;
      if (typeof key !== "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      t3 = t2.i;
      t2.i = J.$add$ansx(t3, 1);
      t4 = J.getInterceptor$ax(t1);
      t4.$indexSet(t1, t3, key);
      t3 = t2.i;
      t2.i = J.$add$ansx(t3, 1);
      t4.$indexSet(t1, t3, value);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 10
  };
  P._JsonPrettyPrintMixin.prototype = {
    writeList$1: function(list) {
      var t1, t2, i, _this = this;
      H.listTypeCheck(list);
      t1 = J.getInterceptor$asx(list);
      if (t1.get$isEmpty(list))
        _this.writeString$1("[]");
      else {
        _this.writeString$1("[\n");
        t2 = H.intTypeCheck(J.$add$ansx(_this._JsonPrettyPrintMixin__indentLevel, 1));
        _this._JsonPrettyPrintMixin__indentLevel = t2;
        _this.writeIndentation$1(t2);
        _this.writeObject$1(t1.$index(list, 0));
        i = 1;
        while (true) {
          t2 = t1.get$length(list);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          _this.writeString$1(",\n");
          _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
          _this.writeObject$1(t1.$index(list, i));
          ++i;
        }
        _this.writeString$1("\n");
        t1 = H.intTypeCheck(J.$sub$n(_this._JsonPrettyPrintMixin__indentLevel, 1));
        _this._JsonPrettyPrintMixin__indentLevel = t1;
        _this.writeIndentation$1(t1);
        _this.writeString$1("]");
      }
    },
    writeMap$1: function(map) {
      var t1, keyValueList, i, separator, t2, _this = this, _box_0 = {};
      H.interceptedTypeCheck(map, "$isMap");
      if (map.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t1 = J.$mul$ns(map.get$length(map), 2);
      if (typeof t1 !== "number")
        return H.iae(t1);
      keyValueList = new Array(t1);
      keyValueList.fixed$length = Array;
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new P._JsonPrettyPrintMixin_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{\n");
      _this._JsonPrettyPrintMixin__indentLevel = H.intTypeCheck(J.$add$ansx(_this._JsonPrettyPrintMixin__indentLevel, 1));
      for (t1 = keyValueList.length, separator = ""; i < t1; i += 2, separator = ",\n") {
        _this.writeString$1(separator);
        _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeString$1('"');
        _this.writeStringContent$1(H.stringTypeCheck(keyValueList[i]));
        _this.writeString$1('": ');
        t2 = i + 1;
        if (t2 >= t1)
          return H.ioore(keyValueList, t2);
        _this.writeObject$1(keyValueList[t2]);
      }
      _this.writeString$1("\n");
      t1 = H.intTypeCheck(J.$sub$n(_this._JsonPrettyPrintMixin__indentLevel, 1));
      _this._JsonPrettyPrintMixin__indentLevel = t1;
      _this.writeIndentation$1(t1);
      _this.writeString$1("}");
      return true;
    },
    $is_JsonStringifier: 1
  };
  P._JsonPrettyPrintMixin_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2, t3, t4;
      if (typeof key !== "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      t3 = t2.i;
      t2.i = J.$add$ansx(t3, 1);
      t4 = J.getInterceptor$ax(t1);
      t4.$indexSet(t1, t3, key);
      t3 = t2.i;
      t2.i = J.$add$ansx(t3, 1);
      t4.$indexSet(t1, t3, value);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 10
  };
  P._JsonStringStringifier.prototype = {
    get$_partialResult: function() {
      var t1 = this._sink;
      return t1 instanceof P.StringBuffer ? t1.toString$0(0) : null;
    },
    writeNumber$1: function(number) {
      this._sink.write$1(J.toString$0$(H.numTypeCheck(number)));
    },
    writeString$1: function(string) {
      this._sink.write$1(H.stringTypeCheck(string));
    },
    writeStringSlice$3: function(string, start, end) {
      this._sink.write$1(J.substring$2$s(H.stringTypeCheck(string), H.intTypeCheck(start), H.intTypeCheck(end)));
    },
    writeCharCode$1: function(charCode) {
      this._sink.writeCharCode$1(H.intTypeCheck(charCode));
    }
  };
  P._JsonStringStringifierPretty.prototype = {
    writeIndentation$1: function(count) {
      var t1, i;
      H.intTypeCheck(count);
      if (typeof count !== "number")
        return H.iae(count);
      t1 = this._indent;
      i = 0;
      for (; i < count; ++i)
        this.writeString$1(t1);
    },
    $is_JsonPrettyPrintMixin: 1
  };
  P._JsonUtf8Stringifier.prototype = {};
  P._JsonUtf8StringifierPretty.prototype = {$is_JsonPrettyPrintMixin: 1};
  P.Latin1Codec.prototype = {
    get$name: function(_) {
      return "iso-8859-1";
    },
    encode$1: function(source) {
      H.stringTypeCheck(source);
      return this.get$encoder().convert$1(source);
    },
    decode$1: function(bytes) {
      var t1;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      t1 = C.Latin1Decoder_false_255.convert$1(bytes);
      return t1;
    },
    get$encoder: function() {
      return C.Latin1Encoder_255;
    },
    get$decoder: function() {
      return C.Latin1Decoder_false_255;
    }
  };
  P.Latin1Encoder.prototype = {};
  P.Latin1Decoder.prototype = {};
  P._Latin1DecoderSink.prototype = {};
  P._Latin1AllowInvalidDecoderSink.prototype = {};
  P.LineSplitter.prototype = {
    $asStreamTransformer: function() {
      return [P.String, P.String];
    },
    $asStreamTransformerBase: function() {
      return [P.String, P.String];
    }
  };
  P._LineSplitterSink.prototype = {};
  P._LineSplitterEventSink.prototype = {$isEventSink: 1,
    $asEventSink: function() {
      return [P.String];
    }
  };
  P.StringConversionSink.prototype = {
    $asChunkedConversionSink: function() {
      return [P.String];
    },
    $asSink: function() {
      return [P.String];
    }
  };
  P.ClosableStringSink.prototype = {};
  P._ClosableStringSink.prototype = {$isClosableStringSink: 1, $isStringSink: 1};
  P._StringConversionSinkAsStringSinkAdapter.prototype = {$isClosableStringSink: 1, $isStringSink: 1};
  P.StringConversionSinkBase.prototype = {};
  P.StringConversionSinkMixin.prototype = {$isChunkedConversionSink: 1,
    $asChunkedConversionSink: function() {
      return [P.String];
    },
    $isStringConversionSink: 1,
    $isSink: 1,
    $asSink: function() {
      return [P.String];
    }
  };
  P._StringSinkConversionSink.prototype = {};
  P._StringCallbackSink.prototype = {
    $asChunkedConversionSink: function() {
      return [P.String];
    },
    $as_StringSinkConversionSink: function() {
      return [P.StringBuffer];
    },
    $asSink: function() {
      return [P.String];
    }
  };
  P._StringAdapterSink.prototype = {};
  P._Utf8StringSinkAdapter.prototype = {};
  P._Utf8ConversionSink.prototype = {};
  P.Utf8Codec.prototype = {
    get$name: function(_) {
      return "utf-8";
    },
    decode$1: function(codeUnits) {
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      return P.Utf8Decoder$(false).convert$1(codeUnits);
    },
    get$encoder: function() {
      return C.C_Utf8Encoder;
    },
    get$decoder: function() {
      return P.Utf8Decoder$(false);
    }
  };
  P.Utf8Encoder.prototype = {
    convert$1: function(string) {
      var end, $length, encoder;
      H.stringTypeCheck(string);
      end = P.RangeError_checkValidRange(0, null, string.length);
      if (typeof end !== "number")
        return end.$sub();
      $length = end - 0;
      if ($length === 0)
        return H.NativeUint8List_NativeUint8List(0);
      encoder = P._Utf8Encoder$withBufferSize($length * 3);
      if (encoder._fillBuffer$3(string, 0, end) !== end)
        encoder._writeSurrogate$2(J.codeUnitAt$1$s(string, end - 1), 0);
      return J.sublist$2$ax(encoder._buffer, 0, encoder._bufferIndex);
    },
    $asStreamTransformer: function() {
      return [P.String, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.String, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P._Utf8Encoder.prototype = {
    _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
      var t1, t2, rune, t3, _this = this;
      H.intTypeCheck(leadingSurrogate);
      H.intTypeCheck(nextCodeUnit);
      t1 = _this._buffer;
      t2 = J.getInterceptor$ax(t1);
      if (P._isTailSurrogate(nextCodeUnit)) {
        rune = P._combineSurrogatePair(leadingSurrogate, nextCodeUnit);
        t3 = _this._bufferIndex;
        _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t3, 1));
        if (typeof rune !== "number")
          return rune.$shr();
        t2.$indexSet(t1, t3, (240 | C.JSInt_methods._shrOtherPositive$1(rune, 18)) >>> 0);
        t3 = _this._bufferIndex;
        _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t3, 1));
        t2.$indexSet(t1, t3, 128 | C.JSInt_methods._shrOtherPositive$1(rune, 12) & 63);
        t3 = _this._bufferIndex;
        _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t3, 1));
        t2.$indexSet(t1, t3, 128 | C.JSInt_methods._shrOtherPositive$1(rune, 6) & 63);
        t3 = _this._bufferIndex;
        _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t3, 1));
        t2.$indexSet(t1, t3, 128 | rune & 63);
        return true;
      } else {
        t3 = _this._bufferIndex;
        _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t3, 1));
        if (typeof leadingSurrogate !== "number")
          return leadingSurrogate.$shr();
        t2.$indexSet(t1, t3, (224 | C.JSInt_methods._shrOtherPositive$1(leadingSurrogate, 12)) >>> 0);
        t3 = _this._bufferIndex;
        _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t3, 1));
        t2.$indexSet(t1, t3, 128 | C.JSInt_methods._shrOtherPositive$1(leadingSurrogate, 6) & 63);
        t3 = _this._bufferIndex;
        _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t3, 1));
        t2.$indexSet(t1, t3, 128 | leadingSurrogate & 63);
        return false;
      }
    },
    _fillBuffer$3: function(str, start, end) {
      var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, _this = this;
      H.stringTypeCheck(str);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (start != end) {
        if (typeof end !== "number")
          return end.$sub();
        t1 = P._isLeadSurrogate(J.codeUnitAt$1$s(str, end - 1));
      } else
        t1 = false;
      if (t1) {
        if (typeof end !== "number")
          return end.$sub();
        --end;
      }
      t1 = _this._buffer;
      t2 = J.getInterceptor$asx(t1);
      t3 = J.getInterceptor$s(str);
      stringIndex = start;
      while (true) {
        if (typeof stringIndex !== "number")
          return stringIndex.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(stringIndex < end))
          break;
        codeUnit = t3.codeUnitAt$1(str, stringIndex);
        if (typeof codeUnit !== "number")
          return codeUnit.$le();
        if (codeUnit <= 127) {
          if (J.$ge$n(_this._bufferIndex, t2.get$length(t1)))
            break;
          t4 = _this._bufferIndex;
          _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t4, 1));
          t2.$indexSet(t1, t4, codeUnit);
        } else if (P._isLeadSurrogate(codeUnit)) {
          if (J.$ge$n(J.$add$ansx(_this._bufferIndex, 3), t2.get$length(t1)))
            break;
          stringIndex0 = stringIndex + 1;
          if (_this._writeSurrogate$2(codeUnit, C.JSString_methods.codeUnitAt$1(str, stringIndex0)))
            stringIndex = stringIndex0;
        } else if (codeUnit <= 2047) {
          if (J.$ge$n(J.$add$ansx(_this._bufferIndex, 1), t2.get$length(t1)))
            break;
          t4 = _this._bufferIndex;
          _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t4, 1));
          t2.$indexSet(t1, t4, (192 | C.JSInt_methods._shrOtherPositive$1(codeUnit, 6)) >>> 0);
          t4 = _this._bufferIndex;
          _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t4, 1));
          t2.$indexSet(t1, t4, 128 | codeUnit & 63);
        } else {
          if (J.$ge$n(J.$add$ansx(_this._bufferIndex, 2), t2.get$length(t1)))
            break;
          t4 = _this._bufferIndex;
          _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t4, 1));
          t2.$indexSet(t1, t4, (224 | C.JSInt_methods._shrOtherPositive$1(codeUnit, 12)) >>> 0);
          t4 = _this._bufferIndex;
          _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t4, 1));
          t2.$indexSet(t1, t4, 128 | C.JSInt_methods._shrOtherPositive$1(codeUnit, 6) & 63);
          t4 = _this._bufferIndex;
          _this._bufferIndex = H.intTypeCheck(J.$add$ansx(t4, 1));
          t2.$indexSet(t1, t4, 128 | codeUnit & 63);
        }
        ++stringIndex;
      }
      return stringIndex;
    }
  };
  P._Utf8EncoderSink.prototype = {$isChunkedConversionSink: 1,
    $asChunkedConversionSink: function() {
      return [P.String];
    },
    $isStringConversionSink: 1,
    $isStringConversionSinkMixin: 1,
    $isSink: 1,
    $asSink: function() {
      return [P.String];
    }
  };
  P.Utf8Decoder.prototype = {
    convert$1: function(codeUnits) {
      var t1, result, end, oneBytes, firstPart, buffer, start, isFirstCharacter, decoder;
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      t1 = this._allowMalformed;
      result = P.Utf8Decoder__convertIntercepted(t1, codeUnits, 0, null);
      if (result != null)
        return result;
      end = P.RangeError_checkValidRange(0, null, J.get$length$asx(codeUnits));
      oneBytes = P._scanOneByteCharacters(codeUnits, 0, end);
      if (typeof oneBytes !== "number")
        return oneBytes.$gt();
      if (oneBytes > 0) {
        firstPart = P.String_String$fromCharCodes(codeUnits, 0, oneBytes);
        if (oneBytes === end)
          return firstPart;
        buffer = P.StringBuffer$(firstPart);
        start = oneBytes;
        isFirstCharacter = false;
      } else {
        start = 0;
        buffer = null;
        isFirstCharacter = true;
      }
      if (buffer == null)
        buffer = P.StringBuffer$("");
      decoder = P._Utf8Decoder$(buffer, t1);
      decoder._isFirstCharacter = isFirstCharacter;
      decoder.convert$3(codeUnits, start, end);
      decoder.flush$2(codeUnits, end);
      return buffer.toString$0(0);
    },
    $asStreamTransformer: function() {
      return [[P.List, P.int], P.String];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], P.String];
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P._Utf8Decoder.prototype = {
    get$hasPartialInput: function() {
      return J.$gt$n(this._expectedUnits, 0);
    },
    flush$2: function(source, offset) {
      var _this = this;
      H.assertSubtype(source, "$isList", [P.int], "$asList");
      H.intTypeCheck(offset);
      if (_this.get$hasPartialInput()) {
        if (!_this._allowMalformed)
          throw H.wrapException(P.FormatException$("Unfinished UTF-8 octet sequence", source, offset));
        _this._stringSink.writeCharCode$1(65533);
        _this._extraUnits = _this._expectedUnits = _this._convert$_value = 0;
      }
    },
    convert$3: function(codeUnits, startIndex, endIndex) {
      var value, expectedUnits, extraUnits, t1, t2, t3, i, unit, t4, oneBytes, i0, _this = this,
        _s21_ = "Bad UTF-8 encoding 0x",
        _65533 = 65533;
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      H.intTypeCheck(startIndex);
      H.intTypeCheck(endIndex);
      value = _this._convert$_value;
      expectedUnits = _this._expectedUnits;
      extraUnits = _this._extraUnits;
      _this._extraUnits = _this._expectedUnits = _this._convert$_value = 0;
      $label0$0:
        for (t1 = _this._stringSink, t2 = _this._allowMalformed, t3 = J.getInterceptor$asx(codeUnits), i = startIndex; true; i = i0) {
          $label1$1: {
            if (typeof expectedUnits !== "number")
              return expectedUnits.$gt();
            if (expectedUnits > 0) {
              do {
                if (i == endIndex)
                  break $label0$0;
                unit = t3.$index(codeUnits, i);
                if (typeof unit !== "number")
                  return unit.$and();
                if ((unit & 192) !== 128) {
                  if (!t2)
                    throw H.wrapException(P.FormatException$(_s21_ + H.S(C.JSInt_methods.toRadixString$1(unit, 16)), codeUnits, i));
                  _this._isFirstCharacter = false;
                  t1.writeCharCode$1(_65533);
                  expectedUnits = 0;
                  break $label1$1;
                } else {
                  if (typeof value !== "number")
                    return value.$shl();
                  value = (value << 6 | unit & 63) >>> 0;
                  --expectedUnits;
                  if (typeof i !== "number")
                    return i.$add();
                  ++i;
                }
              } while (expectedUnits > 0);
              if (typeof extraUnits !== "number")
                return extraUnits.$sub();
              t4 = extraUnits - 1;
              if (t4 < 0 || t4 >= 4)
                return H.ioore(C.List_127_2047_65535_1114111, t4);
              t4 = C.List_127_2047_65535_1114111[t4];
              if (typeof t4 !== "number")
                return H.iae(t4);
              if (value <= t4) {
                if (!t2)
                  throw H.wrapException(P.FormatException$("Overlong encoding of 0x" + H.S(C.JSInt_methods.toRadixString$1(value, 16)), codeUnits, i - extraUnits - 1));
                value = _65533;
                expectedUnits = 0;
                extraUnits = 0;
              }
              if (value > 1114111) {
                if (!t2)
                  throw H.wrapException(P.FormatException$("Character outside valid Unicode range: 0x" + H.S(C.JSInt_methods.toRadixString$1(value, 16)), codeUnits, i - extraUnits - 1));
                value = _65533;
              }
              if (!_this._isFirstCharacter || value !== 65279)
                t1.writeCharCode$1(value);
              _this._isFirstCharacter = false;
            }
          }
          while (true) {
            if (typeof i !== "number")
              return i.$lt();
            if (typeof endIndex !== "number")
              return H.iae(endIndex);
            if (!(i < endIndex))
              break;
            oneBytes = P._scanOneByteCharacters(codeUnits, i, endIndex);
            if (typeof oneBytes !== "number")
              return oneBytes.$gt();
            if (oneBytes > 0) {
              _this._isFirstCharacter = false;
              i0 = i + oneBytes;
              t1.write$1(P.String_String$fromCharCodes(codeUnits, i, i0));
              if (i0 === endIndex)
                break;
              i = i0;
            }
            i0 = i + 1;
            unit = t3.$index(codeUnits, i);
            if (typeof unit !== "number")
              return unit.$lt();
            if (unit < 0) {
              if (!t2)
                throw H.wrapException(P.FormatException$("Negative UTF-8 code unit: -0x" + H.S(C.JSInt_methods.toRadixString$1(-unit, 16)), codeUnits, i0 - 1));
              t1.writeCharCode$1(_65533);
            } else {
              if ((unit & 224) === 192) {
                value = unit & 31;
                expectedUnits = 1;
                extraUnits = 1;
                continue $label0$0;
              }
              if ((unit & 240) === 224) {
                value = unit & 15;
                expectedUnits = 2;
                extraUnits = 2;
                continue $label0$0;
              }
              if ((unit & 248) === 240 && unit < 245) {
                value = unit & 7;
                expectedUnits = 3;
                extraUnits = 3;
                continue $label0$0;
              }
              if (!t2)
                throw H.wrapException(P.FormatException$(_s21_ + H.S(C.JSInt_methods.toRadixString$1(unit, 16)), codeUnits, i0 - 1));
              _this._isFirstCharacter = false;
              t1.writeCharCode$1(_65533);
              value = _65533;
              expectedUnits = 0;
              extraUnits = 0;
            }
            i = i0;
          }
          break $label0$0;
        }
      if (typeof expectedUnits !== "number")
        return expectedUnits.$gt();
      if (expectedUnits > 0) {
        _this._convert$_value = value;
        _this._expectedUnits = expectedUnits;
        _this._extraUnits = extraUnits;
      }
    }
  };
  P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin.prototype = {$is_JsonPrettyPrintMixin: 1};
  P.__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin.prototype = {$is_JsonPrettyPrintMixin: 1};
  P.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin.prototype = {$isChunkedConversionSink: 1,
    $asChunkedConversionSink: function() {
      return [P.String];
    },
    $isStringConversionSink: 1,
    $isStringConversionSinkMixin: 1,
    $isSink: 1,
    $asSink: function() {
      return [P.String];
    }
  };
  P._symbolMapToStringMap_closure.prototype = {$signature: 25};
  P.NoSuchMethodError_toString_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      H.interceptedTypeCheck(key, "$isSymbol0");
      t1 = this.sb;
      t2 = this._box_0;
      t1.write$1(t2.comma);
      t1.write$1(P._symbolToString(key));
      t1.write$1(": ");
      t1.write$1(P.Error_safeToString(value));
      t2.comma = ", ";
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 25
  };
  P._CompileTimeError.prototype = {};
  P._DuplicatedFieldInitializerError.prototype = {};
  P._BigIntImpl.prototype = {
    get$_isZero: function() {
      return J.$eq$(this._used, 0);
    },
    $negate: function(_) {
      var _this = this,
        t1 = _this._used;
      if (J.$eq$(t1, 0))
        return _this;
      return P._BigIntImpl$_(!_this._isNegative, t1, _this._digits);
    },
    _dlShift$1: function(n) {
      var used, resultUsed, digits, resultDigits, i, t1;
      H.intTypeCheck(n);
      used = this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      if (typeof used !== "number")
        return used.$add();
      if (typeof n !== "number")
        return H.iae(n);
      resultUsed = used + n;
      digits = this._digits;
      resultDigits = H.NativeUint16List_NativeUint16List(resultUsed);
      for (i = used - 1, t1 = resultDigits && C.NativeUint16List_methods; i >= 0; --i) {
        if (i >= digits.length)
          return H.ioore(digits, i);
        t1.$indexSet(resultDigits, i + n, digits[i]);
      }
      return P._BigIntImpl$_(this._isNegative, resultUsed, resultDigits);
    },
    _drShift$1: function(n) {
      var used, resultUsed, digits, resultDigits, t1, i, result, _this = this;
      H.intTypeCheck(n);
      used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      if (typeof used !== "number")
        return used.$sub();
      if (typeof n !== "number")
        return H.iae(n);
      resultUsed = used - n;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = H.NativeUint16List_NativeUint16List(resultUsed);
      for (t1 = resultDigits && C.NativeUint16List_methods, i = n; i < used; ++i) {
        if (i < 0 || i >= digits.length)
          return H.ioore(digits, i);
        t1.$indexSet(resultDigits, i - n, digits[i]);
      }
      t1 = _this._isNegative;
      result = P._BigIntImpl$_(t1, resultUsed, resultDigits);
      if (t1)
        for (i = 0; i < n; ++i) {
          if (i >= digits.length)
            return H.ioore(digits, i);
          if (!J.$eq$(digits[i], 0))
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      return result;
    },
    $shl: function(_, shiftAmount) {
      var digitShift, t1, resultUsed, resultDigits, _this = this;
      H.intTypeCheck(shiftAmount);
      if (typeof shiftAmount !== "number")
        return shiftAmount.$lt();
      if (shiftAmount < 0)
        throw H.wrapException(P.ArgumentError$("shift-amount must be posititve " + shiftAmount));
      if (_this.get$_isZero())
        return _this;
      digitShift = C.JSInt_methods._tdivFast$1(shiftAmount, 16);
      if (C.JSInt_methods.$mod(shiftAmount, 16) === 0)
        return _this._dlShift$1(digitShift);
      t1 = _this._used;
      resultUsed = J.$add$ansx(J.$add$ansx(t1, digitShift), 1);
      resultDigits = H.NativeUint16List_NativeUint16List(resultUsed);
      P._BigIntImpl__lsh(_this._digits, t1, shiftAmount, resultDigits);
      return P._BigIntImpl$_(_this._isNegative, resultUsed, resultDigits);
    },
    $shr: function(_, shiftAmount) {
      var digitShift, bitShift, used, resultUsed, digits, resultDigits, t1, result, i, _this = this;
      H.intTypeCheck(shiftAmount);
      if (typeof shiftAmount !== "number")
        return shiftAmount.$lt();
      if (shiftAmount < 0)
        throw H.wrapException(P.ArgumentError$("shift-amount must be posititve " + shiftAmount));
      if (_this.get$_isZero())
        return _this;
      digitShift = C.JSInt_methods._tdivFast$1(shiftAmount, 16);
      bitShift = C.JSInt_methods.$mod(shiftAmount, 16);
      if (bitShift === 0)
        return _this._drShift$1(digitShift);
      used = _this._used;
      if (typeof used !== "number")
        return used.$sub();
      resultUsed = used - digitShift;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = H.NativeUint16List_NativeUint16List(resultUsed);
      P._BigIntImpl__rsh(digits, used, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      result = P._BigIntImpl$_(t1, resultUsed, resultDigits);
      if (t1) {
        t1 = digits.length;
        if (digitShift < 0 || digitShift >= t1)
          return H.ioore(digits, digitShift);
        if (!J.$eq$(J.$and$bn(digits[digitShift], C.JSInt_methods.$shl(1, bitShift) - 1), 0))
          return result.$sub(0, $.$get$_BigIntImpl_one());
        for (i = 0; i < digitShift; ++i) {
          if (i >= t1)
            return H.ioore(digits, i);
          if (!J.$eq$(digits[i], 0))
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      }
      return result;
    },
    _absCompare$1: function(bigInt) {
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      return P._BigIntImpl__compareDigits(this._digits, this._used, bigInt._digits, bigInt._used);
    },
    compareTo$1: function(_, bigInt) {
      var t1, result;
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      t1 = this._isNegative;
      if (J.$eq$(t1, bigInt._isNegative)) {
        result = this._absCompare$1(bigInt);
        if (t1) {
          if (typeof result !== "number")
            return H.iae(result);
          t1 = 0 - result;
        } else
          t1 = result;
        return t1;
      }
      return t1 ? -1 : 1;
    },
    _absAddSetSign$2: function(other, isNegative) {
      var used, otherUsed, resultUsed, resultDigits, _this = this;
      H.interceptedTypeCheck(other, "$is_BigIntImpl");
      H.boolTypeCheck(isNegative);
      used = _this._used;
      otherUsed = other._used;
      if (typeof used !== "number")
        return used.$lt();
      if (typeof otherUsed !== "number")
        return H.iae(otherUsed);
      if (used < otherUsed)
        return other._absAddSetSign$2(_this, isNegative);
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      if (otherUsed === 0)
        return J.$eq$(_this._isNegative, isNegative) ? _this : _this.$negate(0);
      resultUsed = used + 1;
      resultDigits = H.NativeUint16List_NativeUint16List(resultUsed);
      P._BigIntImpl__absAdd(_this._digits, used, other._digits, otherUsed, resultDigits);
      return P._BigIntImpl$_(isNegative, resultUsed, resultDigits);
    },
    _absSubSetSign$2: function(other, isNegative) {
      var used, otherUsed, resultDigits, _this = this;
      H.interceptedTypeCheck(other, "$is_BigIntImpl");
      H.boolTypeCheck(isNegative);
      used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      otherUsed = other._used;
      if (otherUsed === 0)
        return J.$eq$(_this._isNegative, isNegative) ? _this : _this.$negate(0);
      resultDigits = H.NativeUint16List_NativeUint16List(used);
      P._BigIntImpl__absSub(_this._digits, used, other._digits, otherUsed, resultDigits);
      return P._BigIntImpl$_(isNegative, used, resultDigits);
    },
    _absAndSetSign$2: function(other, isNegative) {
      var resultUsed, digits, otherDigits, resultDigits, t1, i, t2;
      H.interceptedTypeCheck(other, "$is_BigIntImpl");
      H.boolTypeCheck(isNegative);
      resultUsed = P._min(this._used, other._used);
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = H.NativeUint16List_NativeUint16List(resultUsed);
      if (typeof resultUsed !== "number")
        return H.iae(resultUsed);
      t1 = resultDigits && C.NativeUint16List_methods;
      i = 0;
      for (; i < resultUsed; ++i) {
        if (i >= digits.length)
          return H.ioore(digits, i);
        t2 = digits[i];
        if (i >= otherDigits.length)
          return H.ioore(otherDigits, i);
        t1.$indexSet(resultDigits, i, J.$and$bn(t2, otherDigits[i]));
      }
      return P._BigIntImpl$_(isNegative, resultUsed, resultDigits);
    },
    _absAndNotSetSign$2: function(other, isNegative) {
      var resultUsed, digits, otherDigits, resultDigits, m, t1, i, t2;
      H.interceptedTypeCheck(other, "$is_BigIntImpl");
      H.boolTypeCheck(isNegative);
      resultUsed = this._used;
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = H.NativeUint16List_NativeUint16List(resultUsed);
      m = P._min(resultUsed, other._used);
      if (typeof m !== "number")
        return H.iae(m);
      t1 = resultDigits && C.NativeUint16List_methods;
      i = 0;
      for (; i < m; ++i) {
        if (i >= digits.length)
          return H.ioore(digits, i);
        t2 = digits[i];
        if (i >= otherDigits.length)
          return H.ioore(otherDigits, i);
        t1.$indexSet(resultDigits, i, J.$and$bn(t2, J.$not$i(otherDigits[i])));
      }
      if (typeof resultUsed !== "number")
        return H.iae(resultUsed);
      i = m;
      for (; i < resultUsed; ++i) {
        if (i < 0 || i >= digits.length)
          return H.ioore(digits, i);
        t1.$indexSet(resultDigits, i, digits[i]);
      }
      return P._BigIntImpl$_(isNegative, resultUsed, resultDigits);
    },
    _absOrSetSign$2: function(other, isNegative) {
      var used, otherUsed, resultUsed, digits, otherDigits, resultDigits, m, l, t1, i, t2, lDigits;
      H.interceptedTypeCheck(other, "$is_BigIntImpl");
      H.boolTypeCheck(isNegative);
      used = this._used;
      otherUsed = other._used;
      resultUsed = P._max(used, otherUsed);
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = H.NativeUint16List_NativeUint16List(resultUsed);
      if (typeof used !== "number")
        return used.$lt();
      if (typeof otherUsed !== "number")
        return H.iae(otherUsed);
      if (used < otherUsed) {
        m = used;
        l = other;
      } else {
        m = otherUsed;
        l = this;
      }
      for (t1 = resultDigits && C.NativeUint16List_methods, i = 0; i < m; ++i) {
        if (i >= digits.length)
          return H.ioore(digits, i);
        t2 = digits[i];
        if (i >= otherDigits.length)
          return H.ioore(otherDigits, i);
        t1.$indexSet(resultDigits, i, J.$or$bn(t2, otherDigits[i]));
      }
      lDigits = l._digits;
      if (typeof resultUsed !== "number")
        return H.iae(resultUsed);
      t2 = J.getInterceptor$asx(lDigits);
      i = m;
      for (; i < resultUsed; ++i)
        t1.$indexSet(resultDigits, i, H.intTypeCheck(t2.$index(lDigits, i)));
      return P._BigIntImpl$_(isNegative, resultUsed, resultDigits);
    },
    $and: function(_, bigInt) {
      var t1, n, p, _this = this;
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      if (_this.get$_isZero() || bigInt.get$_isZero())
        return $.$get$_BigIntImpl_zero();
      t1 = _this._isNegative;
      if (J.$eq$(t1, bigInt._isNegative)) {
        if (t1) {
          t1 = $.$get$_BigIntImpl_one();
          return _this._absSubSetSign$2(t1, true)._absOrSetSign$2(bigInt._absSubSetSign$2(t1, true), true)._absAddSetSign$2(t1, true);
        }
        return _this._absAndSetSign$2(bigInt, false);
      }
      if (t1) {
        n = _this;
        p = bigInt;
      } else {
        n = bigInt;
        p = _this;
      }
      return H.interceptedTypeCheck(p._absAndNotSetSign$2(n._absSubSetSign$2($.$get$_BigIntImpl_one(), false), false), "$is_BigIntImpl");
    },
    $or: function(_, bigInt) {
      var t1, n, p, _this = this;
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      if (_this.get$_isZero())
        return bigInt;
      if (bigInt.get$_isZero())
        return _this;
      t1 = _this._isNegative;
      if (J.$eq$(t1, bigInt._isNegative)) {
        if (t1) {
          t1 = $.$get$_BigIntImpl_one();
          return _this._absSubSetSign$2(t1, true)._absAndSetSign$2(bigInt._absSubSetSign$2(t1, true), true)._absAddSetSign$2(t1, true);
        }
        return _this._absOrSetSign$2(bigInt, false);
      }
      if (t1) {
        n = _this;
        p = bigInt;
      } else {
        n = bigInt;
        p = _this;
      }
      t1 = $.$get$_BigIntImpl_one();
      return H.interceptedTypeCheck(n._absSubSetSign$2(t1, true)._absAndNotSetSign$2(p, true)._absAddSetSign$2(t1, true), "$is_BigIntImpl");
    },
    $add: function(_, bigInt) {
      var isNegative, t1, _this = this;
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      if (_this.get$_isZero())
        return bigInt;
      if (bigInt.get$_isZero())
        return _this;
      isNegative = _this._isNegative;
      t1 = bigInt._isNegative;
      if (isNegative == null ? t1 == null : isNegative === t1)
        return _this._absAddSetSign$2(bigInt, isNegative);
      if (J.$ge$n(_this._absCompare$1(bigInt), 0))
        return _this._absSubSetSign$2(bigInt, isNegative);
      return bigInt._absSubSetSign$2(_this, !isNegative);
    },
    $sub: function(_, bigInt) {
      var isNegative, t1, _this = this;
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      if (_this.get$_isZero())
        return bigInt.$negate(0);
      if (bigInt.get$_isZero())
        return _this;
      isNegative = _this._isNegative;
      t1 = bigInt._isNegative;
      if (isNegative == null ? t1 != null : isNegative !== t1)
        return _this._absAddSetSign$2(bigInt, isNegative);
      if (J.$ge$n(_this._absCompare$1(bigInt), 0))
        return _this._absSubSetSign$2(bigInt, isNegative);
      return bigInt._absSubSetSign$2(_this, !isNegative);
    },
    $mul: function(_, bigInt) {
      var used, otherUsed, resultUsed, digits, otherDigits, resultDigits, i;
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      used = this._used;
      otherUsed = bigInt._used;
      if (used === 0 || otherUsed === 0)
        return $.$get$_BigIntImpl_zero();
      if (typeof used !== "number")
        return used.$add();
      if (typeof otherUsed !== "number")
        return H.iae(otherUsed);
      resultUsed = used + otherUsed;
      digits = this._digits;
      otherDigits = bigInt._digits;
      resultDigits = H.NativeUint16List_NativeUint16List(resultUsed);
      for (i = 0; i < otherUsed;) {
        if (i >= otherDigits.length)
          return H.ioore(otherDigits, i);
        P._BigIntImpl__mulAdd(otherDigits[i], digits, 0, resultDigits, i, used);
        ++i;
      }
      return P._BigIntImpl$_(!J.$eq$(this._isNegative, bigInt._isNegative), resultUsed, resultDigits);
    },
    _div$1: function(bigInt) {
      var lastQuo_used, quo;
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      if (J.$lt$n(this._used, bigInt._used))
        return $.$get$_BigIntImpl_zero();
      this._divRem$1(bigInt);
      lastQuo_used = J.$sub$n($._BigIntImpl__lastQuoRemUsed, $._BigIntImpl__lastRemUsed);
      quo = P._BigIntImpl$_(false, lastQuo_used, P._BigIntImpl__cloneDigits($._BigIntImpl__lastQuoRemDigits, $._BigIntImpl__lastRemUsed, $._BigIntImpl__lastQuoRemUsed, lastQuo_used));
      return !J.$eq$(this._isNegative, bigInt._isNegative) && J.$gt$n(quo._used, 0) ? quo.$negate(0) : quo;
    },
    _rem$1: function(bigInt) {
      var t1, t2, remDigits, rem, _this = this;
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      if (J.$lt$n(_this._used, bigInt._used))
        return _this;
      _this._divRem$1(bigInt);
      t1 = $._BigIntImpl__lastQuoRemDigits;
      t2 = $._BigIntImpl__lastRemUsed;
      remDigits = P._BigIntImpl__cloneDigits(t1, 0, t2, t2);
      rem = P._BigIntImpl$_(false, $._BigIntImpl__lastRemUsed, remDigits);
      if (J.$gt$n($._BigIntImpl__lastRem_nsh, 0))
        rem = rem.$shr(0, $._BigIntImpl__lastRem_nsh);
      return _this._isNegative && J.$gt$n(rem._used, 0) ? rem.$negate(0) : rem;
    },
    _divRem$1: function(other) {
      var resultUsed, t1, t2, t3, yDigits, yUsed, nsh, yDigits0, yUsed0, resultDigits, resultUsed0, topDigitDivisor, j, tmpDigits, tmpUsed, resultUsed1, nyDigits, i, estimatedQuotientDigit;
      H.interceptedTypeCheck(other, "$is_BigIntImpl");
      resultUsed = this._used;
      t1 = J.getInterceptor$(resultUsed);
      if (t1.$eq(resultUsed, $._BigIntImpl__lastDividendUsed))
        if (J.$eq$(other._used, $._BigIntImpl__lastDivisorUsed)) {
          t2 = this._digits;
          t3 = $._BigIntImpl__lastDividendDigits;
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = other._digits;
            t3 = $._BigIntImpl__lastDivisorDigits;
            t3 = t2 == null ? t3 == null : t2 === t3;
            t2 = t3;
          } else
            t2 = false;
        } else
          t2 = false;
      else
        t2 = false;
      if (t2)
        return;
      yDigits = other._digits;
      yUsed = other._used;
      t2 = J.getInterceptor$n(yUsed);
      t3 = J.get$bitLength$i(J.$index$asx(yDigits, t2.$sub(yUsed, 1)));
      if (typeof t3 !== "number")
        return H.iae(t3);
      nsh = 16 - t3;
      t3 = this._digits;
      if (nsh > 0) {
        yDigits0 = H.NativeUint16List_NativeUint16List(t2.$add(yUsed, 5));
        yUsed0 = P._BigIntImpl__lShiftDigits(yDigits, yUsed, nsh, yDigits0);
        resultDigits = H.NativeUint16List_NativeUint16List(t1.$add(resultUsed, 5));
        resultUsed0 = P._BigIntImpl__lShiftDigits(t3, resultUsed, nsh, resultDigits);
      } else {
        resultDigits = P._BigIntImpl__cloneDigits(t3, 0, resultUsed, t1.$add(resultUsed, 2));
        yUsed0 = yUsed;
        yDigits0 = yDigits;
        resultUsed0 = resultUsed;
      }
      if (typeof yUsed0 !== "number")
        return yUsed0.$sub();
      t1 = yUsed0 - 1;
      if (t1 < 0 || t1 >= yDigits0.length)
        return H.ioore(yDigits0, t1);
      topDigitDivisor = yDigits0[t1];
      if (typeof resultUsed0 !== "number")
        return resultUsed0.$sub();
      j = resultUsed0 - yUsed0;
      tmpDigits = H.NativeUint16List_NativeUint16List(resultUsed0);
      tmpUsed = P._BigIntImpl__dlShiftDigits(yDigits0, yUsed0, j, tmpDigits);
      resultUsed1 = resultUsed0 + 1;
      if (J.$ge$n(P._BigIntImpl__compareDigits(resultDigits, resultUsed0, tmpDigits, tmpUsed), 0)) {
        if (resultUsed0 < 0 || resultUsed0 >= resultDigits.length)
          return H.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 1;
        P._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
      } else {
        if (resultUsed0 < 0 || resultUsed0 >= resultDigits.length)
          return H.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 0;
      }
      nyDigits = H.NativeUint16List_NativeUint16List(yUsed0 + 2);
      if (yUsed0 < 0 || yUsed0 >= nyDigits.length)
        return H.ioore(nyDigits, yUsed0);
      nyDigits[yUsed0] = 1;
      P._BigIntImpl__absSub(nyDigits, yUsed0 + 1, yDigits0, yUsed0, nyDigits);
      i = resultUsed0 - 1;
      for (; j > 0;) {
        estimatedQuotientDigit = P._BigIntImpl__estimateQuotientDigit(topDigitDivisor, resultDigits, i);
        --j;
        P._BigIntImpl__mulAdd(estimatedQuotientDigit, nyDigits, 0, resultDigits, j, yUsed0);
        if (i < 0 || i >= resultDigits.length)
          return H.ioore(resultDigits, i);
        if (J.$lt$n(resultDigits[i], estimatedQuotientDigit)) {
          tmpUsed = P._BigIntImpl__dlShiftDigits(nyDigits, yUsed0, j, tmpDigits);
          P._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
          while (true) {
            t1 = resultDigits[i];
            if (typeof estimatedQuotientDigit !== "number")
              return estimatedQuotientDigit.$sub();
            --estimatedQuotientDigit;
            if (!J.$lt$n(t1, estimatedQuotientDigit))
              break;
            P._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
          }
        }
        --i;
      }
      $._BigIntImpl__lastDividendDigits = t3;
      $._BigIntImpl__lastDividendUsed = resultUsed;
      $._BigIntImpl__lastDivisorDigits = yDigits;
      $._BigIntImpl__lastDivisorUsed = yUsed;
      $._BigIntImpl__lastQuoRemDigits = resultDigits;
      $._BigIntImpl__lastQuoRemUsed = resultUsed1;
      $._BigIntImpl__lastRemUsed = yUsed0;
      $._BigIntImpl__lastRem_nsh = nsh;
    },
    get$hashCode: function(_) {
      var hash, t1, t2, t3, i, _this = this,
        combine = new P._BigIntImpl_hashCode_combine();
      if (_this.get$_isZero())
        return 6707;
      hash = _this._isNegative ? 83585 : 429689;
      t1 = _this._used;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = _this._digits;
      t3 = J.getInterceptor$asx(t2);
      i = 0;
      for (; i < t1; ++i)
        hash = combine.call$2(hash, t3.$index(t2, i));
      return new P._BigIntImpl_hashCode_finish().call$1(hash);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P._BigIntImpl && J.$eq$(this.compareTo$1(0, other), 0);
    },
    $tdiv: function(_, bigInt) {
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      if (J.$eq$(bigInt._used, 0))
        throw H.wrapException(C.C_IntegerDivisionByZeroException);
      return this._div$1(bigInt);
    },
    remainder$1: function(_, bigInt) {
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      if (J.$eq$(bigInt._used, 0))
        throw H.wrapException(C.C_IntegerDivisionByZeroException);
      return this._rem$1(bigInt);
    },
    $div: function(_, other) {
      H.interceptedTypeCheck(other, "$isBigInt");
      return J.$div$n(this.toDouble$0(0), other.toDouble$0(0));
    },
    $lt: function(_, other) {
      return J.$lt$n(this.compareTo$1(0, H.interceptedTypeCheck(other, "$isBigInt")), 0);
    },
    $le: function(_, other) {
      return J.$le$n(this.compareTo$1(0, H.interceptedTypeCheck(other, "$isBigInt")), 0);
    },
    $gt: function(_, other) {
      return J.$gt$n(this.compareTo$1(0, H.interceptedTypeCheck(other, "$isBigInt")), 0);
    },
    $ge: function(_, other) {
      return J.$ge$n(this.compareTo$1(0, H.interceptedTypeCheck(other, "$isBigInt")), 0);
    },
    $mod: function(_, bigInt) {
      var result;
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      if (J.$eq$(bigInt._used, 0))
        throw H.wrapException(C.C_IntegerDivisionByZeroException);
      result = this._rem$1(bigInt);
      if (result._isNegative)
        result = bigInt._isNegative ? result.$sub(0, bigInt) : result.$add(0, bigInt);
      return result;
    },
    get$isNegative: function(_) {
      return this._isNegative;
    },
    toDouble$0: function(_) {
      var resultBits, t1, t2, t3, t4, t5, t6, biasedExponent, readBits, leadingBits, i, roundUp, _this = this, _box_0 = {};
      if (_this.get$_isZero())
        return 0;
      resultBits = H.NativeUint8List_NativeUint8List(8);
      t1 = _this._used;
      t2 = J.getInterceptor$n(t1);
      t3 = t2.$sub(t1, 1);
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = _this._digits;
      t5 = J.getInterceptor$asx(t4);
      t6 = J.get$bitLength$i(t5.$index(t4, t2.$sub(t1, 1)));
      if (typeof t6 !== "number")
        return H.iae(t6);
      t3 = 16 * t3 + t6 - 53;
      if (t3 > 971)
        return 1 / 0;
      if (_this._isNegative) {
        if (7 >= resultBits.length)
          return H.ioore(resultBits, 7);
        resultBits[7] = 128;
      }
      biasedExponent = t3 + 1075;
      t3 = resultBits.length;
      if (6 >= t3)
        return H.ioore(resultBits, 6);
      resultBits[6] = (biasedExponent & 15) << 4;
      if (7 >= t3)
        return H.ioore(resultBits, 7);
      C.NativeUint8List_methods.$indexSet(resultBits, 7, J.$or$bn(resultBits[7], C.JSInt_methods._shrOtherPositive$1(biasedExponent, 4)));
      _box_0.cachedBitsLength = _box_0.cachedBits = 0;
      _box_0.digitIndex = t2.$sub(t1, 1);
      readBits = new P._BigIntImpl_toDouble_readBits(_box_0, _this);
      leadingBits = J.$and$bn(readBits.call$1(5), 15);
      C.NativeUint8List_methods.$indexSet(resultBits, 6, J.$or$bn(resultBits[6], leadingBits));
      for (i = 5; i >= 0; --i)
        C.NativeUint8List_methods.$indexSet(resultBits, i, readBits.call$1(8));
      roundUp = new P._BigIntImpl_toDouble_roundUp(resultBits);
      if (J.$eq$(readBits.call$1(1), 1))
        if (J.get$isOdd$i(resultBits[0]))
          roundUp.call$0();
        else if (!J.$eq$(_box_0.cachedBits, 0))
          roundUp.call$0();
        else {
          i = _box_0.digitIndex;
          while (J.$ge$n(_box_0.digitIndex, 0)) {
            if (!J.$eq$(t5.$index(t4, i), 0)) {
              roundUp.call$0();
              break;
            }
            if (typeof i !== "number")
              return i.$sub();
            --i;
          }
        }
      t1 = resultBits.buffer;
      return J.getFloat64$2$x((t1 && C.NativeByteBuffer_methods).asByteData$0(t1), 0, C.C_Endian);
    },
    toString$0: function(_) {
      var decimalDigitChunks, rest, digits4, _this = this,
        t1 = _this._used,
        t2 = J.getInterceptor$(t1);
      if (t2.$eq(t1, 0))
        return "0";
      if (t2.$eq(t1, 1)) {
        if (_this._isNegative)
          return J.toString$0$(J.$negate$in(J.$index$asx(_this._digits, 0)));
        return J.toString$0$(J.$index$asx(_this._digits, 0));
      }
      decimalDigitChunks = H.setRuntimeTypeInfo([], [P.String]);
      rest = _this.get$isNegative(_this) ? _this.$negate(0) : _this;
      for (; J.$gt$n(rest._used, 1);) {
        t1 = $.$get$_BigIntImpl__bigInt10000();
        digits4 = J.toString$0$(rest.remainder$1(0, t1));
        C.JSArray_methods.add$1(decimalDigitChunks, digits4);
        t2 = digits4.length;
        if (t2 === 1)
          C.JSArray_methods.add$1(decimalDigitChunks, "000");
        if (t2 === 2)
          C.JSArray_methods.add$1(decimalDigitChunks, "00");
        if (t2 === 3)
          C.JSArray_methods.add$1(decimalDigitChunks, "0");
        rest = rest.$tdiv(0, t1);
      }
      C.JSArray_methods.add$1(decimalDigitChunks, J.toString$0$(J.$index$asx(rest._digits, 0)));
      if (_this._isNegative)
        C.JSArray_methods.add$1(decimalDigitChunks, "-");
      return J.join$0$ax(C.JSArray_methods.get$reversed(decimalDigitChunks));
    },
    $isBigInt: 1,
    $isComparable: 1,
    $asComparable: function() {
      return [P.BigInt];
    },
    get$_digits: function() {
      return this._digits;
    },
    get$_used: function() {
      return this._used;
    }
  };
  P._BigIntImpl_hashCode_combine.prototype = {
    call$2: function(hash, value) {
      H.intTypeCheck(hash);
      H.intTypeCheck(value);
      if (typeof hash !== "number")
        return hash.$add();
      if (typeof value !== "number")
        return H.iae(value);
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 26
  };
  P._BigIntImpl_hashCode_finish.prototype = {
    call$1: function(hash) {
      H.intTypeCheck(hash);
      if (typeof hash !== "number")
        return H.iae(hash);
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    $signature: 27
  };
  P._BigIntImpl_toDouble_readBits.prototype = {
    call$1: function(n) {
      var t1, t2, nextDigit, nextDigitLength, result, t3;
      H.intTypeCheck(n);
      for (t1 = this._box_0, t2 = this.$this; J.$lt$n(t1.cachedBitsLength, n);) {
        if (J.$lt$n(t1.digitIndex, 0)) {
          t1.digitIndex = J.$sub$n(t1.digitIndex, 1);
          nextDigit = 0;
          nextDigitLength = 16;
        } else {
          nextDigit = J.$index$asx(t2.get$_digits(), t1.digitIndex);
          nextDigitLength = J.$eq$(t1.digitIndex, J.$sub$n(t2.get$_used(), 1)) ? J.get$bitLength$i(nextDigit) : 16;
          t1.digitIndex = J.$sub$n(t1.digitIndex, 1);
        }
        t1.cachedBits = J.$add$ansx(J.$shl$n(t1.cachedBits, nextDigitLength), nextDigit);
        t1.cachedBitsLength = J.$add$ansx(t1.cachedBitsLength, nextDigitLength);
      }
      result = J.$shr$n(t1.cachedBits, J.$sub$n(t1.cachedBitsLength, n));
      t2 = t1.cachedBits;
      t3 = J.$sub$n(t1.cachedBitsLength, n);
      if (typeof result !== "number")
        return result.$shl();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1.cachedBits = J.$sub$n(t2, C.JSInt_methods.$shl(result, t3));
      t1.cachedBitsLength = J.$sub$n(t1.cachedBitsLength, n);
      return result;
    },
    $signature: 27
  };
  P._BigIntImpl_toDouble_roundUp.prototype = {
    call$0: function() {
      var t1, t2, carry, i, sum;
      for (t1 = this.resultBits, t2 = J.getInterceptor$asx(t1), carry = 1, i = 0; i < 8; ++i) {
        if (carry === 0)
          break;
        sum = J.$add$ansx(t2.$index(t1, i), carry);
        if (typeof sum !== "number")
          return sum.$and();
        t2.$indexSet(t1, i, sum & 255);
        carry = C.JSInt_methods._shrOtherPositive$1(sum, 8);
      }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._BigIntReduction.prototype = {};
  P._BigIntClassic.prototype = {$is_BigIntReduction: 1};
  P.Deprecated.prototype = {};
  P._Override.prototype = {};
  P.Provisional.prototype = {};
  P._Proxy0.prototype = {};
  P.pragma.prototype = {};
  P.BigInt.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.BigInt];
    }
  };
  P.bool.prototype = {};
  P.Comparable.prototype = {};
  P.DateTime.prototype = {
    get$millisecondsSinceEpoch: function() {
      return this._value;
    },
    get$microsecondsSinceEpoch: function() {
      var t1 = this._value;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 1000 * t1;
    },
    get$year: function() {
      return H.intTypeCheck(H.Primitives_getYear(this));
    },
    get$month: function() {
      return H.intTypeCheck(H.Primitives_getMonth(this));
    },
    get$day: function() {
      return H.intTypeCheck(H.Primitives_getDay(this));
    },
    get$hour: function() {
      return H.intTypeCheck(H.Primitives_getHours(this));
    },
    get$minute: function() {
      return H.intTypeCheck(H.Primitives_getMinutes(this));
    },
    get$second: function() {
      return H.intTypeCheck(H.Primitives_getSeconds(this));
    },
    get$millisecond: function() {
      return H.intTypeCheck(H.Primitives_getMilliseconds(this));
    },
    get$microsecond: function() {
      return 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.DateTime && J.$eq$(this._value, other.get$millisecondsSinceEpoch()) && J.$eq$(this.isUtc, other.isUtc);
    },
    compareTo$1: function(_, other) {
      return J.compareTo$1$ns(this._value, H.interceptedTypeCheck(other, "$isDateTime").get$millisecondsSinceEpoch());
    },
    DateTime$_withValue$2$isUtc: function(_value, isUtc) {
      var t1, _this = this, _8640000000000000 = 864e13;
      if (!J.$gt$n(J.abs$0$in(_this.get$millisecondsSinceEpoch()), _8640000000000000))
        t1 = J.$eq$(J.abs$0$in(_this.get$millisecondsSinceEpoch()), _8640000000000000) && !J.$eq$(_this.get$microsecond(), 0);
      else
        t1 = true;
      if (t1)
        throw H.wrapException(P.ArgumentError$("DateTime is outside valid range: " + H.S(_this.get$millisecondsSinceEpoch())));
      if (_this.isUtc == null)
        throw H.wrapException(P.ArgumentError$("'isUtc' flag may not be 'null'"));
    },
    get$hashCode: function(_) {
      var t1 = this._value,
        t2 = J.getInterceptor$n(t1);
      return J.$and$bn(t2.$xor(t1, t2.$shr(t1, 30)), 1073741823);
    },
    toString$0: function(_) {
      var _this = this,
        y = P.DateTime__fourDigits(_this.get$year()),
        m = P.DateTime__twoDigits(_this.get$month()),
        d = P.DateTime__twoDigits(_this.get$day()),
        h = P.DateTime__twoDigits(_this.get$hour()),
        min = P.DateTime__twoDigits(_this.get$minute()),
        sec = P.DateTime__twoDigits(_this.get$second()),
        ms = P.DateTime__threeDigits(_this.get$millisecond()),
        us = J.$eq$(_this.get$microsecond(), 0) ? "" : P.DateTime__threeDigits(_this.get$microsecond());
      if (_this.isUtc)
        return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms) + H.S(us) + "Z";
      else
        return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms) + H.S(us);
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.DateTime];
    }
  };
  P.double.prototype = {};
  P.Duration.prototype = {
    $add: function(_, other) {
      return P.Duration$_microseconds(J.$add$ansx(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration));
    },
    $sub: function(_, other) {
      return P.Duration$_microseconds(J.$sub$n(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration));
    },
    $mul: function(_, factor) {
      return P.Duration$_microseconds(J.round$0$n(J.$mul$ns(this._duration, H.numTypeCheck(factor))));
    },
    $tdiv: function(_, quotient) {
      H.intTypeCheck(quotient);
      if (quotient === 0)
        throw H.wrapException(P.IntegerDivisionByZeroException$());
      return P.Duration$_microseconds(J.$tdiv$n(this._duration, quotient));
    },
    $lt: function(_, other) {
      return J.$lt$n(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
    },
    $gt: function(_, other) {
      return J.$gt$n(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
    },
    $le: function(_, other) {
      return J.$le$n(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
    },
    $ge: function(_, other) {
      return J.$ge$n(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
    },
    get$inHours: function() {
      return J.$tdiv$n(this._duration, 3600000000);
    },
    get$inMinutes: function() {
      return J.$tdiv$n(this._duration, 60000000);
    },
    get$inSeconds: function() {
      return J.$tdiv$n(this._duration, 1000000);
    },
    get$inMilliseconds: function() {
      return J.$tdiv$n(this._duration, 1000);
    },
    get$inMicroseconds: function() {
      return this._duration;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.Duration && J.$eq$(this._duration, other.get$inMicroseconds());
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._duration);
    },
    compareTo$1: function(_, other) {
      return J.compareTo$1$ns(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
    },
    toString$0: function(_) {
      var twoDigitMinutes, twoDigitSeconds, sixDigitUs, _this = this,
        t1 = new P.Duration_toString_twoDigits();
      if (J.$lt$n(_this.get$inMicroseconds(), 0))
        return "-" + H.S(_this.$negate(0));
      twoDigitMinutes = t1.call$1(J.remainder$1$n(_this.get$inMinutes(), 60));
      twoDigitSeconds = t1.call$1(J.remainder$1$n(_this.get$inSeconds(), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(J.remainder$1$n(_this.get$inMicroseconds(), 1000000));
      return H.S(_this.get$inHours()) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $negate: function(_) {
      var t1 = this._duration;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return P.Duration$_microseconds(0 - t1);
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.Duration];
    }
  };
  P.Duration_toString_sixDigits.prototype = {
    call$1: function(n) {
      H.intTypeCheck(n);
      if (typeof n !== "number")
        return n.$ge();
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    },
    $signature: 16
  };
  P.Duration_toString_twoDigits.prototype = {
    call$1: function(n) {
      H.intTypeCheck(n);
      if (typeof n !== "number")
        return n.$ge();
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    $signature: 16
  };
  P.Error.prototype = {};
  P.AssertionError.prototype = {};
  P.TypeError.prototype = {};
  P.CastError.prototype = {};
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var message, prefix, explanation, errorValue, _this = this,
        t1 = _this.name,
        nameString = t1 != null ? " (" + H.S(t1) + ")" : "";
      t1 = _this.message;
      message = t1 == null ? "" : ": " + H.S(t1);
      prefix = H.S(_this.get$_errorName()) + nameString + message;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + H.S(explanation) + ": " + H.S(errorValue);
    },
    message$2$color: function($receiver, arg0, arg1) {
      return this.message.call$2$color(arg0, arg1);
    },
    get$name: function(receiver) {
      return this.name;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation, t2, t3,
        t1 = this.start;
      if (t1 == null) {
        t1 = this.end;
        explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
      } else {
        t2 = this.end;
        if (t2 == null)
          explanation = ": Not greater than or equal to " + H.S(t1);
        else {
          t3 = J.getInterceptor$n(t2);
          if (t3.$gt(t2, t1))
            explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
          else
            explanation = t3.$lt(t2, t1) ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
        }
      }
      return explanation;
    },
    get$start: function() {
      return this.start;
    },
    get$end: function() {
      return this.end;
    }
  };
  P.IndexError.prototype = {
    get$start: function() {
      return 0;
    },
    get$end: function() {
      return J.$sub$n(this.length, 1);
    },
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var t1,
        invalidValue = H.intTypeCheck(this.invalidValue);
      if (typeof invalidValue !== "number")
        return invalidValue.$lt();
      if (invalidValue < 0)
        return ": index must not be negative";
      t1 = this.length;
      if (J.$eq$(t1, 0))
        return ": no indices are valid";
      return ": index should be less than " + H.S(t1);
    },
    $isRangeError: 1,
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.FallThroughError.prototype = {};
  P.AbstractClassInstantiationError.prototype = {};
  P.NoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t1, argument, memberName, receiverText, actualParameters, formalParameters, _this = this, _box_0 = {},
        sb = P.StringBuffer$("");
      _box_0.comma = "";
      t1 = _this._core$_arguments;
      if (t1 != null)
        for (t1 = J.get$iterator$ax(t1); t1.moveNext$0();) {
          argument = t1.get$current();
          sb.write$1(_box_0.comma);
          sb.write$1(P.Error_safeToString(argument));
          _box_0.comma = ", ";
        }
      t1 = _this._namedArguments;
      if (t1 != null)
        J.forEach$1$ax(t1, new P.NoSuchMethodError_toString_closure(_box_0, sb));
      memberName = P._symbolToString(_this._memberName);
      receiverText = P.Error_safeToString(_this._core$_receiver);
      actualParameters = H.S(sb);
      t1 = _this._existingArgumentNames;
      if (t1 == null)
        return "NoSuchMethodError: method not found: '" + H.S(memberName) + "'\nReceiver: " + H.S(receiverText) + "\nArguments: [" + actualParameters + "]";
      else {
        formalParameters = J.join$1$ax(t1, ", ");
        return "NoSuchMethodError: incorrect number of arguments passed to method named '" + H.S(memberName) + "'\nReceiver: " + H.S(receiverText) + "\nTried calling: " + H.S(memberName) + "(" + actualParameters + ")\nFound: " + H.S(memberName) + "(" + H.S(formalParameters) + ")";
      }
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + H.S(this.message);
    },
    message$2$color: function($receiver, arg0, arg1) {
      return this.message.call$2$color(arg0, arg1);
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    $isUnsupportedError: 1,
    message$2$color: function($receiver, arg0, arg1) {
      return this.message.call$2$color(arg0, arg1);
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + H.S(this.message);
    },
    message$2$color: function($receiver, arg0, arg1) {
      return this.message.call$2$color(arg0, arg1);
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    }
  };
  P.OutOfMemoryError.prototype = {
    toString$0: function(_) {
      return "Out of Memory";
    },
    $isError: 1
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var t1 = this.variableName;
      return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + H.S(t1) + "' during its initialization";
    }
  };
  P.Exception.prototype = {};
  P._Exception.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    },
    $isException: 1,
    message$2$color: function($receiver, arg0, arg1) {
      return this.message.call$2$color(arg0, arg1);
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.FormatException.prototype = {
    toString$0: function(_) {
      var source, lineNum, lineStart, previousCharWasCR, i, char, lineEnd, end, postfix, start, prefix, slice, _s3_ = "...",
        t1 = this.message,
        report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException",
        offset = this.offset,
        objectSource = this.source;
      if (typeof objectSource === "string") {
        if (offset != null)
          t1 = offset < 0 || offset > objectSource.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          source = objectSource.length > 78 ? J.$add$ansx(C.JSString_methods.substring$2(objectSource, 0, 75), _s3_) : objectSource;
          return report + "\n" + H.S(source);
        }
        for (lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          char = C.JSString_methods._codeUnitAt$1(objectSource, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = objectSource.length;
        for (i = offset; i < lineEnd; ++i) {
          char = C.JSString_methods.codeUnitAt$1(objectSource, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            postfix = _s3_;
            start = lineStart;
            prefix = "";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = _s3_;
            }
            prefix = _s3_;
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = C.JSString_methods.substring$2(objectSource, start, end);
        return H.S(report) + prefix + H.S(slice) + postfix + "\n" + H.S(C.JSString_methods.$mul(" ", offset - start + prefix.length)) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
    },
    $isException: 1,
    message$2$color: function($receiver, arg0, arg1) {
      return this.message.call$2$color(arg0, arg1);
    },
    get$message: function(receiver) {
      return this.message;
    },
    get$source: function(receiver) {
      return this.source;
    },
    get$offset: function(receiver) {
      return this.offset;
    }
  };
  P.IntegerDivisionByZeroException.prototype = {
    toString$0: function(_) {
      return "IntegerDivisionByZeroException";
    },
    $isException: 1
  };
  P.Expando.prototype = {};
  P.Function.prototype = {};
  P.int.prototype = {};
  P.Invocation.prototype = {};
  P._Invocation.prototype = {$isInvocation: 1};
  P.Iterable.prototype = {
    cast$1$0: function(_, $R) {
      return P.Iterable_castFrom(this, H.getRuntimeTypeArgument(this, "Iterable", 0), $R);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return H.MappedIterable_MappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    where$1: function(_, test) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return H.WhereIterable$(this, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    contains$1: function(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(), element))
          return true;
      return false;
    },
    forEach$1: function(_, f) {
      var t1;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "Iterable", 0)]});
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      var t1, value;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getRuntimeTypeArgument(this, "Iterable", 0)]});
      for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
        value = combine.call$2(value, t1.get$current());
      return value;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    join$1: function(_, separator) {
      var iterator, buffer;
      H.stringTypeCheck(separator);
      iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      buffer = P.StringBuffer$("");
      if (separator == null || separator === "") {
        do
          buffer.write$1(H.S(iterator.get$current()));
        while (iterator.moveNext$0());
      } else {
        buffer.write$1(H.S(iterator.get$current()));
        for (; iterator.moveNext$0();) {
          buffer.write$1(separator);
          buffer.write$1(H.S(iterator.get$current()));
        }
      }
      return buffer.toString$0(0);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    any$1: function(_, test) {
      var t1;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "Iterable", 0)]});
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (test.call$1(t1.get$current()))
          return true;
      return false;
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, H.boolTypeCheck(growable), H.getRuntimeTypeArgument(this, "Iterable", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    take$1: function(_, count) {
      return H.TakeIterable_TakeIterable(this, H.intTypeCheck(count), H.getRuntimeTypeArgument(this, "Iterable", 0));
    },
    skip$1: function(_, count) {
      return H.SkipIterable_SkipIterable(this, H.intTypeCheck(count), H.getRuntimeTypeArgument(this, "Iterable", 0));
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    get$last: function(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element, _s5_ = "index";
      H.intTypeCheck(index);
      P.ArgumentError_checkNotNull(index, _s5_);
      P.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, _s5_, null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P._GeneratorIterable.prototype = {};
  P.BidirectionalIterator.prototype = {$isIterator: 1};
  P.Iterator.prototype = {};
  P.List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1};
  P.Map.prototype = {};
  P.MapEntry.prototype = {};
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.num.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  };
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToHumanReadableString(this);
    },
    noSuchMethod$1: function(_, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    get$runtimeType: function(_) {
      return H.getRuntimeType(this);
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P.Pattern.prototype = {};
  P.Match.prototype = {};
  P.RegExp.prototype = {$isPattern: 1};
  P.Set.prototype = {};
  P.Sink.prototype = {};
  P.StackTrace.prototype = {};
  P._StringStackTrace.prototype = {$isStackTrace: 1};
  P.Stopwatch.prototype = {};
  P.String.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1
  };
  P.Runes.prototype = {
    $asIterable: function() {
      return [P.int];
    }
  };
  P.RuneIterator.prototype = {$isBidirectionalIterator: 1,
    $asBidirectionalIterator: function() {
      return [P.int];
    },
    $isIterator: 1,
    $asIterator: function() {
      return [P.int];
    }
  };
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._contents);
    },
    write$1: function(obj) {
      this._writeString$1(H.S(obj));
    },
    writeCharCode$1: function(charCode) {
      this._writeString$1(P.String_String$fromCharCode(H.intTypeCheck(charCode)));
    },
    writeAll$2: function(objects, separator) {
      H.listSuperNativeTypeCheck(objects, "$isIterable");
      H.stringTypeCheck(separator);
      this._contents = H.stringTypeCheck(P.StringBuffer__writeAll(this._contents, objects, separator));
    },
    writeln$0: function() {
      this._writeString$1("\n");
    },
    clear$0: function(_) {
      this._contents = "";
    },
    toString$0: function(_) {
      return H.Primitives_flattenString(this._contents);
    },
    _writeString$1: function(str) {
      this._contents = H.stringTypeCheck(H.Primitives_stringConcatUnchecked(this._contents, H.stringTypeCheck(str)));
    },
    get$isEmpty: function(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    $isStringSink: 1
  };
  P.StringSink.prototype = {};
  P.Symbol0.prototype = {};
  P.Type.prototype = {};
  P.Uri.prototype = {};
  P.Uri__parseIPv4Address_error.prototype = {
    call$2: function(msg, position) {
      H.stringTypeCheck(msg);
      H.intTypeCheck(position);
      throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + H.S(msg), this.host, position));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 45
  };
  P.Uri_parseIPv6Address_error.prototype = {
    call$2: function(msg, position) {
      throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + H.S(H.stringTypeCheck(msg)), this.host, H.intTypeCheck(position)));
    },
    call$1: function(msg) {
      return this.call$2(msg, null);
    },
    "call*": "call$2",
    $defaultValues: function() {
      return [null];
    },
    $signature: 33
  };
  P.Uri_parseIPv6Address_parseHex.prototype = {
    call$2: function(start, end) {
      var value;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = P.int_parse(J.substring$2$s(this.host, start, end), null, 16);
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 26
  };
  P._Uri.prototype = {
    get$userInfo: function() {
      return this._userInfo;
    },
    get$host: function(_) {
      var t2,
        t1 = this._host;
      if (t1 == null)
        return "";
      t2 = J.getInterceptor$s(t1);
      if (t2.startsWith$1(t1, "["))
        return t2.substring$2(t1, 1, J.$sub$n(t2.get$length(t1), 1));
      return t1;
    },
    get$port: function(_) {
      var t1 = this._port;
      if (t1 == null)
        return P._Uri__defaultPort(this.scheme);
      return t1;
    },
    get$query: function() {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment: function() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    get$pathSegments: function() {
      var pathToSplit, t1,
        result = this._pathSegments;
      if (result != null)
        return result;
      pathToSplit = this.path;
      if (J.getInterceptor$asx(pathToSplit).get$isNotEmpty(pathToSplit) && J.$eq$(C.JSString_methods._codeUnitAt$1(pathToSplit, 0), 47))
        pathToSplit = C.JSString_methods.substring$1(pathToSplit, 1);
      if (pathToSplit === "")
        result = C.List_empty1;
      else {
        t1 = P.String;
        result = P.List_List$unmodifiable(C.JSArray_methods.map$1$1(H.setRuntimeTypeInfo(pathToSplit.split("/"), [t1]), P.core_Uri_decodeComponent$closure(), null), t1);
      }
      this.set$_pathSegments(result);
      return result;
    },
    _mergePaths$2: function(base, reference) {
      var t1, backCount, refStart, baseEnd, newEnd, delta;
      H.stringTypeCheck(base);
      H.stringTypeCheck(reference);
      for (t1 = J.getInterceptor$s(reference), backCount = 0, refStart = 0; t1.startsWith$2(reference, "../", refStart);) {
        refStart += 3;
        ++backCount;
      }
      baseEnd = J.getInterceptor$s(base).lastIndexOf$1(base, "/");
      while (true) {
        if (typeof baseEnd !== "number")
          return baseEnd.$gt();
        if (!(baseEnd > 0 && backCount > 0))
          break;
        newEnd = C.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
        if (typeof newEnd !== "number")
          return newEnd.$lt();
        if (newEnd < 0)
          break;
        delta = baseEnd - newEnd;
        t1 = delta !== 2;
        if (!t1 || delta === 3)
          if (J.$eq$(C.JSString_methods.codeUnitAt$1(base, newEnd + 1), 46))
            t1 = !t1 || J.$eq$(C.JSString_methods.codeUnitAt$1(base, newEnd + 2), 46);
          else
            t1 = false;
        else
          t1 = false;
        if (t1)
          break;
        --backCount;
        baseEnd = newEnd;
      }
      return C.JSString_methods.replaceRange$3(base, baseEnd + 1, null, C.JSString_methods.substring$1(reference, refStart - 3 * backCount));
    },
    resolve$1: function(reference) {
      return this.resolveUri$1(P.Uri_parse(H.stringTypeCheck(reference)));
    },
    resolveUri$1: function(reference) {
      var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, mergedPath, _this = this, _null = null;
      H.interceptedTypeCheck(reference, "$isUri");
      if (J.get$isNotEmpty$asx(reference.get$scheme())) {
        targetScheme = reference.get$scheme();
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host(reference);
          targetPort = reference.get$hasPort() ? reference.get$port(reference) : _null;
        } else {
          targetPort = _null;
          targetHost = targetPort;
          targetUserInfo = "";
        }
        targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
        targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
      } else {
        targetScheme = _this.scheme;
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host(reference);
          targetPort = P._Uri__makePort(reference.get$hasPort() ? reference.get$port(reference) : _null, targetScheme);
          targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
          targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
        } else {
          targetUserInfo = _this._userInfo;
          targetHost = _this._host;
          targetPort = _this._port;
          if (J.$eq$(reference.get$path(reference), "")) {
            targetPath = _this.path;
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _this._query;
          } else {
            if (reference.get$hasAbsolutePath())
              targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
            else if (_this.get$hasEmptyPath())
              if (!_this.get$hasAuthority())
                targetPath = !_this.get$hasScheme() ? reference.get$path(reference) : P._Uri__removeDotSegments(reference.get$path(reference));
              else
                targetPath = P._Uri__removeDotSegments(C.JSString_methods.$add("/", reference.get$path(reference)));
            else {
              mergedPath = _this._mergePaths$2(_this.path, reference.get$path(reference));
              if (_this.get$hasScheme() || _this.get$hasAuthority() || _this.get$hasAbsolutePath())
                targetPath = P._Uri__removeDotSegments(mergedPath);
              else
                targetPath = P._Uri__normalizeRelativePath(mergedPath, _this.get$hasScheme() || _this.get$hasAuthority());
            }
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
          }
        }
      }
      return P._Uri$_internal(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, reference.get$hasFragment() ? reference.get$fragment() : _null);
    },
    get$hasScheme: function() {
      return J.get$isNotEmpty$asx(this.scheme);
    },
    get$hasAuthority: function() {
      return this._host != null;
    },
    get$hasPort: function() {
      return this._port != null;
    },
    get$hasQuery: function() {
      return this._query != null;
    },
    get$hasFragment: function() {
      return this._fragment != null;
    },
    get$hasEmptyPath: function() {
      return J.get$isEmpty$asx(this.path);
    },
    get$hasAbsolutePath: function() {
      return J.startsWith$1$s(this.path, "/");
    },
    toFilePath$0: function() {
      var windows, _this = this,
        t1 = _this.scheme,
        t2 = J.getInterceptor$(t1);
      if (!t2.$eq(t1, "") && !t2.$eq(t1, "file"))
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a " + H.S(t1) + " URI"));
      if (!J.$eq$(_this.get$query(), ""))
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a query component"));
      if (!J.$eq$(_this.get$fragment(), ""))
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a fragment component"));
      windows = P._Uri__isWindows();
      return windows ? P._Uri__toWindowsFilePath(_this) : _this._toFilePath$0();
    },
    _toFilePath$0: function() {
      var pathSegments, result, _this = this;
      if (_this.get$hasAuthority() && !J.$eq$(_this.get$host(_this), ""))
        throw H.wrapException(P.UnsupportedError$("Cannot extract a non-Windows file path from a file URI with an authority"));
      pathSegments = _this.get$pathSegments();
      P._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
      result = P.StringBuffer$("");
      if (_this.get$hasAbsolutePath())
        result.write$1("/");
      result.writeAll$2(pathSegments, "/");
      return result.toString$0(0);
    },
    _writeAuthority$1: function(ss) {
      var t1;
      H.interceptedTypeCheck(ss, "$isStringSink");
      t1 = this._userInfo;
      if (J.get$isNotEmpty$asx(t1)) {
        ss.write$1(t1);
        ss.write$1("@");
      }
      t1 = this._host;
      if (t1 != null)
        ss.write$1(t1);
      t1 = this._port;
      if (t1 != null) {
        ss.write$1(":");
        ss.write$1(t1);
      }
    },
    toString$0: function(_) {
      var t1 = this._text;
      return t1 == null ? this._text = H.stringTypeCheck(this._initializeText$0()) : t1;
    },
    _initializeText$0: function() {
      var _this = this,
        sb = P.StringBuffer$(""),
        t1 = _this.scheme,
        t2 = J.getInterceptor$asx(t1);
      if (t2.get$isNotEmpty(t1)) {
        sb.write$1(t1);
        sb.write$1(":");
      }
      if (_this.get$hasAuthority() || t2.$eq(t1, "file")) {
        sb.write$1("//");
        _this._writeAuthority$1(sb);
      }
      sb.write$1(_this.path);
      t1 = _this._query;
      if (t1 != null) {
        sb.write$1("?");
        sb.write$1(t1);
      }
      t1 = _this._fragment;
      if (t1 != null) {
        sb.write$1("#");
        sb.write$1(t1);
      }
      return sb.toString$0(0);
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      return !!J.getInterceptor$(other).$isUri && J.$eq$(_this.scheme, other.get$scheme()) && J.$eq$(_this.get$hasAuthority(), other.get$hasAuthority()) && J.$eq$(_this.get$userInfo(), other.get$userInfo()) && J.$eq$(_this.get$host(_this), other.get$host(other)) && J.$eq$(_this.get$port(_this), other.get$port(other)) && J.$eq$(_this.path, other.get$path(other)) && J.$eq$(_this.get$hasQuery(), other.get$hasQuery()) && J.$eq$(_this.get$query(), other.get$query()) && J.$eq$(_this.get$hasFragment(), other.get$hasFragment()) && J.$eq$(_this.get$fragment(), other.get$fragment());
    },
    get$hashCode: function(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = H.intTypeCheck(J.get$hashCode$(this.toString$0(0))) : t1;
    },
    set$_pathSegments: function(_pathSegments) {
      this._pathSegments = H.assertSubtype(_pathSegments, "$isList", [P.String], "$asList");
    },
    $isUri: 1,
    get$scheme: function() {
      return this.scheme;
    },
    get$path: function(receiver) {
      return this.path;
    }
  };
  P._Uri__Uri$notSimple_closure.prototype = {
    call$1: function(_) {
      H.stringTypeCheck(_);
      throw H.wrapException(P.FormatException$("Invalid port", this.uri, J.$add$ansx(this.portStart, 1)));
    },
    $signature: 28
  };
  P._Uri__checkNonWindowsPathReservedCharacters_closure.prototype = {
    call$1: function(segment) {
      var _s23_ = "Illegal path character ";
      H.stringTypeCheck(segment);
      if (J.contains$1$asx(segment, "/"))
        if (this.argumentError)
          throw H.wrapException(P.ArgumentError$(_s23_ + segment));
        else
          throw H.wrapException(P.UnsupportedError$(_s23_ + segment));
    },
    $signature: 28
  };
  P._Uri__makePath_closure.prototype = {
    call$1: function(s) {
      return P._Uri__uriEncode(C.List_qg40, H.stringTypeCheck(s), C.C_Utf8Codec, false);
    },
    $signature: 11
  };
  P._Uri__makeQuery_writeParameter.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      H.stringTypeCheck(key);
      H.stringTypeCheck(value);
      t1 = this.result;
      t2 = this._box_0;
      t1.write$1(t2.separator);
      t2.separator = "&";
      t1.write$1(P.Uri_encodeQueryComponent(key, C.C_Utf8Codec));
      if (value != null && C.JSString_methods.get$isNotEmpty(value)) {
        t1.write$1("=");
        t1.write$1(P.Uri_encodeQueryComponent(value, C.C_Utf8Codec));
      }
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 18
  };
  P._Uri__makeQuery_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      H.stringTypeCheck(key);
      if (value == null || typeof value === "string")
        this.writeParameter.call$2(key, H.stringTypeCheck(value));
      else
        for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(value, "$isIterable")), t2 = this.writeParameter; t1.moveNext$0();)
          t2.call$2(key, H.stringTypeCheck(t1.get$current()));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 17
  };
  P.UriData.prototype = {
    get$uri: function() {
      var colonIndex, t2, t3, queryIndex, end, query, _this = this,
        t1 = _this._uriCache;
      if (t1 != null)
        return t1;
      colonIndex = J.$index$asx(_this._separatorIndices, 0);
      t1 = _this._text;
      if (typeof colonIndex !== "number")
        return colonIndex.$add();
      t2 = colonIndex + 1;
      t3 = J.getInterceptor$s(t1);
      queryIndex = t3.indexOf$2(t1, "?", t2);
      end = t3.get$length(t1);
      if (typeof queryIndex !== "number")
        return queryIndex.$ge();
      if (queryIndex >= 0) {
        query = P._Uri__normalizeOrSubstring(t1, queryIndex + 1, end, C.List_CVk, false);
        end = queryIndex;
      } else
        query = null;
      return _this._uriCache = P._DataUri$(_this, P._Uri__normalizeOrSubstring(t1, t2, end, C.List_qg4, false), query);
    },
    toString$0: function(_) {
      var t1 = this._text;
      return J.$eq$(J.$index$asx(this._separatorIndices, 0), -1) ? "data:" + H.S(t1) : t1;
    }
  };
  P._createTables_closure.prototype = {
    call$1: function(_) {
      H.intTypeCheck(_);
      return H.NativeUint8List_NativeUint8List(96);
    },
    $signature: 60
  };
  P._createTables_build.prototype = {
    call$2: function(state, defaultTransition) {
      var t1 = J.$index$asx(this.tables, H.intTypeCheck(state));
      J.fillRange$3$x(t1, 0, 96, H.intTypeCheck(defaultTransition));
      return t1;
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 72
  };
  P._createTables_setChars.prototype = {
    call$3: function(target, chars, transition) {
      var t1, t2, i, char;
      H.interceptedTypeCheck(target, "$isUint8List");
      H.stringTypeCheck(chars);
      H.intTypeCheck(transition);
      for (t1 = chars.length, t2 = target && C.NativeUint8List_methods, i = 0; i < t1; ++i) {
        char = C.JSString_methods._codeUnitAt$1(chars, i);
        if (typeof char !== "number")
          return char.$xor();
        t2.$indexSet(target, (char ^ 96) >>> 0, transition);
      }
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 29
  };
  P._createTables_setRange.prototype = {
    call$3: function(target, range, transition) {
      var i, n, t1;
      H.interceptedTypeCheck(target, "$isUint8List");
      H.stringTypeCheck(range);
      H.intTypeCheck(transition);
      i = J.getInterceptor$s(range)._codeUnitAt$1(range, 0);
      n = C.JSString_methods._codeUnitAt$1(range, 1);
      t1 = target && C.NativeUint8List_methods;
      while (true) {
        if (typeof i !== "number")
          return i.$le();
        if (typeof n !== "number")
          return H.iae(n);
        if (!(i <= n))
          break;
        t1.$indexSet(target, (i ^ 96) >>> 0, transition);
        ++i;
      }
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 29
  };
  P._SimpleUri.prototype = {
    get$hasScheme: function() {
      return J.$gt$n(this._schemeEnd, 0);
    },
    get$hasAuthority: function() {
      return J.$gt$n(this._hostStart, 0);
    },
    get$hasPort: function() {
      return J.$gt$n(this._hostStart, 0) && J.$lt$n(J.$add$ansx(this._portStart, 1), this._pathStart);
    },
    get$hasQuery: function() {
      return J.$lt$n(this._queryStart, this._fragmentStart);
    },
    get$hasFragment: function() {
      return J.$lt$n(this._fragmentStart, J.get$length$asx(this._uri));
    },
    get$_isFile: function() {
      return J.$eq$(this._schemeEnd, 4) && J.startsWith$1$s(this._uri, "file");
    },
    get$_isHttp: function() {
      return J.$eq$(this._schemeEnd, 4) && J.startsWith$1$s(this._uri, "http");
    },
    get$_isHttps: function() {
      return J.$eq$(this._schemeEnd, 5) && J.startsWith$1$s(this._uri, "https");
    },
    get$_isPackage: function() {
      return J.$eq$(this._schemeEnd, 7) && J.startsWith$1$s(this._uri, "package");
    },
    get$hasAbsolutePath: function() {
      return J.startsWith$2$s(this._uri, "/", this._pathStart);
    },
    get$hasEmptyPath: function() {
      return J.$eq$(this._pathStart, this._queryStart);
    },
    get$scheme: function() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (J.$le$n(t1, 0))
        return "";
      t2 = _this._schemeCache;
      if (t2 != null)
        return t2;
      if (_this.get$_isHttp())
        t1 = _this._schemeCache = "http";
      else if (_this.get$_isHttps()) {
        _this._schemeCache = "https";
        t1 = "https";
      } else if (_this.get$_isFile()) {
        _this._schemeCache = "file";
        t1 = "file";
      } else if (_this.get$_isPackage()) {
        _this._schemeCache = "package";
        t1 = "package";
      } else {
        t1 = H.stringTypeCheck(J.substring$2$s(_this._uri, 0, t1));
        _this._schemeCache = t1;
      }
      return t1;
    },
    get$userInfo: function() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd,
        t3 = J.getInterceptor$ansx(t2),
        t4 = J.getInterceptor$n(t1);
      return t4.$gt(t1, t3.$add(t2, 3)) ? J.substring$2$s(this._uri, t3.$add(t2, 3), t4.$sub(t1, 1)) : "";
    },
    get$host: function(_) {
      var t1 = this._hostStart;
      return J.$gt$n(t1, 0) ? J.substring$2$s(this._uri, t1, this._portStart) : "";
    },
    get$port: function(_) {
      var _this = this;
      if (_this.get$hasPort())
        return P.int_parse(J.substring$2$s(_this._uri, J.$add$ansx(_this._portStart, 1), _this._pathStart), null, null);
      if (_this.get$_isHttp())
        return 80;
      if (_this.get$_isHttps())
        return 443;
      return 0;
    },
    get$path: function(_) {
      return J.substring$2$s(this._uri, this._pathStart, this._queryStart);
    },
    get$query: function() {
      var t1 = this._queryStart,
        t2 = this._fragmentStart,
        t3 = J.getInterceptor$n(t1);
      return t3.$lt(t1, t2) ? J.substring$2$s(this._uri, t3.$add(t1, 1), t2) : "";
    },
    get$fragment: function() {
      var t1 = this._fragmentStart,
        t2 = this._uri,
        t3 = J.getInterceptor$asx(t2),
        t4 = J.getInterceptor$n(t1);
      return t4.$lt(t1, t3.get$length(t2)) ? t3.substring$1(t2, t4.$add(t1, 1)) : "";
    },
    get$pathSegments: function() {
      var t3, parts, i,
        start = this._pathStart,
        end = this._queryStart,
        t1 = this._uri,
        t2 = J.getInterceptor$s(t1);
      if (t2.startsWith$2(t1, "/", start)) {
        if (typeof start !== "number")
          return start.$add();
        ++start;
      }
      if (start == end)
        return C.List_empty1;
      t3 = P.String;
      parts = H.setRuntimeTypeInfo([], [t3]);
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        if (t2.codeUnitAt$1(t1, i) === 47) {
          C.JSArray_methods.add$1(parts, t2.substring$2(t1, start, i));
          start = i + 1;
        }
        ++i;
      }
      C.JSArray_methods.add$1(parts, t2.substring$2(t1, start, end));
      return P.List_List$unmodifiable(parts, t3);
    },
    _isPort$1: function(port) {
      var portDigitStart, t1;
      H.stringTypeCheck(port);
      portDigitStart = J.$add$ansx(this._portStart, 1);
      t1 = port.length;
      if (typeof portDigitStart !== "number")
        return portDigitStart.$add();
      return portDigitStart + t1 === this._pathStart && J.startsWith$2$s(this._uri, port, portDigitStart);
    },
    removeFragment$0: function() {
      var t1, _this = this;
      if (!_this.get$hasFragment())
        return _this;
      t1 = _this._fragmentStart;
      return P._SimpleUri$(J.substring$2$s(_this._uri, 0, t1), _this._schemeEnd, _this._hostStart, _this._portStart, _this._pathStart, _this._queryStart, t1, _this._schemeCache);
    },
    resolve$1: function(reference) {
      return this.resolveUri$1(P.Uri_parse(H.stringTypeCheck(reference)));
    },
    resolveUri$1: function(reference) {
      H.interceptedTypeCheck(reference, "$isUri");
      if (reference instanceof P._SimpleUri)
        return this._simpleMerge$2(this, reference);
      return this._toNonSimple$0().resolveUri$1(reference);
    },
    _simpleMerge$2: function(base, ref) {
      var isSimple, t1, t2, delta, refStart, t3, baseUri, refUri, baseStart, baseEnd, baseStart0, refEnd, backCount, refStart0, insert;
      H.interceptedTypeCheck(base, "$is_SimpleUri");
      H.interceptedTypeCheck(ref, "$is_SimpleUri");
      if (ref.get$hasScheme())
        return ref;
      if (ref.get$hasAuthority()) {
        if (!base.get$hasScheme())
          return ref;
        if (base.get$_isFile())
          isSimple = !ref.get$hasEmptyPath();
        else if (base.get$_isHttp())
          isSimple = !ref._isPort$1("80");
        else
          isSimple = !base.get$_isHttps() || !ref._isPort$1("443");
        if (isSimple) {
          t1 = base._schemeEnd;
          t2 = J.getInterceptor$ansx(t1);
          delta = t2.$add(t1, 1);
          return P._SimpleUri$(J.$add$ansx(J.substring$2$s(base._uri, 0, t2.$add(t1, 1)), J.substring$1$s(ref._uri, J.$add$ansx(ref._schemeEnd, 1))), t1, J.$add$ansx(ref._hostStart, delta), J.$add$ansx(ref._portStart, delta), J.$add$ansx(ref._pathStart, delta), J.$add$ansx(ref._queryStart, delta), J.$add$ansx(ref._fragmentStart, delta), base._schemeCache);
        } else
          return this._toNonSimple$0().resolveUri$1(ref);
      }
      if (ref.get$hasEmptyPath()) {
        if (ref.get$hasQuery()) {
          t1 = base._queryStart;
          t2 = ref._queryStart;
          delta = J.$sub$n(t1, t2);
          return P._SimpleUri$(J.$add$ansx(J.substring$2$s(base._uri, 0, t1), J.substring$1$s(ref._uri, t2)), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, J.$add$ansx(t2, delta), J.$add$ansx(ref._fragmentStart, delta), base._schemeCache);
        }
        if (ref.get$hasFragment()) {
          t1 = base._fragmentStart;
          t2 = ref._fragmentStart;
          delta = J.$sub$n(t1, t2);
          return P._SimpleUri$(J.$add$ansx(J.substring$2$s(base._uri, 0, t1), J.substring$1$s(ref._uri, t2)), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, base._queryStart, J.$add$ansx(t2, delta), base._schemeCache);
        }
        return base.removeFragment$0();
      }
      if (ref.get$hasAbsolutePath()) {
        t1 = base._pathStart;
        t2 = ref._pathStart;
        delta = J.$sub$n(t1, t2);
        return P._SimpleUri$(J.$add$ansx(J.substring$2$s(base._uri, 0, t1), J.substring$1$s(ref._uri, t2)), base._schemeEnd, base._hostStart, base._portStart, t1, J.$add$ansx(ref._queryStart, delta), J.$add$ansx(ref._fragmentStart, delta), base._schemeCache);
      }
      if (base.get$hasEmptyPath() && base.get$hasAuthority()) {
        refStart = ref._pathStart;
        for (t1 = ref._uri, t2 = J.getInterceptor$s(t1); t2.startsWith$2(t1, "../", refStart);) {
          if (typeof refStart !== "number")
            return refStart.$add();
          refStart += 3;
        }
        t3 = base._pathStart;
        delta = J.$add$ansx(J.$sub$n(t3, refStart), 1);
        return P._SimpleUri$(H.S(J.substring$2$s(base._uri, 0, t3)) + "/" + H.S(t2.substring$1(t1, refStart)), base._schemeEnd, base._hostStart, base._portStart, t3, J.$add$ansx(ref._queryStart, delta), J.$add$ansx(ref._fragmentStart, delta), base._schemeCache);
      }
      baseUri = base._uri;
      refUri = ref._uri;
      baseStart = base._pathStart;
      baseEnd = base._queryStart;
      for (t1 = J.getInterceptor$s(baseUri), baseStart0 = baseStart; t1.startsWith$2(baseUri, "../", baseStart0);) {
        if (typeof baseStart0 !== "number")
          return baseStart0.$add();
        baseStart0 += 3;
      }
      refStart = ref._pathStart;
      refEnd = ref._queryStart;
      t1 = J.getInterceptor$s(refUri);
      backCount = 0;
      while (true) {
        if (typeof refStart !== "number")
          return refStart.$add();
        refStart0 = refStart + 3;
        if (typeof refEnd !== "number")
          return H.iae(refEnd);
        if (!(refStart0 <= refEnd && t1.startsWith$2(refUri, "../", refStart)))
          break;
        ++backCount;
        refStart = refStart0;
      }
      insert = "";
      while (true) {
        if (typeof baseEnd !== "number")
          return baseEnd.$gt();
        if (typeof baseStart0 !== "number")
          return H.iae(baseStart0);
        if (!(baseEnd > baseStart0))
          break;
        --baseEnd;
        if (C.JSString_methods.codeUnitAt$1(baseUri, baseEnd) === 47) {
          if (backCount === 0) {
            insert = "/";
            break;
          }
          --backCount;
          insert = "/";
        }
      }
      if (baseEnd === baseStart0 && !base.get$hasScheme() && !base.get$hasAbsolutePath()) {
        refStart -= backCount * 3;
        insert = "";
      }
      delta = baseEnd - refStart + insert.length;
      return P._SimpleUri$(H.S(C.JSString_methods.substring$2(baseUri, 0, baseEnd)) + insert + H.S(t1.substring$1(refUri, refStart)), base._schemeEnd, base._hostStart, base._portStart, baseStart, refEnd + delta, J.$add$ansx(ref._fragmentStart, delta), base._schemeCache);
    },
    toFilePath$0: function() {
      var t1, t2, windows, _this = this;
      if (J.$ge$n(_this._schemeEnd, 0) && !_this.get$_isFile())
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a " + H.S(_this.get$scheme()) + " URI"));
      t1 = _this._queryStart;
      t2 = J.getInterceptor$n(t1);
      if (t2.$lt(t1, J.get$length$asx(_this._uri))) {
        if (t2.$lt(t1, _this._fragmentStart))
          throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a query component"));
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a fragment component"));
      }
      windows = P._Uri__isWindows();
      return windows ? P._Uri__toWindowsFilePath(_this) : _this._toFilePath$0();
    },
    _toFilePath$0: function() {
      var _this = this;
      if (J.$lt$n(_this._hostStart, _this._portStart))
        throw H.wrapException(P.UnsupportedError$("Cannot extract a non-Windows file path from a file URI with an authority"));
      return _this.get$path(_this);
    },
    get$hashCode: function(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = H.intTypeCheck(J.get$hashCode$(this._uri)) : t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return !!J.getInterceptor$(other).$isUri && J.$eq$(this._uri, other.toString$0(0));
    },
    _toNonSimple$0: function() {
      var _this = this, _null = null,
        t1 = _this.get$scheme(),
        t2 = _this.get$userInfo(),
        t3 = _this.get$hasAuthority() ? _this.get$host(_this) : _null,
        t4 = _this.get$hasPort() ? _this.get$port(_this) : _null,
        t5 = _this.get$path(_this),
        t6 = _this.get$hasQuery() ? _this.get$query() : _null;
      return P._Uri$_internal(t1, t2, t3, t4, t5, t6, _this.get$hasFragment() ? _this.get$fragment() : _null);
    },
    toString$0: function(_) {
      return this._uri;
    },
    $isUri: 1
  };
  P._DataUri.prototype = {};
  P._FakeUserTag.prototype = {$isUserTag: 1};
  P.ServiceExtensionResponse.prototype = {};
  P.UserTag.prototype = {};
  P.Metric.prototype = {};
  P.Gauge.prototype = {};
  P.Counter.prototype = {};
  P.Metrics.prototype = {};
  P.ServiceProtocolInfo.prototype = {};
  P.Service.prototype = {};
  P.Flow.prototype = {};
  P.Timeline.prototype = {};
  P.TimelineTask.prototype = {};
  P._AsyncBlock.prototype = {};
  P._SyncBlock.prototype = {};
  W.HtmlElement.prototype = {$isHtmlElement: 1, $isNoncedElement: 1};
  W.AbortPaymentEvent.prototype = {$isAbortPaymentEvent: 1};
  W.AbsoluteOrientationSensor.prototype = {$isAbsoluteOrientationSensor: 1};
  W.AbstractWorker.prototype = {$isEventTarget: 1};
  W.Accelerometer.prototype = {$isAccelerometer: 1};
  W.AccessibleNode.prototype = {$isAccessibleNode: 1};
  W.AccessibleNodeList.prototype = {$isAccessibleNodeList: 1};
  W.AmbientLightSensor.prototype = {$isAmbientLightSensor: 1};
  W.AnchorElement.prototype = {$isAnchorElement: 1, $isHtmlHyperlinkElementUtils: 1};
  W.Animation.prototype = {$isAnimation: 1};
  W.AnimationEffectReadOnly.prototype = {$isAnimationEffectReadOnly: 1};
  W.AnimationEffectTiming.prototype = {$isAnimationEffectTiming: 1};
  W.AnimationEffectTimingReadOnly.prototype = {$isAnimationEffectTimingReadOnly: 1};
  W.AnimationEvent.prototype = {$isAnimationEvent: 1};
  W.AnimationPlaybackEvent.prototype = {$isAnimationPlaybackEvent: 1};
  W.AnimationTimeline.prototype = {$isAnimationTimeline: 1};
  W.AnimationWorkletGlobalScope.prototype = {$isAnimationWorkletGlobalScope: 1};
  W.ApplicationCache.prototype = {$isApplicationCache: 1};
  W.ApplicationCacheErrorEvent.prototype = {$isApplicationCacheErrorEvent: 1};
  W.AreaElement.prototype = {$isAreaElement: 1, $isHtmlHyperlinkElementUtils: 1};
  W.AudioElement.prototype = {$isAudioElement: 1};
  W.AuthenticatorAssertionResponse.prototype = {$isAuthenticatorAssertionResponse: 1};
  W.AuthenticatorAttestationResponse.prototype = {$isAuthenticatorAttestationResponse: 1};
  W.AuthenticatorResponse.prototype = {$isAuthenticatorResponse: 1};
  W.BRElement.prototype = {$isBRElement: 1};
  W.BackgroundFetchClickEvent.prototype = {$isBackgroundFetchClickEvent: 1};
  W.BackgroundFetchEvent.prototype = {$isBackgroundFetchEvent: 1};
  W.BackgroundFetchFailEvent.prototype = {$isBackgroundFetchFailEvent: 1};
  W.BackgroundFetchFetch.prototype = {$isBackgroundFetchFetch: 1};
  W.BackgroundFetchManager.prototype = {$isBackgroundFetchManager: 1};
  W.BackgroundFetchRegistration.prototype = {$isBackgroundFetchRegistration: 1};
  W.BackgroundFetchSettledFetch.prototype = {$isBackgroundFetchSettledFetch: 1};
  W.BackgroundFetchedEvent.prototype = {$isBackgroundFetchedEvent: 1};
  W.BarProp.prototype = {$isBarProp: 1};
  W.BarcodeDetector.prototype = {$isBarcodeDetector: 1};
  W.BaseElement.prototype = {$isBaseElement: 1};
  W.BatteryManager.prototype = {$isBatteryManager: 1};
  W.BeforeInstallPromptEvent.prototype = {$isBeforeInstallPromptEvent: 1};
  W.BeforeUnloadEvent.prototype = {$isBeforeUnloadEvent: 1};
  W.Blob.prototype = {$isBlob: 1};
  W.BlobEvent.prototype = {$isBlobEvent: 1};
  W.BluetoothRemoteGattDescriptor.prototype = {$isBluetoothRemoteGattDescriptor: 1};
  W.Body.prototype = {$isBody: 1};
  W.BodyElement.prototype = {$isBodyElement: 1, $isWindowEventHandlers: 1};
  W.BroadcastChannel.prototype = {$isBroadcastChannel: 1};
  W.BudgetState.prototype = {$isBudgetState: 1};
  W.ButtonElement.prototype = {$isButtonElement: 1};
  W.CDataSection.prototype = {$isCDataSection: 1};
  W.CacheStorage.prototype = {$isCacheStorage: 1};
  W.CanMakePaymentEvent.prototype = {$isCanMakePaymentEvent: 1};
  W.CanvasCaptureMediaStreamTrack.prototype = {$isCanvasCaptureMediaStreamTrack: 1};
  W.CanvasElement.prototype = {$isCanvasElement: 1, $isCanvasImageSource: 1};
  W.CanvasGradient.prototype = {$isCanvasGradient: 1};
  W.CanvasPattern.prototype = {$isCanvasPattern: 1};
  W.CanvasRenderingContext.prototype = {};
  W.CanvasRenderingContext2D.prototype = {$isCanvasRenderingContext: 1, $isCanvasRenderingContext2D: 1};
  W.CharacterData.prototype = {$isCharacterData: 1, $isChildNode: 1, $isNonDocumentTypeChildNode: 1};
  W.ChildNode.prototype = {};
  W.Client.prototype = {$isClient: 1};
  W.Clients.prototype = {$isClients: 1};
  W.ClipboardEvent.prototype = {$isClipboardEvent: 1};
  W.CloseEvent.prototype = {$isCloseEvent: 1};
  W.Comment.prototype = {$isComment: 1};
  W.CompositionEvent.prototype = {$isCompositionEvent: 1};
  W.ContentElement.prototype = {$isContentElement: 1};
  W.CookieStore.prototype = {$isCookieStore: 1};
  W.Coordinates.prototype = {$isCoordinates: 1};
  W.Credential.prototype = {$isCredential: 1};
  W.CredentialUserData.prototype = {$isCredentialUserData: 1};
  W.CredentialsContainer.prototype = {$isCredentialsContainer: 1};
  W.Crypto.prototype = {$isCrypto: 1};
  W.CryptoKey.prototype = {$isCryptoKey: 1};
  W.Css.prototype = {$isCss: 1};
  W.CssCharsetRule.prototype = {$isCssCharsetRule: 1};
  W.CssConditionRule.prototype = {$isCssConditionRule: 1};
  W.CssFontFaceRule.prototype = {$isCssFontFaceRule: 1};
  W.CssGroupingRule.prototype = {$isCssGroupingRule: 1};
  W.CssImageValue.prototype = {$isCssImageValue: 1};
  W.CssImportRule.prototype = {$isCssImportRule: 1};
  W.CssKeyframeRule.prototype = {$isCssKeyframeRule: 1};
  W.CssKeyframesRule.prototype = {$isCssKeyframesRule: 1};
  W.CssKeywordValue.prototype = {$isCssKeywordValue: 1};
  W.CssMatrixComponent.prototype = {$isCssMatrixComponent: 1};
  W.CssMediaRule.prototype = {$isCssMediaRule: 1};
  W.CssNamespaceRule.prototype = {$isCssNamespaceRule: 1};
  W.CssNumericValue.prototype = {$isCssNumericValue: 1};
  W.CssPageRule.prototype = {$isCssPageRule: 1};
  W.CssPerspective.prototype = {$isCssPerspective: 1};
  W.CssPositionValue.prototype = {$isCssPositionValue: 1};
  W.CssResourceValue.prototype = {$isCssResourceValue: 1};
  W.CssRotation.prototype = {$isCssRotation: 1};
  W.CssRule.prototype = {$isCssRule: 1};
  W.CssScale.prototype = {$isCssScale: 1};
  W.CssSkew.prototype = {$isCssSkew: 1};
  W.CssStyleDeclaration.prototype = {$isCssStyleDeclaration: 1, $isCssStyleDeclarationBase: 1};
  W._CssStyleDeclarationSet.prototype = {$isCssStyleDeclarationBase: 1};
  W.CssStyleDeclarationBase.prototype = {};
  W.CssStyleRule.prototype = {$isCssStyleRule: 1};
  W.CssStyleSheet.prototype = {$isCssStyleSheet: 1};
  W.CssStyleValue.prototype = {$isCssStyleValue: 1};
  W.CssSupportsRule.prototype = {$isCssSupportsRule: 1};
  W.CssTransformComponent.prototype = {$isCssTransformComponent: 1};
  W.CssTransformValue.prototype = {$isCssTransformValue: 1};
  W.CssTranslation.prototype = {$isCssTranslation: 1};
  W.CssUnitValue.prototype = {$isCssUnitValue: 1};
  W.CssUnparsedValue.prototype = {$isCssUnparsedValue: 1};
  W.CssVariableReferenceValue.prototype = {$isCssVariableReferenceValue: 1};
  W.CssViewportRule.prototype = {$isCssViewportRule: 1};
  W.CssurlImageValue.prototype = {$isCssurlImageValue: 1};
  W.CustomElementRegistry.prototype = {$isCustomElementRegistry: 1};
  W.CustomEvent.prototype = {$isCustomEvent: 1};
  W.DListElement.prototype = {$isDListElement: 1};
  W.DataElement.prototype = {$isDataElement: 1};
  W.DataListElement.prototype = {$isDataListElement: 1};
  W.DataTransfer.prototype = {$isDataTransfer: 1};
  W.DataTransferItem.prototype = {$isDataTransferItem: 1};
  W.DataTransferItemList.prototype = {$isDataTransferItemList: 1};
  W.DedicatedWorkerGlobalScope.prototype = {$isDedicatedWorkerGlobalScope: 1};
  W.DeprecatedStorageInfo.prototype = {$isDeprecatedStorageInfo: 1};
  W.DeprecatedStorageQuota.prototype = {$isDeprecatedStorageQuota: 1};
  W.DeprecationReport.prototype = {$isDeprecationReport: 1};
  W.DetailsElement.prototype = {$isDetailsElement: 1};
  W.DetectedBarcode.prototype = {$isDetectedBarcode: 1};
  W.DetectedFace.prototype = {$isDetectedFace: 1};
  W.DetectedText.prototype = {$isDetectedText: 1};
  W.DeviceAcceleration.prototype = {$isDeviceAcceleration: 1};
  W.DeviceMotionEvent.prototype = {$isDeviceMotionEvent: 1};
  W.DeviceOrientationEvent.prototype = {$isDeviceOrientationEvent: 1};
  W.DeviceRotationRate.prototype = {$isDeviceRotationRate: 1};
  W.DialogElement.prototype = {$isDialogElement: 1};
  W.DirectoryEntry.prototype = {$isDirectoryEntry: 1};
  W.DirectoryReader.prototype = {$isDirectoryReader: 1};
  W.DivElement.prototype = {$isDivElement: 1};
  W.Document.prototype = {$isDocument: 1};
  W.DocumentFragment.prototype = {$isDocumentFragment: 1, $isNonElementParentNode: 1, $isParentNode: 1};
  W.DocumentOrShadowRoot.prototype = {$isDocumentOrShadowRoot: 1};
  W.DocumentTimeline.prototype = {$isDocumentTimeline: 1};
  W.DomError.prototype = {$isDomError: 1};
  W.DomException.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isDomException: 1
  };
  W.DomImplementation.prototype = {$isDomImplementation: 1};
  W.DomIterator.prototype = {$isDomIterator: 1};
  W.DomMatrix.prototype = {$isDomMatrix: 1};
  W.DomMatrixReadOnly.prototype = {$isDomMatrixReadOnly: 1};
  W.DomParser.prototype = {$isDomParser: 1};
  W.DomPoint.prototype = {$isDomPoint: 1};
  W.DomPointReadOnly.prototype = {$isDomPointReadOnly: 1};
  W.DomQuad.prototype = {$isDomQuad: 1};
  W.DomRectList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [[P.Rectangle, P.num]];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [[P.Rectangle, P.num]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Rectangle, P.num]];
    },
    $isDomRectList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [[P.Rectangle, P.num]];
    }
  };
  W.DomRectReadOnly.prototype = {$isDomRectReadOnly: 1, $is_RectangleBase: 1,
    $as_RectangleBase: function() {
      return [P.num];
    },
    $isRectangle: 1,
    $asRectangle: function() {
      return [P.num];
    }
  };
  W.DomStringList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [P.String];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [P.String];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [P.String];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $isDomStringList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.String];
    }
  };
  W.DomStringMap.prototype = {$isDomStringMap: 1};
  W.DomTokenList.prototype = {$isDomTokenList: 1};
  W._ChildrenElementList.prototype = {
    $asEfficientLengthIterable: function() {
      return [W.Element];
    },
    $asListBase: function() {
      return [W.Element];
    },
    $asListMixin: function() {
      return [W.Element];
    },
    $asIterable: function() {
      return [W.Element];
    },
    $asList: function() {
      return [W.Element];
    },
    $isNodeListWrapper: 1,
    $as_ListBase_Object_ListMixin: function() {
      return [W.Element];
    }
  };
  W.ElementList.prototype = {};
  W._FrozenElementList.prototype = {$isElementList: 1, $isNodeListWrapper: 1};
  W.Element.prototype = {$isChildNode: 1, $isElement: 1, $isGlobalEventHandlers: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W._ElementFactoryProvider.prototype = {};
  W.ScrollAlignment.prototype = {};
  W.EmbedElement.prototype = {$isEmbedElement: 1};
  W.Entry.prototype = {$isEntry: 1};
  W.ErrorEvent.prototype = {$isErrorEvent: 1};
  W.Event.prototype = {
    preventDefault$0: function(receiver) {
      return receiver.preventDefault();
    },
    $isEvent: 1
  };
  W.EventSource.prototype = {
    close$0: function(receiver) {
      return receiver.close();
    },
    get$onError: function(receiver) {
      return C.EventStreamProvider_error.forTarget$1(receiver);
    },
    get$onOpen: function(receiver) {
      return C.EventStreamProvider_open.forTarget$1(receiver);
    },
    $isEventSource: 1
  };
  W.Events.prototype = {};
  W.ElementEvents.prototype = {};
  W.EventTarget.prototype = {
    addEventListener$3: function(receiver, type, listener, useCapture) {
      H.stringTypeCheck(type);
      H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
      H.boolTypeCheck(useCapture);
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, useCapture);
    },
    addEventListener$2: function($receiver, type, listener) {
      return this.addEventListener$3($receiver, type, listener, null);
    },
    removeEventListener$3: function(receiver, type, listener, useCapture) {
      H.stringTypeCheck(type);
      H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
      H.boolTypeCheck(useCapture);
      if (listener != null)
        this._removeEventListener$3(receiver, type, listener, useCapture);
    },
    _addEventListener$3: function(receiver, type, listener, options) {
      H.stringTypeCheck(type);
      H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
      H.boolTypeCheck(options);
      return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), options);
    },
    _removeEventListener$3: function(receiver, type, listener, options) {
      H.stringTypeCheck(type);
      H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
      H.boolTypeCheck(options);
      return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), options);
    },
    $isEventTarget: 1
  };
  W.ExtendableEvent.prototype = {$isExtendableEvent: 1};
  W.ExtendableMessageEvent.prototype = {$isExtendableMessageEvent: 1};
  W.External.prototype = {$isExternal: 1};
  W.FaceDetector.prototype = {$isFaceDetector: 1};
  W.FederatedCredential.prototype = {$isCredentialUserData: 1, $isFederatedCredential: 1};
  W.FetchEvent.prototype = {$isFetchEvent: 1};
  W.FieldSetElement.prototype = {$isFieldSetElement: 1};
  W.File.prototype = {$isFile: 1};
  W.FileEntry.prototype = {$isFileEntry: 1};
  W.FileList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.File];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.File];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.File];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.File];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.File];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.File];
    },
    $isList: 1,
    $asList: function() {
      return [W.File];
    },
    $isFileList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.File];
    }
  };
  W.FileReader.prototype = {
    get$result: function(receiver) {
      var res = receiver.result;
      if (!!J.getInterceptor$(res).$isByteBuffer)
        return P.Uint8List_Uint8List$view(res);
      return res;
    },
    readAsArrayBuffer$1: function(receiver, blob) {
      return receiver.readAsArrayBuffer(H.interceptedTypeCheck(blob, "$isBlob"));
    },
    get$onError: function(receiver) {
      return C.EventStreamProvider_error0.forTarget$1(receiver);
    },
    get$onLoad: function(receiver) {
      return C.EventStreamProvider_load.forTarget$1(receiver);
    },
    $isFileReader: 1
  };
  W.FileSystem.prototype = {$isFileSystem: 1};
  W.FileWriter.prototype = {$isFileWriter: 1};
  W.FocusEvent.prototype = {$isFocusEvent: 1};
  W.FontFace.prototype = {$isFontFace: 1};
  W.FontFaceSet.prototype = {$isFontFaceSet: 1};
  W.FontFaceSetLoadEvent.prototype = {$isFontFaceSetLoadEvent: 1};
  W.FontFaceSource.prototype = {$isFontFaceSource: 1};
  W.ForeignFetchEvent.prototype = {$isForeignFetchEvent: 1};
  W.FormData.prototype = {$isFormData: 1};
  W.FormElement.prototype = {$isFormElement: 1};
  W.Gamepad.prototype = {$isGamepad: 1};
  W.GamepadButton.prototype = {$isGamepadButton: 1};
  W.GamepadEvent.prototype = {$isGamepadEvent: 1};
  W.GamepadPose.prototype = {$isGamepadPose: 1};
  W.Geolocation.prototype = {$isGeolocation: 1};
  W._GeopositionWrapper.prototype = {$isInterceptor: 1, $isGeoposition: 1};
  W.Geoposition.prototype = {$isGeoposition: 1};
  W.GlobalEventHandlers.prototype = {$isInterceptor: 1, $isEventTarget: 1};
  W.Gyroscope.prototype = {$isGyroscope: 1};
  W.HRElement.prototype = {$isHRElement: 1};
  W.HashChangeEvent.prototype = {$isHashChangeEvent: 1};
  W.HeadElement.prototype = {$isHeadElement: 1};
  W.Headers.prototype = {$isHeaders: 1};
  W.HeadingElement.prototype = {$isHeadingElement: 1};
  W.History.prototype = {$isHistory: 1, $isHistoryBase: 1};
  W.HtmlCollection.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Node];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.Node];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isHtmlCollection: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.HtmlDocument.prototype = {$isHtmlDocument: 1};
  W.HtmlFormControlsCollection.prototype = {$isHtmlFormControlsCollection: 1};
  W.HtmlHtmlElement.prototype = {$isHtmlHtmlElement: 1};
  W.HtmlHyperlinkElementUtils.prototype = {$isHtmlHyperlinkElementUtils: 1};
  W.HtmlOptionsCollection.prototype = {$isHtmlOptionsCollection: 1};
  W.HttpRequest.prototype = {
    get$responseHeaders: function(receiver) {
      var t2, splitIdx, key, value,
        t1 = P.String,
        headers = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1),
        headersString = this.getAllResponseHeaders$0(receiver);
      if (headersString == null)
        return headers;
      for (t1 = C.JSArray_methods.get$iterator(H.setRuntimeTypeInfo(headersString.split("\r\n"), [t1])); t1.moveNext$0();) {
        t2 = t1.get$current();
        if (J.getInterceptor$asx(t2).get$isEmpty(t2))
          continue;
        splitIdx = C.JSString_methods.indexOf$1(t2, ": ");
        if (splitIdx === -1)
          continue;
        key = J.toLowerCase$0$s(C.JSString_methods.substring$2(t2, 0, splitIdx));
        if (typeof splitIdx !== "number")
          return splitIdx.$add();
        value = C.JSString_methods.substring$1(t2, splitIdx + 2);
        if (headers.containsKey$1(key))
          headers.$indexSet(0, key, H.S(headers.$index(0, key)) + ", " + H.S(value));
        else
          headers.$indexSet(0, key, value);
      }
      return headers;
    },
    open$5$async$password$user: function(receiver, method, url, async, password, user) {
      return receiver.open(H.stringTypeCheck(method), H.stringTypeCheck(url), H.boolTypeCheck(async), H.stringTypeCheck(user), H.stringTypeCheck(password));
    },
    open$3$async: function($receiver, method, url, async) {
      return $receiver.open(method, url, async);
    },
    get$response: function(receiver) {
      return W._convertNativeToDart_XHR_Response(receiver.response);
    },
    abort$0: function(receiver) {
      return receiver.abort();
    },
    getAllResponseHeaders$0: function(receiver) {
      return receiver.getAllResponseHeaders();
    },
    send$1: function(receiver, body_OR_data) {
      return receiver.send(body_OR_data);
    },
    send$0: function($receiver) {
      return $receiver.send();
    },
    setRequestHeader$2: function(receiver, $name, value) {
      return receiver.setRequestHeader(H.stringTypeCheck($name), H.stringTypeCheck(value));
    },
    set$responseType: function(receiver, responseType) {
      receiver.responseType = H.stringTypeCheck(responseType);
    },
    set$withCredentials: function(receiver, withCredentials) {
      receiver.withCredentials = H.boolTypeCheck(withCredentials);
    },
    $isHttpRequest: 1,
    get$status: function(receiver) {
      return receiver.status;
    },
    get$statusText: function(receiver) {
      return receiver.statusText;
    }
  };
  W.HttpRequest_request_closure0.prototype = {$signature: 30};
  W.HttpRequest_request_closure.prototype = {
    call$1: function(e) {
      var t1, t2, accepted, fileUri, notModified, unknownRedirect, t3;
      H.interceptedTypeCheck(e, "$isProgressEvent");
      t1 = this.xhr;
      t2 = J.getInterceptor$x(t1);
      accepted = J.$ge$n(t2.get$status(t1), 200) && J.$lt$n(t2.get$status(t1), 300);
      fileUri = J.$eq$(t2.get$status(t1), 0);
      notModified = J.$eq$(t2.get$status(t1), 304);
      unknownRedirect = J.$gt$n(t2.get$status(t1), 307) && J.$lt$n(t2.get$status(t1), 400);
      t2 = accepted || fileUri || notModified || unknownRedirect;
      t3 = this.completer;
      if (t2)
        t3.complete$1(t1);
      else
        t3.completeError$1(e);
    },
    $signature: 12
  };
  W.HttpRequestEventTarget.prototype = {
    get$onError: function(receiver) {
      return C.EventStreamProvider_error0.forTarget$1(receiver);
    },
    get$onLoad: function(receiver) {
      return C.EventStreamProvider_load.forTarget$1(receiver);
    },
    $isHttpRequestEventTarget: 1
  };
  W.HttpRequestUpload.prototype = {$isHttpRequestUpload: 1};
  W.IFrameElement.prototype = {$isIFrameElement: 1};
  W.IdleDeadline.prototype = {$isIdleDeadline: 1};
  W.ImageBitmap.prototype = {$isImageBitmap: 1};
  W.ImageBitmapRenderingContext.prototype = {$isImageBitmapRenderingContext: 1};
  W.ImageCapture.prototype = {$isImageCapture: 1};
  W.ImageData.prototype = {$isImageData: 1};
  W.ImageElement.prototype = {$isImageElement: 1, $isCanvasImageSource: 1};
  W.InputDeviceCapabilities.prototype = {$isInputDeviceCapabilities: 1};
  W.InputElement.prototype = {$isInputElement: 1, $isInputElementBase: 1, $isHiddenInputElement: 1, $isTextInputElementBase: 1, $isSearchInputElement: 1, $isTextInputElement: 1, $isUrlInputElement: 1, $isTelephoneInputElement: 1, $isEmailInputElement: 1, $isPasswordInputElement: 1, $isRangeInputElementBase: 1, $isDateInputElement: 1, $isMonthInputElement: 1, $isWeekInputElement: 1, $isTimeInputElement: 1, $isLocalDateTimeInputElement: 1, $isNumberInputElement: 1, $isRangeInputElement: 1, $isCheckboxInputElement: 1, $isRadioButtonInputElement: 1, $isFileUploadInputElement: 1, $isSubmitButtonInputElement: 1, $isImageButtonInputElement: 1, $isResetButtonInputElement: 1, $isButtonInputElement: 1};
  W.InputElementBase.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.HiddenInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.TextInputElementBase.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.SearchInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isTextInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.TextInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isTextInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.UrlInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isTextInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.TelephoneInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isTextInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.EmailInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isTextInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.PasswordInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isTextInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.RangeInputElementBase.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.DateInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.MonthInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.WeekInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.TimeInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.LocalDateTimeInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.NumberInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.RangeInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.CheckboxInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.RadioButtonInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.FileUploadInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.SubmitButtonInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.ImageButtonInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.ResetButtonInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.ButtonInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.InstallEvent.prototype = {$isInstallEvent: 1};
  W.IntersectionObserver.prototype = {$isIntersectionObserver: 1};
  W.IntersectionObserverEntry.prototype = {$isIntersectionObserverEntry: 1};
  W.InterventionReport.prototype = {$isInterventionReport: 1};
  W.KeyboardEvent.prototype = {$isKeyboardEvent: 1,
    get$key: function(receiver) {
      return receiver.key;
    }
  };
  W.KeyframeEffect.prototype = {$isKeyframeEffect: 1};
  W.KeyframeEffectReadOnly.prototype = {$isKeyframeEffectReadOnly: 1};
  W.LIElement.prototype = {$isLIElement: 1};
  W.LabelElement.prototype = {$isLabelElement: 1};
  W.LegendElement.prototype = {$isLegendElement: 1};
  W.LinearAccelerationSensor.prototype = {$isLinearAccelerationSensor: 1};
  W.LinkElement.prototype = {$isLinkElement: 1};
  W.Location.prototype = {
    reload$0: function(receiver) {
      return receiver.reload();
    },
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isLocation: 1,
    $isLocationBase: 1
  };
  W.Magnetometer.prototype = {$isMagnetometer: 1};
  W.MapElement.prototype = {$isMapElement: 1};
  W.MediaCapabilities.prototype = {$isMediaCapabilities: 1};
  W.MediaCapabilitiesInfo.prototype = {$isMediaCapabilitiesInfo: 1};
  W.MediaDeviceInfo.prototype = {$isMediaDeviceInfo: 1};
  W.MediaDevices.prototype = {$isMediaDevices: 1};
  W.MediaElement.prototype = {$isMediaElement: 1};
  W.MediaEncryptedEvent.prototype = {$isMediaEncryptedEvent: 1};
  W.MediaError.prototype = {$isMediaError: 1};
  W.MediaKeyMessageEvent.prototype = {$isMediaKeyMessageEvent: 1};
  W.MediaKeySession.prototype = {$isMediaKeySession: 1};
  W.MediaKeyStatusMap.prototype = {$isMediaKeyStatusMap: 1};
  W.MediaKeySystemAccess.prototype = {$isMediaKeySystemAccess: 1};
  W.MediaKeys.prototype = {$isMediaKeys: 1};
  W.MediaKeysPolicy.prototype = {$isMediaKeysPolicy: 1};
  W.MediaList.prototype = {$isMediaList: 1};
  W.MediaMetadata.prototype = {$isMediaMetadata: 1};
  W.MediaQueryList.prototype = {$isMediaQueryList: 1};
  W.MediaQueryListEvent.prototype = {$isMediaQueryListEvent: 1};
  W.MediaRecorder.prototype = {$isMediaRecorder: 1};
  W.MediaSession.prototype = {$isMediaSession: 1};
  W.MediaSettingsRange.prototype = {$isMediaSettingsRange: 1};
  W.MediaSource.prototype = {$isMediaSource: 1};
  W.MediaStream.prototype = {$isMediaStream: 1};
  W.MediaStreamEvent.prototype = {$isMediaStreamEvent: 1};
  W.MediaStreamTrack.prototype = {$isMediaStreamTrack: 1};
  W.MediaStreamTrackEvent.prototype = {$isMediaStreamTrackEvent: 1};
  W.MemoryInfo.prototype = {$isMemoryInfo: 1};
  W.MenuElement.prototype = {$isMenuElement: 1};
  W.MessageChannel.prototype = {$isMessageChannel: 1};
  W.MessageEvent.prototype = {
    get$data: function(receiver) {
      return P.convertNativeToDart_SerializedScriptValue(receiver.data);
    },
    $isMessageEvent: 1
  };
  W.MessagePort.prototype = {
    addEventListener$3: function(receiver, type, listener, useCapture) {
      H.stringTypeCheck(type);
      H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
      H.boolTypeCheck(useCapture);
      if (type === "message")
        this._html$_start$0(receiver);
      this.super$EventTarget$addEventListener(receiver, type, listener, useCapture);
    },
    addEventListener$2: function($receiver, type, listener) {
      return this.addEventListener$3($receiver, type, listener, null);
    },
    _html$_start$0: function(receiver) {
      return receiver.start();
    },
    $isMessagePort: 1
  };
  W.MetaElement.prototype = {$isMetaElement: 1};
  W.Metadata.prototype = {$isMetadata: 1};
  W.MeterElement.prototype = {$isMeterElement: 1};
  W.MidiAccess.prototype = {$isMidiAccess: 1};
  W.MidiConnectionEvent.prototype = {$isMidiConnectionEvent: 1};
  W.MidiInput.prototype = {$isMidiInput: 1};
  W.MidiInputMap.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    },
    $isMidiInputMap: 1
  };
  W.MidiMessageEvent.prototype = {$isMidiMessageEvent: 1};
  W.MidiOutput.prototype = {$isMidiOutput: 1};
  W.MidiOutputMap.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    },
    $isMidiOutputMap: 1
  };
  W.MidiPort.prototype = {$isMidiPort: 1};
  W.MimeType.prototype = {$isMimeType: 1};
  W.MimeTypeArray.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.MimeType];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.MimeType];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.MimeType];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.MimeType];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.MimeType];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.MimeType];
    },
    $isList: 1,
    $asList: function() {
      return [W.MimeType];
    },
    $isMimeTypeArray: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.MimeType];
    }
  };
  W.ModElement.prototype = {$isModElement: 1};
  W.MouseEvent.prototype = {$isMouseEvent: 1};
  W.MutationEvent.prototype = {$isMutationEvent: 1};
  W.MutationObserver.prototype = {$isMutationObserver: 1};
  W.MutationRecord.prototype = {$isMutationRecord: 1};
  W.NavigationPreloadManager.prototype = {$isNavigationPreloadManager: 1};
  W.Navigator.prototype = {$isNavigator: 1, $isNavigatorAutomationInformation: 1, $isNavigatorCookies: 1, $isNavigatorID: 1, $isNavigatorLanguage: 1, $isNavigatorOnLine: 1};
  W.NavigatorAutomationInformation.prototype = {$isNavigatorAutomationInformation: 1};
  W.NavigatorConcurrentHardware.prototype = {$isNavigatorConcurrentHardware: 1};
  W.NavigatorCookies.prototype = {$isNavigatorCookies: 1};
  W.NavigatorID.prototype = {};
  W.NavigatorLanguage.prototype = {};
  W.NavigatorOnLine.prototype = {};
  W.NavigatorUserMediaError.prototype = {$isNavigatorUserMediaError: 1};
  W.NetworkInformation.prototype = {$isNetworkInformation: 1};
  W._ChildNodeListLazy.prototype = {
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $asListBase: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $asIterable: function() {
      return [W.Node];
    },
    $asList: function() {
      return [W.Node];
    },
    $isNodeListWrapper: 1,
    $as_ListBase_Object_ListMixin: function() {
      return [W.Node];
    }
  };
  W.Node.prototype = {
    toString$0: function(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    },
    $isNode: 1
  };
  W.NodeFilter.prototype = {$isNodeFilter: 1};
  W.NodeIterator.prototype = {$isNodeIterator: 1};
  W.NodeList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Node];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.Node];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isNodeList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.NonDocumentTypeChildNode.prototype = {$isNonDocumentTypeChildNode: 1};
  W.NonElementParentNode.prototype = {$isNonElementParentNode: 1};
  W.NoncedElement.prototype = {$isNoncedElement: 1};
  W.Notification.prototype = {$isNotification: 1};
  W.NotificationEvent.prototype = {$isNotificationEvent: 1};
  W.OListElement.prototype = {$isOListElement: 1};
  W.ObjectElement.prototype = {$isObjectElement: 1};
  W.OffscreenCanvas.prototype = {$isOffscreenCanvas: 1};
  W.OffscreenCanvasRenderingContext2D.prototype = {$isOffscreenCanvasRenderingContext2D: 1, $is_CanvasPath: 1};
  W.OptGroupElement.prototype = {$isOptGroupElement: 1};
  W.OptionElement.prototype = {$isOptionElement: 1};
  W.OrientationSensor.prototype = {$isOrientationSensor: 1};
  W.OutputElement.prototype = {$isOutputElement: 1};
  W.OverconstrainedError.prototype = {$isOverconstrainedError: 1};
  W.PageTransitionEvent.prototype = {$isPageTransitionEvent: 1};
  W.PaintRenderingContext2D.prototype = {$isPaintRenderingContext2D: 1, $is_CanvasPath: 1};
  W.PaintSize.prototype = {$isPaintSize: 1};
  W.PaintWorkletGlobalScope.prototype = {$isPaintWorkletGlobalScope: 1};
  W.ParagraphElement.prototype = {$isParagraphElement: 1};
  W.ParamElement.prototype = {$isParamElement: 1};
  W.ParentNode.prototype = {};
  W.PasswordCredential.prototype = {$isCredentialUserData: 1, $isPasswordCredential: 1};
  W.Path2D.prototype = {$isPath2D: 1, $is_CanvasPath: 1};
  W.PaymentAddress.prototype = {$isPaymentAddress: 1};
  W.PaymentInstruments.prototype = {$isPaymentInstruments: 1};
  W.PaymentManager.prototype = {$isPaymentManager: 1};
  W.PaymentRequest.prototype = {$isPaymentRequest: 1};
  W.PaymentRequestEvent.prototype = {$isPaymentRequestEvent: 1};
  W.PaymentRequestUpdateEvent.prototype = {$isPaymentRequestUpdateEvent: 1};
  W.PaymentResponse.prototype = {$isPaymentResponse: 1};
  W.Performance.prototype = {$isPerformance: 1};
  W.PerformanceEntry.prototype = {$isPerformanceEntry: 1};
  W.PerformanceLongTaskTiming.prototype = {$isPerformanceLongTaskTiming: 1};
  W.PerformanceMark.prototype = {$isPerformanceMark: 1};
  W.PerformanceMeasure.prototype = {$isPerformanceMeasure: 1};
  W.PerformanceNavigation.prototype = {$isPerformanceNavigation: 1};
  W.PerformanceNavigationTiming.prototype = {$isPerformanceNavigationTiming: 1};
  W.PerformanceObserver.prototype = {$isPerformanceObserver: 1};
  W.PerformanceObserverEntryList.prototype = {$isPerformanceObserverEntryList: 1};
  W.PerformancePaintTiming.prototype = {$isPerformancePaintTiming: 1};
  W.PerformanceResourceTiming.prototype = {$isPerformanceResourceTiming: 1};
  W.PerformanceServerTiming.prototype = {$isPerformanceServerTiming: 1};
  W.PerformanceTiming.prototype = {$isPerformanceTiming: 1};
  W.PermissionStatus.prototype = {$isPermissionStatus: 1};
  W.Permissions.prototype = {$isPermissions: 1};
  W.PhotoCapabilities.prototype = {$isPhotoCapabilities: 1};
  W.PictureElement.prototype = {$isPictureElement: 1};
  W.Plugin.prototype = {$isPlugin: 1};
  W.PluginArray.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Plugin];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.Plugin];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Plugin];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Plugin];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Plugin];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Plugin];
    },
    $isList: 1,
    $asList: function() {
      return [W.Plugin];
    },
    $isPluginArray: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Plugin];
    }
  };
  W.PointerEvent.prototype = {$isPointerEvent: 1};
  W.PopStateEvent.prototype = {$isPopStateEvent: 1};
  W.PositionError.prototype = {$isPositionError: 1};
  W.PreElement.prototype = {$isPreElement: 1};
  W.Presentation.prototype = {$isPresentation: 1};
  W.PresentationAvailability.prototype = {$isPresentationAvailability: 1};
  W.PresentationConnection.prototype = {$isPresentationConnection: 1};
  W.PresentationConnectionAvailableEvent.prototype = {$isPresentationConnectionAvailableEvent: 1};
  W.PresentationConnectionCloseEvent.prototype = {$isPresentationConnectionCloseEvent: 1};
  W.PresentationConnectionList.prototype = {$isPresentationConnectionList: 1};
  W.PresentationReceiver.prototype = {$isPresentationReceiver: 1};
  W.PresentationRequest.prototype = {$isPresentationRequest: 1};
  W.ProcessingInstruction.prototype = {$isProcessingInstruction: 1};
  W.ProgressElement.prototype = {$isProgressElement: 1};
  W.ProgressEvent.prototype = {$isProgressEvent: 1};
  W.PromiseRejectionEvent.prototype = {$isPromiseRejectionEvent: 1};
  W.PublicKeyCredential.prototype = {$isPublicKeyCredential: 1};
  W.PushEvent.prototype = {$isPushEvent: 1};
  W.PushManager.prototype = {$isPushManager: 1};
  W.PushMessageData.prototype = {$isPushMessageData: 1};
  W.PushSubscription.prototype = {$isPushSubscription: 1};
  W.PushSubscriptionOptions.prototype = {$isPushSubscriptionOptions: 1};
  W.QuoteElement.prototype = {$isQuoteElement: 1};
  W.Range.prototype = {$isRange: 1};
  W.RelatedApplication.prototype = {$isRelatedApplication: 1};
  W.RelativeOrientationSensor.prototype = {$isRelativeOrientationSensor: 1};
  W.RemotePlayback.prototype = {$isRemotePlayback: 1};
  W.ReportBody.prototype = {$isReportBody: 1};
  W.ReportingObserver.prototype = {$isReportingObserver: 1};
  W.ResizeObserver.prototype = {$isResizeObserver: 1};
  W.ResizeObserverEntry.prototype = {$isResizeObserverEntry: 1};
  W.RtcCertificate.prototype = {$isRtcCertificate: 1};
  W.RtcDataChannel.prototype = {$isRtcDataChannel: 1};
  W.RtcDataChannelEvent.prototype = {$isRtcDataChannelEvent: 1};
  W.RtcDtmfSender.prototype = {$isRtcDtmfSender: 1};
  W.RtcDtmfToneChangeEvent.prototype = {$isRtcDtmfToneChangeEvent: 1};
  W.RtcIceCandidate.prototype = {$isRtcIceCandidate: 1};
  W.RtcLegacyStatsReport.prototype = {$isRtcLegacyStatsReport: 1};
  W.RtcPeerConnection.prototype = {$isRtcPeerConnection: 1};
  W.RtcPeerConnectionIceEvent.prototype = {$isRtcPeerConnectionIceEvent: 1};
  W.RtcRtpContributingSource.prototype = {$isRtcRtpContributingSource: 1};
  W.RtcRtpReceiver.prototype = {$isRtcRtpReceiver: 1};
  W.RtcRtpSender.prototype = {$isRtcRtpSender: 1};
  W.RtcSessionDescription.prototype = {$isRtcSessionDescription: 1};
  W.RtcStatsReport.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    },
    $isRtcStatsReport: 1
  };
  W.RtcStatsResponse.prototype = {$isRtcStatsResponse: 1};
  W.RtcTrackEvent.prototype = {$isRtcTrackEvent: 1};
  W.Screen.prototype = {$isScreen: 1};
  W.ScreenOrientation.prototype = {$isScreenOrientation: 1};
  W.ScriptElement.prototype = {$isScriptElement: 1};
  W.ScrollState.prototype = {$isScrollState: 1};
  W.ScrollTimeline.prototype = {$isScrollTimeline: 1};
  W.SecurityPolicyViolationEvent.prototype = {$isSecurityPolicyViolationEvent: 1};
  W.SelectElement.prototype = {$isSelectElement: 1};
  W.Selection.prototype = {$isSelection: 1};
  W.Sensor.prototype = {$isSensor: 1};
  W.SensorErrorEvent.prototype = {$isSensorErrorEvent: 1};
  W.ServiceWorker.prototype = {$isAbstractWorker: 1, $isServiceWorker: 1};
  W.ServiceWorkerContainer.prototype = {$isServiceWorkerContainer: 1};
  W.ServiceWorkerGlobalScope.prototype = {$isServiceWorkerGlobalScope: 1};
  W.ServiceWorkerRegistration.prototype = {$isServiceWorkerRegistration: 1};
  W.ShadowElement.prototype = {$isShadowElement: 1};
  W.ShadowRoot.prototype = {$isDocumentOrShadowRoot: 1, $isShadowRoot: 1};
  W.SharedArrayBuffer.prototype = {$isSharedArrayBuffer: 1};
  W.SharedWorker.prototype = {$isAbstractWorker: 1, $isSharedWorker: 1};
  W.SharedWorkerGlobalScope.prototype = {$isSharedWorkerGlobalScope: 1};
  W.SlotElement.prototype = {$isSlotElement: 1};
  W.SourceBuffer.prototype = {$isSourceBuffer: 1};
  W.SourceBufferList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.SourceBuffer];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.SourceBuffer];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SourceBuffer];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SourceBuffer];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SourceBuffer];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SourceBuffer];
    },
    $isList: 1,
    $asList: function() {
      return [W.SourceBuffer];
    },
    $isSourceBufferList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.SourceBuffer];
    }
  };
  W.SourceElement.prototype = {$isSourceElement: 1};
  W.SpanElement.prototype = {$isSpanElement: 1};
  W.SpeechGrammar.prototype = {$isSpeechGrammar: 1};
  W.SpeechGrammarList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.SpeechGrammar];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.SpeechGrammar];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechGrammar];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SpeechGrammar];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SpeechGrammar];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechGrammar];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechGrammar];
    },
    $isSpeechGrammarList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.SpeechGrammar];
    }
  };
  W.SpeechRecognition.prototype = {$isSpeechRecognition: 1};
  W.SpeechRecognitionAlternative.prototype = {$isSpeechRecognitionAlternative: 1};
  W.SpeechRecognitionError.prototype = {$isSpeechRecognitionError: 1};
  W.SpeechRecognitionEvent.prototype = {$isSpeechRecognitionEvent: 1};
  W.SpeechRecognitionResult.prototype = {$isSpeechRecognitionResult: 1};
  W.SpeechSynthesis.prototype = {$isSpeechSynthesis: 1};
  W.SpeechSynthesisEvent.prototype = {$isSpeechSynthesisEvent: 1};
  W.SpeechSynthesisUtterance.prototype = {$isSpeechSynthesisUtterance: 1};
  W.SpeechSynthesisVoice.prototype = {$isSpeechSynthesisVoice: 1};
  W.StaticRange.prototype = {$isStaticRange: 1};
  W.Storage.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, P.String];
    },
    $isStorage: 1
  };
  W.StorageEvent.prototype = {$isStorageEvent: 1,
    get$key: function(receiver) {
      return receiver.key;
    }
  };
  W.StorageManager.prototype = {$isStorageManager: 1};
  W.StyleElement.prototype = {$isStyleElement: 1};
  W.StyleMedia.prototype = {$isStyleMedia: 1};
  W.StylePropertyMap.prototype = {$isStylePropertyMap: 1};
  W.StylePropertyMapReadonly.prototype = {$isStylePropertyMapReadonly: 1};
  W.StyleSheet.prototype = {$isStyleSheet: 1};
  W.SyncEvent.prototype = {$isSyncEvent: 1};
  W.SyncManager.prototype = {$isSyncManager: 1};
  W.TableCaptionElement.prototype = {$isTableCaptionElement: 1};
  W.TableCellElement.prototype = {$isTableCellElement: 1};
  W.TableColElement.prototype = {$isTableColElement: 1};
  W.TableElement.prototype = {$isTableElement: 1};
  W.TableRowElement.prototype = {$isTableRowElement: 1};
  W.TableSectionElement.prototype = {$isTableSectionElement: 1};
  W.TaskAttributionTiming.prototype = {$isTaskAttributionTiming: 1};
  W.TemplateElement.prototype = {$isTemplateElement: 1};
  W.Text.prototype = {$isText: 1};
  W.TextAreaElement.prototype = {$isTextAreaElement: 1};
  W.TextDetector.prototype = {$isTextDetector: 1};
  W.TextEvent.prototype = {$isTextEvent: 1};
  W.TextMetrics.prototype = {$isTextMetrics: 1};
  W.TextTrack.prototype = {$isTextTrack: 1};
  W.TextTrackCue.prototype = {$isTextTrackCue: 1};
  W.TextTrackCueList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.TextTrackCue];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.TextTrackCue];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrackCue];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.TextTrackCue];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.TextTrackCue];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrackCue];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrackCue];
    },
    $isTextTrackCueList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.TextTrackCue];
    }
  };
  W.TextTrackList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.TextTrack];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.TextTrack];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrack];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.TextTrack];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.TextTrack];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrack];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrack];
    },
    $isTextTrackList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.TextTrack];
    }
  };
  W.TimeElement.prototype = {$isTimeElement: 1};
  W.TimeRanges.prototype = {$isTimeRanges: 1};
  W.TitleElement.prototype = {$isTitleElement: 1};
  W.Touch.prototype = {$isTouch: 1};
  W.TouchEvent.prototype = {$isTouchEvent: 1};
  W.TouchList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Touch];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.Touch];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Touch];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Touch];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Touch];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Touch];
    },
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    },
    $isTouchList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Touch];
    }
  };
  W.TrackDefault.prototype = {$isTrackDefault: 1};
  W.TrackDefaultList.prototype = {$isTrackDefaultList: 1};
  W.TrackElement.prototype = {$isTrackElement: 1};
  W.TrackEvent.prototype = {$isTrackEvent: 1};
  W.TransitionEvent.prototype = {$isTransitionEvent: 1};
  W.TreeWalker.prototype = {$isTreeWalker: 1};
  W.TrustedHtml.prototype = {$isTrustedHtml: 1};
  W.TrustedScriptUrl.prototype = {$isTrustedScriptUrl: 1};
  W.TrustedUrl.prototype = {$isTrustedUrl: 1};
  W.UIEvent.prototype = {$isUIEvent: 1};
  W.UListElement.prototype = {$isUListElement: 1};
  W.UnderlyingSourceBase.prototype = {$isUnderlyingSourceBase: 1};
  W.UnknownElement.prototype = {$isUnknownElement: 1};
  W.Url.prototype = {$isUrl: 1};
  W.UrlSearchParams.prototype = {$isUrlSearchParams: 1};
  W.UrlUtilsReadOnly.prototype = {};
  W.VR.prototype = {$isVR: 1};
  W.VRCoordinateSystem.prototype = {$isVRCoordinateSystem: 1};
  W.VRDevice.prototype = {$isVRDevice: 1};
  W.VRDeviceEvent.prototype = {$isVRDeviceEvent: 1};
  W.VRDisplay.prototype = {$isVRDisplay: 1};
  W.VRDisplayCapabilities.prototype = {$isVRDisplayCapabilities: 1};
  W.VRDisplayEvent.prototype = {$isVRDisplayEvent: 1};
  W.VREyeParameters.prototype = {$isVREyeParameters: 1};
  W.VRFrameData.prototype = {$isVRFrameData: 1};
  W.VRFrameOfReference.prototype = {$isVRFrameOfReference: 1};
  W.VRPose.prototype = {$isVRPose: 1};
  W.VRSession.prototype = {$isVRSession: 1};
  W.VRSessionEvent.prototype = {$isVRSessionEvent: 1};
  W.VRStageBounds.prototype = {$isVRStageBounds: 1};
  W.VRStageBoundsPoint.prototype = {$isVRStageBoundsPoint: 1};
  W.VRStageParameters.prototype = {$isVRStageParameters: 1};
  W.ValidityState.prototype = {$isValidityState: 1};
  W.VideoElement.prototype = {$isVideoElement: 1, $isCanvasImageSource: 1};
  W.VideoPlaybackQuality.prototype = {$isVideoPlaybackQuality: 1};
  W.VideoTrack.prototype = {$isVideoTrack: 1};
  W.VideoTrackList.prototype = {$isVideoTrackList: 1};
  W.VisualViewport.prototype = {$isVisualViewport: 1};
  W.VttCue.prototype = {$isVttCue: 1};
  W.VttRegion.prototype = {$isVttRegion: 1};
  W.WebSocket0.prototype = {$isWebSocket0: 1};
  W.WheelEvent.prototype = {$isWheelEvent: 1};
  W.Window.prototype = {
    get$location: function(receiver) {
      return H.interceptedTypeCheck(this.get$_location(receiver), "$isLocation");
    },
    get$_location: function(receiver) {
      return receiver.location;
    },
    alert$1: function(receiver, message) {
      return receiver.alert(H.stringTypeCheck(message));
    },
    get$onKeyDown: function(receiver) {
      return C.EventStreamProvider_keydown.forTarget$1(receiver);
    },
    $isGlobalEventHandlers: 1,
    $isWindow: 1,
    $isWindowBase64: 1,
    $isWindowEventHandlers: 1,
    $is_WindowTimers: 1,
    $isWindowBase: 1
  };
  W._BeforeUnloadEvent.prototype = {$isBeforeUnloadEvent: 1};
  W._BeforeUnloadEventStreamProvider.prototype = {$isEventStreamProvider: 1,
    $asEventStreamProvider: function() {
      return [W.BeforeUnloadEvent];
    }
  };
  W.WindowBase64.prototype = {};
  W.WindowClient.prototype = {$isWindowClient: 1};
  W.WindowEventHandlers.prototype = {};
  W.Worker.prototype = {$isAbstractWorker: 1, $isWorker: 1};
  W.WorkerGlobalScope.prototype = {$isWindowBase64: 1, $isWorkerGlobalScope: 1, $is_WindowTimers: 1};
  W.WorkerPerformance.prototype = {$isWorkerPerformance: 1};
  W.WorkletAnimation.prototype = {$isWorkletAnimation: 1};
  W.WorkletGlobalScope.prototype = {$isWorkletGlobalScope: 1};
  W.XPathEvaluator.prototype = {$isXPathEvaluator: 1};
  W.XPathExpression.prototype = {$isXPathExpression: 1};
  W.XPathNSResolver.prototype = {$isXPathNSResolver: 1};
  W.XPathResult.prototype = {$isXPathResult: 1};
  W.XmlDocument.prototype = {$isXmlDocument: 1};
  W.XmlSerializer.prototype = {$isXmlSerializer: 1};
  W.XsltProcessor.prototype = {$isXsltProcessor: 1};
  W._Attr.prototype = {$is_Attr: 1};
  W._Bluetooth.prototype = {$is_Bluetooth: 1};
  W._BluetoothCharacteristicProperties.prototype = {$is_BluetoothCharacteristicProperties: 1};
  W._BluetoothDevice.prototype = {$is_BluetoothDevice: 1};
  W._BluetoothRemoteGATTCharacteristic.prototype = {$is_BluetoothRemoteGATTCharacteristic: 1};
  W._BluetoothRemoteGATTServer.prototype = {$is_BluetoothRemoteGATTServer: 1};
  W._BluetoothRemoteGATTService.prototype = {$is_BluetoothRemoteGATTService: 1};
  W._BluetoothUUID.prototype = {$is_BluetoothUUID: 1};
  W._BudgetService.prototype = {$is_BudgetService: 1};
  W._Cache.prototype = {$is_Cache: 1};
  W._CanvasPath.prototype = {};
  W._Clipboard.prototype = {$is_Clipboard: 1};
  W._CssRuleList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.CssRule];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.CssRule];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.CssRule];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.CssRule];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.CssRule];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.CssRule];
    },
    $isList: 1,
    $asList: function() {
      return [W.CssRule];
    },
    $is_CssRuleList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.CssRule];
    }
  };
  W._DOMFileSystemSync.prototype = {$is_DOMFileSystemSync: 1};
  W._DirectoryEntrySync.prototype = {$is_DirectoryEntrySync: 1};
  W._DirectoryReaderSync.prototype = {$is_DirectoryReaderSync: 1};
  W._DocumentType.prototype = {$isChildNode: 1, $is_DocumentType: 1};
  W._DomRect.prototype = {$is_DomRect: 1};
  W._JenkinsSmiHash.prototype = {};
  W._EntrySync.prototype = {$is_EntrySync: 1};
  W._FileEntrySync.prototype = {$is_FileEntrySync: 1};
  W._FileReaderSync.prototype = {$is_FileReaderSync: 1};
  W._FileWriterSync.prototype = {$is_FileWriterSync: 1};
  W._GamepadList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Gamepad];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.Gamepad];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Gamepad];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Gamepad];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Gamepad];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Gamepad];
    },
    $isList: 1,
    $asList: function() {
      return [W.Gamepad];
    },
    $is_GamepadList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Gamepad];
    }
  };
  W._HTMLAllCollection.prototype = {$is_HTMLAllCollection: 1};
  W._HTMLDirectoryElement.prototype = {$is_HTMLDirectoryElement: 1};
  W._HTMLFontElement.prototype = {$is_HTMLFontElement: 1};
  W._HTMLFrameElement.prototype = {$is_HTMLFrameElement: 1};
  W._HTMLFrameSetElement.prototype = {$isWindowEventHandlers: 1, $is_HTMLFrameSetElement: 1};
  W._HTMLMarqueeElement.prototype = {$is_HTMLMarqueeElement: 1};
  W._Mojo.prototype = {$is_Mojo: 1};
  W._MojoHandle.prototype = {$is_MojoHandle: 1};
  W._MojoInterfaceInterceptor.prototype = {$is_MojoInterfaceInterceptor: 1};
  W._MojoInterfaceRequestEvent.prototype = {$is_MojoInterfaceRequestEvent: 1};
  W._MojoWatcher.prototype = {$is_MojoWatcher: 1};
  W._NFC.prototype = {$is_NFC: 1};
  W._NamedNodeMap.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Node];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.Node];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $is_NamedNodeMap: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W._PagePopupController.prototype = {$is_PagePopupController: 1};
  W._Report.prototype = {$is_Report: 1};
  W._Request.prototype = {$is_Request: 1};
  W._ResourceProgressEvent.prototype = {$is_ResourceProgressEvent: 1};
  W._Response.prototype = {$is_Response: 1};
  W._SpeechRecognitionResultList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SpeechRecognitionResult];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SpeechRecognitionResult];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $is_SpeechRecognitionResultList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.SpeechRecognitionResult];
    }
  };
  W._StyleSheetList.prototype = {$isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.StyleSheet];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.StyleSheet];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.StyleSheet];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.StyleSheet];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.StyleSheet];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.StyleSheet];
    },
    $isList: 1,
    $asList: function() {
      return [W.StyleSheet];
    },
    $is_StyleSheetList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.StyleSheet];
    }
  };
  W._SubtleCrypto.prototype = {$is_SubtleCrypto: 1};
  W._USB.prototype = {$is_USB: 1};
  W._USBAlternateInterface.prototype = {$is_USBAlternateInterface: 1};
  W._USBConfiguration.prototype = {$is_USBConfiguration: 1};
  W._USBConnectionEvent.prototype = {$is_USBConnectionEvent: 1};
  W._USBDevice.prototype = {$is_USBDevice: 1};
  W._USBEndpoint.prototype = {$is_USBEndpoint: 1};
  W._USBInTransferResult.prototype = {$is_USBInTransferResult: 1};
  W._USBInterface.prototype = {$is_USBInterface: 1};
  W._USBIsochronousInTransferPacket.prototype = {$is_USBIsochronousInTransferPacket: 1};
  W._USBIsochronousInTransferResult.prototype = {$is_USBIsochronousInTransferResult: 1};
  W._USBIsochronousOutTransferPacket.prototype = {$is_USBIsochronousOutTransferPacket: 1};
  W._USBIsochronousOutTransferResult.prototype = {$is_USBIsochronousOutTransferResult: 1};
  W._USBOutTransferResult.prototype = {$is_USBOutTransferResult: 1};
  W._WindowTimers.prototype = {};
  W._WorkerLocation.prototype = {$isUrlUtilsReadOnly: 1, $is_WorkerLocation: 1};
  W._WorkerNavigator.prototype = {$isNavigatorID: 1, $isNavigatorOnLine: 1, $is_WorkerNavigator: 1};
  W._Worklet.prototype = {$is_Worklet: 1};
  W._AttributeMap.prototype = {
    $asMapBase: function() {
      return [P.String, P.String];
    },
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W._ElementAttributeMap.prototype = {};
  W._NamespacedAttributeMap.prototype = {};
  W._DataAttributeMap.prototype = {
    $asMapBase: function() {
      return [P.String, P.String];
    },
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W.CanvasImageSource.prototype = {};
  W.WindowBase.prototype = {$isInterceptor: 1, $isEventTarget: 1};
  W.LocationBase.prototype = {};
  W.HistoryBase.prototype = {};
  W.CssClassSet.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isSet: 1,
    $asSet: function() {
      return [P.String];
    }
  };
  W._ContentCssRect.prototype = {};
  W._ContentCssListRect.prototype = {};
  W._PaddingCssRect.prototype = {};
  W._BorderCssRect.prototype = {};
  W._MarginCssRect.prototype = {};
  W.CssRect.prototype = {$is_RectangleBase: 1,
    $as_RectangleBase: function() {
      return [P.num];
    },
    $isRectangle: 1,
    $asRectangle: function() {
      return [P.num];
    }
  };
  W._MultiElementCssClassSet.prototype = {};
  W._ElementCssClassSet.prototype = {};
  W.Dimension.prototype = {};
  W.EventStreamProvider.prototype = {
    forTarget$1: function(e) {
      return W._EventStream$(H.interceptedTypeCheck(e, "$isEventTarget"), this._eventType, false, H.getTypeArgumentByIndex(this, 0));
    }
  };
  W.ElementStream.prototype = {$isStream: 1};
  W._EventStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      H.interceptedTypeCheck(onError, "$isFunction");
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      H.boolTypeCheck(cancelOnError);
      return W._EventStreamSubscription$(_this._html$_target, _this._eventType, onData, _this._useCapture, t1);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$2$onDone: function(onData, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
    }
  };
  W._ElementEventStreamImpl.prototype = {$isElementStream: 1};
  W._ElementListEventStreamImpl.prototype = {$isElementStream: 1};
  W._EventStreamSubscription.prototype = {
    _EventStreamSubscription$4: function(_target, _eventType, onData, _useCapture, $T) {
      this._tryResume$0();
    },
    cancel$0: function() {
      var _this = this;
      if (_this.get$_canceled())
        return;
      _this._unlisten$0();
      _this._html$_target = null;
      _this.set$_html$_onData(null);
      return;
    },
    get$_canceled: function() {
      return this._html$_target == null;
    },
    pause$0: function() {
      var _this = this;
      if (_this.get$_canceled())
        return;
      _this._pauseCount = H.intTypeCheck(J.$add$ansx(_this._pauseCount, 1));
      _this._unlisten$0();
    },
    get$isPaused: function() {
      return J.$gt$n(this._pauseCount, 0);
    },
    resume$0: function() {
      var _this = this;
      if (_this.get$_canceled() || !_this.get$isPaused())
        return;
      _this._pauseCount = H.intTypeCheck(J.$sub$n(_this._pauseCount, 1));
      _this._tryResume$0();
    },
    _tryResume$0: function() {
      var _this = this;
      if (_this._html$_onData != null && !_this.get$isPaused())
        J.addEventListener$3$x(_this._html$_target, _this._eventType, _this._html$_onData, _this._useCapture);
    },
    _unlisten$0: function() {
      var _this = this,
        t1 = _this._html$_onData;
      if (t1 != null)
        J.removeEventListener$3$x(_this._html$_target, _this._eventType, t1, _this._useCapture);
    },
    set$_html$_onData: function(_onData) {
      this._html$_onData = H.functionTypeCheck(_onData, {func: 1, args: [W.Event]});
    }
  };
  W._EventStreamSubscription_closure.prototype = {
    call$1: function(e) {
      return this.onData.call$1(H.interceptedTypeCheck(e, "$isEvent"));
    },
    $signature: 35
  };
  W.CustomStream.prototype = {$isStream: 1};
  W._CustomEventStreamImpl.prototype = {$isCustomStream: 1};
  W._CustomKeyEventStreamImpl.prototype = {
    $asStream: function() {
      return [W.KeyEvent];
    },
    $asCustomStream: function() {
      return [W.KeyEvent];
    },
    $as_CustomEventStreamImpl: function() {
      return [W.KeyEvent];
    }
  };
  W._StreamPool.prototype = {};
  W._CustomEventStreamProvider.prototype = {$isEventStreamProvider: 1};
  W._Html5NodeValidator.prototype = {$isNodeValidator: 1};
  W.ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  W.KeyCode.prototype = {};
  W.KeyLocation.prototype = {};
  W._KeyName.prototype = {};
  W._KeyboardEventHandler.prototype = {
    $asEventStreamProvider: function() {
      return [W.KeyEvent];
    }
  };
  W.KeyboardEventStream.prototype = {};
  W.NodeValidatorBuilder.prototype = {$isNodeValidator: 1};
  W._SimpleNodeValidator.prototype = {$isNodeValidator: 1};
  W._CustomElementNodeValidator.prototype = {};
  W._TemplatingNodeValidator.prototype = {};
  W._SvgNodeValidator.prototype = {$isNodeValidator: 1};
  W.ReadyState.prototype = {};
  W._WrappedList.prototype = {$isNodeListWrapper: 1};
  W._WrappedIterator.prototype = {$isIterator: 1};
  W._HttpRequestUtils.prototype = {};
  W.FixedSizeListIterator.prototype = {$isIterator: 1};
  W._VariableSizeListIterator.prototype = {$isIterator: 1};
  W.Console.prototype = {};
  W._JSElementUpgrader.prototype = {$isElementUpgrader: 1};
  W._DOMWindowCrossFrame.prototype = {$isInterceptor: 1, $isEventTarget: 1, $isWindowBase: 1};
  W._LocationCrossFrame.prototype = {$isLocationBase: 1};
  W._HistoryCrossFrame.prototype = {$isHistoryBase: 1};
  W.KeyEvent.prototype = {$isKeyboardEvent: 1, $isUIEvent: 1};
  W.Platform.prototype = {};
  W._WrappedEvent.prototype = {$isInterceptor: 1, $isEvent: 1};
  W.ElementUpgrader.prototype = {};
  W.NodeValidator.prototype = {};
  W.NodeTreeSanitizer.prototype = {};
  W._TrustedHtmlTreeSanitizer.prototype = {$isNodeTreeSanitizer: 1};
  W.UriPolicy.prototype = {};
  W._SameOriginUriPolicy.prototype = {$isUriPolicy: 1};
  W._ThrowsNodeValidator.prototype = {$isNodeValidator: 1};
  W._ValidatingTreeSanitizer.prototype = {$isNodeTreeSanitizer: 1};
  W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase.prototype = {$isCssStyleDeclarationBase: 1};
  W._DomRectList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [[P.Rectangle, P.num]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Rectangle, P.num]];
    }
  };
  W._DomRectList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [[P.Rectangle, P.num]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Rectangle, P.num]];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [[P.Rectangle, P.num]];
    }
  };
  W._DomStringList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    }
  };
  W._DomStringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.String];
    }
  };
  W._FileList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.File];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.File];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.File];
    },
    $isList: 1,
    $asList: function() {
      return [W.File];
    }
  };
  W._FileList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.File];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.File];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.File];
    },
    $isList: 1,
    $asList: function() {
      return [W.File];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.File];
    }
  };
  W._HtmlCollection_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    }
  };
  W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W._MidiInputMap_Interceptor_MapMixin.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W._MidiOutputMap_Interceptor_MapMixin.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W._MimeTypeArray_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.MimeType];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.MimeType];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.MimeType];
    },
    $isList: 1,
    $asList: function() {
      return [W.MimeType];
    }
  };
  W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.MimeType];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.MimeType];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.MimeType];
    },
    $isList: 1,
    $asList: function() {
      return [W.MimeType];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.MimeType];
    }
  };
  W._NodeList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    }
  };
  W._NodeList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W._PluginArray_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Plugin];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Plugin];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Plugin];
    },
    $isList: 1,
    $asList: function() {
      return [W.Plugin];
    }
  };
  W._PluginArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Plugin];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Plugin];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Plugin];
    },
    $isList: 1,
    $asList: function() {
      return [W.Plugin];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Plugin];
    }
  };
  W._RtcStatsReport_Interceptor_MapMixin.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W._SourceBufferList_EventTarget_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SourceBuffer];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SourceBuffer];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SourceBuffer];
    },
    $isList: 1,
    $asList: function() {
      return [W.SourceBuffer];
    }
  };
  W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SourceBuffer];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SourceBuffer];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SourceBuffer];
    },
    $isList: 1,
    $asList: function() {
      return [W.SourceBuffer];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.SourceBuffer];
    }
  };
  W._SpeechGrammarList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechGrammar];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SpeechGrammar];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechGrammar];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechGrammar];
    }
  };
  W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechGrammar];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SpeechGrammar];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechGrammar];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechGrammar];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.SpeechGrammar];
    }
  };
  W._Storage_Interceptor_MapMixin.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W._TextTrackCueList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrackCue];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.TextTrackCue];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrackCue];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrackCue];
    }
  };
  W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrackCue];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.TextTrackCue];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrackCue];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrackCue];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.TextTrackCue];
    }
  };
  W._TextTrackList_EventTarget_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrack];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.TextTrack];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrack];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrack];
    }
  };
  W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrack];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.TextTrack];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrack];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrack];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.TextTrack];
    }
  };
  W._TouchList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Touch];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Touch];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Touch];
    },
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    }
  };
  W._TouchList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Touch];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Touch];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Touch];
    },
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Touch];
    }
  };
  W.__CssRuleList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.CssRule];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.CssRule];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.CssRule];
    },
    $isList: 1,
    $asList: function() {
      return [W.CssRule];
    }
  };
  W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.CssRule];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.CssRule];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.CssRule];
    },
    $isList: 1,
    $asList: function() {
      return [W.CssRule];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.CssRule];
    }
  };
  W.__CssStyleDeclarationSet_Object_CssStyleDeclarationBase.prototype = {$isCssStyleDeclarationBase: 1};
  W.__GamepadList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Gamepad];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Gamepad];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Gamepad];
    },
    $isList: 1,
    $asList: function() {
      return [W.Gamepad];
    }
  };
  W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Gamepad];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Gamepad];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Gamepad];
    },
    $isList: 1,
    $asList: function() {
      return [W.Gamepad];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Gamepad];
    }
  };
  W.__NamedNodeMap_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    }
  };
  W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.__SpeechRecognitionResultList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SpeechRecognitionResult];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    }
  };
  W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SpeechRecognitionResult];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.SpeechRecognitionResult];
    }
  };
  W.__StyleSheetList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.StyleSheet];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.StyleSheet];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.StyleSheet];
    },
    $isList: 1,
    $asList: function() {
      return [W.StyleSheet];
    }
  };
  W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.StyleSheet];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.StyleSheet];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.StyleSheet];
    },
    $isList: 1,
    $asList: function() {
      return [W.StyleSheet];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.StyleSheet];
    }
  };
  P._StructuredClone.prototype = {};
  P._AcceptStructuredClone.prototype = {
    findSlot$1: function(value) {
      var i,
        t1 = this.values,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i)
        if (this.identicalInJs$2(t2.$index(t1, i), value))
          return i;
      t2.add$1(t1, value);
      J.add$1$ax(this.copies, null);
      return $length;
    },
    readSlot$1: function(i) {
      return J.$index$asx(this.copies, H.intTypeCheck(i));
    },
    writeSlot$2: function(i, x) {
      J.$indexSet$ax(this.copies, H.intTypeCheck(i), x);
    },
    walk$1: function(e) {
      var slot, copy, l, t1, $length, t2, i, _this = this, _box_0 = {};
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      if (P.isJavaScriptDate(e))
        return P.convertNativeToDart_DateTime(e);
      if (P.isJavaScriptRegExp(e))
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (P.isJavaScriptPromise(e))
        return P.convertNativePromiseToDartFuture(e);
      if (P.isJavaScriptSimpleObject(e)) {
        slot = _this.findSlot$1(e);
        copy = _box_0.copy = _this.readSlot$1(slot);
        if (copy != null)
          return copy;
        copy = P.LinkedHashMap__makeEmpty();
        _box_0.copy = copy;
        _this.writeSlot$2(slot, copy);
        _this.forEachJsField$2(e, new P._AcceptStructuredClone_walk_closure(_box_0, _this));
        return _box_0.copy;
      }
      if (P.isJavaScriptArray(e)) {
        l = e;
        slot = _this.findSlot$1(l);
        copy = _this.readSlot$1(slot);
        if (copy != null)
          return copy;
        t1 = J.getInterceptor$asx(l);
        $length = H.intTypeCheck(t1.get$length(l));
        copy = _this.mustCopy ? _this.newDartList$1($length) : l;
        _this.writeSlot$2(slot, copy);
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = J.getInterceptor$ax(copy);
        i = 0;
        for (; i < $length; ++i)
          t2.$indexSet(copy, i, _this.walk$1(t1.$index(l, i)));
        return copy;
      }
      return e;
    },
    convertNativeToDart_AcceptStructuredClone$2$mustCopy: function(object, mustCopy) {
      this.mustCopy = H.boolTypeCheck(mustCopy);
      return this.walk$1(object);
    },
    get$values: function() {
      return this.values;
    }
  };
  P._AcceptStructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this._box_0.copy,
        t2 = this.$this.walk$1(value);
      J.$indexSet$ax(t1, key, t2);
      return t2;
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 36
  };
  P.ContextAttributes.prototype = {};
  P._TypedImageData.prototype = {$isInterceptor: 1, $isImageData: 1};
  P.convertDartToNative_Dictionary_closure.prototype = {
    call$2: function(key, value) {
      this.object[key] = value;
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 10
  };
  P._StructuredCloneDart2Js.prototype = {};
  P._AcceptStructuredCloneDart2Js.prototype = {
    newJsList$1: function($length) {
      return new Array($length);
    },
    newDartList$1: function($length) {
      return this.newJsList$1($length);
    },
    identicalInJs$2: function(a, b) {
      return a == null ? b == null : a === b;
    },
    forEachJsField$2: function(object, action) {
      var t1, key;
      H.functionTypeCheck(action, {func: 1, args: [,,]});
      for (t1 = C.JSArray_methods.get$iterator(Object.keys(object)); t1.moveNext$0();) {
        key = t1.get$current();
        action.call$2(key, object[key]);
      }
    }
  };
  P.convertNativePromiseToDartFuture_closure.prototype = {
    call$1: function(result) {
      return this.completer.complete$1(result);
    },
    $signature: 13
  };
  P.convertNativePromiseToDartFuture_closure0.prototype = {
    call$1: function(result) {
      return this.completer.completeError$1(result);
    },
    $signature: 13
  };
  P.CssClassSetImpl.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asSetMixin: function() {
      return [P.String];
    },
    $asSetBase: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    },
    $asSet: function() {
      return [P.String];
    },
    $isCssClassSet: 1,
    $as_SetBase_Object_SetMixin: function() {
      return [P.String];
    }
  };
  P.Device.prototype = {};
  P.FilteredElementList.prototype = {
    $asEfficientLengthIterable: function() {
      return [W.Element];
    },
    $asListBase: function() {
      return [W.Element];
    },
    $asListMixin: function() {
      return [W.Element];
    },
    $asIterable: function() {
      return [W.Element];
    },
    $asList: function() {
      return [W.Element];
    },
    $isNodeListWrapper: 1,
    $as_ListBase_Object_ListMixin: function() {
      return [W.Element];
    }
  };
  P.Lists.prototype = {};
  P.NodeListWrapper.prototype = {};
  P._KeyRangeFactoryProvider.prototype = {};
  P.Cursor.prototype = {$isCursor: 1};
  P.CursorWithValue.prototype = {$isCursorWithValue: 1};
  P.Database.prototype = {$isDatabase: 1};
  P.IdbFactory.prototype = {$isIdbFactory: 1};
  P.Index.prototype = {$isIndex: 1};
  P.KeyRange.prototype = {$isKeyRange: 1};
  P.ObjectStore.prototype = {$isObjectStore: 1};
  P.Observation.prototype = {$isObservation: 1};
  P.Observer.prototype = {$isObserver: 1};
  P.ObserverChanges.prototype = {$isObserverChanges: 1};
  P.OpenDBRequest.prototype = {$isOpenDBRequest: 1};
  P.Request0.prototype = {$isRequest0: 1};
  P.Transaction.prototype = {$isTransaction: 1};
  P.VersionChangeEvent.prototype = {$isVersionChangeEvent: 1};
  P.BytesBuilder.prototype = {};
  P._CopyingBytesBuilder0.prototype = {$isBytesBuilder: 1};
  P._BytesBuilder.prototype = {$isBytesBuilder: 1};
  P.IOException.prototype = {$isException: 1};
  P.OSError.prototype = {};
  P._BufferAndStart.prototype = {};
  P._IOCrypto.prototype = {};
  P.ZLibOption.prototype = {};
  P.ZLibCodec.prototype = {
    $asCodec: function() {
      return [[P.List, P.int], [P.List, P.int]];
    }
  };
  P.GZipCodec.prototype = {
    $asCodec: function() {
      return [[P.List, P.int], [P.List, P.int]];
    }
  };
  P.ZLibEncoder.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], [P.List, P.int]];
    },
    $asConverter: function() {
      return [[P.List, P.int], [P.List, P.int]];
    }
  };
  P.ZLibDecoder.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], [P.List, P.int]];
    },
    $asConverter: function() {
      return [[P.List, P.int], [P.List, P.int]];
    }
  };
  P.RawZLibFilter.prototype = {};
  P._BufferSink.prototype = {};
  P._ZLibEncoderSink.prototype = {};
  P._ZLibDecoderSink.prototype = {};
  P._FilterSink.prototype = {};
  P.Directory.prototype = {$isFileSystemEntity: 1};
  P._Directory.prototype = {$isDirectory: 1};
  P._AsyncDirectoryListerOps.prototype = {};
  P._AsyncDirectoryLister.prototype = {};
  P._EmbedderConfig.prototype = {};
  P._EventHandler.prototype = {};
  P.FileMode.prototype = {};
  P.FileLock.prototype = {};
  P.File0.prototype = {$isFileSystemEntity: 1};
  P.RandomAccessFile.prototype = {};
  P.FileSystemException.prototype = {$isException: 1, $isIOException: 1};
  P._FileStream.prototype = {
    $asStream: function() {
      return [[P.List, P.int]];
    }
  };
  P._FileStreamConsumer.prototype = {
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    }
  };
  P._File.prototype = {$isFile0: 1};
  P._RandomAccessFileOps.prototype = {};
  P._RandomAccessFile.prototype = {$isRandomAccessFile: 1};
  P.FileSystemEntityType.prototype = {};
  P.FileStat.prototype = {};
  P.FileSystemEntity.prototype = {};
  P.FileSystemEvent.prototype = {};
  P.FileSystemCreateEvent.prototype = {};
  P.FileSystemModifyEvent.prototype = {};
  P.FileSystemDeleteEvent.prototype = {};
  P.FileSystemMoveEvent.prototype = {};
  P._FileSystemWatcher.prototype = {};
  P._IOResourceInfo.prototype = {};
  P._ReadWriteResourceInfo.prototype = {};
  P._FileResourceInfo.prototype = {};
  P._ProcessResourceInfo.prototype = {};
  P._SocketResourceInfo.prototype = {};
  P._IOService.prototype = {};
  P.IOSink.prototype = {$isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1
  };
  P._StreamSinkImpl0.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  P._IOSinkImpl0.prototype = {
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1,
    $as_StreamSinkImpl0: function() {
      return [[P.List, P.int]];
    }
  };
  P.Link.prototype = {$isFileSystemEntity: 1};
  P._Link.prototype = {$isLink: 1};
  P._Namespace.prototype = {};
  P.IOOverrides.prototype = {};
  P._IOOverridesScope.prototype = {};
  P.Platform0.prototype = {};
  P._Platform.prototype = {};
  P._CaseInsensitiveStringMap.prototype = {
    $asMapBase: function($V) {
      return [P.String, $V];
    },
    $asMapMixin: function($V) {
      return [P.String, $V];
    },
    $asMap: function($V) {
      return [P.String, $V];
    }
  };
  P._ProcessUtils.prototype = {};
  P.ProcessInfo.prototype = {};
  P.ProcessStartMode.prototype = {};
  P.Process.prototype = {};
  P.ProcessResult.prototype = {};
  P.ProcessSignal.prototype = {};
  P.SignalException.prototype = {$isException: 1, $isIOException: 1};
  P.ProcessException.prototype = {$isException: 1, $isIOException: 1};
  P.SecureServerSocket.prototype = {
    $asStream: function() {
      return [P.SecureSocket];
    }
  };
  P.RawSecureServerSocket.prototype = {
    $asStream: function() {
      return [P.RawSecureSocket];
    }
  };
  P.SecureSocket.prototype = {$isStream: 1,
    $asStream: function() {
      return [[P.List, P.int]];
    },
    $isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1,
    $isSocket: 1
  };
  P.RawSecureSocket.prototype = {$isStream: 1,
    $asStream: function() {
      return [P.RawSocketEvent];
    },
    $isRawSocket: 1
  };
  P.X509Certificate.prototype = {};
  P._FilterStatus.prototype = {};
  P._RawSecureSocket.prototype = {
    $asStream: function() {
      return [P.RawSocketEvent];
    },
    $isRawSecureSocket: 1,
    $isRawSocket: 1
  };
  P._ExternalBuffer.prototype = {};
  P._SecureFilter.prototype = {};
  P.TlsException.prototype = {$isException: 1, $isIOException: 1};
  P.HandshakeException.prototype = {};
  P.CertificateException.prototype = {};
  P.SecurityContext.prototype = {};
  P._ServiceObject0.prototype = {};
  P.InternetAddressType.prototype = {};
  P.InternetAddress.prototype = {};
  P.NetworkInterface.prototype = {};
  P.RawServerSocket.prototype = {$isStream: 1,
    $asStream: function() {
      return [P.RawSocket];
    }
  };
  P.ServerSocket.prototype = {$isStream: 1,
    $asStream: function() {
      return [P.Socket];
    }
  };
  P.SocketDirection.prototype = {};
  P.SocketOption.prototype = {};
  P._RawSocketOptions.prototype = {};
  P.RawSocketOption.prototype = {};
  P.RawSocketEvent.prototype = {};
  P.ConnectionTask.prototype = {};
  P.RawSocket.prototype = {$isStream: 1,
    $asStream: function() {
      return [P.RawSocketEvent];
    }
  };
  P.Socket.prototype = {$isStream: 1,
    $asStream: function() {
      return [[P.List, P.int]];
    },
    $isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1
  };
  P.Datagram.prototype = {};
  P.RawDatagramSocket.prototype = {
    $asStream: function() {
      return [P.RawSocketEvent];
    }
  };
  P.SocketException.prototype = {$isException: 1, $isIOException: 1};
  P._StdStream.prototype = {
    $asStream: function() {
      return [[P.List, P.int]];
    }
  };
  P.Stdin.prototype = {};
  P.Stdout.prototype = {};
  P.StdoutException.prototype = {$isException: 1, $isIOException: 1};
  P.StdinException.prototype = {$isException: 1, $isIOException: 1};
  P._StdConsumer.prototype = {$isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    }
  };
  P._StdSink.prototype = {$isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1
  };
  P.StdioType.prototype = {};
  P._StdIOUtils.prototype = {};
  P.SystemEncoding.prototype = {};
  P._WindowsCodePageEncoder.prototype = {
    $asStreamTransformer: function() {
      return [P.String, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.String, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P._WindowsCodePageEncoderSink.prototype = {};
  P._WindowsCodePageDecoder.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], P.String];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], P.String];
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P._WindowsCodePageDecoderSink.prototype = {};
  P.RawSynchronousSocket.prototype = {};
  P._ReceivePortImpl.prototype = {
    $asStream: function() {
    },
    $isReceivePort: 1
  };
  P.Capability.prototype = {};
  P.IsolateSpawnException.prototype = {$isException: 1};
  P.Isolate.prototype = {};
  P.SendPort.prototype = {$isCapability: 1};
  P.ReceivePort.prototype = {$isStream: 1,
    $asStream: function() {
    }
  };
  P.RawReceivePort.prototype = {};
  P.RemoteError.prototype = {$isError: 1};
  P.JsObject.prototype = {};
  P.JsFunction.prototype = {};
  P.JsArray.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  P._JsArray_JsObject_ListMixin.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  P._JSRandom.prototype = {$isRandom: 1};
  P._Random.prototype = {$isRandom: 1};
  P._JSSecureRandom.prototype = {
    _JSSecureRandom$0: function() {
      var $crypto = self.crypto;
      if ($crypto != null)
        if ($crypto.getRandomValues != null)
          return;
      throw H.wrapException(P.UnsupportedError$("No source of cryptographically secure random numbers available."));
    },
    _getRandomBytes$2: function(start, $length) {
      H.intTypeCheck(start);
      H.intTypeCheck($length);
      crypto.getRandomValues(J.asUint8List$2$x(J.get$buffer$x(this._math$_buffer), start, $length));
    },
    nextInt$1: function(max) {
      var byteCount, t1, t2, start, randomLimit, t3, t4, random, result;
      H.intTypeCheck(max);
      if (typeof max !== "number")
        return max.$le();
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      if (max > 255)
        if (max > 65535)
          byteCount = max > 16777215 ? 4 : 3;
        else
          byteCount = 2;
      else
        byteCount = 1;
      t1 = this._math$_buffer;
      t2 = J.getInterceptor$x(t1);
      t2.setUint32$2(t1, 0, 0);
      start = 4 - byteCount;
      randomLimit = H.intTypeCheck(P.pow(256, byteCount));
      for (t3 = max - 1, t4 = (max & t3) >>> 0 === 0; true;) {
        this._getRandomBytes$2(start, byteCount);
        random = t2.getUint32$1(t1, 0);
        if (t4) {
          if (typeof random !== "number")
            return random.$and();
          return (random & t3) >>> 0;
        }
        result = J.remainder$1$n(random, max);
        if (typeof randomLimit !== "number")
          return H.iae(randomLimit);
        if (random - result + max < randomLimit)
          return result;
      }
    },
    $isRandom: 1
  };
  P._JenkinsSmiHash0.prototype = {};
  P.Point.prototype = {};
  P.Random.prototype = {};
  P._RectangleBase.prototype = {};
  P.Rectangle.prototype = {};
  P.MutableRectangle.prototype = {$isRectangle: 1};
  P.MirrorSystem.prototype = {};
  P.Mirror.prototype = {};
  P.IsolateMirror.prototype = {$isMirror: 1};
  P.DeclarationMirror.prototype = {$isMirror: 1};
  P.ObjectMirror.prototype = {$isMirror: 1};
  P.InstanceMirror.prototype = {$isMirror: 1, $isObjectMirror: 1};
  P.ClosureMirror.prototype = {$isMirror: 1, $isObjectMirror: 1, $isInstanceMirror: 1};
  P.LibraryMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1, $isObjectMirror: 1};
  P.LibraryDependencyMirror.prototype = {$isMirror: 1};
  P.CombinatorMirror.prototype = {$isMirror: 1};
  P.TypeMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1};
  P.ClassMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1, $isObjectMirror: 1, $isTypeMirror: 1};
  P.FunctionTypeMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1, $isObjectMirror: 1, $isTypeMirror: 1, $isClassMirror: 1};
  P.TypeVariableMirror.prototype = {};
  P.TypedefMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1, $isTypeMirror: 1};
  P.MethodMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1};
  P.VariableMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1};
  P.ParameterMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1, $isVariableMirror: 1};
  P.SourceLocation0.prototype = {};
  P.Comment0.prototype = {};
  P.MirrorsUsed.prototype = {};
  P._SvgElementFactoryProvider.prototype = {};
  P.AElement.prototype = {$isAElement: 1, $isUriReference: 1};
  P.Angle.prototype = {$isAngle: 1};
  P.AnimateElement.prototype = {$isAnimateElement: 1};
  P.AnimateMotionElement.prototype = {$isAnimateMotionElement: 1};
  P.AnimateTransformElement.prototype = {$isAnimateTransformElement: 1};
  P.AnimatedAngle.prototype = {$isAnimatedAngle: 1};
  P.AnimatedBoolean.prototype = {$isAnimatedBoolean: 1};
  P.AnimatedEnumeration.prototype = {$isAnimatedEnumeration: 1};
  P.AnimatedInteger.prototype = {$isAnimatedInteger: 1};
  P.AnimatedLength.prototype = {$isAnimatedLength: 1};
  P.AnimatedLengthList.prototype = {$isAnimatedLengthList: 1};
  P.AnimatedNumber.prototype = {$isAnimatedNumber: 1};
  P.AnimatedNumberList.prototype = {$isAnimatedNumberList: 1};
  P.AnimatedPreserveAspectRatio.prototype = {$isAnimatedPreserveAspectRatio: 1};
  P.AnimatedRect.prototype = {$isAnimatedRect: 1};
  P.AnimatedString.prototype = {$isAnimatedString: 1};
  P.AnimatedTransformList.prototype = {$isAnimatedTransformList: 1};
  P.AnimationElement.prototype = {$isAnimationElement: 1, $isTests: 1};
  P.CircleElement.prototype = {$isCircleElement: 1};
  P.ClipPathElement.prototype = {$isClipPathElement: 1};
  P.DefsElement.prototype = {$isDefsElement: 1};
  P.DescElement.prototype = {$isDescElement: 1};
  P.DiscardElement.prototype = {$isDiscardElement: 1};
  P.EllipseElement.prototype = {$isEllipseElement: 1};
  P.FEBlendElement.prototype = {$isFEBlendElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEColorMatrixElement.prototype = {$isFEColorMatrixElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEComponentTransferElement.prototype = {$isFEComponentTransferElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FECompositeElement.prototype = {$isFECompositeElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEConvolveMatrixElement.prototype = {$isFEConvolveMatrixElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEDiffuseLightingElement.prototype = {$isFEDiffuseLightingElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEDisplacementMapElement.prototype = {$isFEDisplacementMapElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEDistantLightElement.prototype = {$isFEDistantLightElement: 1};
  P.FEFloodElement.prototype = {$isFEFloodElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEFuncAElement.prototype = {$isFEFuncAElement: 1};
  P.FEFuncBElement.prototype = {$isFEFuncBElement: 1};
  P.FEFuncGElement.prototype = {$isFEFuncGElement: 1};
  P.FEFuncRElement.prototype = {$isFEFuncRElement: 1};
  P.FEGaussianBlurElement.prototype = {$isFEGaussianBlurElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEImageElement.prototype = {$isFEImageElement: 1, $isFilterPrimitiveStandardAttributes: 1, $isUriReference: 1};
  P.FEMergeElement.prototype = {$isFEMergeElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEMergeNodeElement.prototype = {$isFEMergeNodeElement: 1};
  P.FEMorphologyElement.prototype = {$isFEMorphologyElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEOffsetElement.prototype = {$isFEOffsetElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEPointLightElement.prototype = {$isFEPointLightElement: 1};
  P.FESpecularLightingElement.prototype = {$isFESpecularLightingElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FESpotLightElement.prototype = {$isFESpotLightElement: 1};
  P.FETileElement.prototype = {$isFETileElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FETurbulenceElement.prototype = {$isFETurbulenceElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FilterElement.prototype = {$isFilterElement: 1, $isUriReference: 1};
  P.FilterPrimitiveStandardAttributes.prototype = {};
  P.FitToViewBox.prototype = {};
  P.ForeignObjectElement.prototype = {$isForeignObjectElement: 1};
  P.GElement.prototype = {$isGElement: 1};
  P.GeometryElement.prototype = {$isGeometryElement: 1};
  P.GraphicsElement.prototype = {$isGraphicsElement: 1, $isTests: 1};
  P.ImageElement0.prototype = {$isImageElement0: 1, $isUriReference: 1};
  P.Length.prototype = {$isLength: 1};
  P.LengthList.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Length];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Length];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Length];
    },
    $isList: 1,
    $asList: function() {
      return [P.Length];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.Length];
    },
    $isLengthList: 1
  };
  P.LineElement.prototype = {$isLineElement: 1};
  P.LinearGradientElement.prototype = {$isLinearGradientElement: 1};
  P.MarkerElement.prototype = {$isFitToViewBox: 1, $isMarkerElement: 1};
  P.MaskElement.prototype = {$isMaskElement: 1, $isTests: 1};
  P.Matrix.prototype = {$isMatrix: 1};
  P.MetadataElement.prototype = {$isMetadataElement: 1};
  P.Number.prototype = {$isNumber: 1};
  P.NumberList.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Number];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Number];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Number];
    },
    $isList: 1,
    $asList: function() {
      return [P.Number];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.Number];
    },
    $isNumberList: 1
  };
  P.PathElement.prototype = {$isPathElement: 1};
  P.PatternElement.prototype = {$isFitToViewBox: 1, $isPatternElement: 1, $isTests: 1, $isUriReference: 1};
  P.Point0.prototype = {$isPoint0: 1};
  P.PointList.prototype = {$isPointList: 1};
  P.PolygonElement.prototype = {$isPolygonElement: 1};
  P.PolylineElement.prototype = {$isPolylineElement: 1};
  P.PreserveAspectRatio.prototype = {$isPreserveAspectRatio: 1};
  P.RadialGradientElement.prototype = {$isRadialGradientElement: 1};
  P.Rect.prototype = {$isRect: 1};
  P.RectElement.prototype = {$isRectElement: 1};
  P.ScriptElement0.prototype = {$isScriptElement0: 1, $isUriReference: 1};
  P.SetElement.prototype = {$isSetElement: 1};
  P.StopElement.prototype = {$isStopElement: 1};
  P.StringList.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.String];
    },
    $isStringList: 1
  };
  P.StyleElement0.prototype = {$isStyleElement0: 1};
  P.AttributeClassSet.prototype = {};
  P.SvgElement.prototype = {$isNoncedElement: 1, $isSvgElement: 1};
  P.SvgSvgElement.prototype = {$isFitToViewBox: 1, $isSvgSvgElement: 1, $isZoomAndPan: 1};
  P.SwitchElement.prototype = {$isSwitchElement: 1};
  P.SymbolElement.prototype = {$isFitToViewBox: 1, $isSymbolElement: 1};
  P.TSpanElement.prototype = {$isTSpanElement: 1};
  P.Tests.prototype = {};
  P.TextContentElement.prototype = {$isTextContentElement: 1};
  P.TextElement.prototype = {$isTextElement: 1};
  P.TextPathElement.prototype = {$isTextPathElement: 1, $isUriReference: 1};
  P.TextPositioningElement.prototype = {$isTextPositioningElement: 1};
  P.TitleElement0.prototype = {$isTitleElement0: 1};
  P.Transform.prototype = {$isTransform: 1};
  P.TransformList.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Transform];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Transform];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Transform];
    },
    $isList: 1,
    $asList: function() {
      return [P.Transform];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.Transform];
    },
    $isTransformList: 1
  };
  P.UnitTypes.prototype = {$isUnitTypes: 1};
  P.UriReference.prototype = {};
  P.UseElement.prototype = {$isUriReference: 1, $isUseElement: 1};
  P.ViewElement.prototype = {$isFitToViewBox: 1, $isViewElement: 1, $isZoomAndPan: 1};
  P.ZoomAndPan.prototype = {};
  P._GradientElement.prototype = {$isUriReference: 1, $is_GradientElement: 1};
  P._SVGComponentTransferFunctionElement.prototype = {$is_SVGComponentTransferFunctionElement: 1};
  P._SVGFEDropShadowElement.prototype = {$isFilterPrimitiveStandardAttributes: 1, $is_SVGFEDropShadowElement: 1};
  P._SVGMPathElement.prototype = {$isUriReference: 1, $is_SVGMPathElement: 1};
  P._LengthList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Length];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Length];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Length];
    },
    $isList: 1,
    $asList: function() {
      return [P.Length];
    }
  };
  P._LengthList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Length];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Length];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Length];
    },
    $isList: 1,
    $asList: function() {
      return [P.Length];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.Length];
    }
  };
  P._NumberList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Number];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Number];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Number];
    },
    $isList: 1,
    $asList: function() {
      return [P.Number];
    }
  };
  P._NumberList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Number];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Number];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Number];
    },
    $isList: 1,
    $asList: function() {
      return [P.Number];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.Number];
    }
  };
  P._StringList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    }
  };
  P._StringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.String];
    }
  };
  P._TransformList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Transform];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Transform];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Transform];
    },
    $isList: 1,
    $asList: function() {
      return [P.Transform];
    }
  };
  P._TransformList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Transform];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Transform];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Transform];
    },
    $isList: 1,
    $asList: function() {
      return [P.Transform];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.Transform];
    }
  };
  P.ByteBuffer.prototype = {};
  P.TypedData.prototype = {};
  P._TypedIntList.prototype = {};
  P._TypedFloatList.prototype = {};
  P.Endian.prototype = {};
  P.ByteData.prototype = {$isTypedData: 1};
  P.Int8List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Uint8List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Uint8ClampedList.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Int16List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Uint16List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Int32List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Uint32List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Int64List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Uint64List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Float32List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    },
    $isTypedData: 1,
    $is_TypedFloatList: 1
  };
  P.Float64List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    },
    $isTypedData: 1,
    $is_TypedFloatList: 1
  };
  P.Float32x4List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float32x4];
    },
    $isTypedData: 1
  };
  P.Int32x4List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Int32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Int32x4];
    },
    $isTypedData: 1
  };
  P.Float64x2List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float64x2];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float64x2];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float64x2];
    },
    $isTypedData: 1
  };
  P.Float32x4.prototype = {};
  P.Int32x4.prototype = {};
  P.Float64x2.prototype = {};
  P.UnmodifiableByteBufferView.prototype = {$isByteBuffer: 1};
  P.UnmodifiableByteDataView.prototype = {$isTypedData: 1, $isByteData: 1};
  P._UnmodifiableListMixin.prototype = {};
  P.UnmodifiableUint8ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isUint8List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint8List, P.Uint8List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableInt8ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isInt8List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int8List, P.Int8List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableUint8ClampedListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isUint8ClampedList: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint8ClampedList, P.Uint8ClampedList];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableUint16ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isUint16List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint16List, P.Uint16List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableInt16ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isInt16List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int16List, P.Int16List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableUint32ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isUint32List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint32List, P.Uint32List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableInt32ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isInt32List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int32List, P.Int32List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableUint64ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isUint64List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint64List, P.Uint64List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableInt64ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isInt64List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int64List, P.Int64List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableInt32x4ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $asUnmodifiableListMixin: function() {
      return [P.Int32x4];
    },
    $asUnmodifiableListBase: function() {
      return [P.Int32x4];
    },
    $asListBase: function() {
      return [P.Int32x4];
    },
    $asListMixin: function() {
      return [P.Int32x4];
    },
    $asIterable: function() {
      return [P.Int32x4];
    },
    $asList: function() {
      return [P.Int32x4];
    },
    $isTypedData: 1,
    $isInt32x4List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.Int32x4, P.Int32x4List, P.Int32x4List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Int32x4];
    }
  };
  P.UnmodifiableFloat32x4ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $asUnmodifiableListMixin: function() {
      return [P.Float32x4];
    },
    $asUnmodifiableListBase: function() {
      return [P.Float32x4];
    },
    $asListBase: function() {
      return [P.Float32x4];
    },
    $asListMixin: function() {
      return [P.Float32x4];
    },
    $asIterable: function() {
      return [P.Float32x4];
    },
    $asList: function() {
      return [P.Float32x4];
    },
    $isTypedData: 1,
    $isFloat32x4List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.Float32x4, P.Float32x4List, P.Float32x4List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Float32x4];
    }
  };
  P.UnmodifiableFloat64x2ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Float64x2];
    },
    $asUnmodifiableListMixin: function() {
      return [P.Float64x2];
    },
    $asUnmodifiableListBase: function() {
      return [P.Float64x2];
    },
    $asListBase: function() {
      return [P.Float64x2];
    },
    $asListMixin: function() {
      return [P.Float64x2];
    },
    $asIterable: function() {
      return [P.Float64x2];
    },
    $asList: function() {
      return [P.Float64x2];
    },
    $isTypedData: 1,
    $isFloat64x2List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.Float64x2, P.Float64x2List, P.Float64x2List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Float64x2];
    }
  };
  P.UnmodifiableFloat32ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asUnmodifiableListMixin: function() {
      return [P.double];
    },
    $asUnmodifiableListBase: function() {
      return [P.double];
    },
    $asListBase: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $asIterable: function() {
      return [P.double];
    },
    $asList: function() {
      return [P.double];
    },
    $isTypedData: 1,
    $is_TypedFloatList: 1,
    $isFloat32List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.double, P.Float32List, P.Float32List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.double];
    }
  };
  P.UnmodifiableFloat64ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asUnmodifiableListMixin: function() {
      return [P.double];
    },
    $asUnmodifiableListBase: function() {
      return [P.double];
    },
    $asListBase: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $asIterable: function() {
      return [P.double];
    },
    $asList: function() {
      return [P.double];
    },
    $isTypedData: 1,
    $is_TypedFloatList: 1,
    $isFloat64List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.double, P.Float64List, P.Float64List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.double];
    }
  };
  P._UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asUnmodifiableListMixin: function() {
      return [P.double];
    },
    $asUnmodifiableListBase: function() {
      return [P.double];
    },
    $asListBase: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $asIterable: function() {
      return [P.double];
    },
    $asList: function() {
      return [P.double];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.double, P.Float32List, P.Float32List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.double];
    }
  };
  P._UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $asUnmodifiableListMixin: function() {
      return [P.Float32x4];
    },
    $asUnmodifiableListBase: function() {
      return [P.Float32x4];
    },
    $asListBase: function() {
      return [P.Float32x4];
    },
    $asListMixin: function() {
      return [P.Float32x4];
    },
    $asIterable: function() {
      return [P.Float32x4];
    },
    $asList: function() {
      return [P.Float32x4];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.Float32x4, P.Float32x4List, P.Float32x4List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Float32x4];
    }
  };
  P._UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asUnmodifiableListMixin: function() {
      return [P.double];
    },
    $asUnmodifiableListBase: function() {
      return [P.double];
    },
    $asListBase: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $asIterable: function() {
      return [P.double];
    },
    $asList: function() {
      return [P.double];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.double, P.Float64List, P.Float64List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.double];
    }
  };
  P._UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Float64x2];
    },
    $asUnmodifiableListMixin: function() {
      return [P.Float64x2];
    },
    $asUnmodifiableListBase: function() {
      return [P.Float64x2];
    },
    $asListBase: function() {
      return [P.Float64x2];
    },
    $asListMixin: function() {
      return [P.Float64x2];
    },
    $asIterable: function() {
      return [P.Float64x2];
    },
    $asList: function() {
      return [P.Float64x2];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.Float64x2, P.Float64x2List, P.Float64x2List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Float64x2];
    }
  };
  P._UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int16List, P.Int16List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int32List, P.Int32List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $asUnmodifiableListMixin: function() {
      return [P.Int32x4];
    },
    $asUnmodifiableListBase: function() {
      return [P.Int32x4];
    },
    $asListBase: function() {
      return [P.Int32x4];
    },
    $asListMixin: function() {
      return [P.Int32x4];
    },
    $asIterable: function() {
      return [P.Int32x4];
    },
    $asList: function() {
      return [P.Int32x4];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.Int32x4, P.Int32x4List, P.Int32x4List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Int32x4];
    }
  };
  P._UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int64List, P.Int64List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int8List, P.Int8List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint16List, P.Uint16List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint32List, P.Uint32List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint64List, P.Uint64List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint8ClampedList, P.Uint8ClampedList];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint8List, P.Uint8List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.AnalyserNode.prototype = {$isAnalyserNode: 1};
  P.AudioBuffer.prototype = {$isAudioBuffer: 1};
  P.AudioBufferSourceNode.prototype = {$isAudioBufferSourceNode: 1};
  P.AudioContext.prototype = {$isAudioContext: 1};
  P.AudioDestinationNode.prototype = {$isAudioDestinationNode: 1};
  P.AudioListener.prototype = {$isAudioListener: 1};
  P.AudioNode.prototype = {$isAudioNode: 1};
  P.AudioParam.prototype = {$isAudioParam: 1};
  P.AudioParamMap.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    },
    $isAudioParamMap: 1
  };
  P.AudioProcessingEvent.prototype = {$isAudioProcessingEvent: 1};
  P.AudioScheduledSourceNode.prototype = {$isAudioScheduledSourceNode: 1};
  P.AudioTrack.prototype = {$isAudioTrack: 1};
  P.AudioTrackList.prototype = {$isAudioTrackList: 1};
  P.AudioWorkletGlobalScope.prototype = {$isAudioWorkletGlobalScope: 1};
  P.AudioWorkletNode.prototype = {$isAudioWorkletNode: 1};
  P.AudioWorkletProcessor.prototype = {$isAudioWorkletProcessor: 1};
  P.BaseAudioContext.prototype = {$isBaseAudioContext: 1};
  P.BiquadFilterNode.prototype = {$isBiquadFilterNode: 1};
  P.ChannelMergerNode.prototype = {$isChannelMergerNode: 1};
  P.ChannelSplitterNode.prototype = {$isChannelSplitterNode: 1};
  P.ConstantSourceNode.prototype = {$isConstantSourceNode: 1};
  P.ConvolverNode.prototype = {$isConvolverNode: 1};
  P.DelayNode.prototype = {$isDelayNode: 1};
  P.DynamicsCompressorNode.prototype = {$isDynamicsCompressorNode: 1};
  P.GainNode.prototype = {$isGainNode: 1};
  P.IirFilterNode.prototype = {$isIirFilterNode: 1};
  P.MediaElementAudioSourceNode.prototype = {$isMediaElementAudioSourceNode: 1};
  P.MediaStreamAudioDestinationNode.prototype = {$isMediaStreamAudioDestinationNode: 1};
  P.MediaStreamAudioSourceNode.prototype = {$isMediaStreamAudioSourceNode: 1};
  P.OfflineAudioCompletionEvent.prototype = {$isOfflineAudioCompletionEvent: 1};
  P.OfflineAudioContext.prototype = {$isOfflineAudioContext: 1};
  P.OscillatorNode.prototype = {$isOscillatorNode: 1};
  P.PannerNode.prototype = {$isPannerNode: 1};
  P.PeriodicWave.prototype = {$isPeriodicWave: 1};
  P.ScriptProcessorNode.prototype = {$isScriptProcessorNode: 1};
  P.StereoPannerNode.prototype = {$isStereoPannerNode: 1};
  P.WaveShaperNode.prototype = {$isWaveShaperNode: 1};
  P._AudioParamMap_Interceptor_MapMixin.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  P.ActiveInfo.prototype = {$isActiveInfo: 1};
  P.AngleInstancedArrays.prototype = {$isAngleInstancedArrays: 1};
  P.Buffer.prototype = {$isBuffer: 1};
  P.Canvas.prototype = {$isCanvas: 1};
  P.ColorBufferFloat.prototype = {$isColorBufferFloat: 1};
  P.CompressedTextureAstc.prototype = {$isCompressedTextureAstc: 1};
  P.CompressedTextureAtc.prototype = {$isCompressedTextureAtc: 1};
  P.CompressedTextureETC1.prototype = {$isCompressedTextureETC1: 1};
  P.CompressedTextureEtc.prototype = {$isCompressedTextureEtc: 1};
  P.CompressedTexturePvrtc.prototype = {$isCompressedTexturePvrtc: 1};
  P.CompressedTextureS3TC.prototype = {$isCompressedTextureS3TC: 1};
  P.CompressedTextureS3TCsRgb.prototype = {$isCompressedTextureS3TCsRgb: 1};
  P.ContextEvent.prototype = {$isContextEvent: 1};
  P.DebugRendererInfo.prototype = {$isDebugRendererInfo: 1};
  P.DebugShaders.prototype = {$isDebugShaders: 1};
  P.DepthTexture.prototype = {$isDepthTexture: 1};
  P.DrawBuffers.prototype = {$isDrawBuffers: 1};
  P.EXTsRgb.prototype = {$isEXTsRgb: 1};
  P.ExtBlendMinMax.prototype = {$isExtBlendMinMax: 1};
  P.ExtColorBufferFloat.prototype = {$isExtColorBufferFloat: 1};
  P.ExtColorBufferHalfFloat.prototype = {$isExtColorBufferHalfFloat: 1};
  P.ExtDisjointTimerQuery.prototype = {$isExtDisjointTimerQuery: 1};
  P.ExtDisjointTimerQueryWebGL2.prototype = {$isExtDisjointTimerQueryWebGL2: 1};
  P.ExtFragDepth.prototype = {$isExtFragDepth: 1};
  P.ExtShaderTextureLod.prototype = {$isExtShaderTextureLod: 1};
  P.ExtTextureFilterAnisotropic.prototype = {$isExtTextureFilterAnisotropic: 1};
  P.Framebuffer.prototype = {$isFramebuffer: 1};
  P.GetBufferSubDataAsync.prototype = {$isGetBufferSubDataAsync: 1};
  P.LoseContext.prototype = {$isLoseContext: 1};
  P.OesElementIndexUint.prototype = {$isOesElementIndexUint: 1};
  P.OesStandardDerivatives.prototype = {$isOesStandardDerivatives: 1};
  P.OesTextureFloat.prototype = {$isOesTextureFloat: 1};
  P.OesTextureFloatLinear.prototype = {$isOesTextureFloatLinear: 1};
  P.OesTextureHalfFloat.prototype = {$isOesTextureHalfFloat: 1};
  P.OesTextureHalfFloatLinear.prototype = {$isOesTextureHalfFloatLinear: 1};
  P.OesVertexArrayObject.prototype = {$isOesVertexArrayObject: 1};
  P.Program.prototype = {$isProgram: 1};
  P.Query.prototype = {$isQuery: 1};
  P.Renderbuffer.prototype = {$isRenderbuffer: 1};
  P.RenderingContext.prototype = {$isCanvasRenderingContext: 1, $isRenderingContext: 1};
  P.RenderingContext2.prototype = {$isRenderingContext2: 1, $is_WebGL2RenderingContextBase: 1, $is_WebGLRenderingContextBase: 1};
  P.Sampler.prototype = {$isSampler: 1};
  P.Shader.prototype = {$isShader: 1};
  P.ShaderPrecisionFormat.prototype = {$isShaderPrecisionFormat: 1};
  P.Sync.prototype = {$isSync: 1};
  P.Texture.prototype = {$isTexture: 1};
  P.TimerQueryExt.prototype = {$isTimerQueryExt: 1};
  P.TransformFeedback.prototype = {$isTransformFeedback: 1};
  P.UniformLocation.prototype = {$isUniformLocation: 1};
  P.VertexArrayObject.prototype = {$isVertexArrayObject: 1};
  P.VertexArrayObjectOes.prototype = {$isVertexArrayObjectOes: 1};
  P.WebGL.prototype = {$isWebGL: 1};
  P._WebGL2RenderingContextBase.prototype = {$is_WebGL2RenderingContextBase: 1, $is_WebGLRenderingContextBase: 1};
  P._WebGLRenderingContextBase.prototype = {};
  P.SqlDatabase.prototype = {$isSqlDatabase: 1};
  P.SqlError.prototype = {$isSqlError: 1};
  P.SqlResultSet.prototype = {$isSqlResultSet: 1};
  P.SqlResultSetRowList.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Map,,,]];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [[P.Map,,,]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Map,,,]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Map,,,]];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [[P.Map,,,]];
    },
    $isSqlResultSetRowList: 1
  };
  P.SqlTransaction.prototype = {$isSqlTransaction: 1};
  P._SqlResultSetRowList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Map,,,]];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [[P.Map,,,]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Map,,,]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Map,,,]];
    }
  };
  P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Map,,,]];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [[P.Map,,,]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Map,,,]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Map,,,]];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [[P.Map,,,]];
    }
  };
  S.AsyncCache.prototype = {};
  S.AsyncMemoizer.prototype = {};
  E.CancelableOperation.prototype = {};
  E.CancelableCompleter.prototype = {};
  V.DelegatingEventSink.prototype = {$isEventSink: 1, $isSink: 1};
  R.DelegatingFuture.prototype = {$isFuture: 1};
  O.DelegatingSink.prototype = {$isSink: 1};
  Y.DelegatingStream.prototype = {};
  G.DelegatingStreamConsumer.prototype = {$isStreamConsumer: 1};
  O.DelegatingStreamSink.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  Y.DelegatingStreamSubscription.prototype = {$isStreamSubscription: 1};
  F.FutureGroup.prototype = {$isSink: 1,
    $asSink: function($T) {
      return [[P.Future, $T]];
    }
  };
  V.LazyStream.prototype = {};
  S.NullStreamSink.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  L.RestartableTimer.prototype = {$isTimer: 1};
  U.CaptureSink.prototype = {$isEventSink: 1, $isSink: 1};
  Z.CaptureStreamTransformer.prototype = {
    $asStreamTransformer: function($T) {
      return [$T, [E.Result, $T]];
    },
    $asStreamTransformerBase: function($T) {
      return [$T, [E.Result, $T]];
    }
  };
  V.ErrorResult.prototype = {$isResult: 1,
    $asResult: function() {
      return [P.Null];
    }
  };
  R.ResultFuture.prototype = {};
  A.ReleaseSink.prototype = {$isEventSink: 1,
    $asEventSink: function($T) {
      return [[E.Result, $T]];
    },
    $isSink: 1,
    $asSink: function($T) {
      return [[E.Result, $T]];
    }
  };
  D.ReleaseStreamTransformer.prototype = {
    $asStreamTransformer: function($T) {
      return [[E.Result, $T], $T];
    },
    $asStreamTransformerBase: function($T) {
      return [[E.Result, $T], $T];
    }
  };
  E.Result.prototype = {};
  F.ValueResult.prototype = {$isResult: 1};
  B.SingleSubscriptionTransformer.prototype = {};
  Y.StreamCompleter.prototype = {};
  Y._CompleterStream.prototype = {};
  L.StreamGroup.prototype = {$isSink: 1,
    $asSink: function($T) {
      return [[P.Stream, $T]];
    }
  };
  L._StreamGroupState.prototype = {};
  G.StreamQueue.prototype = {};
  G.StreamQueueTransaction.prototype = {};
  G._EventRequest.prototype = {};
  G._NextRequest.prototype = {$is_EventRequest: 1};
  G._PeekRequest.prototype = {$is_EventRequest: 1};
  G._SkipRequest.prototype = {$is_EventRequest: 1};
  G._ListRequest.prototype = {$is_EventRequest: 1};
  G._TakeRequest.prototype = {};
  G._LookAheadRequest.prototype = {};
  G._CancelRequest.prototype = {$is_EventRequest: 1};
  G._RestRequest.prototype = {$is_EventRequest: 1};
  G._HasNextRequest.prototype = {$is_EventRequest: 1};
  G._TransactionRequest.prototype = {$is_EventRequest: 1};
  T.StreamSinkCompleter.prototype = {};
  T._CompleterSink.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  F.StreamSinkTransformer.prototype = {};
  X.HandlerTransformer.prototype = {$isStreamSinkTransformer: 1};
  X._HandlerSink.prototype = {$isEventSink: 1,
    $asEventSink: function($S, $T) {
      return [$S];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function($S, $T) {
      return [$S];
    },
    $isStreamSink: 1,
    $asStreamSink: function($S, $T) {
      return [$S];
    },
    $isSink: 1,
    $asSink: function($S, $T) {
      return [$S];
    }
  };
  X._SafeCloseSink.prototype = {};
  Q.StreamTransformerWrapper.prototype = {$isStreamSinkTransformer: 1};
  Q._StreamTransformerWrapperSink.prototype = {$isEventSink: 1,
    $asEventSink: function($S, $T) {
      return [$S];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function($S, $T) {
      return [$S];
    },
    $isStreamSink: 1,
    $asStreamSink: function($S, $T) {
      return [$S];
    },
    $isSink: 1,
    $asSink: function($S, $T) {
      return [$S];
    }
  };
  M.TypeSafeStreamSinkTransformer.prototype = {$isStreamSinkTransformer: 1};
  N.StreamSplitter.prototype = {};
  D._TransformedSubscription.prototype = {$isStreamSubscription: 1};
  L.StreamZip.prototype = {
    $asStream: function($T) {
      return [[P.List, $T]];
    }
  };
  T.SubscriptionStream.prototype = {};
  T._CancelOnErrorSubscriptionWrapper.prototype = {};
  Y.TypeSafeStreamSubscription.prototype = {$isStreamSubscription: 1};
  M._TypeSafeStreamTransformer.prototype = {};
  M.BuildStatus.prototype = {};
  M.BuildResult.prototype = {};
  M.DefaultBuildResult.prototype = {$isBuildResult: 1, $isBuilt: 1,
    $asBuilt: function() {
      return [M.DefaultBuildResult, M.DefaultBuildResultBuilder];
    }
  };
  M.BuildResults.prototype = {$isBuilt: 1,
    $asBuilt: function() {
      return [M.BuildResults, M.BuildResultsBuilder];
    }
  };
  M._$BuildStatusSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(object, "$isBuildStatus");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return object.name;
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return M.BuildStatus_valueOf(H.stringTypeCast(serialized));
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [M.BuildStatus];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [M.BuildStatus];
    },
    get$types: function() {
      return C.List_Type_BuildStatus_qBS;
    },
    get$wireName: function() {
      return "BuildStatus";
    }
  };
  M._$DefaultBuildResultSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      var result, t1;
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(object, "$isDefaultBuildResult");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      result = H.setRuntimeTypeInfo(["status", serializers.serialize$2$specifiedType(object.status, C.FullType_GJj), "target", serializers.serialize$2$specifiedType(object.target, C.FullType_aZ8)], [P.Object]);
      t1 = object.buildId;
      if (t1 != null) {
        C.JSArray_methods.add$1(result, "buildId");
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(t1, C.FullType_aZ8));
      }
      t1 = object.error;
      if (t1 != null) {
        C.JSArray_methods.add$1(result, "error");
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(t1, C.FullType_aZ8));
      }
      t1 = object.isCached;
      if (t1 != null) {
        C.JSArray_methods.add$1(result, "isCached");
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(t1, C.FullType_6bM));
      }
      return result;
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var result, iterator, key, value;
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.listSuperNativeTypeCheck(serialized, "$isIterable");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      result = M.DefaultBuildResultBuilder$();
      iterator = J.get$iterator$ax(serialized);
      for (; iterator.moveNext$0();) {
        key = H.stringTypeCast(iterator.get$current());
        iterator.moveNext$0();
        value = iterator.get$current();
        switch (key) {
          case "status":
            result.set$status(0, H.interceptedTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_GJj), "$isBuildStatus"));
            break;
          case "target":
            result.set$target(0, H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8)));
            break;
          case "buildId":
            result.set$buildId(H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8)));
            break;
          case "error":
            result.set$error(0, H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8)));
            break;
          case "isCached":
            result.set$isCached(H.boolTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_6bM)));
            break;
        }
      }
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [M.DefaultBuildResult];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [M.DefaultBuildResult];
    },
    get$types: function() {
      return C.List_j8H;
    },
    get$wireName: function() {
      return "DefaultBuildResult";
    }
  };
  M._$BuildResultsSerializer.prototype = {$isSerializer: 1,
    $asSerializer: function() {
      return [M.BuildResults];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [M.BuildResults];
    }
  };
  M._$DefaultBuildResult.prototype = {
    _$DefaultBuildResult$_$5$buildId$error$isCached$status$target: function(buildId, error, isCached, $status, target) {
      var _s18_ = "DefaultBuildResult";
      if (this.status == null)
        throw H.wrapException(Y.BuiltValueNullFieldError$(_s18_, "status"));
      if (this.target == null)
        throw H.wrapException(Y.BuiltValueNullFieldError$(_s18_, "target"));
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      return other instanceof M.DefaultBuildResult && J.$eq$(_this.status, other.status) && J.$eq$(_this.target, other.target) && J.$eq$(_this.buildId, other.buildId) && J.$eq$(_this.error, other.error) && J.$eq$(_this.isCached, other.isCached);
    },
    get$hashCode: function(_) {
      var _this = this;
      return Y.$jf(Y.$jc(Y.$jc(Y.$jc(Y.$jc(Y.$jc(0, J.get$hashCode$(_this.status)), J.get$hashCode$(_this.target)), J.get$hashCode$(_this.buildId)), J.get$hashCode$(_this.error)), J.get$hashCode$(_this.isCached)));
    },
    toString$0: function(_) {
      var _this = this,
        t1 = $.$get$newBuiltValueToStringHelper().call$1("DefaultBuildResult"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "status", _this.status);
      t2.add$2(t1, "target", _this.target);
      t2.add$2(t1, "buildId", _this.buildId);
      t2.add$2(t1, "error", _this.error);
      t2.add$2(t1, "isCached", _this.isCached);
      return t2.toString$0(t1);
    },
    get$status: function(receiver) {
      return this.status;
    },
    get$target: function(receiver) {
      return this.target;
    },
    get$buildId: function() {
      return this.buildId;
    },
    get$error: function(receiver) {
      return this.error;
    },
    get$isCached: function() {
      return this.isCached;
    }
  };
  M.DefaultBuildResultBuilder.prototype = {
    get$status: function(_) {
      return this.get$_build_status$_$this().get$_status();
    },
    set$status: function(_, $status) {
      H.interceptedTypeCheck($status, "$isBuildStatus");
      this.get$_build_status$_$this().set$_status($status);
    },
    get$target: function(_) {
      return this.get$_build_status$_$this().get$_build_status$_target();
    },
    set$target: function(_, target) {
      H.stringTypeCheck(target);
      this.get$_build_status$_$this().set$_build_status$_target(target);
    },
    get$buildId: function() {
      return this.get$_build_status$_$this().get$_buildId();
    },
    set$buildId: function(buildId) {
      H.stringTypeCheck(buildId);
      this.get$_build_status$_$this().set$_buildId(buildId);
    },
    get$error: function(_) {
      return this.get$_build_status$_$this().get$_build_status$_error();
    },
    set$error: function(_, error) {
      H.stringTypeCheck(error);
      this.get$_build_status$_$this().set$_build_status$_error(error);
    },
    get$isCached: function() {
      return this.get$_build_status$_$this().get$_isCached();
    },
    set$isCached: function(isCached) {
      H.boolTypeCheck(isCached);
      this.get$_build_status$_$this().set$_isCached(isCached);
    },
    get$_build_status$_$this: function() {
      var _this = this,
        t1 = _this._build_status$_$v;
      if (t1 != null) {
        _this._status = H.interceptedTypeCheck(J.get$status$x(t1), "$isBuildStatus");
        _this._build_status$_target = H.stringTypeCheck(J.get$target$z(_this._build_status$_$v));
        _this._buildId = H.stringTypeCheck(_this._build_status$_$v.get$buildId());
        _this._build_status$_error = H.stringTypeCheck(J.get$error$z(_this._build_status$_$v));
        _this._isCached = H.boolTypeCheck(_this._build_status$_$v.get$isCached());
        _this._build_status$_$v = null;
      }
      return _this;
    },
    replace$1: function(_, other) {
      H.interceptedTypeCheck(other, "$isDefaultBuildResult");
      if (other == null)
        throw H.wrapException(P.ArgumentError$notNull("other"));
      this._build_status$_$v = other;
    },
    build$0: function() {
      var t1, t2, _this = this,
        _$result = _this._build_status$_$v;
      if (_$result == null) {
        t1 = _this.get$status(_this);
        t2 = _this.get$target(_this);
        _$result = M._$DefaultBuildResult$_(_this.get$buildId(), _this.get$error(_this), _this.get$isCached(), t1, t2);
      }
      _this.replace$1(0, _$result);
      return _$result;
    },
    set$_status: function(_status) {
      this._status = H.interceptedTypeCheck(_status, "$isBuildStatus");
    },
    set$_build_status$_target: function(_target) {
      this._build_status$_target = H.stringTypeCheck(_target);
    },
    set$_buildId: function(_buildId) {
      this._buildId = H.stringTypeCheck(_buildId);
    },
    set$_build_status$_error: function(_error) {
      this._build_status$_error = H.stringTypeCheck(_error);
    },
    set$_isCached: function(_isCached) {
      this._isCached = H.boolTypeCheck(_isCached);
    },
    $isBuilder: 1,
    $asBuilder: function() {
      return [M.DefaultBuildResult, M.DefaultBuildResultBuilder];
    },
    get$_status: function() {
      return this._status;
    },
    get$_build_status$_target: function() {
      return this._build_status$_target;
    },
    get$_buildId: function() {
      return this._buildId;
    },
    get$_build_status$_error: function() {
      return this._build_status$_error;
    },
    get$_isCached: function() {
      return this._isCached;
    }
  };
  M._$BuildResults.prototype = {};
  M.BuildResultsBuilder.prototype = {$isBuilder: 1,
    $asBuilder: function() {
      return [M.BuildResults, M.BuildResultsBuilder];
    }
  };
  Q.CopyOnWriteList.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._copy_on_write_list$_list);
    },
    $index: function(_, index) {
      H.intTypeCheck(index);
      return J.$index$asx(this._copy_on_write_list$_list, index);
    },
    $add: function(_, other) {
      H.assertSubtype(other, "$isList", this.$ti, "$asList");
      return J.$add$ansx(this._copy_on_write_list$_list, other);
    },
    any$1: function(_, test) {
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(this, 0)]});
      return J.any$1$ax(this._copy_on_write_list$_list, test);
    },
    cast$1$0: function(_, $T) {
      return Q.CopyOnWriteList$(J.cast$1$0$ax(this._copy_on_write_list$_list, $T), this._growable, $T);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    contains$1: function(_, element) {
      return J.contains$1$asx(this._copy_on_write_list$_list, element);
    },
    elementAt$1: function(_, index) {
      H.intTypeCheck(index);
      return J.elementAt$1$ax(this._copy_on_write_list$_list, index);
    },
    get$first: function(_) {
      return J.get$first$ax(this._copy_on_write_list$_list);
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(this, 0)]});
      return J.fold$1$2$ax(this._copy_on_write_list$_list, initialValue, combine, $T);
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    forEach$1: function(_, f) {
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
      return J.forEach$1$ax(this._copy_on_write_list$_list, f);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._copy_on_write_list$_list);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._copy_on_write_list$_list);
    },
    get$iterator: function(_) {
      return J.get$iterator$ax(this._copy_on_write_list$_list);
    },
    join$1: function(_, separator) {
      H.stringTypeCheck(separator);
      return J.join$1$ax(this._copy_on_write_list$_list, separator);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    get$last: function(_) {
      return J.get$last$ax(this._copy_on_write_list$_list);
    },
    map$1$1: function(_, f, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $T, args: [H.getTypeArgumentByIndex(this, 0)]});
      return J.map$1$1$ax(this._copy_on_write_list$_list, f, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    skip$1: function(_, count) {
      H.intTypeCheck(count);
      return J.skip$1$ax(this._copy_on_write_list$_list, count);
    },
    sublist$2: function(_, start, end) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      return J.sublist$2$ax(this._copy_on_write_list$_list, start, end);
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    take$1: function(_, count) {
      H.intTypeCheck(count);
      return J.take$1$ax(this._copy_on_write_list$_list, count);
    },
    toList$1$growable: function(_, growable) {
      H.boolTypeCheck(growable);
      return J.toList$1$growable$ax(this._copy_on_write_list$_list, growable);
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    where$1: function(_, test) {
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(this, 0)]});
      return J.where$1$ax(this._copy_on_write_list$_list, test);
    },
    set$length: function(_, $length) {
      H.intTypeCheck($length);
      this._maybeCopyBeforeWrite$0();
      J.set$length$asx(this._copy_on_write_list$_list, $length);
    },
    $indexSet: function(_, index, element) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      this._maybeCopyBeforeWrite$0();
      J.$indexSet$ax(this._copy_on_write_list$_list, index, element);
    },
    add$1: function(_, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      this._maybeCopyBeforeWrite$0();
      J.add$1$ax(this._copy_on_write_list$_list, value);
    },
    addAll$1: function(_, iterable) {
      H.assertSubtype(iterable, "$isIterable", this.$ti, "$asIterable");
      this._maybeCopyBeforeWrite$0();
      J.addAll$1$ax(this._copy_on_write_list$_list, iterable);
    },
    sort$1: function(_, compare) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      this._maybeCopyBeforeWrite$0();
      J.sort$1$ax(this._copy_on_write_list$_list, compare);
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    clear$0: function(_) {
      this._maybeCopyBeforeWrite$0();
      J.clear$0$ax(this._copy_on_write_list$_list);
    },
    insert$2: function(_, index, element) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      this._maybeCopyBeforeWrite$0();
      J.insert$2$ax(this._copy_on_write_list$_list, index, element);
    },
    insertAll$2: function(_, index, iterable) {
      H.intTypeCheck(index);
      H.assertSubtype(iterable, "$isIterable", this.$ti, "$asIterable");
      this._maybeCopyBeforeWrite$0();
      J.insertAll$2$ax(this._copy_on_write_list$_list, index, iterable);
    },
    setAll$2: function(_, index, iterable) {
      H.intTypeCheck(index);
      H.assertSubtype(iterable, "$isIterable", this.$ti, "$asIterable");
      this._maybeCopyBeforeWrite$0();
      J.setAll$2$ax(this._copy_on_write_list$_list, index, iterable);
    },
    removeAt$1: function(_, index) {
      H.intTypeCheck(index);
      this._maybeCopyBeforeWrite$0();
      return J.removeAt$1$ax(this._copy_on_write_list$_list, index);
    },
    removeLast$0: function(_) {
      this._maybeCopyBeforeWrite$0();
      return J.removeLast$0$ax(this._copy_on_write_list$_list);
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", this.$ti, "$asIterable");
      H.intTypeCheck(skipCount);
      this._maybeCopyBeforeWrite$0();
      J.setRange$4$ax(this._copy_on_write_list$_list, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    replaceRange$3: function(_, start, end, iterable) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", this.$ti, "$asIterable");
      this._maybeCopyBeforeWrite$0();
      J.replaceRange$3$asx(this._copy_on_write_list$_list, start, end, iterable);
    },
    toString$0: function(_) {
      return J.toString$0$(this._copy_on_write_list$_list);
    },
    _maybeCopyBeforeWrite$0: function() {
      var _this = this;
      if (!_this._copyBeforeWrite)
        return;
      _this._copyBeforeWrite = false;
      _this.set$_copy_on_write_list$_list(P.List_List$from(_this._copy_on_write_list$_list, _this._growable, H.getTypeArgumentByIndex(_this, 0)));
    },
    set$_copy_on_write_list$_list: function(_list) {
      this._copy_on_write_list$_list = H.assertSubtype(_list, "$isList", this.$ti, "$asList");
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  S.CopyOnWriteMap.prototype = {$isMap: 1};
  A.CopyOnWriteSet.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  Z.BuiltIterable.prototype = {$isIterable: 1};
  S.OverriddenHashcodeBuiltList.prototype = {};
  S.BuiltList.prototype = {
    toBuilder$0: function() {
      return S.ListBuilder_ListBuilder(this, H.getTypeArgumentByIndex(this, 0));
    },
    get$hashCode: function(_) {
      var t1 = this._list$_hashCode;
      return t1 == null ? this._list$_hashCode = H.intTypeCheck(X.hashObjects(this._list)) : t1;
    },
    $eq: function(_, other) {
      var i, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (!(other instanceof S.BuiltList))
        return false;
      if (!J.$eq$(other.get$length(other), _this.get$length(_this)))
        return false;
      if (!J.$eq$(other.get$hashCode(other), _this.get$hashCode(_this)))
        return false;
      for (i = 0; i !== _this.get$length(_this); ++i)
        if (!J.$eq$(other.$index(0, i), _this.$index(0, i)))
          return false;
      return true;
    },
    toString$0: function(_) {
      return J.toString$0$(this._list);
    },
    $index: function(_, index) {
      return J.$index$asx(this._list, H.intTypeCheck(index));
    },
    $add: function(_, other) {
      return S._BuiltList$withSafeList(J.$add$ansx(this._list, H.assertSubtype(other, "$isBuiltList", this.$ti, "$asBuiltList")._list), H.getTypeArgumentByIndex(this, 0));
    },
    get$length: function(_) {
      return J.get$length$asx(this._list);
    },
    get$iterator: function(_) {
      return J.get$iterator$ax(this._list);
    },
    map$1$1: function(_, f, $T) {
      return J.map$1$1$ax(this._list, H.functionTypeCheck(f, {func: 1, ret: $T, args: [H.getTypeArgumentByIndex(this, 0)]}), $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    where$1: function(_, test) {
      return J.where$1$ax(this._list, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(this, 0)]}));
    },
    contains$1: function(_, element) {
      return J.contains$1$asx(this._list, element);
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      return J.fold$1$2$ax(this._list, H.assertSubtypeOfRuntimeType(initialValue, $T), H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(this, 0)]}), $T);
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    join$1: function(_, separator) {
      return J.join$1$ax(this._list, H.stringTypeCheck(separator));
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    toList$1$growable: function(_, growable) {
      return Q.CopyOnWriteList$(this._list, H.boolTypeCheck(growable), H.getTypeArgumentByIndex(this, 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._list);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._list);
    },
    take$1: function(_, n) {
      return J.take$1$ax(this._list, H.intTypeCheck(n));
    },
    skip$1: function(_, n) {
      return J.skip$1$ax(this._list, H.intTypeCheck(n));
    },
    get$first: function(_) {
      return J.get$first$ax(this._list);
    },
    get$last: function(_) {
      return J.get$last$ax(this._list);
    },
    elementAt$1: function(_, index) {
      return J.elementAt$1$ax(this._list, H.intTypeCheck(index));
    },
    cast$1$0: function(_, $T) {
      return P.Iterable_castFrom(this._list, H.getTypeArgumentByIndex(this, 0), $T);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    BuiltList$_$1: function(_list, $E) {
      if (J.$eq$(H.createRuntimeType($E), C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit element type required, for example "new BuiltList<int>"'));
    },
    $isIterable: 1,
    $isBuiltIterable: 1
  };
  S._BuiltList.prototype = {
    _BuiltList$copyAndCheckTypes$1: function(iterable, $E) {
      var t1, element;
      for (t1 = J.get$iterator$ax(this._list); t1.moveNext$0();) {
        element = t1.get$current();
        if (!H.checkSubtypeOfRuntimeType(element, $E))
          throw H.wrapException(P.ArgumentError$("iterable contained invalid element: " + H.S(element)));
      }
    },
    hasExactElementType$1: function(type) {
      H.interceptedTypeCheck(type, "$isType");
      return J.$eq$(H.createRuntimeType(H.getTypeArgumentByIndex(this, 0)), type);
    }
  };
  S.ListBuilder.prototype = {
    build$0: function() {
      var _this = this;
      if (_this._listOwner == null)
        _this._list$_setOwner$1(S._BuiltList$withSafeList(_this._list, H.getTypeArgumentByIndex(_this, 0)));
      return _this._listOwner;
    },
    replace$1: function(_, iterable) {
      var _this = this;
      H.listSuperNativeTypeCheck(iterable, "$isIterable");
      if (H.checkSubtype(iterable, "$is_BuiltList", _this.$ti, null))
        _this._list$_setOwner$1(iterable);
      else
        _this._setSafeList$1(P.List_List$from(iterable, true, H.getTypeArgumentByIndex(_this, 0)));
    },
    $index: function(_, index) {
      H.intTypeCheck(index);
      return J.$index$asx(this._list, index);
    },
    $indexSet: function(_, index, element) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      this._list$_checkElement$1(element);
      J.$indexSet$ax(this.get$_safeList(), index, element);
    },
    get$length: function(_) {
      return J.get$length$asx(this._list);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._list);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._list);
    },
    add$1: function(_, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      this._list$_checkElement$1(value);
      J.add$1$ax(this.get$_safeList(), value);
    },
    clear$0: function(_) {
      J.clear$0$ax(this.get$_safeList());
    },
    replaceRange$3: function(_, start, end, iterable) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", this.$ti, "$asIterable");
      this._checkElements$1(iterable);
      J.replaceRange$3$asx(this.get$_safeList(), start, end, iterable);
    },
    map$1: function(_, f) {
      var result, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(f, {func: 1, ret: t1, args: [t1]});
      result = J.toList$1$growable$ax(J.map$1$1$ax(_this._list, f, t1), true);
      _this._checkElements$1(result);
      _this._setSafeList$1(result);
    },
    ListBuilder$_uninitialized$0: function($E) {
      this._list$_checkGenericTypeParameter$0();
    },
    _list$_setOwner$1: function(listOwner) {
      H.assertSubtype(listOwner, "$is_BuiltList", this.$ti, "$as_BuiltList");
      this.set$_list(listOwner._list);
      this.set$_listOwner(listOwner);
    },
    _setSafeList$1: function(list) {
      this.set$_list(H.assertSubtype(list, "$isList", this.$ti, "$asList"));
      this.set$_listOwner(null);
    },
    get$_safeList: function() {
      var _this = this;
      if (_this._listOwner != null)
        _this._setSafeList$1(P.List_List$from(_this._list, true, H.getTypeArgumentByIndex(_this, 0)));
      return _this._list;
    },
    _list$_checkGenericTypeParameter$0: function() {
      if (J.$eq$(H.createRuntimeType(H.getTypeArgumentByIndex(this, 0)), C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit element type required, for example "new ListBuilder<int>"'));
    },
    _list$_checkElement$1: function(element) {
      if (H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0)) == null)
        throw H.wrapException(P.ArgumentError$("null element"));
    },
    _checkElements$1: function(elements) {
      var t1, t2, element;
      for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(elements, "$isIterable")), t2 = H.getTypeArgumentByIndex(this, 0); t1.moveNext$0();) {
        element = t1.get$current();
        if (!H.checkSubtypeOfRuntimeType(element, t2))
          throw H.wrapException(P.ArgumentError$("invalid element: " + H.S(element)));
      }
    },
    set$_list: function(_list) {
      this._list = H.assertSubtype(_list, "$isList", this.$ti, "$asList");
    },
    set$_listOwner: function(_listOwner) {
      this._listOwner = H.assertSubtype(_listOwner, "$is_BuiltList", this.$ti, "$as_BuiltList");
    }
  };
  M.OverriddenHashcodeBuiltListMultimap.prototype = {};
  M.BuiltListMultimap.prototype = {
    get$hashCode: function(_) {
      var _this = this,
        t1 = _this._list_multimap$_hashCode;
      if (t1 == null) {
        t1 = J.toList$1$growable$ax(J.map$1$1$ax(J.get$keys$x(_this._list_multimap$_map), new M.BuiltListMultimap_hashCode_closure(_this), P.int), false);
        J.sort$0$ax(t1);
        t1 = _this._list_multimap$_hashCode = H.intTypeCheck(X.hashObjects(t1));
      }
      return t1;
    },
    $eq: function(_, other) {
      var t1, key, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (!(other instanceof M.BuiltListMultimap))
        return false;
      if (!J.$eq$(other.get$length(other), _this.get$length(_this)))
        return false;
      if (!J.$eq$(other.get$hashCode(other), _this.get$hashCode(_this)))
        return false;
      for (t1 = J.get$iterator$ax(_this.get$keys(_this)); t1.moveNext$0();) {
        key = t1.get$current();
        if (!J.$eq$(other.$index(0, key), _this.$index(0, key)))
          return false;
      }
      return true;
    },
    toString$0: function(_) {
      return J.toString$0$(this._list_multimap$_map);
    },
    $index: function(_, key) {
      var result = J.$index$asx(this._list_multimap$_map, key);
      return result == null ? this._emptyList : result;
    },
    containsKey$1: function(key) {
      return this._list_multimap$_map.containsKey$1(key);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._list_multimap$_map);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._list_multimap$_map);
    },
    get$keys: function(_) {
      var _this = this;
      if (_this._list_multimap$_keys == null)
        _this.set$_list_multimap$_keys(J.get$keys$x(_this._list_multimap$_map));
      return _this._list_multimap$_keys;
    },
    get$length: function(_) {
      return J.get$length$asx(this._list_multimap$_map);
    },
    BuiltListMultimap$_$1: function(_map, $K, $V) {
      if (J.$eq$(H.createRuntimeType($K), C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit key type required, for example "new BuiltListMultimap<int, int>"'));
      if (J.$eq$(H.createRuntimeType($V), C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit value type required, for example "new BuiltListMultimap<int, int>"'));
    },
    set$_list_multimap$_keys: function(_keys) {
      this._list_multimap$_keys = H.assertSubtype(_keys, "$isIterable", [H.getTypeArgumentByIndex(this, 0)], "$asIterable");
    },
    get$_list_multimap$_map: function() {
      return this._list_multimap$_map;
    }
  };
  M.BuiltListMultimap_BuiltListMultimap_closure.prototype = {
    call$1: function(k) {
      return J.$index$asx(this.multimap, k);
    },
    $signature: 2
  };
  M.BuiltListMultimap_hashCode_closure.prototype = {
    call$1: function(key) {
      var t1 = this.$this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0));
      return X.hash2(J.get$hashCode$(key), J.get$hashCode$(J.$index$asx(t1.get$_list_multimap$_map(), key)));
    },
    $signature: function() {
      return {func: 1, ret: P.int, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
    }
  };
  M._BuiltListMultimap.prototype = {
    _BuiltListMultimap$copyAndCheck$2: function(keys, lookup, $K, $V) {
      var t1, t2, t3, key;
      for (t1 = J.get$iterator$ax(keys), t2 = this._list_multimap$_map, t3 = J.getInterceptor$ax(t2); t1.moveNext$0();) {
        key = t1.get$current();
        if (H.checkSubtypeOfRuntimeType(key, $K))
          t3.$indexSet(t2, key, S.BuiltList_BuiltList(H.listSuperNativeTypeCheck(lookup.call$1(key), "$isIterable"), $V));
        else
          throw H.wrapException(P.ArgumentError$("map contained invalid key: " + H.S(key)));
      }
    }
  };
  M.ListMultimapBuilder.prototype = {
    build$0: function() {
      var t1, key, builtList, t2, t3, _this = this;
      if (_this._list_multimap$_builtMapOwner == null) {
        for (t1 = J.get$iterator$ax(J.get$keys$x(_this._list_multimap$_builderMap)); t1.moveNext$0();) {
          key = t1.get$current();
          builtList = J.$index$asx(_this._list_multimap$_builderMap, key).build$0();
          t2 = builtList.get$isEmpty(builtList);
          t3 = _this._list_multimap$_builtMap;
          if (t2)
            J.remove$1$z(t3, key);
          else
            J.$indexSet$ax(t3, key, builtList);
        }
        _this.set$_list_multimap$_builtMapOwner(M._BuiltListMultimap$withSafeMap(_this._list_multimap$_builtMap, H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1)));
      }
      return _this._list_multimap$_builtMapOwner;
    },
    replace$1: function(_, multimap) {
      var t1, t2;
      if (H.checkSubtype(multimap, "$is_BuiltListMultimap", this.$ti, null))
        this._list_multimap$_setOwner$1(multimap);
      else {
        t1 = J.getInterceptor$(multimap);
        if (!t1.$isMap)
          t2 = !!t1.$isBuiltListMultimap;
        else
          t2 = true;
        if (t2)
          this._list_multimap$_setWithCopyAndCheck$2(H.listSuperNativeTypeCheck(t1.get$keys(multimap), "$isIterable"), new M.ListMultimapBuilder_replace_closure(multimap));
        else
          throw H.wrapException(P.ArgumentError$("expected Map, ListMultimap or BuiltListMultimap, got " + H.S(t1.get$runtimeType(multimap))));
      }
    },
    add$2: function(_, key, value) {
      var _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      _this._list_multimap$_makeWriteableCopy$0();
      _this._list_multimap$_checkKey$1(key);
      _this._list_multimap$_checkValue$1(value);
      J.add$1$ax(_this._list_multimap$_getValuesBuilder$1(key), value);
    },
    clear$0: function(_) {
      this._list_multimap$_makeWriteableCopy$0();
      J.clear$0$ax(this._list_multimap$_builtMap);
      J.clear$0$ax(this._list_multimap$_builderMap);
    },
    $index: function(_, key) {
      return H.checkSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)) ? this._list_multimap$_getValuesBuilder$1(key) : S.ListBuilder_ListBuilder(C.List_empty0, H.getTypeArgumentByIndex(this, 1));
    },
    _list_multimap$_getValuesBuilder$1: function(key) {
      var result, builtValues, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      result = J.$index$asx(_this._list_multimap$_builderMap, key);
      if (result == null) {
        builtValues = J.$index$asx(_this._list_multimap$_builtMap, key);
        result = builtValues == null ? S.ListBuilder_ListBuilder(C.List_empty0, H.getTypeArgumentByIndex(_this, 1)) : builtValues.toBuilder$0();
        J.$indexSet$ax(_this._list_multimap$_builderMap, key, result);
      }
      return result;
    },
    _list_multimap$_makeWriteableCopy$0: function() {
      var _this = this;
      if (_this._list_multimap$_builtMapOwner != null) {
        _this.set$_list_multimap$_builtMap(P.LinkedHashMap_LinkedHashMap$from(_this._list_multimap$_builtMap, H.getTypeArgumentByIndex(_this, 0), [S.BuiltList, H.getTypeArgumentByIndex(_this, 1)]));
        _this.set$_list_multimap$_builtMapOwner(null);
      }
    },
    ListMultimapBuilder$_uninitialized$0: function($K, $V) {
      this._list_multimap$_checkGenericTypeParameter$0();
    },
    _list_multimap$_setOwner$1: function(builtListMultimap) {
      var _this = this;
      H.assertSubtype(builtListMultimap, "$is_BuiltListMultimap", _this.$ti, "$as_BuiltListMultimap");
      _this.set$_list_multimap$_builtMapOwner(builtListMultimap);
      _this.set$_list_multimap$_builtMap(builtListMultimap._list_multimap$_map);
      _this.set$_list_multimap$_builderMap(H.JsLinkedHashMap_JsLinkedHashMap$es6(H.getTypeArgumentByIndex(_this, 0), [S.ListBuilder, H.getTypeArgumentByIndex(_this, 1)]));
    },
    _list_multimap$_setWithCopyAndCheck$2: function(keys, lookup) {
      var t1, t2, t3, key, t4, value, _this = this;
      H.listSuperNativeTypeCheck(keys, "$isIterable");
      H.interceptedTypeCheck(lookup, "$isFunction");
      _this.set$_list_multimap$_builtMapOwner(null);
      t1 = H.getTypeArgumentByIndex(_this, 0);
      t2 = H.getTypeArgumentByIndex(_this, 1);
      _this.set$_list_multimap$_builtMap(H.JsLinkedHashMap_JsLinkedHashMap$es6(t1, [S.BuiltList, t2]));
      _this.set$_list_multimap$_builderMap(H.JsLinkedHashMap_JsLinkedHashMap$es6(t1, [S.ListBuilder, t2]));
      for (t3 = J.get$iterator$ax(keys); t3.moveNext$0();) {
        key = t3.get$current();
        if (H.checkSubtypeOfRuntimeType(key, t1))
          for (t4 = J.get$iterator$ax(H.listSuperNativeTypeCheck(lookup.call$1(key), "$isIterable")); t4.moveNext$0();) {
            value = t4.get$current();
            if (H.checkSubtypeOfRuntimeType(value, t2))
              _this.add$2(0, key, value);
            else
              throw H.wrapException(P.ArgumentError$("map contained invalid value: " + H.S(value) + ", for key " + H.S(key)));
          }
        else
          throw H.wrapException(P.ArgumentError$("map contained invalid key: " + H.S(key)));
      }
    },
    _list_multimap$_checkGenericTypeParameter$0: function() {
      if (J.$eq$(H.createRuntimeType(H.getTypeArgumentByIndex(this, 0)), C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit key type required, for example "new ListMultimapBuilder<int, int>"'));
      if (J.$eq$(H.createRuntimeType(H.getTypeArgumentByIndex(this, 1)), C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit value type required, for example "new ListMultimapBuilder<int, int>"'));
    },
    _list_multimap$_checkKey$1: function(key) {
      if (H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)) == null)
        throw H.wrapException(P.ArgumentError$("null key"));
    },
    _list_multimap$_checkValue$1: function(value) {
      if (H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)) == null)
        throw H.wrapException(P.ArgumentError$("null value"));
    },
    set$_list_multimap$_builtMap: function(_builtMap) {
      this._list_multimap$_builtMap = H.assertSubtype(_builtMap, "$isMap", [H.getTypeArgumentByIndex(this, 0), [S.BuiltList, H.getTypeArgumentByIndex(this, 1)]], "$asMap");
    },
    set$_list_multimap$_builtMapOwner: function(_builtMapOwner) {
      this._list_multimap$_builtMapOwner = H.assertSubtype(_builtMapOwner, "$is_BuiltListMultimap", this.$ti, "$as_BuiltListMultimap");
    },
    set$_list_multimap$_builderMap: function(_builderMap) {
      this._list_multimap$_builderMap = H.assertSubtype(_builderMap, "$isMap", [H.getTypeArgumentByIndex(this, 0), [S.ListBuilder, H.getTypeArgumentByIndex(this, 1)]], "$asMap");
    }
  };
  M.ListMultimapBuilder_replace_closure.prototype = {
    call$1: function(k) {
      return J.$index$asx(this.multimap, k);
    },
    $signature: 2
  };
  A.OverriddenHashcodeBuiltMap.prototype = {};
  A.BuiltMap.prototype = {
    toBuilder$0: function() {
      var _this = this;
      return A.MapBuilder$_fromBuiltMap(H.assertSubtype(_this, "$is_BuiltMap", _this.$ti, "$as_BuiltMap"), H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    get$hashCode: function(_) {
      var _this = this,
        t1 = _this._map$_hashCode;
      if (t1 == null) {
        t1 = J.toList$1$growable$ax(J.map$1$1$ax(J.get$keys$x(_this._map$_map), new A.BuiltMap_hashCode_closure(_this), P.int), false);
        J.sort$0$ax(t1);
        t1 = _this._map$_hashCode = H.intTypeCheck(X.hashObjects(t1));
      }
      return t1;
    },
    $eq: function(_, other) {
      var t1, key, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (!(other instanceof A.BuiltMap))
        return false;
      if (!J.$eq$(other.get$length(other), _this.get$length(_this)))
        return false;
      if (!J.$eq$(other.get$hashCode(other), _this.get$hashCode(_this)))
        return false;
      for (t1 = J.get$iterator$ax(_this.get$keys(_this)); t1.moveNext$0();) {
        key = t1.get$current();
        if (!J.$eq$(other.$index(0, key), _this.$index(0, key)))
          return false;
      }
      return true;
    },
    toString$0: function(_) {
      return J.toString$0$(this._map$_map);
    },
    $index: function(_, key) {
      return J.$index$asx(this._map$_map, key);
    },
    containsKey$1: function(key) {
      return this._map$_map.containsKey$1(key);
    },
    forEach$1: function(_, f) {
      J.forEach$1$ax(this._map$_map, H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]}));
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._map$_map);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._map$_map);
    },
    get$keys: function(_) {
      var _this = this;
      if (_this._map$_keys == null)
        _this.set$_map$_keys(J.get$keys$x(_this._map$_map));
      return _this._map$_keys;
    },
    get$length: function(_) {
      return J.get$length$asx(this._map$_map);
    },
    map$1: function(_, f) {
      return A._BuiltMap$withSafeMap(null, J.map$2$1$ax(this._map$_map, H.functionTypeCheck(f, {func: 1, ret: [P.MapEntry,,,], args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]}), null, null), null, null);
    },
    BuiltMap$_$2: function(_mapFactory, _map, $K, $V) {
      if (J.$eq$(H.createRuntimeType($K), C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit key type required, for example "new BuiltMap<int, int>"'));
      if (J.$eq$(H.createRuntimeType($V), C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit value type required, for example "new BuiltMap<int, int>"'));
    },
    set$_map$_keys: function(_keys) {
      this._map$_keys = H.assertSubtype(_keys, "$isIterable", [H.getTypeArgumentByIndex(this, 0)], "$asIterable");
    },
    get$_mapFactory: function() {
      return this._mapFactory;
    },
    get$_map$_map: function() {
      return this._map$_map;
    }
  };
  A.BuiltMap_BuiltMap_closure.prototype = {
    call$1: function(k) {
      return J.$index$asx(this.map, k);
    },
    $signature: 2
  };
  A.BuiltMap_hashCode_closure.prototype = {
    call$1: function(key) {
      var t1 = this.$this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0));
      return X.hash2(J.get$hashCode$(key), J.get$hashCode$(J.$index$asx(t1.get$_map$_map(), key)));
    },
    $signature: function() {
      return {func: 1, ret: P.int, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
    }
  };
  A._BuiltMap.prototype = {
    _BuiltMap$copyAndCheckTypes$2: function(keys, lookup, $K, $V) {
      var t1, t2, t3, key, value;
      for (t1 = J.get$iterator$ax(keys), t2 = this._map$_map, t3 = J.getInterceptor$ax(t2); t1.moveNext$0();) {
        key = t1.get$current();
        if (H.checkSubtypeOfRuntimeType(key, $K)) {
          value = lookup.call$1(key);
          if (H.checkSubtypeOfRuntimeType(value, $V))
            t3.$indexSet(t2, key, value);
          else
            throw H.wrapException(P.ArgumentError$("map contained invalid value: " + H.S(value)));
        } else
          throw H.wrapException(P.ArgumentError$("map contained invalid key: " + H.S(key)));
      }
    }
  };
  A.MapBuilder.prototype = {
    build$0: function() {
      var _this = this;
      if (_this._mapOwner == null)
        _this.set$_mapOwner(A._BuiltMap$withSafeMap(_this._mapFactory, _this._map$_map, H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1)));
      return _this._mapOwner;
    },
    replace$1: function(_, map) {
      var t1, replacement, _this = this;
      if (H.checkSubtype(map, "$is_BuiltMap", _this.$ti, null) && J.$eq$(map.get$_mapFactory(), _this._mapFactory))
        _this._map$_setOwner$1(map);
      else {
        t1 = J.getInterceptor$(map);
        if (!!t1.$isBuiltMap) {
          replacement = _this._createMap$0();
          map.forEach$1(0, new A.MapBuilder_replace_closure(_this, replacement));
          _this._setSafeMap$1(replacement);
        } else if (!!t1.$isMap) {
          replacement = _this._createMap$0();
          map.forEach$1(0, new A.MapBuilder_replace_closure0(_this, replacement));
          _this._setSafeMap$1(replacement);
        } else
          throw H.wrapException(P.ArgumentError$("expected Map or BuiltMap, got " + H.S(t1.get$runtimeType(map))));
      }
    },
    $index: function(_, key) {
      return J.$index$asx(this._map$_map, key);
    },
    $indexSet: function(_, key, value) {
      var _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      _this._map$_checkKey$1(key);
      _this._map$_checkValue$1(value);
      J.$indexSet$ax(_this.get$_safeMap(), key, value);
    },
    get$length: function(_) {
      return J.get$length$asx(this._map$_map);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._map$_map);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._map$_map);
    },
    clear$0: function(_) {
      J.clear$0$ax(this.get$_safeMap());
    },
    MapBuilder$_uninitialized$0: function($K, $V) {
      this._map$_checkGenericTypeParameter$0();
    },
    _map$_setOwner$1: function(mapOwner) {
      H.assertSubtype(mapOwner, "$is_BuiltMap", this.$ti, "$as_BuiltMap");
      this.set$_mapOwner(mapOwner);
      this.set$_map$_map(mapOwner._map$_map);
    },
    _setSafeMap$1: function(map) {
      H.assertSubtype(map, "$isMap", this.$ti, "$asMap");
      this.set$_mapOwner(null);
      this.set$_map$_map(map);
    },
    get$_safeMap: function() {
      var t1, _this = this;
      if (_this._mapOwner != null) {
        t1 = _this._createMap$0();
        J.addAll$1$ax(t1, _this._map$_map);
        _this.set$_map$_map(t1);
        _this.set$_mapOwner(null);
      }
      return _this._map$_map;
    },
    _createMap$0: function() {
      var t1 = this._mapFactory;
      return t1 != null ? t1.call$0() : H.JsLinkedHashMap_JsLinkedHashMap$es6(H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    _map$_checkGenericTypeParameter$0: function() {
      if (J.$eq$(H.createRuntimeType(H.getTypeArgumentByIndex(this, 0)), C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit key type required, for example "new MapBuilder<int, int>"'));
      if (J.$eq$(H.createRuntimeType(H.getTypeArgumentByIndex(this, 1)), C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit value type required, for example "new MapBuilder<int, int>"'));
    },
    _map$_checkKey$1: function(key) {
      if (H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)) == null)
        throw H.wrapException(P.ArgumentError$("null key"));
    },
    _map$_checkValue$1: function(value) {
      if (H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)) == null)
        throw H.wrapException(P.ArgumentError$("null value"));
    },
    set$_map$_map: function(_map) {
      this._map$_map = H.assertSubtype(_map, "$isMap", this.$ti, "$asMap");
    },
    set$_mapOwner: function(_mapOwner) {
      this._mapOwner = H.assertSubtype(_mapOwner, "$is_BuiltMap", this.$ti, "$as_BuiltMap");
    },
    get$_mapFactory: function() {
      return this._mapFactory;
    },
    get$_map$_map: function() {
      return this._map$_map;
    }
  };
  A.MapBuilder_replace_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      J.$indexSet$ax(this.replacement, H.subtypeOfRuntimeTypeCast(key, H.getTypeArgumentByIndex(t1, 0)), H.subtypeOfRuntimeTypeCast(value, H.getTypeArgumentByIndex(t1, 1)));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 31
  };
  A.MapBuilder_replace_closure0.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      J.$indexSet$ax(this.replacement, H.subtypeOfRuntimeTypeCast(key, H.getTypeArgumentByIndex(t1, 0)), H.subtypeOfRuntimeTypeCast(value, H.getTypeArgumentByIndex(t1, 1)));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 31
  };
  L.OverriddenHashcodeBuiltSet.prototype = {};
  L.BuiltSet.prototype = {
    toBuilder$0: function() {
      return L.SetBuilder$_fromBuiltSet(H.assertSubtype(this, "$is_BuiltSet", this.$ti, "$as_BuiltSet"), H.getTypeArgumentByIndex(this, 0));
    },
    get$hashCode: function(_) {
      var _this = this,
        t1 = _this._set$_hashCode;
      if (t1 == null) {
        t1 = J.toList$1$growable$ax(J.map$1$1$ax(_this._set$_set, new L.BuiltSet_hashCode_closure(_this), P.int), false);
        J.sort$0$ax(t1);
        t1 = _this._set$_hashCode = H.intTypeCheck(X.hashObjects(t1));
      }
      return t1;
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (!(other instanceof L.BuiltSet))
        return false;
      if (!J.$eq$(other.get$length(other), _this.get$length(_this)))
        return false;
      if (!J.$eq$(other.get$hashCode(other), _this.get$hashCode(_this)))
        return false;
      return _this.containsAll$1(other);
    },
    toString$0: function(_) {
      return J.toString$0$(this._set$_set);
    },
    get$length: function(_) {
      return J.get$length$asx(this._set$_set);
    },
    containsAll$1: function(other) {
      return this._set$_set.containsAll$1(H.assertSubtype(other, "$isIterable", [P.Object], "$asIterable"));
    },
    get$iterator: function(_) {
      return J.get$iterator$ax(this._set$_set);
    },
    cast$1$0: function(_, $T) {
      return P.Iterable_castFrom(this._set$_set, H.getTypeArgumentByIndex(this, 0), $T);
    },
    cast$0: function($receiver) {
      return this.cast$1$0($receiver, null);
    },
    map$1$1: function(_, f, $T) {
      return J.map$1$1$ax(this._set$_set, H.functionTypeCheck(f, {func: 1, ret: $T, args: [H.getTypeArgumentByIndex(this, 0)]}), $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    where$1: function(_, test) {
      return J.where$1$ax(this._set$_set, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(this, 0)]}));
    },
    contains$1: function(_, element) {
      return J.contains$1$asx(this._set$_set, element);
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      return J.fold$1$2$ax(this._set$_set, H.assertSubtypeOfRuntimeType(initialValue, $T), H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(this, 0)]}), $T);
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    join$1: function(_, separator) {
      return J.join$1$ax(this._set$_set, H.stringTypeCheck(separator));
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    toList$1$growable: function(_, growable) {
      return J.toList$1$growable$ax(this._set$_set, H.boolTypeCheck(growable));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._set$_set);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._set$_set);
    },
    take$1: function(_, n) {
      return J.take$1$ax(this._set$_set, H.intTypeCheck(n));
    },
    skip$1: function(_, n) {
      return J.skip$1$ax(this._set$_set, H.intTypeCheck(n));
    },
    get$first: function(_) {
      return J.get$first$ax(this._set$_set);
    },
    get$last: function(_) {
      return J.get$last$ax(this._set$_set);
    },
    elementAt$1: function(_, index) {
      return J.elementAt$1$ax(this._set$_set, H.intTypeCheck(index));
    },
    BuiltSet$_$2: function(_setFactory, _set, $E) {
      if (J.$eq$(H.createRuntimeType($E), C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit element type required, for example "new BuiltSet<int>"'));
    },
    $isIterable: 1,
    $isBuiltIterable: 1,
    get$_setFactory: function() {
      return this._setFactory;
    }
  };
  L.BuiltSet_hashCode_closure.prototype = {
    call$1: function(e) {
      return J.get$hashCode$(H.assertSubtypeOfRuntimeType(e, H.getTypeArgumentByIndex(this.$this, 0)));
    },
    $signature: function() {
      return {func: 1, ret: P.int, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
    }
  };
  L._BuiltSet.prototype = {
    _BuiltSet$copyAndCheckTypes$1: function(iterable, $E) {
      var t1, t2, t3, element;
      for (t1 = J.get$iterator$ax(iterable), t2 = this._set$_set, t3 = J.getInterceptor$ax(t2); t1.moveNext$0();) {
        element = t1.get$current();
        if (H.checkSubtypeOfRuntimeType(element, $E))
          t3.add$1(t2, element);
        else
          throw H.wrapException(P.ArgumentError$("iterable contained invalid element: " + H.S(element)));
      }
    },
    hasExactElementType$1: function(type) {
      H.interceptedTypeCheck(type, "$isType");
      return J.$eq$(H.createRuntimeType(H.getTypeArgumentByIndex(this, 0)), type);
    }
  };
  L.SetBuilder.prototype = {
    build$0: function() {
      var _this = this;
      if (_this._setOwner == null)
        _this.set$_setOwner(L._BuiltSet$withSafeSet(_this._setFactory, _this._set$_set, H.getTypeArgumentByIndex(_this, 0)));
      return _this._setOwner;
    },
    replace$1: function(_, iterable) {
      var set, t1, t2, element, _this = this;
      H.listSuperNativeTypeCheck(iterable, "$isIterable");
      if (H.checkSubtype(iterable, "$is_BuiltSet", _this.$ti, null) && J.$eq$(iterable.get$_setFactory(), _this._setFactory))
        _this._withOwner$1(iterable);
      else {
        set = _this._createSet$0();
        for (t1 = J.get$iterator$ax(iterable), t2 = H.getTypeArgumentByIndex(_this, 0); t1.moveNext$0();) {
          element = t1.get$current();
          if (H.checkSubtypeOfRuntimeType(element, t2))
            set.add$1(0, element);
          else
            throw H.wrapException(P.ArgumentError$("iterable contained invalid element: " + H.S(element)));
        }
        _this._setSafeSet$1(set);
      }
    },
    get$length: function(_) {
      return J.get$length$asx(this._set$_set);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._set$_set);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._set$_set);
    },
    add$1: function(_, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      this._checkElement$1(value);
      return J.add$1$ax(this.get$_safeSet(), value);
    },
    clear$0: function(_) {
      J.clear$0$ax(this.get$_safeSet());
    },
    map$1: function(_, f) {
      var result, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(f, {func: 1, ret: t1, args: [t1]});
      result = _this._createSet$0();
      J.addAll$1$ax(result, J.map$1$1$ax(_this._set$_set, f, t1));
      _this._set$_checkElements$1(result);
      _this._setSafeSet$1(result);
    },
    SetBuilder$_uninitialized$0: function($E) {
      this._checkGenericTypeParameter$0();
    },
    _withOwner$1: function(setOwner) {
      H.assertSubtype(setOwner, "$is_BuiltSet", this.$ti, "$as_BuiltSet");
      this.set$_set$_set(setOwner._set$_set);
      this.set$_setOwner(setOwner);
    },
    _setSafeSet$1: function(set) {
      H.assertSubtype(set, "$isSet", this.$ti, "$asSet");
      this.set$_setOwner(null);
      this.set$_set$_set(set);
    },
    get$_safeSet: function() {
      var t1, _this = this;
      if (_this._setOwner != null) {
        t1 = _this._createSet$0();
        J.addAll$1$ax(t1, _this._set$_set);
        _this.set$_set$_set(t1);
        _this.set$_setOwner(null);
      }
      return _this._set$_set;
    },
    _createSet$0: function() {
      var t1 = this._setFactory;
      return t1 != null ? t1.call$0() : P.LinkedHashSet_LinkedHashSet(H.getTypeArgumentByIndex(this, 0));
    },
    _checkGenericTypeParameter$0: function() {
      if (J.$eq$(H.createRuntimeType(H.getTypeArgumentByIndex(this, 0)), C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit element type required, for example "new SetBuilder<int>"'));
    },
    _checkElement$1: function(element) {
      if (H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0)) == null)
        throw H.wrapException(P.ArgumentError$("null element"));
    },
    _set$_checkElements$1: function(elements) {
      var t1, t2, element;
      for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(elements, "$isIterable")), t2 = H.getTypeArgumentByIndex(this, 0); t1.moveNext$0();) {
        element = t1.get$current();
        if (!H.checkSubtypeOfRuntimeType(element, t2))
          throw H.wrapException(P.ArgumentError$("invalid element: " + H.S(element)));
      }
    },
    set$_set$_set: function(_set) {
      this._set$_set = H.assertSubtype(_set, "$isSet", this.$ti, "$asSet");
    },
    set$_setOwner: function(_setOwner) {
      this._setOwner = H.assertSubtype(_setOwner, "$is_BuiltSet", this.$ti, "$as_BuiltSet");
    }
  };
  E.OverriddenHashcodeBuiltSetMultimap.prototype = {};
  E.BuiltSetMultimap.prototype = {
    get$hashCode: function(_) {
      var _this = this,
        t1 = _this._set_multimap$_hashCode;
      if (t1 == null) {
        t1 = J.toList$1$growable$ax(J.map$1$1$ax(J.get$keys$x(_this._set_multimap$_map), new E.BuiltSetMultimap_hashCode_closure(_this), P.int), false);
        J.sort$0$ax(t1);
        t1 = _this._set_multimap$_hashCode = H.intTypeCheck(X.hashObjects(t1));
      }
      return t1;
    },
    $eq: function(_, other) {
      var t1, key, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (!(other instanceof E.BuiltSetMultimap))
        return false;
      if (!J.$eq$(other.get$length(other), _this.get$length(_this)))
        return false;
      if (!J.$eq$(other.get$hashCode(other), _this.get$hashCode(_this)))
        return false;
      for (t1 = J.get$iterator$ax(_this.get$keys(_this)); t1.moveNext$0();) {
        key = t1.get$current();
        if (!J.$eq$(other.$index(0, key), _this.$index(0, key)))
          return false;
      }
      return true;
    },
    toString$0: function(_) {
      return J.toString$0$(this._set_multimap$_map);
    },
    $index: function(_, key) {
      var result = J.$index$asx(this._set_multimap$_map, key);
      return result == null ? this._set_multimap$_emptySet : result;
    },
    containsKey$1: function(key) {
      return this._set_multimap$_map.containsKey$1(key);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._set_multimap$_map);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._set_multimap$_map);
    },
    get$keys: function(_) {
      var _this = this;
      if (_this._set_multimap$_keys == null)
        _this.set$_set_multimap$_keys(J.get$keys$x(_this._set_multimap$_map));
      return _this._set_multimap$_keys;
    },
    get$length: function(_) {
      return J.get$length$asx(this._set_multimap$_map);
    },
    BuiltSetMultimap$_$1: function(_map, $K, $V) {
      if (J.$eq$(H.createRuntimeType($K), C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit key type required, for example "new BuiltSetMultimap<int, int>"'));
      if (J.$eq$(H.createRuntimeType($V), C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit value type required, for example "new BuiltSetMultimap<int, int>"'));
    },
    set$_set_multimap$_keys: function(_keys) {
      this._set_multimap$_keys = H.assertSubtype(_keys, "$isIterable", [H.getTypeArgumentByIndex(this, 0)], "$asIterable");
    },
    get$_set_multimap$_map: function() {
      return this._set_multimap$_map;
    }
  };
  E.BuiltSetMultimap_hashCode_closure.prototype = {
    call$1: function(key) {
      var t1 = this.$this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0));
      return X.hash2(J.get$hashCode$(key), J.get$hashCode$(J.$index$asx(t1.get$_set_multimap$_map(), key)));
    },
    $signature: function() {
      return {func: 1, ret: P.int, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
    }
  };
  E._BuiltSetMultimap.prototype = {};
  E.SetMultimapBuilder.prototype = {
    build$0: function() {
      var t1, key, builtSet, t2, t3, _this = this;
      if (_this._builtMapOwner == null) {
        for (t1 = J.get$iterator$ax(J.get$keys$x(_this._builderMap)); t1.moveNext$0();) {
          key = t1.get$current();
          builtSet = J.$index$asx(_this._builderMap, key).build$0();
          t2 = builtSet.get$isEmpty(builtSet);
          t3 = _this._builtMap;
          if (t2)
            J.remove$1$z(t3, key);
          else
            J.$indexSet$ax(t3, key, builtSet);
        }
        _this.set$_builtMapOwner(E._BuiltSetMultimap$withSafeMap(_this._builtMap, H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1)));
      }
      return _this._builtMapOwner;
    },
    replace$1: function(_, multimap) {
      var t1, t2;
      if (H.checkSubtype(multimap, "$is_BuiltSetMultimap", this.$ti, null))
        this._set_multimap$_setOwner$1(multimap);
      else {
        t1 = J.getInterceptor$(multimap);
        if (!t1.$isMap)
          t2 = !!t1.$isBuiltSetMultimap;
        else
          t2 = true;
        if (t2)
          this._setWithCopyAndCheck$2(H.listSuperNativeTypeCheck(t1.get$keys(multimap), "$isIterable"), new E.SetMultimapBuilder_replace_closure(multimap));
        else
          throw H.wrapException(P.ArgumentError$("expected Map, SetMultimap or BuiltSetMultimap, got " + H.S(t1.get$runtimeType(multimap))));
      }
    },
    add$2: function(_, key, value) {
      var _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      _this._makeWriteableCopy$0();
      _this._checkKey$1(key);
      _this._checkValue$1(value);
      J.add$1$ax(_this._getValuesBuilder$1(key), value);
    },
    clear$0: function(_) {
      this._makeWriteableCopy$0();
      J.clear$0$ax(this._builtMap);
      J.clear$0$ax(this._builderMap);
    },
    _getValuesBuilder$1: function(key) {
      var result, builtValues, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      result = J.$index$asx(_this._builderMap, key);
      if (result == null) {
        builtValues = J.$index$asx(_this._builtMap, key);
        result = builtValues == null ? L.SetBuilder_SetBuilder(H.getTypeArgumentByIndex(_this, 1)) : builtValues.toBuilder$0();
        J.$indexSet$ax(_this._builderMap, key, result);
      }
      return result;
    },
    _makeWriteableCopy$0: function() {
      var _this = this;
      if (_this._builtMapOwner != null) {
        _this.set$_builtMap(P.LinkedHashMap_LinkedHashMap$from(_this._builtMap, H.getTypeArgumentByIndex(_this, 0), [L.BuiltSet, H.getTypeArgumentByIndex(_this, 1)]));
        _this.set$_builtMapOwner(null);
      }
    },
    SetMultimapBuilder$_uninitialized$0: function($K, $V) {
      this._set_multimap$_checkGenericTypeParameter$0();
    },
    _set_multimap$_setOwner$1: function(builtSetMultimap) {
      var _this = this;
      H.assertSubtype(builtSetMultimap, "$is_BuiltSetMultimap", _this.$ti, "$as_BuiltSetMultimap");
      _this.set$_builtMapOwner(builtSetMultimap);
      _this.set$_builtMap(builtSetMultimap._set_multimap$_map);
      _this.set$_builderMap(H.JsLinkedHashMap_JsLinkedHashMap$es6(H.getTypeArgumentByIndex(_this, 0), [L.SetBuilder, H.getTypeArgumentByIndex(_this, 1)]));
    },
    _setWithCopyAndCheck$2: function(keys, lookup) {
      var t1, t2, t3, key, t4, value, _this = this;
      H.listSuperNativeTypeCheck(keys, "$isIterable");
      H.interceptedTypeCheck(lookup, "$isFunction");
      _this.set$_builtMapOwner(null);
      t1 = H.getTypeArgumentByIndex(_this, 0);
      t2 = H.getTypeArgumentByIndex(_this, 1);
      _this.set$_builtMap(H.JsLinkedHashMap_JsLinkedHashMap$es6(t1, [L.BuiltSet, t2]));
      _this.set$_builderMap(H.JsLinkedHashMap_JsLinkedHashMap$es6(t1, [L.SetBuilder, t2]));
      for (t3 = J.get$iterator$ax(keys); t3.moveNext$0();) {
        key = t3.get$current();
        if (H.checkSubtypeOfRuntimeType(key, t1))
          for (t4 = J.get$iterator$ax(H.listSuperNativeTypeCheck(lookup.call$1(key), "$isIterable")); t4.moveNext$0();) {
            value = t4.get$current();
            if (H.checkSubtypeOfRuntimeType(value, t2))
              _this.add$2(0, key, value);
            else
              throw H.wrapException(P.ArgumentError$("map contained invalid value: " + H.S(value) + ", for key " + H.S(key)));
          }
        else
          throw H.wrapException(P.ArgumentError$("map contained invalid key: " + H.S(key)));
      }
    },
    _set_multimap$_checkGenericTypeParameter$0: function() {
      if (J.$eq$(H.createRuntimeType(H.getTypeArgumentByIndex(this, 0)), C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit key type required, for example "new SetMultimapBuilder<int, int>"'));
      if (J.$eq$(H.createRuntimeType(H.getTypeArgumentByIndex(this, 1)), C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit value type required, for example "new SetMultimapBuilder<int, int>"'));
    },
    _checkKey$1: function(key) {
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      if (key == null)
        throw H.wrapException(P.ArgumentError$("invalid key: " + H.S(key)));
    },
    _checkValue$1: function(value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
      if (value == null)
        throw H.wrapException(P.ArgumentError$("invalid value: " + H.S(value)));
    },
    set$_builtMap: function(_builtMap) {
      this._builtMap = H.assertSubtype(_builtMap, "$isMap", [H.getTypeArgumentByIndex(this, 0), [L.BuiltSet, H.getTypeArgumentByIndex(this, 1)]], "$asMap");
    },
    set$_builtMapOwner: function(_builtMapOwner) {
      this._builtMapOwner = H.assertSubtype(_builtMapOwner, "$is_BuiltSetMultimap", this.$ti, "$as_BuiltSetMultimap");
    },
    set$_builderMap: function(_builderMap) {
      this._builderMap = H.assertSubtype(_builderMap, "$isMap", [H.getTypeArgumentByIndex(this, 0), [L.SetBuilder, H.getTypeArgumentByIndex(this, 1)]], "$asMap");
    }
  };
  E.SetMultimapBuilder_replace_closure.prototype = {
    call$1: function(k) {
      return J.$index$asx(this.multimap, k);
    },
    $signature: 2
  };
  Y.Built.prototype = {};
  Y.Builder.prototype = {};
  Y.BuiltValue.prototype = {};
  Y.BuiltValueField.prototype = {};
  Y.BuiltValueSerializer.prototype = {};
  Y.BuiltValueEnum.prototype = {};
  Y.BuiltValueEnumConst.prototype = {};
  Y.EnumClass.prototype = {
    toString$0: function(_) {
      return this.name;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Y.closure.prototype = {
    call$1: function(className) {
      return Y.IndentingBuiltValueToStringHelper$(H.stringTypeCheck(className));
    },
    $signature: 38
  };
  Y.BuiltValueToStringHelper.prototype = {};
  Y.IndentingBuiltValueToStringHelper.prototype = {
    IndentingBuiltValueToStringHelper$1: function(className) {
      var t1 = this._result;
      t1.write$1(className);
      t1.write$1(" {\n");
      $._indentingBuiltValueToStringHelperIndent = J.$add$ansx($._indentingBuiltValueToStringHelperIndent, 2);
    },
    add$2: function(_, field, value) {
      var t1;
      H.stringTypeCheck(field);
      if (value != null) {
        t1 = this._result;
        t1.write$1(C.JSString_methods.$mul(" ", $._indentingBuiltValueToStringHelperIndent));
        t1.write$1(field);
        t1.write$1("=");
        t1.write$1(value);
        t1.write$1(",\n");
      }
    },
    toString$0: function(_) {
      var t2, stringResult,
        t1 = J.$sub$n($._indentingBuiltValueToStringHelperIndent, 2);
      $._indentingBuiltValueToStringHelperIndent = t1;
      t2 = this._result;
      t2.write$1(C.JSString_methods.$mul(" ", t1));
      t2.write$1("}");
      stringResult = J.toString$0$(this._result);
      this._result = null;
      return stringResult;
    },
    $isBuiltValueToStringHelper: 1
  };
  Y.FlatBuiltValueToStringHelper.prototype = {$isBuiltValueToStringHelper: 1};
  Y.BuiltValueNullFieldError.prototype = {
    toString$0: function(_) {
      var t1 = this.field;
      return 'Tried to construct class "' + H.S(this.type) + '" with null field "' + H.S(t1) + '". This is forbidden; to allow it, mark "' + H.S(t1) + '" with @nullable.';
    }
  };
  Y.BuiltValueMissingGenericsError.prototype = {};
  Y.BuiltValueNestedFieldError.prototype = {};
  A.JsonObject.prototype = {
    toString$0: function(_) {
      return J.toString$0$(this.get$value());
    }
  };
  A.BoolJsonObject.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!(other instanceof A.BoolJsonObject))
        return false;
      return J.$eq$(this.value, other.value);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.value);
    },
    get$value: function() {
      return this.value;
    }
  };
  A.ListJsonObject.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!(other instanceof A.ListJsonObject))
        return false;
      return C.DeepCollectionEquality_DefaultEquality_false.equals$2(this.value, other.value);
    },
    get$hashCode: function(_) {
      return C.DeepCollectionEquality_DefaultEquality_false.hash$1(0, this.value);
    },
    get$value: function() {
      return this.value;
    }
  };
  A.MapJsonObject.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!(other instanceof A.MapJsonObject))
        return false;
      return C.DeepCollectionEquality_DefaultEquality_false.equals$2(this.value, other.value);
    },
    get$hashCode: function(_) {
      return C.DeepCollectionEquality_DefaultEquality_false.hash$1(0, this.value);
    },
    get$value: function() {
      return this.value;
    }
  };
  A.NumJsonObject.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!(other instanceof A.NumJsonObject))
        return false;
      return J.$eq$(this.value, other.value);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.value);
    },
    get$value: function() {
      return this.value;
    }
  };
  A.StringJsonObject.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!(other instanceof A.StringJsonObject))
        return false;
      return J.$eq$(this.value, other.value);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.value);
    },
    get$value: function() {
      return this.value;
    }
  };
  U.SerializersFor.prototype = {};
  U.Serializers.prototype = {};
  U.Serializers_Serializers_closure.prototype = {
    call$0: function() {
      return S.ListBuilder_ListBuilder(C.List_empty0, P.Object);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 39
  };
  U.Serializers_Serializers_closure0.prototype = {
    call$0: function() {
      var t1 = P.Object;
      return M.ListMultimapBuilder_ListMultimapBuilder(t1, t1);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 40
  };
  U.Serializers_Serializers_closure1.prototype = {
    call$0: function() {
      var t1 = P.Object;
      return A.MapBuilder_MapBuilder(t1, t1);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 41
  };
  U.Serializers_Serializers_closure2.prototype = {
    call$0: function() {
      return L.SetBuilder_SetBuilder(P.Object);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 42
  };
  U.Serializers_Serializers_closure3.prototype = {
    call$0: function() {
      var t1 = P.Object;
      return E.SetMultimapBuilder_SetMultimapBuilder(t1, t1);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 43
  };
  U.SerializerPlugin.prototype = {};
  U.SerializersBuilder.prototype = {};
  U.FullType.prototype = {
    get$isUnspecified: function() {
      return this.root == null;
    },
    $eq: function(_, other) {
      var t1, t2, t3, t4, t5, i;
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!(other instanceof U.FullType))
        return false;
      if (!J.$eq$(this.root, other.root))
        return false;
      t1 = this.parameters;
      t2 = J.getInterceptor$asx(t1);
      t3 = t2.get$length(t1);
      t4 = other.parameters;
      t5 = J.getInterceptor$asx(t4);
      if (!J.$eq$(t3, t5.get$length(t4)))
        return false;
      for (i = 0; i !== t2.get$length(t1); ++i)
        if (!J.$eq$(t2.$index(t1, i), t5.$index(t4, i)))
          return false;
      return true;
    },
    get$hashCode: function(_) {
      return X.hash2(this.root, X.hashObjects(this.parameters));
    },
    toString$0: function(_) {
      var t1, t2, t3;
      if (this.get$isUnspecified())
        t1 = "unspecified";
      else {
        t1 = this.parameters;
        t2 = J.getInterceptor$asx(t1);
        t3 = this.root;
        t1 = t2.get$isEmpty(t1) ? U.FullType__getRawName(t3) : H.S(U.FullType__getRawName(t3)) + "<" + H.S(t2.join$1(t1, ", ")) + ">";
      }
      return t1;
    },
    get$root: function() {
      return this.root;
    },
    get$parameters: function() {
      return this.parameters;
    }
  };
  U.Serializer.prototype = {};
  U.PrimitiveSerializer.prototype = {$isSerializer: 1};
  U.StructuredSerializer.prototype = {$isSerializer: 1};
  U.DeserializationError.prototype = {
    toString$0: function(_) {
      return "Deserializing '" + H.S(this.json) + "' to '" + H.S(this.type) + "' failed due to: " + H.S(this.error);
    },
    get$error: function(receiver) {
      return this.error;
    }
  };
  O.BigIntSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, bigInt, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return J.toString$0$(bigInt);
    },
    serialize$2: function(serializers, bigInt) {
      return this.serialize$3$specifiedType(serializers, bigInt, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return P.BigInt_parse(H.stringTypeCast(serialized));
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.BigInt];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.BigInt];
    },
    get$types: function() {
      return this.types;
    },
    get$wireName: function() {
      return "BigInt";
    }
  };
  R.BoolSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, boolean, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.boolTypeCheck(boolean);
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return boolean;
    },
    serialize$2: function(serializers, boolean) {
      return this.serialize$3$specifiedType(serializers, boolean, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return H.boolTypeCast(serialized);
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.bool];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.bool];
    },
    get$types: function() {
      return this.types;
    },
    get$wireName: function() {
      return "bool";
    }
  };
  Y.BuiltJsonSerializers.prototype = {
    serialize$2$specifiedType: function(object, specifiedType) {
      var t1, t2, t3, transformedObject, result;
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      for (t1 = this._plugins, t2 = J.getInterceptor$ax(t1), t3 = t2.get$iterator(t1), transformedObject = object; t3.moveNext$0();)
        transformedObject = t3.get$current().beforeSerialize$2(transformedObject, specifiedType);
      result = this._serialize$2(transformedObject, specifiedType);
      for (t1 = t2.get$iterator(t1); t1.moveNext$0();)
        result = t1.get$current().afterSerialize$2(result, specifiedType);
      return result;
    },
    serialize$1: function(object) {
      return this.serialize$2$specifiedType(object, C.FullType_null_List_empty);
    },
    _serialize$2: function(object, specifiedType) {
      var t1, serializer, result, _this = this,
        _s62_ = "serializer must be StructuredSerializer or PrimitiveSerializer";
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      if (specifiedType.get$isUnspecified()) {
        t1 = J.getInterceptor$(object);
        serializer = _this.serializerForType$1(t1.get$runtimeType(object));
        if (serializer == null)
          throw H.wrapException(P.StateError$("No serializer for '" + H.S(t1.get$runtimeType(object)) + "'."));
        if (!!serializer.$isStructuredSerializer) {
          result = H.setRuntimeTypeInfo([serializer.get$wireName()], [P.Object]);
          C.JSArray_methods.addAll$1(result, serializer.serialize$2(_this, object));
          return result;
        } else if (!!serializer.$isPrimitiveSerializer)
          return H.setRuntimeTypeInfo([serializer.get$wireName(), serializer.serialize$2(_this, object)], [P.Object]);
        else
          throw H.wrapException(P.StateError$(_s62_));
      } else {
        serializer = _this.serializerForType$1(specifiedType.root);
        if (serializer == null)
          return _this.serialize$1(object);
        if (!!serializer.$isStructuredSerializer)
          return J.toList$0$ax(serializer.serialize$3$specifiedType(_this, object, specifiedType));
        else if (!!serializer.$isPrimitiveSerializer)
          return serializer.serialize$3$specifiedType(_this, object, specifiedType);
        else
          throw H.wrapException(P.StateError$(_s62_));
      }
    },
    deserialize$2$specifiedType: function(object, specifiedType) {
      var t1, t2, t3, transformedObject, result;
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      for (t1 = this._plugins, t2 = J.getInterceptor$ax(t1), t3 = t2.get$iterator(t1), transformedObject = object; t3.moveNext$0();)
        transformedObject = t3.get$current().beforeDeserialize$2(transformedObject, specifiedType);
      result = this._deserialize$3(object, transformedObject, specifiedType);
      for (t1 = t2.get$iterator(t1); t1.moveNext$0();)
        result = t1.get$current().afterDeserialize$2(result, specifiedType);
      return result;
    },
    deserialize$1: function(object) {
      return this.deserialize$2$specifiedType(object, C.FullType_null_List_empty);
    },
    _deserialize$3: function(objectBeforePlugins, object, specifiedType) {
      var serializer, error, error0, serializer0, error1, error2, t1, wireName, exception, _this = this,
        _s19_ = "No serializer for '",
        _s62_ = "serializer must be StructuredSerializer or PrimitiveSerializer";
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      if (specifiedType.get$isUnspecified()) {
        H.listTypeCast(object);
        t1 = J.getInterceptor$ax(object);
        wireName = H.stringTypeCast(t1.get$first(object));
        serializer = _this.serializerForWireName$1(wireName);
        if (serializer == null)
          throw H.wrapException(P.StateError$(_s19_ + H.S(wireName) + "'."));
        if (!!J.getInterceptor$(serializer).$isStructuredSerializer)
          try {
            t1 = serializer.deserialize$2(_this, t1.sublist$1(object, 1));
            return t1;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            if (!!J.getInterceptor$(t1).$isError) {
              error = t1;
              throw H.wrapException(U.DeserializationError_DeserializationError(object, specifiedType, error));
            } else
              throw exception;
          }
        else if (!!J.getInterceptor$(serializer).$isPrimitiveSerializer)
          try {
            t1 = serializer.deserialize$2(_this, t1.$index(object, 1));
            return t1;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            if (!!J.getInterceptor$(t1).$isError) {
              error0 = t1;
              throw H.wrapException(U.DeserializationError_DeserializationError(object, specifiedType, error0));
            } else
              throw exception;
          }
        else
          throw H.wrapException(P.StateError$(_s62_));
      } else {
        serializer0 = _this.serializerForType$1(specifiedType.get$root());
        if (serializer0 == null) {
          t1 = J.getInterceptor$(object);
          if (!!t1.$isList) {
            t1 = t1.get$first(object);
            t1 = typeof t1 === "string";
          } else
            t1 = false;
          if (t1)
            return _this.deserialize$1(objectBeforePlugins);
          else
            throw H.wrapException(P.StateError$(_s19_ + H.S(specifiedType.get$root()) + "'."));
        }
        if (!!J.getInterceptor$(serializer0).$isStructuredSerializer)
          try {
            t1 = serializer0.deserialize$3$specifiedType(_this, H.listSuperNativeTypeCast(object, "$isIterable"), specifiedType);
            return t1;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            if (!!J.getInterceptor$(t1).$isError) {
              error1 = t1;
              throw H.wrapException(U.DeserializationError_DeserializationError(object, specifiedType, error1));
            } else
              throw exception;
          }
        else if (!!J.getInterceptor$(serializer0).$isPrimitiveSerializer)
          try {
            t1 = serializer0.deserialize$3$specifiedType(_this, object, specifiedType);
            return t1;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            if (!!J.getInterceptor$(t1).$isError) {
              error2 = t1;
              throw H.wrapException(U.DeserializationError_DeserializationError(object, specifiedType, error2));
            } else
              throw exception;
          }
        else
          throw H.wrapException(P.StateError$(_s62_));
      }
    },
    serializerForType$1: function(type) {
      var t1;
      H.interceptedTypeCheck(type, "$isType");
      t1 = J.$index$asx(this._typeToSerializer, type);
      return t1 == null ? J.$index$asx(this._typeNameToSerializer, Y._getRawName(type)) : t1;
    },
    serializerForWireName$1: function(wireName) {
      return J.$index$asx(this._wireNameToSerializer, H.stringTypeCheck(wireName));
    },
    newBuilder$1: function(fullType) {
      var builderFactory;
      H.interceptedTypeCheck(fullType, "$isFullType");
      builderFactory = J.$index$asx(this._builderFactories, fullType);
      if (builderFactory == null)
        this._throwMissingBuilderFactory$1(fullType);
      return builderFactory.call$0();
    },
    expectBuilder$1: function(fullType) {
      H.interceptedTypeCheck(fullType, "$isFullType");
      if (!this.hasBuilder$1(fullType))
        this._throwMissingBuilderFactory$1(fullType);
    },
    _throwMissingBuilderFactory$1: function(fullType) {
      throw H.wrapException(P.StateError$("No builder factory for " + H.S(H.interceptedTypeCheck(fullType, "$isFullType")) + ". Fix by adding one, see SerializersBuilder.addBuilderFactory."));
    },
    hasBuilder$1: function(fullType) {
      return this._builderFactories.containsKey$1(H.interceptedTypeCheck(fullType, "$isFullType"));
    },
    toBuilder$0: function() {
      var _this = this;
      return Y.BuiltJsonSerializersBuilder$_(_this._typeToSerializer.toBuilder$0(), _this._wireNameToSerializer.toBuilder$0(), _this._typeNameToSerializer.toBuilder$0(), _this._builderFactories.toBuilder$0(), _this._plugins.toBuilder$0());
    },
    $isSerializers: 1
  };
  Y.BuiltJsonSerializersBuilder.prototype = {
    add$1: function(_, serializer) {
      var t1, t2, t3, t4, t5, t6;
      H.interceptedTypeCheck(serializer, "$isSerializer");
      t1 = J.getInterceptor$(serializer);
      if (!t1.$isStructuredSerializer && !t1.$isPrimitiveSerializer)
        throw H.wrapException(P.ArgumentError$("serializer must be StructuredSerializer or PrimitiveSerializer"));
      J.$indexSet$ax(this._wireNameToSerializer, serializer.get$wireName(), serializer);
      for (t1 = J.get$iterator$ax(serializer.get$types()), t2 = this._typeToSerializer, t3 = J.getInterceptor$ax(t2), t4 = this._typeNameToSerializer, t5 = J.getInterceptor$ax(t4); t1.moveNext$0();) {
        t6 = t1.get$current();
        t3.$indexSet(t2, t6, serializer);
        t5.$indexSet(t4, Y._getRawName(t6), serializer);
      }
    },
    addBuilderFactory$2: function(types, $function) {
      J.$indexSet$ax(this._builderFactories, H.interceptedTypeCheck(types, "$isFullType"), H.interceptedTypeCheck($function, "$isFunction"));
    },
    build$0: function() {
      var _this = this;
      return Y.BuiltJsonSerializers$_(_this._typeToSerializer.build$0(), _this._wireNameToSerializer.build$0(), _this._typeNameToSerializer.build$0(), _this._builderFactories.build$0(), _this._plugins.build$0());
    },
    $isSerializersBuilder: 1
  };
  R.BuiltListMultimapSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, builtListMultimap, specifiedType) {
      var t1, t2, keyType, valueType, result, key;
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(builtListMultimap, "$isBuiltListMultimap");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      if (!(specifiedType.get$isUnspecified() || J.get$isEmpty$asx(specifiedType.parameters)))
        serializers.expectBuilder$1(specifiedType);
      t1 = specifiedType.parameters;
      t2 = J.getInterceptor$asx(t1);
      keyType = t2.get$isEmpty(t1) ? C.FullType_null_List_empty : t2.$index(t1, 0);
      valueType = t2.get$isEmpty(t1) ? C.FullType_null_List_empty : t2.$index(t1, 1);
      t1 = P.Object;
      result = H.setRuntimeTypeInfo([], [t1]);
      for (t2 = J.get$iterator$ax(builtListMultimap.get$keys(builtListMultimap)); t2.moveNext$0();) {
        key = t2.get$current();
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(key, keyType));
        C.JSArray_methods.add$1(result, J.toList$0$ax(J.map$1$1$ax(builtListMultimap.$index(0, key), new R.BuiltListMultimapSerializer_serialize_closure(serializers, valueType), t1)));
      }
      return result;
    },
    serialize$2: function(serializers, builtListMultimap) {
      return this.serialize$3$specifiedType(serializers, builtListMultimap, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var isUnderspecified, t1, t2, keyType, valueType, result, i, key;
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.listSuperNativeTypeCheck(serialized, "$isIterable");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      isUnderspecified = specifiedType.get$isUnspecified() || J.get$isEmpty$asx(specifiedType.parameters);
      t1 = specifiedType.parameters;
      t2 = J.getInterceptor$asx(t1);
      keyType = t2.get$isEmpty(t1) ? C.FullType_null_List_empty : t2.$index(t1, 0);
      valueType = t2.get$isEmpty(t1) ? C.FullType_null_List_empty : t2.$index(t1, 1);
      if (isUnderspecified) {
        t1 = P.Object;
        result = M.ListMultimapBuilder_ListMultimapBuilder(t1, t1);
      } else
        result = H.interceptedTypeCast(serializers.newBuilder$1(specifiedType), "$isListMultimapBuilder");
      t1 = J.getInterceptor$asx(serialized);
      if (J.$eq$(J.$mod$n(t1.get$length(serialized), 2), 1))
        throw H.wrapException(P.ArgumentError$("odd length"));
      for (i = 0; i !== t1.get$length(serialized); i += 2) {
        key = serializers.deserialize$2$specifiedType(t1.elementAt$1(serialized, i), keyType);
        for (t2 = J.get$iterator$ax(H.listSuperNativeTypeCheck(J.map$1$ax(t1.elementAt$1(serialized, i + 1), new R.BuiltListMultimapSerializer_deserialize_closure(serializers, valueType)), "$isIterable")); t2.moveNext$0();)
          result.add$2(0, key, t2.get$current());
      }
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [[M.BuiltListMultimap,,,]];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [[M.BuiltListMultimap,,,]];
    },
    get$types: function() {
      return this.types;
    },
    get$wireName: function() {
      return "listMultimap";
    }
  };
  R.BuiltListMultimapSerializer_serialize_closure.prototype = {
    call$1: function(value) {
      return this.serializers.serialize$2$specifiedType(value, this.valueType);
    },
    $signature: 3
  };
  R.BuiltListMultimapSerializer_deserialize_closure.prototype = {
    call$1: function(value) {
      return this.serializers.deserialize$2$specifiedType(value, this.valueType);
    },
    $signature: 3
  };
  K.BuiltListSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, builtList, specifiedType) {
      var t1, t2;
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(builtList, "$isBuiltList");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      if (!(specifiedType.get$isUnspecified() || J.get$isEmpty$asx(specifiedType.parameters)))
        serializers.expectBuilder$1(specifiedType);
      t1 = specifiedType.parameters;
      t2 = J.getInterceptor$asx(t1);
      return builtList.map$1$1(0, new K.BuiltListSerializer_serialize_closure(serializers, t2.get$isEmpty(t1) ? C.FullType_null_List_empty : t2.$index(t1, 0)), null);
    },
    serialize$2: function(serializers, builtList) {
      return this.serialize$3$specifiedType(serializers, builtList, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var isUnderspecified, t1, t2, elementType, result;
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.listSuperNativeTypeCheck(serialized, "$isIterable");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      isUnderspecified = specifiedType.get$isUnspecified() || J.get$isEmpty$asx(specifiedType.parameters);
      t1 = specifiedType.parameters;
      t2 = J.getInterceptor$asx(t1);
      elementType = t2.get$isEmpty(t1) ? C.FullType_null_List_empty : t2.$index(t1, 0);
      result = isUnderspecified ? S.ListBuilder_ListBuilder(C.List_empty0, P.Object) : H.interceptedTypeCast(serializers.newBuilder$1(specifiedType), "$isListBuilder");
      result.replace$1(0, J.map$1$1$ax(serialized, new K.BuiltListSerializer_deserialize_closure(serializers, elementType), null));
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [[S.BuiltList,,]];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [[S.BuiltList,,]];
    },
    get$types: function() {
      return this.types;
    },
    get$wireName: function() {
      return "list";
    }
  };
  K.BuiltListSerializer_serialize_closure.prototype = {
    call$1: function(item) {
      return this.serializers.serialize$2$specifiedType(item, this.elementType);
    },
    $signature: 3
  };
  K.BuiltListSerializer_deserialize_closure.prototype = {
    call$1: function(item) {
      return this.serializers.deserialize$2$specifiedType(item, this.elementType);
    },
    $signature: 3
  };
  K.BuiltMapSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, builtMap, specifiedType) {
      var t1, t2, keyType, valueType, result, key;
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(builtMap, "$isBuiltMap");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      if (!(specifiedType.get$isUnspecified() || J.get$isEmpty$asx(specifiedType.parameters)))
        serializers.expectBuilder$1(specifiedType);
      t1 = specifiedType.parameters;
      t2 = J.getInterceptor$asx(t1);
      keyType = t2.get$isEmpty(t1) ? C.FullType_null_List_empty : t2.$index(t1, 0);
      valueType = t2.get$isEmpty(t1) ? C.FullType_null_List_empty : t2.$index(t1, 1);
      result = H.setRuntimeTypeInfo([], [P.Object]);
      for (t1 = J.get$iterator$ax(builtMap.get$keys(builtMap)); t1.moveNext$0();) {
        key = t1.get$current();
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(key, keyType));
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(builtMap.$index(0, key), valueType));
      }
      return result;
    },
    serialize$2: function(serializers, builtMap) {
      return this.serialize$3$specifiedType(serializers, builtMap, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var isUnderspecified, t1, t2, keyType, valueType, result, i;
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.listSuperNativeTypeCheck(serialized, "$isIterable");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      isUnderspecified = specifiedType.get$isUnspecified() || J.get$isEmpty$asx(specifiedType.parameters);
      t1 = specifiedType.parameters;
      t2 = J.getInterceptor$asx(t1);
      keyType = t2.get$isEmpty(t1) ? C.FullType_null_List_empty : t2.$index(t1, 0);
      valueType = t2.get$isEmpty(t1) ? C.FullType_null_List_empty : t2.$index(t1, 1);
      if (isUnderspecified) {
        t1 = P.Object;
        result = A.MapBuilder_MapBuilder(t1, t1);
      } else
        result = H.interceptedTypeCast(serializers.newBuilder$1(specifiedType), "$isMapBuilder");
      t1 = J.getInterceptor$asx(serialized);
      if (J.$eq$(J.$mod$n(t1.get$length(serialized), 2), 1))
        throw H.wrapException(P.ArgumentError$("odd length"));
      for (i = 0; i !== t1.get$length(serialized); i += 2)
        result.$indexSet(0, serializers.deserialize$2$specifiedType(t1.elementAt$1(serialized, i), keyType), serializers.deserialize$2$specifiedType(t1.elementAt$1(serialized, i + 1), valueType));
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [[A.BuiltMap,,,]];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [[A.BuiltMap,,,]];
    },
    get$types: function() {
      return this.types;
    },
    get$wireName: function() {
      return "map";
    }
  };
  R.BuiltSetMultimapSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, builtSetMultimap, specifiedType) {
      var t1, t2, keyType, valueType, result, key;
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(builtSetMultimap, "$isBuiltSetMultimap");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      if (!(specifiedType.get$isUnspecified() || J.get$isEmpty$asx(specifiedType.parameters)))
        serializers.expectBuilder$1(specifiedType);
      t1 = specifiedType.parameters;
      t2 = J.getInterceptor$asx(t1);
      keyType = t2.get$isEmpty(t1) ? C.FullType_null_List_empty : t2.$index(t1, 0);
      valueType = t2.get$isEmpty(t1) ? C.FullType_null_List_empty : t2.$index(t1, 1);
      t1 = P.Object;
      result = H.setRuntimeTypeInfo([], [t1]);
      for (t2 = J.get$iterator$ax(builtSetMultimap.get$keys(builtSetMultimap)); t2.moveNext$0();) {
        key = t2.get$current();
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(key, keyType));
        C.JSArray_methods.add$1(result, J.toList$0$ax(J.map$1$1$ax(builtSetMultimap.$index(0, key), new R.BuiltSetMultimapSerializer_serialize_closure(serializers, valueType), t1)));
      }
      return result;
    },
    serialize$2: function(serializers, builtSetMultimap) {
      return this.serialize$3$specifiedType(serializers, builtSetMultimap, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var isUnderspecified, t1, t2, keyType, valueType, result, i, key;
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.listSuperNativeTypeCheck(serialized, "$isIterable");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      isUnderspecified = specifiedType.get$isUnspecified() || J.get$isEmpty$asx(specifiedType.parameters);
      t1 = specifiedType.parameters;
      t2 = J.getInterceptor$asx(t1);
      keyType = t2.get$isEmpty(t1) ? C.FullType_null_List_empty : t2.$index(t1, 0);
      valueType = t2.get$isEmpty(t1) ? C.FullType_null_List_empty : t2.$index(t1, 1);
      if (isUnderspecified) {
        t1 = P.Object;
        result = E.SetMultimapBuilder_SetMultimapBuilder(t1, t1);
      } else
        result = H.interceptedTypeCast(serializers.newBuilder$1(specifiedType), "$isSetMultimapBuilder");
      t1 = J.getInterceptor$asx(serialized);
      if (J.$eq$(J.$mod$n(t1.get$length(serialized), 2), 1))
        throw H.wrapException(P.ArgumentError$("odd length"));
      for (i = 0; i !== t1.get$length(serialized); i += 2) {
        key = serializers.deserialize$2$specifiedType(t1.elementAt$1(serialized, i), keyType);
        for (t2 = J.get$iterator$ax(H.listSuperNativeTypeCheck(J.map$1$ax(t1.elementAt$1(serialized, i + 1), new R.BuiltSetMultimapSerializer_deserialize_closure(serializers, valueType)), "$isIterable")); t2.moveNext$0();)
          result.add$2(0, key, t2.get$current());
      }
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [[E.BuiltSetMultimap,,,]];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [[E.BuiltSetMultimap,,,]];
    },
    get$types: function() {
      return this.types;
    },
    get$wireName: function() {
      return "setMultimap";
    }
  };
  R.BuiltSetMultimapSerializer_serialize_closure.prototype = {
    call$1: function(value) {
      return this.serializers.serialize$2$specifiedType(value, this.valueType);
    },
    $signature: 3
  };
  R.BuiltSetMultimapSerializer_deserialize_closure.prototype = {
    call$1: function(value) {
      return this.serializers.deserialize$2$specifiedType(value, this.valueType);
    },
    $signature: 3
  };
  O.BuiltSetSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, builtSet, specifiedType) {
      var t1, t2;
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(builtSet, "$isBuiltSet");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      if (!(specifiedType.get$isUnspecified() || J.get$isEmpty$asx(specifiedType.parameters)))
        serializers.expectBuilder$1(specifiedType);
      t1 = specifiedType.parameters;
      t2 = J.getInterceptor$asx(t1);
      return builtSet.map$1$1(0, new O.BuiltSetSerializer_serialize_closure(serializers, t2.get$isEmpty(t1) ? C.FullType_null_List_empty : t2.$index(t1, 0)), null);
    },
    serialize$2: function(serializers, builtSet) {
      return this.serialize$3$specifiedType(serializers, builtSet, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var isUnderspecified, t1, t2, elementType, result;
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.listSuperNativeTypeCheck(serialized, "$isIterable");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      isUnderspecified = specifiedType.get$isUnspecified() || J.get$isEmpty$asx(specifiedType.parameters);
      t1 = specifiedType.parameters;
      t2 = J.getInterceptor$asx(t1);
      elementType = t2.get$isEmpty(t1) ? C.FullType_null_List_empty : t2.$index(t1, 0);
      result = isUnderspecified ? L.SetBuilder_SetBuilder(P.Object) : H.interceptedTypeCast(serializers.newBuilder$1(specifiedType), "$isSetBuilder");
      result.replace$1(0, J.map$1$1$ax(serialized, new O.BuiltSetSerializer_deserialize_closure(serializers, elementType), null));
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [[L.BuiltSet,,]];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [[L.BuiltSet,,]];
    },
    get$types: function() {
      return this.types;
    },
    get$wireName: function() {
      return "set";
    }
  };
  O.BuiltSetSerializer_serialize_closure.prototype = {
    call$1: function(item) {
      return this.serializers.serialize$2$specifiedType(item, this.elementType);
    },
    $signature: 3
  };
  O.BuiltSetSerializer_deserialize_closure.prototype = {
    call$1: function(item) {
      return this.serializers.deserialize$2$specifiedType(item, this.elementType);
    },
    $signature: 3
  };
  Z.DateTimeSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, dateTime, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(dateTime, "$isDateTime");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      if (!dateTime.isUtc)
        throw H.wrapException(P.ArgumentError$value(dateTime, "dateTime", "Must be in utc for serialization."));
      return dateTime.get$microsecondsSinceEpoch();
    },
    serialize$2: function(serializers, dateTime) {
      return this.serialize$3$specifiedType(serializers, dateTime, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return P.DateTime$fromMicrosecondsSinceEpoch(H.intTypeCast(serialized), true);
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.DateTime];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.DateTime];
    },
    get$types: function() {
      return this.types;
    },
    get$wireName: function() {
      return "DateTime";
    }
  };
  D.DoubleSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, aDouble, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.doubleTypeCheck(aDouble);
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      if (J.getInterceptor$n(aDouble).get$isNaN(aDouble))
        return "NaN";
      else if (C.JSNumber_methods.get$isInfinite(aDouble))
        return C.JSNumber_methods.get$isNegative(aDouble) ? "-INF" : "INF";
      else
        return aDouble;
    },
    serialize$2: function(serializers, aDouble) {
      return this.serialize$3$specifiedType(serializers, aDouble, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var t1;
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      t1 = J.getInterceptor$(serialized);
      if (t1.$eq(serialized, "NaN"))
        return 0 / 0;
      else if (t1.$eq(serialized, "-INF"))
        return -1 / 0;
      else if (t1.$eq(serialized, "INF"))
        return 1 / 0;
      else
        return t1.toDouble$0(H.numTypeCast(serialized));
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.double];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.double];
    },
    get$types: function() {
      return this.types;
    },
    get$wireName: function() {
      return "double";
    }
  };
  K.DurationSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, duration, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(duration, "$isDuration");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return duration.get$inMicroseconds();
    },
    serialize$2: function(serializers, duration) {
      return this.serialize$3$specifiedType(serializers, duration, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return P.Duration$(H.intTypeCast(serialized), 0);
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.Duration];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.Duration];
    },
    get$types: function() {
      return this.types;
    },
    get$wireName: function() {
      return "Duration";
    }
  };
  Q.Int64Serializer.prototype = {
    serialize$3$specifiedType: function(serializers, int64, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(int64, "$isInt64");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return J.toString$0$(int64);
    },
    serialize$2: function(serializers, int64) {
      return this.serialize$3$specifiedType(serializers, int64, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return V.Int64_parseInt(H.stringTypeCast(serialized));
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [V.Int64];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [V.Int64];
    },
    get$types: function() {
      return this.types;
    },
    get$wireName: function() {
      return "Int64";
    }
  };
  B.IntSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, integer, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.intTypeCheck(integer);
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return integer;
    },
    serialize$2: function(serializers, integer) {
      return this.serialize$3$specifiedType(serializers, integer, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return H.intTypeCast(serialized);
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.int];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.int];
    },
    get$types: function() {
      return this.types;
    },
    get$wireName: function() {
      return "int";
    }
  };
  O.JsonObjectSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, jsonObject, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(jsonObject, "$isJsonObject");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return jsonObject.get$value();
    },
    serialize$2: function(serializers, jsonObject) {
      return this.serialize$3$specifiedType(serializers, jsonObject, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return A.JsonObject_JsonObject(serialized);
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [A.JsonObject];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [A.JsonObject];
    },
    get$types: function() {
      return this.types;
    },
    get$wireName: function() {
      return "JsonObject";
    }
  };
  K.NumSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, number, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.numTypeCheck(number);
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      if (J.getInterceptor$n(number).get$isNaN(number))
        return "NaN";
      else if (C.JSNumber_methods.get$isInfinite(number))
        return C.JSNumber_methods.get$isNegative(number) ? "-INF" : "INF";
      else
        return number;
    },
    serialize$2: function(serializers, number) {
      return this.serialize$3$specifiedType(serializers, number, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var t1;
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      t1 = J.getInterceptor$(serialized);
      if (t1.$eq(serialized, "NaN"))
        return 0 / 0;
      else if (t1.$eq(serialized, "-INF"))
        return -1 / 0;
      else if (t1.$eq(serialized, "INF"))
        return 1 / 0;
      else
        return t1.toDouble$0(H.numTypeCast(serialized));
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.num];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.num];
    },
    get$types: function() {
      return this.types;
    },
    get$wireName: function() {
      return "num";
    }
  };
  K.RegExpSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, value, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(value, "$isRegExp");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return value.pattern;
    },
    serialize$2: function(serializers, value) {
      return this.serialize$3$specifiedType(serializers, value, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return P.RegExp_RegExp(H.stringTypeCast(serialized), true);
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.RegExp];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.RegExp];
    },
    get$types: function() {
      return this.types;
    },
    get$wireName: function() {
      return "RegExp";
    }
  };
  M.StringSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, string, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.stringTypeCheck(string);
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return string;
    },
    serialize$2: function(serializers, string) {
      return this.serialize$3$specifiedType(serializers, string, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return H.stringTypeCast(serialized);
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.String];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.String];
    },
    get$types: function() {
      return this.types;
    },
    get$wireName: function() {
      return "String";
    }
  };
  O.UriSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, uri, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(uri, "$isUri");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return J.toString$0$(uri);
    },
    serialize$2: function(serializers, uri) {
      return this.serialize$3$specifiedType(serializers, uri, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return P.Uri_parse(H.stringTypeCast(serialized));
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.Uri];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.Uri];
    },
    get$types: function() {
      return this.types;
    },
    get$wireName: function() {
      return "Uri";
    }
  };
  M.CanonicalizedMap.prototype = {
    CanonicalizedMap$from$3$isValidKey: function(other, canonicalize, isValidKey, $C, $K, $V) {
      this.addAll$1(0, other);
    },
    $index: function(_, key) {
      var pair, _this = this;
      if (!_this._isValidKey$1(key))
        return;
      pair = J.$index$asx(_this._canonicalized_map$_base, _this._canonicalize.call$1(H.subtypeOfRuntimeTypeCast(key, H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 1))));
      return pair == null ? null : pair.last;
    },
    $indexSet: function(_, key, value) {
      var t2, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 1);
      H.assertSubtypeOfRuntimeType(key, t1);
      t2 = H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 2);
      H.assertSubtypeOfRuntimeType(value, t2);
      if (!_this._isValidKey$1(key))
        return;
      J.$indexSet$ax(_this._canonicalized_map$_base, _this._canonicalize.call$1(key), B.Pair$(key, value, t1, t2));
    },
    addAll$1: function(_, other) {
      H.assertSubtype(other, "$isMap", [H.getRuntimeTypeArgument(this, "CanonicalizedMap", 1), H.getRuntimeTypeArgument(this, "CanonicalizedMap", 2)], "$asMap").forEach$1(0, new M.CanonicalizedMap_addAll_closure(this));
    },
    cast$2$0: function(_, K2, V2) {
      return J.cast$2$0$ax(this._canonicalized_map$_base, K2, V2);
    },
    cast$0: function($receiver) {
      return this.cast$2$0($receiver, null, null);
    },
    clear$0: function(_) {
      J.clear$0$ax(this._canonicalized_map$_base);
    },
    containsKey$1: function(key) {
      var _this = this;
      if (!_this._isValidKey$1(key))
        return false;
      return _this._canonicalized_map$_base.containsKey$1(_this._canonicalize.call$1(H.subtypeOfRuntimeTypeCast(key, H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 1))));
    },
    forEach$1: function(_, f) {
      var _this = this;
      J.forEach$1$ax(_this._canonicalized_map$_base, new M.CanonicalizedMap_forEach_closure(_this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 1), H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 2)]})));
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._canonicalized_map$_base);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._canonicalized_map$_base);
    },
    get$keys: function(_) {
      return J.map$1$1$ax(this._canonicalized_map$_base.get$values(), new M.CanonicalizedMap_keys_closure(this), H.getRuntimeTypeArgument(this, "CanonicalizedMap", 1));
    },
    get$length: function(_) {
      return J.get$length$asx(this._canonicalized_map$_base);
    },
    map$2$1: function(_, transform, K2, V2) {
      var _this = this;
      return J.map$2$1$ax(_this._canonicalized_map$_base, new M.CanonicalizedMap_map_closure(_this, H.functionTypeCheck(transform, {func: 1, ret: [P.MapEntry, K2, V2], args: [H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 1), H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 2)]}), K2, V2), K2, V2);
    },
    map$1: function($receiver, transform) {
      return this.map$2$1($receiver, transform, null, null);
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 1));
      H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 2)});
      return J.get$last$ax(_this._canonicalized_map$_base.putIfAbsent$2(_this._canonicalize.call$1(key), new M.CanonicalizedMap_putIfAbsent_closure(_this, key, ifAbsent)));
    },
    remove$1: function(_, key) {
      var pair, _this = this;
      if (!_this._isValidKey$1(key))
        return;
      pair = J.remove$1$z(_this._canonicalized_map$_base, _this._canonicalize.call$1(H.subtypeOfRuntimeTypeCast(key, H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 1))));
      return pair == null ? null : pair.last;
    },
    get$values: function() {
      return J.map$1$1$ax(this._canonicalized_map$_base.get$values(), new M.CanonicalizedMap_values_closure(this), H.getRuntimeTypeArgument(this, "CanonicalizedMap", 2));
    },
    toString$0: function(_) {
      var result, _this = this, t1 = {};
      if (M._isToStringVisiting0(_this))
        return "{...}";
      result = P.StringBuffer$("");
      try {
        J.add$1$ax($.$get$_toStringVisiting0(), _this);
        result.write$1("{");
        t1.first = true;
        _this.forEach$1(0, new M.CanonicalizedMap_toString_closure(t1, _this, result));
        result.write$1("}");
      } finally {
        J.removeLast$0$ax($.$get$_toStringVisiting0());
      }
      return J.toString$0$(result);
    },
    _isValidKey$1: function(key) {
      var t1;
      if (key == null || H.checkSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(this, "CanonicalizedMap", 1))) {
        t1 = this._isValidKeyFn;
        t1 = t1 == null || t1.call$1(key);
      } else
        t1 = false;
      return t1;
    },
    $isMap: 1,
    $asMap: function($C, $K, $V) {
      return [$K, $V];
    }
  };
  M.CanonicalizedMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this,
        t2 = J.getInterceptor$(t1);
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 1));
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 2));
      t2.$indexSet(t1, key, value);
      return value;
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: function() {
      var t1 = this.$this,
        t2 = J.getInterceptor$(t1),
        t3 = H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 2);
      return {func: 1, ret: t3, args: [H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 1), t3]};
    }
  };
  M.CanonicalizedMap_forEach_closure.prototype = {
    call$2: function(key, pair) {
      var t1 = this.$this,
        t2 = J.getInterceptor$(t1);
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 0));
      H.assertSubtype(pair, "$isPair", [H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 2)], "$asPair");
      return this.f.call$2(pair.first, pair.last);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: function() {
      var t1 = this.$this,
        t2 = J.getInterceptor$(t1);
      return {func: 1, ret: -1, args: [H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 0), [B.Pair, H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 2)]]};
    }
  };
  M.CanonicalizedMap_keys_closure.prototype = {
    call$1: function(pair) {
      var t1 = this.$this,
        t2 = J.getInterceptor$(t1);
      return H.assertSubtype(pair, "$isPair", [H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 2)], "$asPair").first;
    },
    $signature: function() {
      var t1 = this.$this,
        t2 = J.getInterceptor$(t1),
        t3 = H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 1);
      return {func: 1, ret: t3, args: [[B.Pair, t3, H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 2)]]};
    }
  };
  M.CanonicalizedMap_map_closure.prototype = {
    call$2: function(_, pair) {
      var t1 = this.$this,
        t2 = J.getInterceptor$(t1);
      H.assertSubtypeOfRuntimeType(_, H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 0));
      H.assertSubtype(pair, "$isPair", [H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 2)], "$asPair");
      return this.transform.call$2(pair.first, pair.last);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: function() {
      var t1 = this.$this,
        t2 = J.getInterceptor$(t1);
      return {func: 1, ret: [P.MapEntry, this.K2, this.V2], args: [H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 0), [B.Pair, H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 2)]]};
    }
  };
  M.CanonicalizedMap_putIfAbsent_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = J.getInterceptor$(t1);
      return B.Pair$(this.key, this.ifAbsent.call$0(), H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 2));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: function() {
      var t1 = this.$this,
        t2 = J.getInterceptor$(t1);
      return {func: 1, ret: [B.Pair, H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 2)]};
    }
  };
  M.CanonicalizedMap_values_closure.prototype = {
    call$1: function(pair) {
      var t1 = this.$this,
        t2 = J.getInterceptor$(t1);
      return H.assertSubtype(pair, "$isPair", [H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 2)], "$asPair").last;
    },
    $signature: function() {
      var t1 = this.$this,
        t2 = J.getInterceptor$(t1),
        t3 = H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 2);
      return {func: 1, ret: t3, args: [[B.Pair, H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 1), t3]]};
    }
  };
  M.CanonicalizedMap_toString_closure.prototype = {
    call$2: function(k, v) {
      var _this = this,
        t1 = _this.$this,
        t2 = J.getInterceptor$(t1);
      H.assertSubtypeOfRuntimeType(k, H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 1));
      H.assertSubtypeOfRuntimeType(v, H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 2));
      t1 = _this._box_0;
      if (!t1.first)
        _this.result.write$1(", ");
      t1.first = false;
      _this.result.write$1(H.S(k) + ": " + H.S(v));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: function() {
      var t1 = this.$this,
        t2 = J.getInterceptor$(t1);
      return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgumentIntercepted(t2, t1, "CanonicalizedMap", 2)]};
    }
  };
  M._isToStringVisiting_closure.prototype = {
    call$1: function(e) {
      var t1 = this.o;
      return t1 == null ? e == null : t1 === e;
    },
    $signature: 8
  };
  S.CombinedIterableView.prototype = {};
  S._CombinedIterator.prototype = {$isIterator: 1};
  B.CombinedListView.prototype = {$isUnmodifiableListMixin: 1, $isUnmodifiableListBase: 1, $isUnmodifiableListView: 1};
  L.CombinedMapView.prototype = {};
  O.EmptyUnmodifiableSet.prototype = {$isEfficientLengthIterable: 1, $isSet: 1, $isUnmodifiableSetView: 1, $isUnmodifiableSetMixin: 1, $is_DelegatingIterableBase: 1, $isDelegatingIterable: 1, $isDelegatingSet: 1, $is_UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin: 1};
  U.Equality.prototype = {};
  U.EqualityBy.prototype = {$isEquality: 1,
    $asEquality: function($E, $F) {
      return [$E];
    }
  };
  U.DefaultEquality.prototype = {
    equals$2: function(e1, e2) {
      return J.$eq$(e1, e2);
    },
    hash$1: function(_, e) {
      return J.get$hashCode$(e);
    },
    isValidKey$1: function(o) {
      return true;
    },
    $isEquality: 1
  };
  U.IdentityEquality.prototype = {$isEquality: 1};
  U.IterableEquality.prototype = {
    equals$2: function(elements1, elements2) {
      var it1, it2, hasNext, t2,
        t1 = this.$ti;
      H.assertSubtype(elements1, "$isIterable", t1, "$asIterable");
      H.assertSubtype(elements2, "$isIterable", t1, "$asIterable");
      if (elements1 == null ? elements2 == null : elements1 === elements2)
        return true;
      if (elements1 == null || elements2 == null)
        return false;
      it1 = J.get$iterator$ax(elements1);
      it2 = J.get$iterator$ax(elements2);
      for (t1 = this._elementEquality; true;) {
        hasNext = it1.moveNext$0();
        t2 = it2.moveNext$0();
        if (hasNext == null ? t2 != null : hasNext !== t2)
          return false;
        if (!hasNext)
          return true;
        if (!t1.equals$2(it1.get$current(), it2.get$current()))
          return false;
      }
    },
    hash$1: function(_, elements) {
      var t1, t2, t3, hash, c;
      H.assertSubtype(elements, "$isIterable", this.$ti, "$asIterable");
      if (elements == null)
        return C.JSNull_methods.get$hashCode(null);
      for (t1 = J.get$iterator$ax(elements), t2 = this._elementEquality, t3 = J.getInterceptor$z(t2), hash = 0; t1.moveNext$0();) {
        c = t3.hash$1(t2, t1.get$current());
        if (typeof c !== "number")
          return H.iae(c);
        hash = hash + c & 2147483647;
        hash = hash + (hash << 10 >>> 0) & 2147483647;
        hash ^= hash >>> 6;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    isValidKey$1: function(o) {
      return H.checkSubtype(o, "$isIterable", this.$ti, "$asIterable");
    },
    $isEquality: 1,
    $asEquality: function($E) {
      return [[P.Iterable, $E]];
    }
  };
  U.ListEquality.prototype = {
    equals$2: function(list1, list2) {
      var $length, t2, t3, i,
        t1 = this.$ti;
      H.assertSubtype(list1, "$isList", t1, "$asList");
      H.assertSubtype(list2, "$isList", t1, "$asList");
      if (list1 == null ? list2 == null : list1 === list2)
        return true;
      if (list1 == null || list2 == null)
        return false;
      t1 = J.getInterceptor$asx(list1);
      $length = t1.get$length(list1);
      t2 = J.getInterceptor$asx(list2);
      t3 = t2.get$length(list2);
      if ($length == null ? t3 != null : $length !== t3)
        return false;
      if (typeof $length !== "number")
        return H.iae($length);
      t3 = this._elementEquality;
      i = 0;
      for (; i < $length; ++i)
        if (!t3.equals$2(t1.$index(list1, i), t2.$index(list2, i)))
          return false;
      return true;
    },
    hash$1: function(_, list) {
      var t1, t2, t3, hash, i, t4, c;
      H.assertSubtype(list, "$isList", this.$ti, "$asList");
      if (list == null)
        return C.JSNull_methods.get$hashCode(null);
      t1 = J.getInterceptor$asx(list);
      t2 = this._elementEquality;
      t3 = J.getInterceptor$z(t2);
      hash = 0;
      i = 0;
      while (true) {
        t4 = t1.get$length(list);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i < t4))
          break;
        c = t3.hash$1(t2, t1.$index(list, i));
        if (typeof c !== "number")
          return H.iae(c);
        hash = hash + c & 2147483647;
        hash = hash + (hash << 10 >>> 0) & 2147483647;
        hash ^= hash >>> 6;
        ++i;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    isValidKey$1: function(o) {
      return H.checkSubtype(o, "$isList", this.$ti, "$asList");
    },
    $isEquality: 1,
    $asEquality: function($E) {
      return [[P.List, $E]];
    }
  };
  U._UnorderedEquality.prototype = {
    equals$2: function(elements1, elements2) {
      var counts, $length, e, count,
        t1 = H.getRuntimeTypeArgument(this, "_UnorderedEquality", 1);
      H.assertSubtypeOfRuntimeType(elements1, t1);
      H.assertSubtypeOfRuntimeType(elements2, t1);
      if (elements1 == null ? elements2 == null : elements1 === elements2)
        return true;
      if (elements1 == null || elements2 == null)
        return false;
      t1 = this._elementEquality;
      counts = P.HashMap_HashMap(t1.get$equals(), J.get$hash$z(t1), t1.get$isValidKey(), H.getRuntimeTypeArgument(this, "_UnorderedEquality", 0), P.int);
      for (t1 = J.get$iterator$ax(elements1), $length = 0; t1.moveNext$0();) {
        e = t1.get$current();
        count = counts.$index(0, e);
        counts.$indexSet(0, e, (count == null ? 0 : count) + 1);
        ++$length;
      }
      for (t1 = J.get$iterator$ax(elements2); t1.moveNext$0();) {
        e = t1.get$current();
        count = counts.$index(0, e);
        if (count == null || count === 0)
          return false;
        if (typeof count !== "number")
          return count.$sub();
        counts.$indexSet(0, e, count - 1);
        --$length;
      }
      return $length === 0;
    },
    hash$1: function(_, elements) {
      var t1, t2, t3, hash, c;
      H.assertSubtypeOfRuntimeType(elements, H.getRuntimeTypeArgument(this, "_UnorderedEquality", 1));
      if (elements == null)
        return C.JSNull_methods.get$hashCode(null);
      for (t1 = J.get$iterator$ax(elements), t2 = this._elementEquality, t3 = J.getInterceptor$z(t2), hash = 0; t1.moveNext$0();) {
        c = t3.hash$1(t2, t1.get$current());
        if (typeof c !== "number")
          return H.iae(c);
        hash = hash + c & 2147483647;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    $isEquality: 1,
    $asEquality: function($E, $T) {
      return [$T];
    }
  };
  U.UnorderedIterableEquality.prototype = {
    isValidKey$1: function(o) {
      return H.checkSubtype(o, "$isIterable", this.$ti, "$asIterable");
    },
    $asEquality: function($E) {
      return [[P.Iterable, $E]];
    },
    $as_UnorderedEquality: function($E) {
      return [$E, [P.Iterable, $E]];
    }
  };
  U.SetEquality.prototype = {
    isValidKey$1: function(o) {
      return H.checkSubtype(o, "$isSet", this.$ti, "$asSet");
    },
    $asEquality: function($E) {
      return [[P.Set, $E]];
    },
    $as_UnorderedEquality: function($E) {
      return [$E, [P.Set, $E]];
    }
  };
  U._MapEntry.prototype = {
    get$hashCode: function(_) {
      var t1 = this.equality,
        t2 = J.hash$1$z(t1.get$_keyEquality(), this.key);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1 = J.hash$1$z(t1.get$_valueEquality(), this.value);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 3 * t2 + 7 * t1 & 2147483647;
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other instanceof U._MapEntry) {
        t1 = this.equality;
        t1 = t1.get$_keyEquality().equals$2(this.key, other.key) && t1.get$_valueEquality().equals$2(this.value, other.value);
      } else
        t1 = false;
      return t1;
    },
    get$key: function(receiver) {
      return this.key;
    }
  };
  U.MapEquality.prototype = {
    equals$2: function(map1, map2) {
      var $length, equalElementCounts, key, entry, count,
        t1 = this.$ti;
      H.assertSubtype(map1, "$isMap", t1, "$asMap");
      H.assertSubtype(map2, "$isMap", t1, "$asMap");
      if (map1 == map2)
        return true;
      if (map1 == null || map2 == null)
        return false;
      $length = map1.get$length(map1);
      t1 = map2.get$length(map2);
      if ($length == null ? t1 != null : $length !== t1)
        return false;
      equalElementCounts = P.HashMap_HashMap(null, null, null, U._MapEntry, P.int);
      for (t1 = J.get$iterator$ax(map1.get$keys(map1)); t1.moveNext$0();) {
        key = t1.get$current();
        entry = U._MapEntry$(this, key, map1.$index(0, key));
        count = equalElementCounts.$index(0, entry);
        equalElementCounts.$indexSet(0, entry, (count == null ? 0 : count) + 1);
      }
      for (t1 = J.get$iterator$ax(map2.get$keys(map2)); t1.moveNext$0();) {
        key = t1.get$current();
        entry = U._MapEntry$(this, key, map2.$index(0, key));
        count = equalElementCounts.$index(0, entry);
        if (count == null || count === 0)
          return false;
        if (typeof count !== "number")
          return count.$sub();
        equalElementCounts.$indexSet(0, entry, count - 1);
      }
      return true;
    },
    hash$1: function(_, map) {
      var t1, t2, t3, t4, t5, hash, key, keyHash, valueHash;
      H.assertSubtype(map, "$isMap", this.$ti, "$asMap");
      if (map == null)
        return C.JSNull_methods.get$hashCode(null);
      for (t1 = J.get$iterator$ax(map.get$keys(map)), t2 = this._keyEquality, t3 = J.getInterceptor$z(t2), t4 = this._valueEquality, t5 = J.getInterceptor$z(t4), hash = 0; t1.moveNext$0();) {
        key = t1.get$current();
        keyHash = t3.hash$1(t2, key);
        valueHash = t5.hash$1(t4, map.$index(0, key));
        if (typeof keyHash !== "number")
          return H.iae(keyHash);
        if (typeof valueHash !== "number")
          return H.iae(valueHash);
        hash = hash + 3 * keyHash + 7 * valueHash & 2147483647;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    isValidKey$1: function(o) {
      return H.checkSubtype(o, "$isMap", this.$ti, "$asMap");
    },
    $isEquality: 1,
    $asEquality: function($K, $V) {
      return [[P.Map, $K, $V]];
    },
    get$_keyEquality: function() {
      return this._keyEquality;
    },
    get$_valueEquality: function() {
      return this._valueEquality;
    }
  };
  U.MultiEquality.prototype = {$isEquality: 1};
  U.DeepCollectionEquality.prototype = {
    equals$2: function(e1, e2) {
      var t2, _this = this, _null = null,
        t1 = J.getInterceptor$(e1);
      if (!!t1.$isSet)
        return !!J.getInterceptor$(e2).$isSet && U.SetEquality$(_this, _null).equals$2(e1, e2);
      if (!!t1.$isMap)
        return !!J.getInterceptor$(e2).$isMap && U.MapEquality$(_this, _this, _null, _null).equals$2(e1, e2);
      if (!_this._unordered) {
        if (!!t1.$isList)
          return !!J.getInterceptor$(e2).$isList && U.ListEquality$(_this, _null).equals$2(e1, e2);
        if (!!t1.$isIterable)
          return !!J.getInterceptor$(e2).$isIterable && U.IterableEquality$(_this, _null).equals$2(e1, e2);
      } else if (!!t1.$isIterable) {
        t2 = J.getInterceptor$(e2);
        if (!!t1.$isList !== !!t2.$isList)
          return false;
        return !!t2.$isIterable && U.UnorderedIterableEquality$(_this, _null).equals$2(e1, e2);
      }
      return _this._base.equals$2(e1, e2);
    },
    hash$1: function(_, o) {
      var _this = this, _null = null,
        t1 = J.getInterceptor$(o);
      if (!!t1.$isSet)
        return U.SetEquality$(_this, _null).hash$1(0, o);
      if (!!t1.$isMap)
        return U.MapEquality$(_this, _this, _null, _null).hash$1(0, o);
      if (!_this._unordered) {
        if (!!t1.$isList)
          return U.ListEquality$(_this, _null).hash$1(0, o);
        if (!!t1.$isIterable)
          return U.IterableEquality$(_this, _null).hash$1(0, o);
      } else if (!!t1.$isIterable)
        return U.UnorderedIterableEquality$(_this, _null).hash$1(0, o);
      return J.hash$1$z(_this._base, o);
    },
    isValidKey$1: function(o) {
      var t1 = J.getInterceptor$(o);
      return !!t1.$isIterable || !!t1.$isMap || this._base.isValidKey$1(o);
    },
    $isEquality: 1,
    $asEquality: function() {
    }
  };
  U.CaseInsensitiveEquality.prototype = {$isEquality: 1,
    $asEquality: function() {
      return [P.String];
    }
  };
  N.EqualityMap.prototype = {};
  E.EqualitySet.prototype = {};
  A.IterableZip.prototype = {
    $asIterableBase: function($T) {
      return [[P.List, $T]];
    },
    $asIterable: function($T) {
      return [[P.List, $T]];
    }
  };
  A._IteratorZip.prototype = {$isIterator: 1,
    $asIterator: function($T) {
      return [[P.List, $T]];
    }
  };
  Y.PriorityQueue.prototype = {};
  Y.HeapPriorityQueue.prototype = {$isPriorityQueue: 1};
  Q.QueueList.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isQueue: 1, $isIterable: 1, $isList: 1};
  Q._CastQueueList.prototype = {
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $asListMixin: function($S, $T) {
      return [$T];
    },
    $asQueue: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    },
    $asList: function($S, $T) {
      return [$T];
    },
    $asQueueList: function($S, $T) {
      return [$T];
    },
    $as_QueueList_Object_ListMixin: function($S, $T) {
      return [$T];
    }
  };
  Q._QueueList_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  M.UnionSet.prototype = {$isUnmodifiableSetMixin: 1};
  M._UnionSet_SetBase_UnmodifiableSetMixin.prototype = {$isUnmodifiableSetMixin: 1};
  Y.UnionSetController.prototype = {};
  L.NonGrowableListView.prototype = {$isNonGrowableListMixin: 1};
  L.NonGrowableListMixin.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  L.UnmodifiableSetView.prototype = {$isUnmodifiableSetMixin: 1};
  L.UnmodifiableSetMixin.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  L.UnmodifiableMapMixin.prototype = {$isMap: 1};
  L._NonGrowableListView_DelegatingList_NonGrowableListMixin.prototype = {$isNonGrowableListMixin: 1};
  L._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin.prototype = {$isUnmodifiableSetMixin: 1};
  B.Pair.prototype = {
    get$first: function(receiver) {
      return this.first;
    },
    get$last: function(receiver) {
      return this.last;
    }
  };
  M._DelegatingIterableBase.prototype = {$isIterable: 1};
  M.DelegatingIterable.prototype = {};
  M.DelegatingList.prototype = {$isEfficientLengthIterable: 1, $isList: 1};
  M.DelegatingSet.prototype = {$isEfficientLengthIterable: 1, $isSet: 1};
  M.DelegatingQueue.prototype = {$isEfficientLengthIterable: 1, $isQueue: 1};
  M.DelegatingMap.prototype = {$isMap: 1};
  M.MapKeySet.prototype = {$isEfficientLengthIterable: 1, $isSet: 1, $isUnmodifiableSetMixin: 1};
  M.MapValueSet.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($K, $V) {
      return [$V];
    },
    $asIterable: function($K, $V) {
      return [$V];
    },
    $isSet: 1,
    $asSet: function($K, $V) {
      return [$V];
    },
    $as_DelegatingIterableBase: function($K, $V) {
      return [$V];
    }
  };
  M._MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin.prototype = {$isEfficientLengthIterable: 1, $isSet: 1, $isUnmodifiableSetMixin: 1};
  Y.AccumulatorSink.prototype = {$isSink: 1};
  A.ByteAccumulatorSink.prototype = {};
  N.HexCodec.prototype = {
    get$encoder: function() {
      return C.C_HexEncoder;
    },
    get$decoder: function() {
      return C.C_HexDecoder;
    },
    $asCodec: function() {
      return [[P.List, P.int], P.String];
    }
  };
  A.HexDecoder.prototype = {
    convert$1: function(string) {
      var t1, bytes;
      H.stringTypeCheck(string);
      t1 = string.length;
      if (!C.JSInt_methods.get$isEven(t1))
        throw H.wrapException(P.FormatException$("Invalid input length, must be even.", string, t1));
      bytes = H.NativeUint8List_NativeUint8List(C.JSInt_methods._tdivFast$1(t1, 2));
      A._decode(J.get$codeUnits$s(string), 0, t1, bytes, 0);
      return bytes;
    },
    $asStreamTransformer: function() {
      return [P.String, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.String, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  A._HexDecoderSink.prototype = {};
  A._HexDecoderByteSink.prototype = {};
  R.HexEncoder.prototype = {
    convert$1: function(bytes) {
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      return R._convert(bytes, 0, J.get$length$asx(bytes));
    },
    $asStreamTransformer: function() {
      return [[P.List, P.int], P.String];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], P.String];
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  R._HexEncoderSink.prototype = {};
  E._IdentityConverter.prototype = {
    $asStreamTransformer: function($T) {
      return [$T, $T];
    },
    $asStreamTransformerBase: function($T) {
      return [$T, $T];
    },
    $asConverter: function($T) {
      return [$T, $T];
    }
  };
  E.IdentityCodec.prototype = {
    $asCodec: function($T) {
      return [$T, $T];
    }
  };
  U.PercentCodec.prototype = {
    $asCodec: function() {
      return [[P.List, P.int], P.String];
    }
  };
  B.PercentDecoder.prototype = {
    $asStreamTransformer: function() {
      return [P.String, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.String, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  B._PercentDecoderSink.prototype = {};
  B._PercentDecoderByteSink.prototype = {};
  B.PercentEncoder.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], P.String];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], P.String];
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  B._PercentEncoderSink.prototype = {};
  N.StringAccumulatorSink.prototype = {};
  B.Digest.prototype = {};
  R.DigestSink.prototype = {
    $asSink: function() {
      return [B.Digest];
    }
  };
  A.Hash.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], B.Digest];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], B.Digest];
    },
    $asConverter: function() {
      return [[P.List, P.int], B.Digest];
    }
  };
  G.HashSink.prototype = {$isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    }
  };
  D.Hmac.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], B.Digest];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], B.Digest];
    },
    $asConverter: function() {
      return [[P.List, P.int], B.Digest];
    }
  };
  D._HmacSink.prototype = {};
  M.MD5.prototype = {};
  M._MD5Sink.prototype = {};
  L.Sha1.prototype = {};
  L._Sha1Sink.prototype = {};
  V.Sha256.prototype = {};
  V._Sha256Sink.prototype = {};
  V.Int32.prototype = {$isComparable: 1,
    $asComparable: function() {
    },
    $isIntX: 1
  };
  V.Int64.prototype = {
    $add: function(_, other) {
      var sum1,
        o = V.Int64__promote(other),
        sum0 = J.$add$ansx(this._l, o._l),
        t1 = J.$add$ansx(this._m, o._m);
      if (typeof sum0 !== "number")
        return sum0.$shr();
      sum1 = J.$add$ansx(t1, C.JSInt_methods._shrOtherPositive$1(sum0, 22));
      t1 = J.$add$ansx(this._h, o._h);
      if (typeof sum1 !== "number")
        return sum1.$shr();
      return V.Int64__masked(sum0, sum1, J.$add$ansx(t1, C.JSInt_methods._shrOtherPositive$1(sum1, 22)));
    },
    $sub: function(_, other) {
      var o = V.Int64__promote(other);
      return V.Int64__sub(this._l, this._m, this._h, o._l, o._m, o._h);
    },
    $negate: function(_) {
      return V.Int64__negate(this._l, this._m, this._h);
    },
    $mul: function(_, other) {
      var a3, a4, b0, b1, b2, b3, b4, p0, p1, p2, p3, p4, c0, c1, _8191 = 8191,
        o = V.Int64__promote(other),
        t1 = this._l,
        t2 = J.getInterceptor$bn(t1),
        a0 = t2.$and(t1, _8191),
        t3 = this._m,
        t4 = J.getInterceptor$bn(t3),
        a1 = J.$or$bn(t2.$shr(t1, 13), J.$shl$n(t4.$and(t3, 15), 9)),
        a2 = J.$and$bn(t4.$shr(t3, 4), _8191);
      t1 = this._h;
      t2 = J.getInterceptor$bn(t1);
      a3 = J.$or$bn(t4.$shr(t3, 17), J.$shl$n(t2.$and(t1, 255), 5));
      a4 = J.$shr$n(t2.$and(t1, 1048320), 8);
      t1 = o._l;
      t2 = J.getInterceptor$bn(t1);
      b0 = t2.$and(t1, _8191);
      t1 = t2.$shr(t1, 13);
      t2 = o._m;
      t3 = J.getInterceptor$bn(t2);
      b1 = J.$or$bn(t1, J.$shl$n(t3.$and(t2, 15), 9));
      b2 = J.$and$bn(t3.$shr(t2, 4), _8191);
      t2 = t3.$shr(t2, 17);
      t3 = o._h;
      t1 = J.getInterceptor$bn(t3);
      b3 = J.$or$bn(t2, J.$shl$n(t1.$and(t3, 255), 5));
      b4 = J.$shr$n(t1.$and(t3, 1048320), 8);
      if (typeof a0 !== "number")
        return a0.$mul();
      if (typeof b0 !== "number")
        return H.iae(b0);
      p0 = a0 * b0;
      if (typeof a1 !== "number")
        return a1.$mul();
      p1 = a1 * b0;
      if (typeof a2 !== "number")
        return a2.$mul();
      p2 = a2 * b0;
      if (typeof a3 !== "number")
        return a3.$mul();
      p3 = a3 * b0;
      if (typeof a4 !== "number")
        return a4.$mul();
      p4 = a4 * b0;
      if (b1 !== 0) {
        if (typeof b1 !== "number")
          return H.iae(b1);
        p1 += a0 * b1;
        p2 += a1 * b1;
        p3 += a2 * b1;
        p4 += a3 * b1;
      }
      if (b2 !== 0) {
        if (typeof b2 !== "number")
          return H.iae(b2);
        p2 += a0 * b2;
        p3 += a1 * b2;
        p4 += a2 * b2;
      }
      if (b3 !== 0) {
        if (typeof b3 !== "number")
          return H.iae(b3);
        p3 += a0 * b3;
        p4 += a1 * b3;
      }
      if (b4 !== 0) {
        if (typeof b4 !== "number")
          return H.iae(b4);
        p4 += a0 * b4;
      }
      c0 = (p0 & 4194303) + ((p1 & 511) << 13);
      c1 = C.JSInt_methods._shrOtherPositive$1(p0, 22) + C.JSInt_methods._shrOtherPositive$1(p1, 9) + ((p2 & 262143) << 4) + ((p3 & 31) << 17) + (c0 >>> 22);
      return V.Int64__masked(c0, c1, C.JSInt_methods._shrOtherPositive$1(p2, 18) + C.JSInt_methods._shrOtherPositive$1(p3, 5) + ((p4 & 4095) << 8) + (c1 >>> 22));
    },
    $mod: function(_, other) {
      return V.Int64__divide(this, other, 3);
    },
    $tdiv: function(_, other) {
      return V.Int64__divide(this, other, 1);
    },
    $and: function(_, other) {
      var o = V.Int64__promote(other);
      return V.Int64__masked(J.$and$bn(this._l, o._l), J.$and$bn(this._m, o._m), J.$and$bn(this._h, o._h));
    },
    $or: function(_, other) {
      var o = V.Int64__promote(other);
      return V.Int64__masked(J.$or$bn(this._l, o._l), J.$or$bn(this._m, o._m), J.$or$bn(this._h, o._h));
    },
    $shl: function(_, n) {
      var t1, t2, res0, t3, t4, t5, res1, res2, _this = this;
      H.intTypeCheck(n);
      if (typeof n !== "number")
        return n.$lt();
      if (n < 0)
        throw H.wrapException(P.ArgumentError$value(n, null, null));
      if (n >= 64)
        return C.Int64_0_0_0;
      if (n < 22) {
        t1 = _this._l;
        t2 = J.getInterceptor$n(t1);
        res0 = t2.$shl(t1, n);
        t3 = _this._m;
        t4 = J.getInterceptor$n(t3);
        t5 = 22 - n;
        res1 = J.$or$bn(t4.$shl(t3, n), t2.$shr(t1, t5));
        res2 = J.$or$bn(J.$shl$n(_this._h, n), t4.$shr(t3, t5));
      } else {
        t1 = _this._l;
        if (n < 44) {
          t2 = n - 22;
          t3 = J.getInterceptor$n(t1);
          res1 = t3.$shl(t1, t2);
          res2 = J.$or$bn(J.$shl$n(_this._m, t2), t3.$shr(t1, 44 - n));
        } else {
          res2 = J.$shl$n(t1, n - 44);
          res1 = 0;
        }
        res0 = 0;
      }
      return V.Int64__masked(res0, res1, res2);
    },
    $shr: function(_, n) {
      var a2, negative, res2, t1, t2, res1, res0, _this = this, _4194303 = 4194303, _1048575 = 1048575;
      H.intTypeCheck(n);
      if (typeof n !== "number")
        return n.$lt();
      if (n < 0)
        throw H.wrapException(P.ArgumentError$value(n, null, null));
      if (n >= 64)
        return _this.get$isNegative(_this) ? C.Int64_4194303_4194303_1048575 : C.Int64_0_0_0;
      a2 = _this._h;
      if (typeof a2 !== "number")
        return a2.$and();
      negative = (a2 & 524288) !== 0;
      if (negative && true)
        a2 += 3145728;
      if (n < 22) {
        res2 = V.Int64__shiftRight(a2, n);
        if (negative) {
          t1 = C.JSInt_methods._shrReceiverPositive$1(_1048575, n);
          if (typeof res2 !== "number")
            return res2.$or();
          res2 = (res2 | 1048575 & ~t1) >>> 0;
        }
        t1 = _this._m;
        t2 = 22 - n;
        res1 = J.$or$bn(V.Int64__shiftRight(t1, n), C.JSInt_methods.$shl(a2, t2));
        res0 = J.$or$bn(V.Int64__shiftRight(_this._l, n), J.$shl$n(t1, t2));
      } else if (n < 44) {
        res2 = negative ? _1048575 : 0;
        t1 = n - 22;
        res1 = V.Int64__shiftRight(a2, t1);
        if (negative) {
          t2 = C.JSInt_methods._shrReceiverPositive$1(_4194303, t1);
          if (typeof res1 !== "number")
            return res1.$or();
          res1 = (res1 | 4194303 & ~t2) >>> 0;
        }
        res0 = J.$or$bn(V.Int64__shiftRight(_this._m, t1), C.JSInt_methods.$shl(a2, 44 - n));
      } else {
        res2 = negative ? _1048575 : 0;
        res1 = negative ? _4194303 : 0;
        t1 = n - 44;
        res0 = V.Int64__shiftRight(a2, t1);
        if (negative) {
          t1 = C.JSInt_methods._shrReceiverPositive$1(_4194303, t1);
          if (typeof res0 !== "number")
            return res0.$or();
          res0 = (res0 | 4194303 & ~t1) >>> 0;
        }
      }
      return V.Int64__masked(res0, res1, res2);
    },
    $eq: function(_, other) {
      var o, _this = this;
      if (other == null)
        return false;
      if (other instanceof V.Int64)
        o = other;
      else if (typeof other === "number" && Math.floor(other) === other) {
        if (J.$eq$(_this._h, 0) && J.$eq$(_this._m, 0))
          return J.$eq$(_this._l, other);
        if ((4194303 & other) === other)
          return false;
        o = V.Int64_Int64(other);
      } else
        o = null;
      if (o != null)
        return J.$eq$(_this._l, o._l) && J.$eq$(_this._m, o._m) && J.$eq$(_this._h, o._h);
      return false;
    },
    compareTo$1: function(_, other) {
      return this._compareTo$1(other);
    },
    _compareTo$1: function(other) {
      var o = V.Int64__promote(other),
        t1 = this._h,
        t2 = J.getInterceptor$n(t1),
        signa = t2.$shr(t1, 19),
        t3 = o._h;
      if (signa != J.$shr$n(t3, 19))
        return signa === 0 ? 1 : -1;
      if (t2.$gt(t1, t3))
        return 1;
      else if (t2.$lt(t1, t3))
        return -1;
      t1 = this._m;
      t2 = o._m;
      t3 = J.getInterceptor$n(t1);
      if (t3.$gt(t1, t2))
        return 1;
      else if (t3.$lt(t1, t2))
        return -1;
      t1 = this._l;
      t2 = o._l;
      t3 = J.getInterceptor$n(t1);
      if (t3.$gt(t1, t2))
        return 1;
      else if (t3.$lt(t1, t2))
        return -1;
      return 0;
    },
    $lt: function(_, other) {
      return J.$lt$n(this._compareTo$1(other), 0);
    },
    $le: function(_, other) {
      return J.$le$n(this._compareTo$1(other), 0);
    },
    $gt: function(_, other) {
      return J.$gt$n(this._compareTo$1(other), 0);
    },
    $ge: function(_, other) {
      return J.$ge$n(this._compareTo$1(other), 0);
    },
    get$isNegative: function(_) {
      return !J.$eq$(J.$and$bn(this._h, 524288), 0);
    },
    get$isZero: function() {
      return J.$eq$(this._h, 0) && J.$eq$(this._m, 0) && J.$eq$(this._l, 0);
    },
    get$hashCode: function(_) {
      var t1 = this._m,
        t2 = J.getInterceptor$bn(t1),
        bottom = J.$or$bn(J.$shl$n(t2.$and(t1, 1023), 22), this._l),
        $top = J.$or$bn(J.$shl$n(this._h, 12), J.$and$bn(t2.$shr(t1, 10), 4095));
      if (typeof bottom !== "number")
        return bottom.$xor();
      if (typeof $top !== "number")
        return H.iae($top);
      return (bottom ^ $top) >>> 0;
    },
    abs$0: function(_) {
      var _this = this;
      return _this.get$isNegative(_this) ? _this.$negate(0) : _this;
    },
    toString$0: function(_) {
      return this._toRadixString$1(10);
    },
    _toRadixString$1: function(radix) {
      var d0, d1, d2, t1, d10, sign;
      H.intTypeCheck(radix);
      d0 = this._l;
      d1 = this._m;
      d2 = this._h;
      if (typeof d2 !== "number")
        return d2.$and();
      if ((d2 & 524288) !== 0) {
        if (typeof d0 !== "number")
          return H.iae(d0);
        d0 = 0 - d0;
        t1 = C.JSInt_methods._shrOtherPositive$1(d0, 22);
        d0 &= 4194303;
        if (typeof d1 !== "number")
          return H.iae(d1);
        d1 = 0 - d1 - (t1 & 1);
        d10 = d1 & 4194303;
        d2 = 0 - d2 - (C.JSInt_methods._shrOtherPositive$1(d1, 22) & 1) & 1048575;
        d1 = d10;
        sign = "-";
      } else
        sign = "";
      return V.Int64__toRadixStringUnsigned(radix, d0, d1, d2, sign);
    },
    $isComparable: 1,
    $asComparable: function() {
    },
    $isIntX: 1
  };
  V.IntX.prototype = {$isComparable: 1,
    $asComparable: function() {
    }
  };
  B._CrawlAsync.prototype = {};
  L.stronglyConnectedComponents_strongConnect.prototype = {
    call$1: function(node) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, next, component, _this = this,
        t1 = _this.T;
      H.assertSubtypeOfRuntimeType(node, t1);
      t2 = _this.indexes;
      t3 = _this._box_0;
      t4 = J.getInterceptor$ax(t2);
      t4.$indexSet(t2, node, t3.index);
      t5 = _this.lowLinks;
      t6 = J.getInterceptor$ax(t5);
      t6.$indexSet(t5, node, t3.index);
      t3.index = J.$add$ansx(t3.index, 1);
      t7 = _this.lastVisited;
      t7.addLast$1(node);
      t8 = _this.onStack;
      t9 = J.getInterceptor$ax(t8);
      t9.add$1(t8, node);
      t10 = _this.edges.call$1(node);
      t10 = J.get$iterator$ax(t10 == null ? C.List_empty : t10);
      t11 = P.int;
      for (; t10.moveNext$0();) {
        next = t10.get$current();
        if (!t2.containsKey$1(next)) {
          _this.call$1(next);
          t6.$indexSet(t5, node, P.min(t6.$index(t5, node), t6.$index(t5, next), t11));
        } else if (t9.contains$1(t8, next))
          t6.$indexSet(t5, node, P.min(t6.$index(t5, node), t4.$index(t2, next), t11));
      }
      if (J.$eq$(t6.$index(t5, node), t4.$index(t2, node))) {
        component = H.setRuntimeTypeInfo([], [t1]);
        t1 = J.getInterceptor$ax(t7);
        do {
          next = t1.removeLast$0(t7);
          t9.remove$1(t8, next);
          C.JSArray_methods.add$1(component, next);
        } while (!t3.equals.call$2(next, node));
        J.add$1$ax(_this.result, component);
      }
    },
    $signature: function() {
      return {func: 1, ret: -1, args: [this.T]};
    }
  };
  E.BaseClient.prototype = {
    post$2$body: function(url, body) {
      return this._sendUnstreamed$5("POST", url, null, body, null);
    },
    _sendUnstreamed$5: function(method, url, headers, body, encoding) {
      var t1 = P.String;
      return this._sendUnstreamed$body$BaseClient(H.stringTypeCheck(method), url, H.assertSubtype(headers, "$isMap", [t1, t1], "$asMap"), body, H.interceptedTypeCheck(encoding, "$isEncoding"));
    },
    _sendUnstreamed$body$BaseClient: function(method, url, headers, body, encoding) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(U.Response),
        $async$returnValue, $async$self = this, t1, request, $async$temp1;
      var $async$_sendUnstreamed$5 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              request = O.Request$(method, H.interceptedTypeCheck(typeof url === "string" ? P.Uri_parse(url) : url, "$isUri"));
              if (headers != null)
                J.addAll$1$ax(request.headers, headers);
              if (encoding != null)
                request.set$encoding(encoding);
              if (body != null)
                if (typeof body === "string")
                  request.set$body(0, body);
                else {
                  t1 = J.getInterceptor$(body);
                  if (!!t1.$isList)
                    request.set$bodyBytes(t1.cast$1$0(body, P.int));
                  else if (!!t1.$isMap) {
                    t1 = P.String;
                    request.set$bodyFields(body.cast$2$0(0, t1, t1));
                  } else
                    throw H.wrapException(P.ArgumentError$('Invalid request body "' + H.S(body) + '".'));
                }
              $async$temp1 = U;
              $async$goto = 3;
              return P._asyncAwait($async$self.send$1(0, request), $async$_sendUnstreamed$5);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.Response_fromStream($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_sendUnstreamed$5, $async$completer);
    },
    close$0: function(_) {
    },
    $isClient0: 1
  };
  G.BaseRequest.prototype = {
    get$finalized: function() {
      return this._finalized;
    },
    finalize$0: function() {
      if (this.get$finalized())
        throw H.wrapException(P.StateError$("Can't finalize a finalized Request."));
      this._finalized = true;
      return;
    },
    toString$0: function(_) {
      return H.S(this.method) + " " + H.S(this.url);
    },
    get$url: function(receiver) {
      return this.url;
    },
    get$headers: function() {
      return this.headers;
    }
  };
  G.BaseRequest_closure.prototype = {
    call$2: function(key1, key2) {
      H.stringTypeCheck(key1);
      H.stringTypeCheck(key2);
      return J.$eq$(J.toLowerCase$0$s(key1), J.toLowerCase$0$s(key2));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 48
  };
  G.BaseRequest_closure0.prototype = {
    call$1: function(key) {
      return J.get$hashCode$(J.toLowerCase$0$s(H.stringTypeCheck(key)));
    },
    $signature: 49
  };
  T.BaseResponse.prototype = {
    BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request: function(statusCode, contentLength, headers, isRedirect, persistentConnection, reasonPhrase, request) {
      var t1 = this.statusCode;
      if (J.$lt$n(t1, 100))
        throw H.wrapException(P.ArgumentError$("Invalid status code " + H.S(t1) + "."));
      else {
        t1 = this.contentLength;
        if (t1 != null && J.$lt$n(t1, 0))
          throw H.wrapException(P.ArgumentError$("Invalid content length " + H.S(t1) + "."));
      }
    },
    get$request: function(receiver) {
      return this.request;
    },
    get$statusCode: function(receiver) {
      return this.statusCode;
    },
    get$reasonPhrase: function() {
      return this.reasonPhrase;
    },
    get$headers: function() {
      return this.headers;
    },
    get$isRedirect: function() {
      return this.isRedirect;
    },
    get$persistentConnection: function() {
      return this.persistentConnection;
    }
  };
  O.BrowserClient.prototype = {
    send$1: function(_, request) {
      return this.send$body$BrowserClient(_, H.interceptedTypeCheck(request, "$isBaseRequest"));
    },
    send$body$BrowserClient: function(_, request) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(X.StreamedResponse),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, completer, t3, bytes, xhr, t1, t2;
      var $async$send$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(request.finalize$0().toBytes$0(), $async$send$1);
            case 3:
              // returning from await.
              bytes = $async$result;
              xhr = W.HttpRequest_HttpRequest();
              t1 = $async$self._xhrs;
              t2 = J.getInterceptor$ax(t1);
              t2.add$1(t1, xhr);
              $async$self._openHttpRequest$4$asynch(xhr, request.method, J.toString$0$(request.url), true);
              J.set$responseType$x(xhr, "blob");
              J.set$withCredentials$x(xhr, $async$self.withCredentials);
              J.forEach$1$ax(request.headers, J.get$setRequestHeader$x(xhr));
              completer = P.Completer_Completer(X.StreamedResponse);
              J.get$first$ax(J.get$onLoad$x(xhr)).then$1$1(new O.BrowserClient_send_closure(xhr, completer, request), null);
              J.get$first$ax(J.get$onError$x(xhr)).then$1$1(new O.BrowserClient_send_closure0(completer, request), null);
              J.send$1$x(xhr, bytes);
              $async$handler = 4;
              $async$goto = 7;
              return P._asyncAwait(completer.get$future(), $async$send$1);
            case 7:
              // returning from await.
              t3 = $async$result;
              $async$returnValue = t3;
              $async$next = [1];
              // goto finally
              $async$goto = 5;
              break;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              t2.remove$1(t1, xhr);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$send$1, $async$completer);
    },
    _openHttpRequest$4$asynch: function(request, method, url, asynch) {
      H.interceptedTypeCheck(request, "$isHttpRequest");
      (request && C.HttpRequest_methods).open$5$async$password$user(request, H.stringTypeCheck(method), H.stringTypeCheck(url), H.boolTypeCheck(asynch), null, null);
    },
    close$0: function(_) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(this._xhrs); t1.moveNext$0();) {
        t2 = t1.get$current();
        (t2 && C.HttpRequest_methods).abort$0(t2);
      }
    },
    set$withCredentials: function(_, withCredentials) {
      this.withCredentials = H.boolTypeCheck(withCredentials);
    }
  };
  O.BrowserClient_send_closure.prototype = {
    call$1: function(_) {
      var t1, t2, blob, reader, t3;
      H.interceptedTypeCheck(_, "$isProgressEvent");
      t1 = this.xhr;
      t2 = J.getInterceptor$x(t1);
      blob = t2.get$response(t1) == null ? W.Blob_Blob([]) : t2.get$response(t1);
      reader = W.FileReader_FileReader();
      t2 = this.completer;
      t3 = this.request;
      J.get$first$ax((reader && C.FileReader_methods).get$onLoad(reader)).then$1$1(new O.BrowserClient_send__closure(reader, t2, t1, t3), null);
      J.get$first$ax(C.FileReader_methods.get$onError(reader)).then$1$1(new O.BrowserClient_send__closure0(t2, t3), null);
      C.FileReader_methods.readAsArrayBuffer$1(reader, H.interceptedTypeCheck(blob, "$isBlob"));
    },
    $signature: 12
  };
  O.BrowserClient_send__closure.prototype = {
    call$1: function(_) {
      var body, t1, t2, _this = this;
      H.interceptedTypeCheck(_, "$isProgressEvent");
      body = H.interceptedTypeCast(J.get$result$x(_this.reader), "$isUint8List");
      t1 = _this.xhr;
      t2 = J.getInterceptor$x(t1);
      _this.completer.complete$1(X.StreamedResponse$(Z.ByteStream_ByteStream$fromBytes(body), t2.get$status(t1), body.length, t2.get$responseHeaders(t1), t2.get$statusText(t1), _this.request));
    },
    $signature: 12
  };
  O.BrowserClient_send__closure0.prototype = {
    call$1: function(error) {
      this.completer.completeError$2(E.ClientException$(J.toString$0$(H.interceptedTypeCheck(error, "$isProgressEvent")), J.get$url$z(this.request)), P.StackTrace_current());
    },
    $signature: 12
  };
  O.BrowserClient_send_closure0.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isProgressEvent");
      this.completer.completeError$2(E.ClientException$("XMLHttpRequest error.", J.get$url$z(this.request)), P.StackTrace_current());
    },
    $signature: 12
  };
  Z.ByteStream.prototype = {
    toBytes$0: function() {
      var completer = P.Completer_Completer(P.Uint8List),
        sink = P._ByteCallbackSink$(new Z.ByteStream_toBytes_closure(completer));
      this.listen$4$cancelOnError$onDone$onError(sink.get$add(sink), true, sink.get$close(sink), completer.get$completeError());
      return completer.get$future();
    },
    $asStream: function() {
      return [[P.List, P.int]];
    },
    $asStreamView: function() {
      return [[P.List, P.int]];
    }
  };
  Z.ByteStream_toBytes_closure.prototype = {
    call$1: function(bytes) {
      return this.completer.complete$1(H.NativeUint8List_NativeUint8List$fromList(H.assertSubtype(bytes, "$isList", [P.int], "$asList")));
    },
    $signature: 50
  };
  U.Client0.prototype = {};
  E.ClientException.prototype = {
    toString$0: function(_) {
      return this.message;
    },
    $isException: 1,
    message$2$color: function($receiver, arg0, arg1) {
      return this.message.call$2$color(arg0, arg1);
    },
    get$message: function(receiver) {
      return this.message;
    },
    get$uri: function() {
      return null;
    }
  };
  O.Request.prototype = {
    get$encoding: function() {
      var _this = this;
      if (_this.get$_contentType() == null || !_this.get$_contentType().get$parameters().containsKey$1("charset"))
        return _this._defaultEncoding;
      return B.requiredEncodingForCharset(J.$index$asx(_this.get$_contentType().get$parameters(), "charset"));
    },
    set$encoding: function(value) {
      var contentType, t1, _this = this;
      H.interceptedTypeCheck(value, "$isEncoding");
      _this._checkFinalized$0();
      _this._defaultEncoding = value;
      contentType = _this.get$_contentType();
      if (contentType == null)
        return;
      t1 = P.String;
      _this.set$_contentType(contentType.change$1$parameters(P.LinkedHashMap_LinkedHashMap$_literal(["charset", value.get$name(value)], t1, t1)));
    },
    get$bodyBytes: function() {
      return this._bodyBytes;
    },
    set$bodyBytes: function(value) {
      H.assertSubtype(value, "$isList", [P.int], "$asList");
      this._checkFinalized$0();
      this._bodyBytes = H.interceptedTypeCheck(B.toUint8List(value), "$isUint8List");
    },
    set$body: function(_, value) {
      var contentType, t1, _this = this;
      H.stringTypeCheck(value);
      _this.set$bodyBytes(_this.get$encoding().encode$1(value));
      contentType = _this.get$_contentType();
      if (contentType == null) {
        t1 = P.String;
        _this.set$_contentType(R.MediaType$("text", "plain", P.LinkedHashMap_LinkedHashMap$_literal(["charset", J.get$name$z(_this.get$encoding())], t1, t1)));
      } else if (!contentType.parameters.containsKey$1("charset")) {
        t1 = P.String;
        _this.set$_contentType(contentType.change$1$parameters(P.LinkedHashMap_LinkedHashMap$_literal(["charset", J.get$name$z(_this.get$encoding())], t1, t1)));
      }
    },
    set$bodyFields: function(fields) {
      var contentType, _this = this,
        t1 = P.String;
      H.assertSubtype(fields, "$isMap", [t1, t1], "$asMap");
      contentType = _this.get$_contentType();
      if (contentType == null)
        _this.set$_contentType(R.MediaType$("application", "x-www-form-urlencoded", null));
      else if (!J.$eq$(contentType.get$mimeType(), "application/x-www-form-urlencoded"))
        throw H.wrapException(P.StateError$('Cannot set the body fields of a Request with content-type "' + H.S(contentType.get$mimeType()) + '".'));
      _this.set$body(0, B.mapToQuery(fields, _this.get$encoding()));
    },
    finalize$0: function() {
      this.super$BaseRequest$finalize();
      return Z.ByteStream_ByteStream$fromBytes(this.get$bodyBytes());
    },
    get$_contentType: function() {
      var contentType = J.$index$asx(this.headers, "content-type");
      if (contentType == null)
        return;
      return R.MediaType_MediaType$parse(contentType);
    },
    set$_contentType: function(value) {
      J.$indexSet$ax(this.headers, "content-type", J.toString$0$(H.interceptedTypeCheck(value, "$isMediaType")));
    },
    _checkFinalized$0: function() {
      if (!this.get$finalized())
        return;
      throw H.wrapException(P.StateError$("Can't modify a finalized Request."));
    }
  };
  U.Response.prototype = {};
  U.Response_fromStream_closure.prototype = {
    call$1: function(body) {
      var t1, t2, t3;
      H.interceptedTypeCheck(body, "$isUint8List");
      t1 = this.response;
      t2 = J.getInterceptor$z(t1);
      t3 = t2.get$statusCode(t1);
      t2 = t2.get$request(t1);
      return U.Response$bytes(body, t3, t1.get$headers(), t1.get$isRedirect(), t1.get$persistentConnection(), t1.get$reasonPhrase(), t2);
    },
    $signature: 51
  };
  X.StreamedResponse.prototype = {
    get$stream: function(receiver) {
      return this.stream;
    }
  };
  B.mapToQuery_closure.prototype = {
    call$2: function(key, value) {
      var t1;
      H.stringTypeCheck(key);
      H.stringTypeCheck(value);
      t1 = this.encoding;
      return J.add$1$ax(this.pairs, H.setRuntimeTypeInfo([P.Uri_encodeQueryComponent(key, t1), P.Uri_encodeQueryComponent(value, t1)], [P.String]));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 18
  };
  B.mapToQuery_closure0.prototype = {
    call$1: function(pair) {
      var t1;
      H.assertSubtype(pair, "$isList", [P.String], "$asList");
      t1 = J.getInterceptor$asx(pair);
      return H.S(t1.$index(pair, 0)) + "=" + H.S(t1.$index(pair, 1));
    },
    $signature: 79
  };
  B.Pair0.prototype = {};
  E.AuthenticationChallenge.prototype = {};
  Z.CaseInsensitiveMap.prototype = {
    $asMap: function($V) {
      return [P.String, $V];
    },
    $asCanonicalizedMap: function($V) {
      return [P.String, P.String, $V];
    }
  };
  Z.CaseInsensitiveMap$from_closure.prototype = {
    call$1: function(key) {
      return J.toLowerCase$0$s(H.stringTypeCheck(key));
    },
    $signature: 11
  };
  Z.CaseInsensitiveMap$from_closure0.prototype = {
    call$1: function(key) {
      return key != null;
    },
    $signature: 4
  };
  S.ChunkedCodingCodec.prototype = {
    $asCodec: function() {
      return [[P.List, P.int], [P.List, P.int]];
    }
  };
  B.ChunkedCodingDecoder.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], [P.List, P.int]];
    },
    $asConverter: function() {
      return [[P.List, P.int], [P.List, P.int]];
    }
  };
  B._Sink.prototype = {};
  B._State0.prototype = {};
  E.ChunkedCodingEncoder.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], [P.List, P.int]];
    },
    $asConverter: function() {
      return [[P.List, P.int], [P.List, P.int]];
    }
  };
  E._Sink0.prototype = {};
  R.MediaType.prototype = {
    get$mimeType: function() {
      return H.S(this.type) + "/" + H.S(this.subtype);
    },
    change$1$parameters: function(parameters) {
      var type, subtype, parameters0,
        t1 = P.String;
      H.assertSubtype(parameters, "$isMap", [t1, t1], "$asMap");
      type = this.type;
      type = type;
      subtype = this.subtype;
      subtype = subtype;
      if (parameters == null)
        parameters = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      parameters0 = P.LinkedHashMap_LinkedHashMap$from(this.parameters, t1, t1);
      parameters0.addAll$1(0, parameters);
      parameters = parameters0;
      return R.MediaType$(type, subtype, parameters);
    },
    toString$0: function(_) {
      var buffer = P.StringBuffer$("");
      buffer.write$1(this.type);
      buffer.write$1("/");
      buffer.write$1(this.subtype);
      J.forEach$1$ax(this.parameters, new R.MediaType_toString_closure(buffer));
      return buffer.toString$0(0);
    },
    get$parameters: function() {
      return this.parameters;
    }
  };
  R.MediaType_MediaType$parse_closure.prototype = {
    call$0: function() {
      var t2, type, subtype, t3, parameters, attribute, value,
        scanner = X.StringScanner$(this.mediaType),
        t1 = $.$get$whitespace();
      scanner.scan$1(t1);
      t2 = $.$get$token();
      scanner.expect$1(t2);
      type = J.$index$asx(scanner.get$lastMatch(), 0);
      scanner.expect$1("/");
      scanner.expect$1(t2);
      subtype = J.$index$asx(scanner.get$lastMatch(), 0);
      scanner.scan$1(t1);
      t3 = P.String;
      parameters = P.LinkedHashMap_LinkedHashMap$_empty(t3, t3);
      for (; scanner.scan$1(";");) {
        scanner.scan$1(t1);
        scanner.expect$1(t2);
        attribute = J.$index$asx(scanner.get$lastMatch(), 0);
        scanner.expect$1("=");
        value = scanner.scan$1(t2) ? J.$index$asx(scanner.get$lastMatch(), 0) : N.expectQuotedString(scanner);
        scanner.scan$1(t1);
        parameters.$indexSet(0, attribute, value);
      }
      scanner.expectDone$0();
      return R.MediaType$(type, subtype, parameters);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 53
  };
  R.MediaType_toString_closure.prototype = {
    call$2: function(attribute, value) {
      var t1;
      H.stringTypeCheck(attribute);
      H.stringTypeCheck(value);
      t1 = this.buffer;
      t1.write$1("; " + H.S(attribute) + "=");
      if ($.$get$nonToken().hasMatch$1(value)) {
        t1.write$1('"');
        t1.write$1(J.replaceAllMapped$2$s(value, $.$get$_escapedChar(), new R.MediaType_toString__closure()));
        t1.write$1('"');
      } else
        t1.write$1(value);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 30
  };
  R.MediaType_toString__closure.prototype = {
    call$1: function(match) {
      return C.JSString_methods.$add("\\", H.interceptedTypeCheck(match, "$isMatch").$index(0, 0));
    },
    $signature: 19
  };
  N.expectQuotedString_closure.prototype = {
    call$1: function(match) {
      return H.interceptedTypeCheck(match, "$isMatch").$index(0, 1);
    },
    $signature: 19
  };
  Q.JS.prototype = {};
  Q._Anonymous.prototype = {};
  N.Logger.prototype = {
    get$fullName: function() {
      var t1 = this.parent,
        t2 = t1 == null || J.$eq$(J.get$name$z(t1), ""),
        t3 = this.name;
      return t2 ? t3 : H.S(t1.get$fullName()) + "." + H.S(t3);
    },
    Logger$_internal$3: function($name, $parent, children) {
      var t1 = this.parent;
      if (t1 != null)
        J.$indexSet$ax(J.get$_children$z(t1), this.name, this);
    },
    get$level: function() {
      return C.Level_INFO_800;
    },
    isLoggable$1: function(value) {
      return H.interceptedTypeCheck(value, "$isLevel").$ge(0, this.get$level());
    },
    log$4: function(logLevel, message, error, stackTrace) {
      var msg, object, zone, record;
      H.interceptedTypeCheck(logLevel, "$isLevel");
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      if (this.isLoggable$1(logLevel)) {
        if (!!J.getInterceptor$(message).$isFunction)
          message = message.call$0();
        if (typeof message === "string") {
          msg = message;
          object = null;
        } else {
          msg = J.toString$0$(message);
          object = message;
        }
        if (stackTrace == null && logLevel.$ge(0, C.Level_OFF_2000)) {
          stackTrace = P.StackTrace_current();
          if (error == null)
            error = "autogenerated stack trace for " + H.S(logLevel) + " " + H.S(msg);
        }
        zone = P.Zone_current();
        zone = zone;
        record = N.LogRecord$(logLevel, msg, this.get$fullName(), error, stackTrace, zone, object);
        $.$get$Logger_root()._publish$1(record);
      }
    },
    warning$1: function(message) {
      return this.log$4(C.Level_WARNING_900, message, null, null);
    },
    _publish$1: function(record) {
      H.interceptedTypeCheck(record, "$isLogRecord");
    },
    get$name: function(receiver) {
      return this.name;
    },
    get$_children: function(receiver) {
      return this._children;
    }
  };
  N.Logger_Logger_closure.prototype = {
    call$0: function() {
      return N.Logger_Logger$_named(this.name);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 55
  };
  N.Level.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof N.Level && J.$eq$(this.value, other.value);
    },
    $lt: function(_, other) {
      return J.$lt$n(this.value, H.interceptedTypeCheck(other, "$isLevel").value);
    },
    $le: function(_, other) {
      return J.$le$n(this.value, H.interceptedTypeCheck(other, "$isLevel").value);
    },
    $gt: function(_, other) {
      return J.$gt$n(this.value, H.interceptedTypeCheck(other, "$isLevel").value);
    },
    $ge: function(_, other) {
      return J.$ge$n(this.value, H.interceptedTypeCheck(other, "$isLevel").value);
    },
    compareTo$1: function(_, other) {
      return J.$sub$n(this.value, H.interceptedTypeCheck(other, "$isLevel").value);
    },
    get$hashCode: function(_) {
      return this.value;
    },
    toString$0: function(_) {
      return this.name;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [N.Level];
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  N.LogRecord.prototype = {
    toString$0: function(_) {
      return "[" + H.S(J.get$name$z(this.level)) + "] " + H.S(this.loggerName) + ": " + H.S(this.message);
    },
    message$2$color: function($receiver, arg0, arg1) {
      return this.message.call$2$color(arg0, arg1);
    },
    get$message: function(receiver) {
      return this.message;
    },
    get$error: function() {
      return null;
    }
  };
  Q.Immutable.prototype = {};
  Q.Required.prototype = {};
  Q._AlwaysThrows.prototype = {};
  Q._Checked.prototype = {};
  Q._Experimental.prototype = {};
  Q._Factory.prototype = {};
  Q._IsTest.prototype = {};
  Q._IsTestGroup.prototype = {};
  Q._Literal.prototype = {};
  Q._MustCallSuper.prototype = {};
  Q._OptionalTypeArgs.prototype = {};
  Q._Protected.prototype = {};
  Q._Sealed.prototype = {};
  Q._Virtual.prototype = {};
  Q._VisibleForOverriding.prototype = {};
  Q._VisibleForTesting.prototype = {};
  M.Context.prototype = {
    get$current: function() {
      var t1 = this._context$_current;
      return t1 != null ? t1 : D.current();
    },
    get$separator: function() {
      return this.style.get$separator();
    },
    absolute$1: function(_, part1) {
      var t1, _this = this, _null = null;
      H.stringTypeCheck(part1);
      M._validateArgList("absolute", H.setRuntimeTypeInfo([part1, null, null, null, null, null, null], [P.String]));
      t1 = _this.isAbsolute$1(part1) && !_this.isRootRelative$1(part1);
      if (t1)
        return part1;
      return _this.join$8(0, _this.get$current(), part1, _null, _null, _null, _null, _null, _null);
    },
    isAbsolute$1: function(path) {
      return J.$gt$n(this.style.rootLength$1(H.stringTypeCheck(path)), 0);
    },
    isRelative$1: function(path) {
      return !this.isAbsolute$1(H.stringTypeCheck(path));
    },
    isRootRelative$1: function(path) {
      return this.style.isRootRelative$1(H.stringTypeCheck(path));
    },
    join$8: function(_, part1, part2, part3, part4, part5, part6, part7, part8) {
      var parts = H.setRuntimeTypeInfo([H.stringTypeCheck(part1), H.stringTypeCheck(part2), H.stringTypeCheck(part3), H.stringTypeCheck(part4), H.stringTypeCheck(part5), H.stringTypeCheck(part6), H.stringTypeCheck(part7), H.stringTypeCheck(part8)], [P.String]);
      M._validateArgList("join", parts);
      return this.joinAll$1(C.JSArray_methods.where$1(parts, new M.Context_join_closure()));
    },
    join$1: function($receiver, part1) {
      return this.join$8($receiver, part1, null, null, null, null, null, null, null);
    },
    joinAll$1: function(parts) {
      var buffer, t1, t2, needsSeparator, isAbsoluteAndNotRootRelative, t3, parsed, path, t4, _this = this;
      H.assertSubtype(parts, "$isIterable", [P.String], "$asIterable");
      buffer = P.StringBuffer$("");
      for (t1 = J.get$iterator$ax(J.where$1$ax(parts, new M.Context_joinAll_closure())), t2 = _this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false; t1.moveNext$0();) {
        t3 = t1.get$current();
        if (_this.isRootRelative$1(t3) && isAbsoluteAndNotRootRelative) {
          parsed = _this._parse$1(t3);
          path = buffer.toString$0(0);
          t4 = H.stringTypeCheck(J.substring$2$s(path, 0, t2.rootLength$2$withDrive(path, true)));
          parsed.root = t4;
          if (t2.needsSeparator$1(t4))
            J.$indexSet$ax(parsed.separators, 0, t2.get$separator());
          buffer.clear$0(0);
          buffer.write$1(J.toString$0$(parsed));
        } else if (_this.isAbsolute$1(t3)) {
          isAbsoluteAndNotRootRelative = !_this.isRootRelative$1(t3);
          buffer.clear$0(0);
          buffer.write$1(t3);
        } else {
          if (!(t3.length > 0 && t2.containsSeparator$1(t3[0])))
            if (needsSeparator)
              buffer.write$1(_this.get$separator());
          buffer.write$1(t3);
        }
        needsSeparator = t2.needsSeparator$1(t3);
      }
      return buffer.toString$0(0);
    },
    split$1: function(_, path) {
      var t1,
        parsed = this._parse$1(H.stringTypeCheck(path));
      parsed.set$parts(J.toList$0$ax(J.where$1$ax(parsed.parts, new M.Context_split_closure())));
      t1 = parsed.root;
      if (t1 != null)
        J.insert$2$ax(parsed.parts, 0, t1);
      return parsed.parts;
    },
    normalize$1: function(path) {
      var parsed;
      H.stringTypeCheck(path);
      if (!this._needsNormalization$1(path))
        return path;
      parsed = this._parse$1(path);
      parsed.normalize$0();
      return parsed.toString$0(0);
    },
    _needsNormalization$1: function(path) {
      var codeUnits, t1, root, t2, i, start, previous, t3, previousPrevious, t4, codeUnit;
      H.stringTypeCheck(path);
      codeUnits = J.get$codeUnits$s(path);
      t1 = this.style;
      root = t1.rootLength$1(path);
      if (root !== 0) {
        if (J.$eq$(t1, $.$get$Style_windows())) {
          if (typeof root !== "number")
            return H.iae(root);
          t2 = J.getInterceptor$asx(codeUnits);
          i = 0;
          for (; i < root; ++i)
            if (J.$eq$(t2.$index(codeUnits, i), 47))
              return true;
        }
        start = root;
        previous = 47;
      } else {
        start = 0;
        previous = null;
      }
      t2 = J.getInterceptor$asx(codeUnits);
      t3 = J.getInterceptor$(t1);
      i = start;
      previousPrevious = null;
      while (true) {
        t4 = t2.get$length(codeUnits);
        if (typeof i !== "number")
          return i.$lt();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i < t4))
          break;
        codeUnit = t2.$index(codeUnits, i);
        if (t1.isSeparator$1(codeUnit)) {
          if (t3.$eq(t1, $.$get$Style_windows()) && codeUnit === 47)
            return true;
          if (previous != null && t1.isSeparator$1(previous))
            return true;
          if (previous === 46)
            t4 = previousPrevious == null || previousPrevious === 46 || t1.isSeparator$1(previousPrevious);
          else
            t4 = false;
          if (t4)
            return true;
        }
        ++i;
        previousPrevious = previous;
        previous = codeUnit;
      }
      if (previous == null)
        return true;
      if (t1.isSeparator$1(previous))
        return true;
      if (previous === 46)
        t1 = previousPrevious == null || t1.isSeparator$1(previousPrevious) || previousPrevious === 46;
      else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    relative$1: function(path) {
      var t1, from, fromParsed, pathParsed, t2, _this = this,
        _s26_ = 'Unable to find a path to "';
      H.stringTypeCheck(path);
      t1 = _this.isRelative$1(path);
      if (t1)
        return _this.normalize$1(path);
      from = _this.get$current();
      if (_this.isRelative$1(from) && _this.isAbsolute$1(path))
        return _this.normalize$1(path);
      if (_this.isRelative$1(path) || _this.isRootRelative$1(path))
        path = _this.absolute$1(0, path);
      if (_this.isRelative$1(path) && _this.isAbsolute$1(from))
        throw H.wrapException(X.PathException$(_s26_ + H.S(path) + '" from "' + H.S(from) + '".'));
      fromParsed = _this._parse$1(from);
      fromParsed.normalize$0();
      pathParsed = _this._parse$1(path);
      pathParsed.normalize$0();
      if (J.$gt$n(J.get$length$asx(fromParsed.parts), 0) && J.$eq$(J.$index$asx(fromParsed.parts, 0), "."))
        return J.toString$0$(pathParsed);
      if (!J.$eq$(fromParsed.root, pathParsed.root)) {
        t1 = fromParsed.root;
        if (t1 != null) {
          t2 = pathParsed.root;
          t1 = t2 == null || !_this.style.pathsEqual$2(t1, t2);
        } else
          t1 = true;
      } else
        t1 = false;
      if (t1)
        return J.toString$0$(pathParsed);
      t1 = _this.style;
      while (true) {
        if (!(J.$gt$n(J.get$length$asx(fromParsed.get$parts()), 0) && J.$gt$n(J.get$length$asx(pathParsed.get$parts()), 0) && t1.pathsEqual$2(J.$index$asx(fromParsed.get$parts(), 0), J.$index$asx(pathParsed.get$parts(), 0))))
          break;
        J.removeAt$1$ax(fromParsed.get$parts(), 0);
        J.removeAt$1$ax(fromParsed.get$separators(), 1);
        J.removeAt$1$ax(pathParsed.get$parts(), 0);
        J.removeAt$1$ax(pathParsed.get$separators(), 1);
      }
      if (J.$gt$n(J.get$length$asx(fromParsed.get$parts()), 0) && J.$eq$(J.$index$asx(fromParsed.get$parts(), 0), ".."))
        throw H.wrapException(X.PathException$(_s26_ + H.S(path) + '" from "' + H.S(from) + '".'));
      t2 = P.String;
      J.insertAll$2$ax(pathParsed.get$parts(), 0, P.List_List$filled(J.get$length$asx(fromParsed.get$parts()), "..", t2));
      J.$indexSet$ax(pathParsed.get$separators(), 0, "");
      J.insertAll$2$ax(pathParsed.get$separators(), 1, P.List_List$filled(J.get$length$asx(fromParsed.get$parts()), t1.get$separator(), t2));
      if (J.$eq$(J.get$length$asx(pathParsed.get$parts()), 0))
        return ".";
      if (J.$gt$n(J.get$length$asx(pathParsed.get$parts()), 1) && J.$eq$(J.get$last$ax(pathParsed.get$parts()), ".")) {
        J.removeLast$0$ax(pathParsed.get$parts());
        t1 = pathParsed.get$separators();
        t2 = J.getInterceptor$ax(t1);
        t2.removeLast$0(t1);
        t2.removeLast$0(t1);
        t2.add$1(t1, "");
      }
      pathParsed.set$root("");
      pathParsed.removeTrailingSeparators$0();
      return J.toString$0$(pathParsed);
    },
    fromUri$1: function(uri) {
      return this.style.pathFromUri$1(M._parseUri(uri));
    },
    prettyUri$1: function(uri) {
      var path, rel, _this = this,
        typedUri = M._parseUri(uri);
      if (J.$eq$(typedUri.get$scheme(), "file") && J.$eq$(_this.style, $.$get$Style_url()))
        return typedUri.toString$0(0);
      else if (!J.$eq$(typedUri.get$scheme(), "file") && !J.$eq$(typedUri.get$scheme(), "") && !J.$eq$(_this.style, $.$get$Style_url()))
        return typedUri.toString$0(0);
      path = _this.normalize$1(_this.fromUri$1(typedUri));
      rel = _this.relative$1(path);
      return J.$gt$n(J.get$length$asx(_this.split$1(0, rel)), J.get$length$asx(_this.split$1(0, path))) ? path : rel;
    },
    _parse$1: function(path) {
      return X.ParsedPath_ParsedPath$parse(H.stringTypeCheck(path), this.style);
    },
    get$style: function() {
      return this.style;
    }
  };
  M.Context_join_closure.prototype = {
    call$1: function(part) {
      return H.stringTypeCheck(part) != null;
    },
    $signature: 20
  };
  M.Context_joinAll_closure.prototype = {
    call$1: function(part) {
      return H.stringTypeCheck(part) !== "";
    },
    $signature: 20
  };
  M.Context_split_closure.prototype = {
    call$1: function(part) {
      return !J.get$isEmpty$asx(H.stringTypeCheck(part));
    },
    $signature: 20
  };
  M._validateArgList_closure.prototype = {
    call$1: function(arg) {
      H.stringTypeCheck(arg);
      return arg == null ? "null" : '"' + arg + '"';
    },
    $signature: 11
  };
  M._PathDirection.prototype = {};
  M._PathRelation.prototype = {};
  B.InternalStyle.prototype = {
    getRoot$1: function(path) {
      var $length, t1;
      H.stringTypeCheck(path);
      $length = this.rootLength$1(path);
      if (typeof $length !== "number")
        return $length.$gt();
      if ($length > 0)
        return J.substring$2$s(path, 0, $length);
      if (this.isRootRelative$1(path)) {
        if (0 >= path.length)
          return H.ioore(path, 0);
        t1 = path[0];
      } else
        t1 = null;
      return t1;
    },
    pathsEqual$2: function(path1, path2) {
      return H.stringTypeCheck(path1) == H.stringTypeCheck(path2);
    }
  };
  X.ParsedPath.prototype = {
    get$isAbsolute: function() {
      return this.root != null;
    },
    removeTrailingSeparators$0: function() {
      var t1, t2, _this = this;
      while (true) {
        if (!(!J.get$isEmpty$asx(_this.parts) && J.$eq$(J.get$last$ax(_this.parts), "")))
          break;
        J.removeLast$0$ax(_this.parts);
        J.removeLast$0$ax(_this.separators);
      }
      if (J.$gt$n(J.get$length$asx(_this.separators), 0)) {
        t1 = _this.separators;
        t2 = J.getInterceptor$asx(t1);
        t2.$indexSet(t1, J.$sub$n(t2.get$length(t1), 1), "");
      }
    },
    normalize$0: function() {
      var t2, leadingDoubles, t3, newSeparators, _this = this,
        t1 = P.String,
        newParts = H.setRuntimeTypeInfo([], [t1]);
      for (t2 = J.get$iterator$ax(_this.parts), leadingDoubles = 0; t2.moveNext$0();) {
        t3 = t2.get$current();
        if (!(t3 === "." || t3 === ""))
          if (t3 === "..")
            if (newParts.length > 0)
              newParts.pop();
            else
              ++leadingDoubles;
          else
            C.JSArray_methods.add$1(newParts, t3);
      }
      if (!_this.get$isAbsolute())
        C.JSArray_methods.insertAll$2(newParts, 0, P.List_List$filled(leadingDoubles, "..", t1));
      if (newParts.length === 0 && !_this.get$isAbsolute())
        C.JSArray_methods.add$1(newParts, ".");
      newSeparators = P.List_List$generate(newParts.length, new X.ParsedPath_normalize_closure(_this), true, t1);
      J.insert$2$ax(newSeparators, 0, _this.get$isAbsolute() && newParts.length > 0 && _this.style.needsSeparator$1(_this.root) ? _this.style.get$separator() : "");
      _this.set$parts(newParts);
      _this.set$separators(newSeparators);
      if (_this.root != null && J.$eq$(_this.style, $.$get$Style_windows()))
        _this.root = H.stringTypeCheck(J.replaceAll$2$s(_this.root, "/", "\\"));
      _this.removeTrailingSeparators$0();
    },
    toString$0: function(_) {
      var i, _this = this,
        builder = P.StringBuffer$(""),
        t1 = _this.root;
      if (t1 != null)
        builder.write$1(t1);
      i = 0;
      while (true) {
        t1 = J.get$length$asx(_this.parts);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        builder.write$1(J.$index$asx(_this.separators, i));
        builder.write$1(J.$index$asx(_this.parts, i));
        ++i;
      }
      builder.write$1(J.get$last$ax(_this.separators));
      return builder.toString$0(0);
    },
    set$root: function(root) {
      this.root = H.stringTypeCheck(root);
    },
    set$parts: function(parts) {
      this.parts = H.assertSubtype(parts, "$isList", [P.String], "$asList");
    },
    set$separators: function(separators) {
      this.separators = H.assertSubtype(separators, "$isList", [P.String], "$asList");
    },
    isRootRelative$1: function(arg0) {
      return this.isRootRelative.call$1(arg0);
    },
    get$style: function() {
      return this.style;
    },
    get$root: function() {
      return this.root;
    },
    get$parts: function() {
      return this.parts;
    },
    get$separators: function() {
      return this.separators;
    }
  };
  X.ParsedPath_normalize_closure.prototype = {
    call$1: function(_) {
      H.intTypeCheck(_);
      return this.$this.get$style().get$separator();
    },
    $signature: 16
  };
  X.PathException.prototype = {
    toString$0: function(_) {
      return "PathException: " + H.S(this.message);
    },
    $isException: 1,
    message$2$color: function($receiver, arg0, arg1) {
      return this.message.call$2$color(arg0, arg1);
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  K.PathMap.prototype = {
    $asMapView: function($V) {
      return [P.String, $V];
    },
    $asMap: function($V) {
      return [P.String, $V];
    }
  };
  B.PathSet.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asIterableBase: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    },
    $isSet: 1,
    $asSet: function() {
      return [P.String];
    }
  };
  O.Style.prototype = {
    toString$0: function(_) {
      return this.get$name(this);
    }
  };
  E.PosixStyle.prototype = {
    containsSeparator$1: function(path) {
      return J.contains$1$asx(H.stringTypeCheck(path), "/");
    },
    isSeparator$1: function(codeUnit) {
      return H.intTypeCheck(codeUnit) === 47;
    },
    needsSeparator$1: function(path) {
      H.stringTypeCheck(path);
      return J.getInterceptor$asx(path).get$isNotEmpty(path) && !this.isSeparator$1(C.JSString_methods.codeUnitAt$1(path, path.length - 1));
    },
    rootLength$2$withDrive: function(path, withDrive) {
      H.stringTypeCheck(path);
      H.boolTypeCheck(withDrive);
      if (J.getInterceptor$asx(path).get$isNotEmpty(path) && this.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 0)))
        return 1;
      return 0;
    },
    rootLength$1: function(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1: function(path) {
      H.stringTypeCheck(path);
      return false;
    },
    pathFromUri$1: function(uri) {
      H.interceptedTypeCheck(uri, "$isUri");
      if (J.$eq$(uri.get$scheme(), "") || J.$eq$(uri.get$scheme(), "file"))
        return P.Uri_decodeComponent(uri.get$path(uri));
      throw H.wrapException(P.ArgumentError$("Uri " + H.S(uri) + " must have scheme 'file:'."));
    },
    get$name: function() {
      return "posix";
    },
    get$separator: function() {
      return "/";
    },
    get$separators: function() {
      return null;
    }
  };
  F.UrlStyle.prototype = {
    containsSeparator$1: function(path) {
      return J.contains$1$asx(H.stringTypeCheck(path), "/");
    },
    isSeparator$1: function(codeUnit) {
      return H.intTypeCheck(codeUnit) === 47;
    },
    needsSeparator$1: function(path) {
      var t1;
      H.stringTypeCheck(path);
      if (J.getInterceptor$asx(path).get$isEmpty(path))
        return false;
      t1 = path.length;
      if (!this.isSeparator$1(C.JSString_methods.codeUnitAt$1(path, t1 - 1)))
        return true;
      return C.JSString_methods.endsWith$1(path, "://") && J.$eq$(this.rootLength$1(path), t1);
    },
    rootLength$2$withDrive: function(path, withDrive) {
      var t1, i, codeUnit, index, t2;
      H.stringTypeCheck(path);
      H.boolTypeCheck(withDrive);
      if (J.getInterceptor$asx(path).get$isEmpty(path))
        return 0;
      if (this.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 0)))
        return 1;
      for (t1 = path.length, i = 0; i < t1; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(path, i);
        if (this.isSeparator$1(codeUnit))
          return 0;
        if (codeUnit === 58) {
          if (i === 0)
            return 0;
          index = C.JSString_methods.indexOf$2(path, "/", C.JSString_methods.startsWith$2(path, "//", i + 1) ? i + 3 : i);
          if (typeof index !== "number")
            return index.$le();
          if (index <= 0)
            return t1;
          if (!withDrive || t1 < index + 3)
            return index;
          if (!C.JSString_methods.startsWith$1(path, "file://"))
            return index;
          if (!B.isDriveLetter(path, index + 1))
            return index;
          t2 = index + 3;
          return t1 === t2 ? t2 : index + 4;
        }
      }
      return 0;
    },
    rootLength$1: function(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1: function(path) {
      H.stringTypeCheck(path);
      return J.getInterceptor$asx(path).get$isNotEmpty(path) && this.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 0));
    },
    pathFromUri$1: function(uri) {
      return J.toString$0$(H.interceptedTypeCheck(uri, "$isUri"));
    },
    get$name: function() {
      return "url";
    },
    get$separator: function() {
      return "/";
    },
    get$separators: function() {
      return null;
    }
  };
  L.WindowsStyle.prototype = {
    containsSeparator$1: function(path) {
      return J.contains$1$asx(H.stringTypeCheck(path), "/");
    },
    isSeparator$1: function(codeUnit) {
      H.intTypeCheck(codeUnit);
      return codeUnit === 47 || codeUnit === 92;
    },
    needsSeparator$1: function(path) {
      H.stringTypeCheck(path);
      if (J.getInterceptor$asx(path).get$isEmpty(path))
        return false;
      return !this.isSeparator$1(C.JSString_methods.codeUnitAt$1(path, path.length - 1));
    },
    rootLength$2$withDrive: function(path, withDrive) {
      var t1, t2, index;
      H.stringTypeCheck(path);
      H.boolTypeCheck(withDrive);
      if (J.getInterceptor$asx(path).get$isEmpty(path))
        return 0;
      t1 = C.JSString_methods._codeUnitAt$1(path, 0);
      t2 = J.getInterceptor$(t1);
      if (t2.$eq(t1, 47))
        return 1;
      if (t2.$eq(t1, 92)) {
        t1 = path.length;
        if (t1 < 2 || !J.$eq$(C.JSString_methods._codeUnitAt$1(path, 1), 92))
          return 1;
        index = C.JSString_methods.indexOf$2(path, "\\", 2);
        if (typeof index !== "number")
          return index.$gt();
        if (index > 0) {
          index = C.JSString_methods.indexOf$2(path, "\\", index + 1);
          if (typeof index !== "number")
            return index.$gt();
          if (index > 0)
            return index;
        }
        return t1;
      }
      if (path.length < 3)
        return 0;
      if (!B.isAlphabetic(t1))
        return 0;
      if (!J.$eq$(C.JSString_methods._codeUnitAt$1(path, 1), 58))
        return 0;
      if (!this.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 2)))
        return 0;
      return 3;
    },
    rootLength$1: function(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1: function(path) {
      return J.$eq$(this.rootLength$1(H.stringTypeCheck(path)), 1);
    },
    pathFromUri$1: function(uri) {
      var path;
      H.interceptedTypeCheck(uri, "$isUri");
      if (!J.$eq$(uri.get$scheme(), "") && !J.$eq$(uri.get$scheme(), "file"))
        throw H.wrapException(P.ArgumentError$("Uri " + H.S(uri) + " must have scheme 'file:'."));
      path = uri.get$path(uri);
      if (J.$eq$(uri.get$host(uri), "")) {
        if (path.length >= 3 && J.startsWith$1$s(path, "/") && B.isDriveLetter(path, 1))
          path = J.replaceFirst$2$s(path, "/", "");
      } else
        path = "\\\\" + H.S(uri.get$host(uri)) + H.S(path);
      return P.Uri_decodeComponent(J.replaceAll$2$s(path, "/", "\\"));
    },
    codeUnitsEqual$2: function(codeUnit1, codeUnit2) {
      var upperCase1;
      H.intTypeCheck(codeUnit1);
      H.intTypeCheck(codeUnit2);
      if (codeUnit1 == codeUnit2)
        return true;
      if (codeUnit1 === 47)
        return codeUnit2 === 92;
      if (codeUnit1 === 92)
        return codeUnit2 === 47;
      if (typeof codeUnit1 !== "number")
        return codeUnit1.$xor();
      if (typeof codeUnit2 !== "number")
        return H.iae(codeUnit2);
      if ((codeUnit1 ^ codeUnit2) >>> 0 !== 32)
        return false;
      upperCase1 = (codeUnit1 | 32) >>> 0;
      return upperCase1 >= 97 && upperCase1 <= 122;
    },
    pathsEqual$2: function(path1, path2) {
      var t1, t2, i;
      H.stringTypeCheck(path1);
      H.stringTypeCheck(path2);
      if (path1 == path2)
        return true;
      t1 = path1.length;
      if (t1 !== path2.length)
        return false;
      for (t2 = J.getInterceptor$s(path2), i = 0; i < t1; ++i)
        if (!this.codeUnitsEqual$2(C.JSString_methods._codeUnitAt$1(path1, i), t2._codeUnitAt$1(path2, i)))
          return false;
      return true;
    },
    get$name: function() {
      return "windows";
    },
    get$separator: function() {
      return "\\";
    },
    get$separators: function() {
      return null;
    }
  };
  S.BiMap.prototype = {$isMap: 1};
  S.HashBiMap.prototype = {$isMap: 1, $isBiMap: 1};
  S.DelegatingIterable0.prototype = {$isIterable: 1};
  S.DelegatingList0.prototype = {$isEfficientLengthIterable: 1, $isList: 1};
  S.DelegatingMap0.prototype = {$isMap: 1};
  S.DelegatingQueue0.prototype = {$isEfficientLengthIterable: 1, $isQueue: 1};
  S.DelegatingSet0.prototype = {$isEfficientLengthIterable: 1, $isSet: 1};
  S.LruMap.prototype = {$isMap: 1};
  S._LinkedEntry.prototype = {};
  S.LinkedLruHashMap.prototype = {$isMap: 1, $isLruMap: 1};
  S.Multimap.prototype = {};
  S._BaseMultimap.prototype = {$isMultimap: 1,
    $asMultimap: function($K, $V, $C) {
      return [$K, $V];
    }
  };
  S.ListMultimap.prototype = {$asMultimap: null,
    $as_BaseMultimap: function($K, $V) {
      return [$K, $V, [P.List, $V]];
    }
  };
  S.SetMultimap.prototype = {$asMultimap: null,
    $as_BaseMultimap: function($K, $V) {
      return [$K, $V, [P.Set, $V]];
    }
  };
  S._WrappedMap.prototype = {$isMap: 1,
    $asMap: function($K, $V, $C) {
      return [$K, $C];
    }
  };
  S._WrappedIterable.prototype = {$isIterable: 1,
    $asIterable: function($K, $V, $C) {
      return [$V];
    }
  };
  S._WrappedList0.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($K, $V) {
      return [$V];
    },
    $asIterable: function($K, $V) {
      return [$V];
    },
    $isList: 1,
    $asList: function($K, $V) {
      return [$V];
    },
    $as_WrappedIterable: function($K, $V) {
      return [$K, $V, [P.List, $V]];
    }
  };
  S._WrappedSet.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($K, $V) {
      return [$V];
    },
    $asIterable: function($K, $V) {
      return [$V];
    },
    $isSet: 1,
    $asSet: function($K, $V) {
      return [$V];
    },
    $as_WrappedIterable: function($K, $V) {
      return [$K, $V, [P.Set, $V]];
    }
  };
  S.TreeSet.prototype = {$isEfficientLengthIterable: 1, $isSet: 1};
  S.TreeSearch.prototype = {};
  S._TreeNode.prototype = {};
  S.AvlTreeSet.prototype = {};
  S._AvlTreeIterator.prototype = {$isBidirectionalIterator: 1, $isIterator: 1};
  S.AvlNode.prototype = {};
  X.hashObjects_closure.prototype = {
    call$2: function(h, i) {
      return X._combine(H.intTypeCheck(h), J.get$hashCode$(i));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 57
  };
  X.Optional.prototype = {};
  L._Count.prototype = {
    $asIterableBase: function() {
      return [P.num];
    },
    $asIterable: function() {
      return [P.num];
    },
    $asInfiniteIterable: function() {
      return [P.num];
    }
  };
  L._CountIterator.prototype = {$isIterator: 1,
    $asIterator: function() {
      return [P.num];
    }
  };
  L._Cycle.prototype = {};
  L._CycleIterator.prototype = {$isIterator: 1};
  L.IndexedValue.prototype = {};
  L.EnumerateIterable.prototype = {
    $asIterableBase: function($V) {
      return [[L.IndexedValue, $V]];
    },
    $asIterable: function($V) {
      return [[L.IndexedValue, $V]];
    }
  };
  L.EnumerateIterator.prototype = {
    $asIterator: function($V) {
      return [[L.IndexedValue, $V]];
    }
  };
  L.GeneratingIterable.prototype = {};
  L._GeneratingIterator.prototype = {$isIterator: 1};
  L.InfiniteIterable.prototype = {};
  L._Merge.prototype = {};
  L._IteratorPeeker.prototype = {};
  L._MergeIterator.prototype = {$isIterator: 1};
  L.Extent.prototype = {};
  L._Partition.prototype = {
    $asIterableBase: function($T) {
      return [[P.List, $T]];
    },
    $asIterable: function($T) {
      return [[P.List, $T]];
    }
  };
  L._PartitionIterator.prototype = {$isIterator: 1,
    $asIterator: function($T) {
      return [[P.List, $T]];
    }
  };
  Y.SourceFile.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._decodedChars);
    },
    get$lines: function() {
      return J.get$length$asx(this._lineStarts);
    },
    SourceFile$decoded$2$url: function(decodedChars, url) {
      var t5, c, j,
        t1 = this._decodedChars,
        t2 = J.getInterceptor$asx(t1),
        t3 = this._lineStarts,
        t4 = J.getInterceptor$ax(t3),
        i = 0;
      while (true) {
        t5 = t2.get$length(t1);
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (!(i < t5))
          break;
        c = t2.$index(t1, i);
        if (c === 13) {
          j = i + 1;
          t5 = t2.get$length(t1);
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (j >= t5 || !J.$eq$(t2.$index(t1, j), 10))
            c = 10;
        }
        if (c === 10)
          t4.add$1(t3, i + 1);
        ++i;
      }
    },
    span$2: function(start, end) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      return Y._FileSpan$(this, start, end == null ? this.get$length(this) : end);
    },
    span$1: function(start) {
      return this.span$2(start, null);
    },
    getLine$1: function(offset) {
      var t1, t2, t3, _this = this;
      H.intTypeCheck(offset);
      if (typeof offset !== "number")
        return offset.$lt();
      if (offset < 0)
        throw H.wrapException(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else {
        t1 = _this.get$length(_this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (offset > t1)
          throw H.wrapException(P.RangeError$("Offset " + offset + " must not be greater than the number of characters in the file, " + H.S(_this.get$length(_this)) + "."));
      }
      t1 = _this._lineStarts;
      t2 = J.getInterceptor$ax(t1);
      t3 = t2.get$first(t1);
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (offset < t3)
        return -1;
      t3 = t2.get$last(t1);
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (offset >= t3)
        return J.$sub$n(t2.get$length(t1), 1);
      if (_this._isNearCachedLine$1(offset))
        return _this._cachedLine;
      return _this._cachedLine = H.intTypeCheck(J.$sub$n(_this._binarySearch$1(offset), 1));
    },
    _isNearCachedLine$1: function(offset) {
      var t1, t2, t3, _this = this;
      H.intTypeCheck(offset);
      t1 = _this._cachedLine;
      if (t1 == null)
        return false;
      t2 = _this._lineStarts;
      t3 = J.getInterceptor$asx(t2);
      t1 = t3.$index(t2, t1);
      if (typeof offset !== "number")
        return offset.$lt();
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (offset < t1)
        return false;
      if (!J.$ge$n(_this._cachedLine, J.$sub$n(t3.get$length(t2), 1))) {
        t1 = t3.$index(t2, J.$add$ansx(_this._cachedLine, 1));
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = offset < t1;
      } else
        t1 = true;
      if (t1)
        return true;
      if (!J.$ge$n(_this._cachedLine, J.$sub$n(t3.get$length(t2), 2))) {
        t1 = t3.$index(t2, J.$add$ansx(_this._cachedLine, 2));
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = offset < t1;
      } else
        t1 = true;
      if (t1) {
        _this._cachedLine = H.intTypeCheck(J.$add$ansx(_this._cachedLine, 1));
        return true;
      }
      return false;
    },
    _binarySearch$1: function(offset) {
      var t1, t2, max, min, half;
      H.intTypeCheck(offset);
      t1 = this._lineStarts;
      t2 = J.getInterceptor$asx(t1);
      max = J.$sub$n(t2.get$length(t1), 1);
      min = 0;
      while (true) {
        if (typeof max !== "number")
          return H.iae(max);
        if (!(min < max))
          break;
        half = min + C.JSInt_methods._tdivFast$1(max - min, 2);
        if (J.$gt$n(t2.$index(t1, half), offset))
          max = half;
        else
          min = half + 1;
      }
      return max;
    },
    getColumn$1: function(offset) {
      var t1, line, lineStart, _this = this;
      H.intTypeCheck(offset);
      if (typeof offset !== "number")
        return offset.$lt();
      if (offset < 0)
        throw H.wrapException(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else {
        t1 = _this.get$length(_this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (offset > t1)
          throw H.wrapException(P.RangeError$("Offset " + offset + " must be not be greater than the number of characters in the file, " + H.S(_this.get$length(_this)) + "."));
      }
      line = _this.getLine$1(offset);
      lineStart = J.$index$asx(_this._lineStarts, line);
      if (typeof lineStart !== "number")
        return lineStart.$gt();
      if (lineStart > offset)
        throw H.wrapException(P.RangeError$("Line " + H.S(line) + " comes after offset " + offset + "."));
      return offset - lineStart;
    },
    getOffset$1: function(line) {
      var t1, t2, result, t3, t4, _this = this;
      H.intTypeCheck(line);
      if (typeof line !== "number")
        return line.$lt();
      if (line < 0)
        throw H.wrapException(P.RangeError$("Line may not be negative, was " + line + "."));
      else {
        t1 = _this.get$lines();
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (line >= t1)
          throw H.wrapException(P.RangeError$("Line " + line + " must be less than the number of lines in the file, " + H.S(_this.get$lines()) + "."));
      }
      t1 = _this._lineStarts;
      t2 = J.getInterceptor$asx(t1);
      result = J.$add$ansx(t2.$index(t1, line), 0);
      t3 = _this.get$length(_this);
      if (typeof result !== "number")
        return result.$gt();
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (!(result > t3)) {
        t3 = line + 1;
        t4 = _this.get$lines();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (t3 < t4) {
          t1 = t2.$index(t1, t3);
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = result >= t1;
        } else
          t1 = false;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$("Line " + line + " doesn't have 0 columns."));
      return result;
    },
    getText$2: function(start, end) {
      return P.String_String$fromCharCodes(J.sublist$2$ax(this._decodedChars, H.intTypeCheck(start), H.intTypeCheck(end)), 0, null);
    },
    get$url: function(receiver) {
      return this.url;
    }
  };
  Y.FileLocation.prototype = {
    get$sourceUrl: function() {
      return J.get$url$z(this.file);
    },
    get$line: function() {
      return this.file.getLine$1(this.offset);
    },
    get$column: function() {
      return this.file.getColumn$1(this.offset);
    },
    FileLocation$_$2: function(file, offset) {
      var t3, t4,
        t1 = this.offset,
        t2 = J.getInterceptor$n(t1);
      if (t2.$lt(t1, 0))
        throw H.wrapException(P.RangeError$("Offset may not be negative, was " + H.S(t1) + "."));
      else {
        t3 = this.file;
        t4 = J.getInterceptor$asx(t3);
        if (t2.$gt(t1, t4.get$length(t3)))
          throw H.wrapException(P.RangeError$("Offset " + H.S(t1) + " must not be greater than the number of characters in the file, " + H.S(t4.get$length(t3)) + "."));
      }
    },
    get$offset: function(receiver) {
      return this.offset;
    }
  };
  Y.FileSpan.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [V.SourceSpan];
    },
    $isSourceSpan: 1,
    $isSourceSpanBase: 1,
    $isSourceSpanMixin: 1,
    $isSourceSpanWithContext: 1
  };
  Y._FileSpan.prototype = {
    get$sourceUrl: function() {
      return J.get$url$z(this.file);
    },
    get$length: function(_) {
      return J.$sub$n(this._file$_end, this._file$_start);
    },
    get$start: function() {
      return Y.FileLocation$_(this.file, this._file$_start);
    },
    get$end: function() {
      return Y.FileLocation$_(this.file, this._file$_end);
    },
    get$text: function(_) {
      return this.file.getText$2(this._file$_start, this._file$_end);
    },
    get$context: function() {
      var t2, _this = this,
        t1 = _this.file,
        endOffset = _this._file$_end,
        endLine = t1.getLine$1(endOffset);
      if (t1.getColumn$1(endOffset) === 0 && endLine !== 0) {
        if (J.$eq$(_this.get$length(_this), 0)) {
          t2 = J.$sub$n(t1.get$lines(), 1);
          if (endLine == null ? t2 == null : endLine === t2)
            t1 = "";
          else {
            t2 = t1.getOffset$1(endLine);
            if (typeof endLine !== "number")
              return endLine.$add();
            t1 = t1.getText$2(t2, t1.getOffset$1(endLine + 1));
          }
          return t1;
        }
      } else {
        t2 = J.$sub$n(t1.get$lines(), 1);
        if (endLine == null ? t2 == null : endLine === t2)
          endOffset = J.get$length$asx(t1);
        else {
          if (typeof endLine !== "number")
            return endLine.$add();
          endOffset = t1.getOffset$1(endLine + 1);
        }
      }
      return t1.getText$2(t1.getOffset$1(t1.getLine$1(_this._file$_start)), endOffset);
    },
    _FileSpan$3: function(file, _start, _end) {
      var t4, t5,
        t1 = this._file$_end,
        t2 = this._file$_start,
        t3 = J.getInterceptor$n(t1);
      if (t3.$lt(t1, t2))
        throw H.wrapException(P.ArgumentError$("End " + H.S(t1) + " must come after start " + H.S(t2) + "."));
      else {
        t4 = this.file;
        t5 = J.getInterceptor$asx(t4);
        if (t3.$gt(t1, t5.get$length(t4)))
          throw H.wrapException(P.RangeError$("End " + H.S(t1) + " must not be greater than the number of characters in the file, " + H.S(t5.get$length(t4)) + "."));
        else if (J.$lt$n(t2, 0))
          throw H.wrapException(P.RangeError$("Start may not be negative, was " + H.S(t2) + "."));
      }
    },
    compareTo$1: function(_, other) {
      var result;
      H.interceptedTypeCheck(other, "$isSourceSpan");
      if (!(other instanceof Y._FileSpan))
        return this.super$SourceSpanMixin$compareTo(0, other);
      result = J.compareTo$1$ns(this._file$_start, other._file$_start);
      return result === 0 ? J.compareTo$1$ns(this._file$_end, other._file$_end) : result;
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!J.getInterceptor$(other).$isFileSpan)
        return _this.super$SourceSpanMixin$$eq(0, other);
      return J.$eq$(_this._file$_start, other._file$_start) && J.$eq$(_this._file$_end, other._file$_end) && J.$eq$(_this.get$sourceUrl(), other.get$sourceUrl());
    },
    get$hashCode: function(_) {
      return Y.SourceSpanMixin.prototype.get$hashCode.call(this, this);
    },
    $isFileSpan: 1,
    $isSourceSpanBase: 1,
    $isSourceSpanWithContext: 1
  };
  U.Highlighter.prototype = {
    get$_paddingAfterSidebar: function() {
      return this._multiline ? 3 : 1;
    },
    highlight$0: function() {
      var t1, t2, lineStart, context, lines, t3, lineNumber, t4, lastLineIndex, _this = this;
      _this._writeSidebar$1$end(K.downEnd());
      t1 = _this._highlighter$_buffer;
      t1.writeln$0();
      t2 = _this._highlighter$_span;
      lineStart = B.findLineStart(t2.get$context(), J.get$text$z(t2), t2.get$start().get$column());
      context = t2.get$context();
      if (typeof lineStart !== "number")
        return lineStart.$gt();
      if (lineStart > 0) {
        lines = J.split$1$s(J.getInterceptor$s(context).substring$2(context, 0, lineStart - 1), "\n");
        t3 = J.getInterceptor$asx(lines);
        lineNumber = J.$sub$n(t2.get$start().get$line(), t3.get$length(lines));
        for (t3 = t3.get$iterator(lines); t3.moveNext$0();) {
          t4 = t3.get$current();
          _this._writeSidebar$1$line(lineNumber);
          t1.write$1(C.JSString_methods.$mul(" ", _this.get$_paddingAfterSidebar()));
          _this._writeText$1(t4);
          t1.writeln$0();
          if (typeof lineNumber !== "number")
            return lineNumber.$add();
          ++lineNumber;
        }
        context = C.JSString_methods.substring$1(context, lineStart);
      }
      lines = H.setRuntimeTypeInfo(context.split("\n"), [P.String]);
      lastLineIndex = J.$sub$n(t2.get$end().get$line(), t2.get$start().get$line());
      if (J.get$isEmpty$asx(C.JSArray_methods.get$last(lines))) {
        t2 = lines.length;
        if (typeof lastLineIndex !== "number")
          return lastLineIndex.$add();
        t2 = t2 > lastLineIndex + 1;
      } else
        t2 = false;
      if (t2) {
        if (0 >= lines.length)
          return H.ioore(lines, -1);
        lines.pop();
      }
      _this._writeFirstLine$1(C.JSArray_methods.get$first(lines));
      if (_this._multiline) {
        t2 = C.JSArray_methods.skip$1(lines, 1);
        if (typeof lastLineIndex !== "number")
          return lastLineIndex.$sub();
        _this._writeIntermediateLines$1(J.take$1$ax(t2, lastLineIndex - 1));
        if (lastLineIndex < 0 || lastLineIndex >= lines.length)
          return H.ioore(lines, lastLineIndex);
        _this._writeLastLine$1(lines[lastLineIndex]);
      }
      if (typeof lastLineIndex !== "number")
        return lastLineIndex.$add();
      _this._writeTrailingLines$1(C.JSArray_methods.skip$1(lines, lastLineIndex + 1));
      _this._writeSidebar$1$end(K.upEnd());
      return J.toString$0$(t1);
    },
    _writeFirstLine$1: function(line) {
      var t2, t3, t4, t5, startColumn, endColumn, textBefore, textInside, tabsBefore, tabsInside, _this = this, t1 = {};
      H.stringTypeCheck(line);
      t2 = _this._highlighter$_span;
      _this._writeSidebar$1$line(t2.get$start().get$line());
      t3 = t2.get$start().get$column();
      t4 = line.length;
      t5 = P.int;
      startColumn = P.min(t3, t4, t5);
      t1.startColumn = startColumn;
      t3 = J.get$offset$z(t2.get$end());
      if (typeof startColumn !== "number")
        return startColumn.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t2 = J.get$offset$z(t2.get$start());
      if (typeof t2 !== "number")
        return H.iae(t2);
      endColumn = t1.endColumn = P.min(startColumn + t3 - t2, t4, t5);
      textBefore = J.substring$2$s(line, 0, startColumn);
      t2 = _this._multiline;
      if (t2 && _this._isOnlyWhitespace$1(textBefore)) {
        t1 = _this._highlighter$_buffer;
        t1.write$1(" ");
        _this._colorize$1(new U.Highlighter__writeFirstLine_closure(_this, line));
        t1.writeln$0();
        return;
      }
      t3 = _this._highlighter$_buffer;
      t3.write$1(C.JSString_methods.$mul(" ", _this.get$_paddingAfterSidebar()));
      _this._writeText$1(textBefore);
      textInside = C.JSString_methods.substring$2(line, startColumn, endColumn);
      _this._colorize$1(new U.Highlighter__writeFirstLine_closure0(_this, textInside));
      _this._writeText$1(C.JSString_methods.substring$1(line, endColumn));
      t3.writeln$0();
      tabsBefore = _this._countTabs$1(textBefore);
      tabsInside = _this._countTabs$1(textInside);
      if (typeof tabsBefore !== "number")
        return tabsBefore.$mul();
      startColumn += tabsBefore * 3;
      t1.startColumn = startColumn;
      if (typeof tabsInside !== "number")
        return H.iae(tabsInside);
      if (typeof endColumn !== "number")
        return endColumn.$add();
      t1.endColumn = endColumn + (tabsBefore + tabsInside) * 3;
      _this._writeSidebar$0();
      if (t2) {
        t3.write$1(" ");
        _this._colorize$1(new U.Highlighter__writeFirstLine_closure1(t1, _this));
      } else {
        t3.write$1(C.JSString_methods.$mul(" ", startColumn + 1));
        _this._colorize$1(new U.Highlighter__writeFirstLine_closure2(t1, _this));
      }
      t3.writeln$0();
    },
    _writeIntermediateLines$1: function(lines) {
      var lineNumber, t1, t2, t3, _this = this;
      H.assertSubtype(lines, "$isIterable", [P.String], "$asIterable");
      lineNumber = J.$add$ansx(_this._highlighter$_span.get$start().get$line(), 1);
      for (t1 = J.get$iterator$ax(lines), t2 = _this._highlighter$_buffer; t1.moveNext$0();) {
        t3 = t1.get$current();
        _this._writeSidebar$1$line(lineNumber);
        t2.write$1(" ");
        _this._colorize$1(new U.Highlighter__writeIntermediateLines_closure(_this, t3));
        t2.writeln$0();
        if (typeof lineNumber !== "number")
          return lineNumber.$add();
        ++lineNumber;
      }
    },
    _writeLastLine$1: function(line) {
      var t2, t3, endColumn, textInside, tabsInside, _this = this, t1 = {};
      H.stringTypeCheck(line);
      t2 = _this._highlighter$_span;
      _this._writeSidebar$1$line(t2.get$end().get$line());
      t2 = t2.get$end().get$column();
      t3 = line.length;
      endColumn = t1.endColumn = P.min(t2, t3, P.int);
      if (_this._multiline && endColumn === t3) {
        t1 = _this._highlighter$_buffer;
        t1.write$1(" ");
        _this._colorize$1(new U.Highlighter__writeLastLine_closure(_this, line));
        t1.writeln$0();
        return;
      }
      t2 = _this._highlighter$_buffer;
      t2.write$1(" ");
      textInside = J.substring$2$s(line, 0, endColumn);
      _this._colorize$1(new U.Highlighter__writeLastLine_closure0(_this, textInside));
      _this._writeText$1(C.JSString_methods.substring$1(line, endColumn));
      t2.writeln$0();
      tabsInside = _this._countTabs$1(textInside);
      if (typeof tabsInside !== "number")
        return tabsInside.$mul();
      if (typeof endColumn !== "number")
        return endColumn.$add();
      t1.endColumn = endColumn + tabsInside * 3;
      _this._writeSidebar$0();
      t2.write$1(" ");
      _this._colorize$1(new U.Highlighter__writeLastLine_closure1(t1, _this));
      t2.writeln$0();
    },
    _writeTrailingLines$1: function(lines) {
      var lineNumber, t1, t2, t3, _this = this;
      H.assertSubtype(lines, "$isIterable", [P.String], "$asIterable");
      lineNumber = J.$add$ansx(_this._highlighter$_span.get$end().get$line(), 1);
      for (t1 = J.get$iterator$ax(lines), t2 = _this._highlighter$_buffer; t1.moveNext$0();) {
        t3 = t1.get$current();
        _this._writeSidebar$1$line(lineNumber);
        t2.write$1(C.JSString_methods.$mul(" ", _this.get$_paddingAfterSidebar()));
        _this._writeText$1(t3);
        t2.writeln$0();
        if (typeof lineNumber !== "number")
          return lineNumber.$add();
        ++lineNumber;
      }
    },
    _writeText$1: function(text) {
      var t1, t2, t3;
      for (t1 = J.get$iterator$ax(J.get$codeUnits$s(H.stringTypeCheck(text))), t2 = this._highlighter$_buffer; t1.moveNext$0();) {
        t3 = t1.get$current();
        if (t3 === 9)
          t2.write$1(C.JSString_methods.$mul(" ", 4));
        else
          t2.writeCharCode$1(t3);
      }
    },
    _writeSidebar$2$end$line: function(end, line) {
      this._colorize$2$color(new U.Highlighter__writeSidebar_closure(this, H.intTypeCheck(line), H.stringTypeCheck(end)), "\x1b[34m");
    },
    _writeSidebar$1$end: function(end) {
      return this._writeSidebar$2$end$line(end, null);
    },
    _writeSidebar$1$line: function(line) {
      return this._writeSidebar$2$end$line(null, line);
    },
    _writeSidebar$0: function() {
      return this._writeSidebar$2$end$line(null, null);
    },
    _countTabs$1: function(text) {
      var t1, count;
      for (t1 = J.get$iterator$ax(J.get$codeUnits$s(H.stringTypeCheck(text))), count = 0; t1.moveNext$0();)
        if (t1.get$current() === 9)
          ++count;
      return count;
    },
    _isOnlyWhitespace$1: function(text) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(J.get$codeUnits$s(H.stringTypeCheck(text))); t1.moveNext$0();) {
        t2 = t1.get$current();
        if (t2 !== 32 && t2 !== 9)
          return false;
      }
      return true;
    },
    _colorize$2$color: function(callback, color) {
      var t1, t2;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      H.stringTypeCheck(color);
      t1 = this._color;
      t2 = t1 != null;
      if (t2) {
        t1 = color == null ? t1 : color;
        this._highlighter$_buffer.write$1(t1);
      }
      callback.call$0();
      if (t2)
        this._highlighter$_buffer.write$1("\x1b[0m");
    },
    _colorize$1: function(callback) {
      return this._colorize$2$color(callback, null);
    },
    get$_paddingBeforeSidebar: function() {
      return this._paddingBeforeSidebar;
    },
    get$_highlighter$_buffer: function() {
      return this._highlighter$_buffer;
    }
  };
  U.Highlighter__writeFirstLine_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1.get$_highlighter$_buffer().write$1(D.glyphOrAscii("\u250c", "/"));
      t1.get$_highlighter$_buffer().write$1(" ");
      t1._writeText$1(this.line);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  U.Highlighter__writeFirstLine_closure0.prototype = {
    call$0: function() {
      return this.$this._writeText$1(this.textInside);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  U.Highlighter__writeFirstLine_closure1.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1.get$_highlighter$_buffer().write$1(K.topLeftCorner());
      t1.get$_highlighter$_buffer().write$1(J.$mul$ns(K.horizontalLine(), J.$add$ansx(this._box_0.startColumn, 1)));
      t1.get$_highlighter$_buffer().write$1("^");
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  U.Highlighter__writeFirstLine_closure2.prototype = {
    call$0: function() {
      var t1 = this._box_0;
      return this.$this.get$_highlighter$_buffer().write$1(C.JSString_methods.$mul("^", P.max(J.$sub$n(t1.endColumn, t1.startColumn), 1, P.int)));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  U.Highlighter__writeIntermediateLines_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1.get$_highlighter$_buffer().write$1(K.verticalLine());
      t1.get$_highlighter$_buffer().write$1(" ");
      t1._writeText$1(this.line);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  U.Highlighter__writeLastLine_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1.get$_highlighter$_buffer().write$1(D.glyphOrAscii("\u2514", "\\"));
      t1.get$_highlighter$_buffer().write$1(" ");
      t1._writeText$1(this.line);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  U.Highlighter__writeLastLine_closure0.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1.get$_highlighter$_buffer().write$1(K.verticalLine());
      t1.get$_highlighter$_buffer().write$1(" ");
      t1._writeText$1(this.textInside);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  U.Highlighter__writeLastLine_closure1.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1.get$_highlighter$_buffer().write$1(K.bottomLeftCorner());
      t1.get$_highlighter$_buffer().write$1(J.$mul$ns(K.horizontalLine(), this._box_0.endColumn));
      t1.get$_highlighter$_buffer().write$1("^");
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  U.Highlighter__writeSidebar_closure.prototype = {
    call$0: function() {
      var t1 = this.line,
        t2 = this.$this;
      if (t1 != null)
        t2.get$_highlighter$_buffer().write$1(J.padRight$1$s(J.toString$0$(J.$add$ansx(t1, 1)), t2.get$_paddingBeforeSidebar()));
      else
        t2.get$_highlighter$_buffer().write$1(C.JSString_methods.$mul(" ", t2.get$_paddingBeforeSidebar()));
      t1 = t2.get$_highlighter$_buffer();
      t2 = this.end;
      t1.write$1(t2 == null ? K.verticalLine() : t2);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  V.SourceLocation.prototype = {
    get$toolString: function() {
      var source = this.sourceUrl;
      return H.S(source == null ? "unknown source" : source) + ":" + H.S(J.$add$ansx(this.line, 1)) + ":" + H.S(J.$add$ansx(this.column, 1));
    },
    SourceLocation$4$column$line$sourceUrl: function(offset, column, line, sourceUrl) {
      if (typeof offset !== "number")
        return offset.$lt();
      if (offset < 0)
        throw H.wrapException(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (line != null && line < 0)
        throw H.wrapException(P.RangeError$("Line may not be negative, was " + H.S(line) + "."));
      else if (column != null && column < 0)
        throw H.wrapException(P.RangeError$("Column may not be negative, was " + H.S(column) + "."));
    },
    distance$1: function(other) {
      var t1;
      H.interceptedTypeCheck(other, "$isSourceLocation");
      t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(t1) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
      return J.abs$0$in(J.$sub$n(this.offset, other.get$offset(other)));
    },
    compareTo$1: function(_, other) {
      var t1;
      H.interceptedTypeCheck(other, "$isSourceLocation");
      t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(t1) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
      return J.$sub$n(this.offset, other.get$offset(other));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor$(other).$isSourceLocation && J.$eq$(this.sourceUrl, other.get$sourceUrl()) && J.$eq$(this.offset, other.get$offset(other));
    },
    get$hashCode: function(_) {
      return J.$add$ansx(J.get$hashCode$(this.sourceUrl), this.offset);
    },
    toString$0: function(_) {
      var _this = this;
      return "<" + H.S(_this.get$runtimeType(_this)) + ": " + H.S(_this.offset) + " " + H.S(_this.get$toolString()) + ">";
    },
    $isComparable: 1,
    $asComparable: function() {
      return [V.SourceLocation];
    },
    get$sourceUrl: function() {
      return this.sourceUrl;
    },
    get$offset: function(receiver) {
      return this.offset;
    },
    get$line: function() {
      return this.line;
    },
    get$column: function() {
      return this.column;
    }
  };
  V.SourceLocationBase.prototype = {};
  D.SourceLocationMixin.prototype = {
    get$toolString: function() {
      var _this = this;
      return H.S(_this.get$sourceUrl() == null ? "unknown source" : _this.get$sourceUrl()) + ":" + H.S(J.$add$ansx(_this.get$line(), 1)) + ":" + H.S(J.$add$ansx(_this.get$column(), 1));
    },
    distance$1: function(other) {
      H.interceptedTypeCheck(other, "$isSourceLocation");
      if (!J.$eq$(this.get$sourceUrl(), other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(this.get$sourceUrl()) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
      return J.abs$0$in(J.$sub$n(this.offset, other.get$offset(other)));
    },
    compareTo$1: function(_, other) {
      H.interceptedTypeCheck(other, "$isSourceLocation");
      if (!J.$eq$(this.get$sourceUrl(), other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(this.get$sourceUrl()) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
      return J.$sub$n(this.offset, other.get$offset(other));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor$(other).$isSourceLocation && J.$eq$(this.get$sourceUrl(), other.get$sourceUrl()) && J.$eq$(this.offset, other.get$offset(other));
    },
    get$hashCode: function(_) {
      return J.$add$ansx(J.get$hashCode$(this.get$sourceUrl()), this.offset);
    },
    toString$0: function(_) {
      var _this = this;
      return "<" + H.S(_this.get$runtimeType(_this)) + ": " + H.S(_this.offset) + " " + H.S(_this.get$toolString()) + ">";
    },
    $isComparable: 1,
    $asComparable: function() {
      return [V.SourceLocation];
    },
    $isSourceLocation: 1
  };
  V.SourceSpan.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [V.SourceSpan];
    }
  };
  V.SourceSpanBase.prototype = {
    SourceSpanBase$3: function(start, end, text) {
      var t3,
        t1 = this.end,
        t2 = this.start;
      if (!J.$eq$(t1.get$sourceUrl(), t2.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(t2.get$sourceUrl()) + '" and  "' + H.S(t1.get$sourceUrl()) + "\" don't match."));
      else if (J.$lt$n(J.get$offset$z(t1), J.get$offset$z(t2)))
        throw H.wrapException(P.ArgumentError$("End " + H.S(t1) + " must come after start " + H.S(t2) + "."));
      else {
        t3 = this.text;
        if (!J.$eq$(J.get$length$asx(t3), t2.distance$1(t1)))
          throw H.wrapException(P.ArgumentError$('Text "' + H.S(t3) + '" must be ' + H.S(t2.distance$1(t1)) + " characters long."));
      }
    },
    get$start: function() {
      return this.start;
    },
    get$end: function() {
      return this.end;
    },
    get$text: function(receiver) {
      return this.text;
    }
  };
  G.SourceSpanException.prototype = {
    get$message: function(_) {
      return this._span_exception$_message;
    },
    get$span: function() {
      return this._span;
    },
    toString$0: function(_) {
      var _this = this;
      if (_this.get$span() == null)
        return _this.get$message(_this);
      return C.JSString_methods.$add("Error on ", J.message$2$color$x(_this.get$span(), _this.get$message(_this), null));
    },
    $isException: 1,
    message$2$color: function($receiver, arg0, arg1) {
      return this.get$message(this).call$2$color(arg0, arg1);
    }
  };
  G.SourceSpanFormatException.prototype = {
    get$source: function(_) {
      return this._span_exception$_source;
    },
    get$offset: function(_) {
      return this.get$span() == null ? null : J.get$offset$z(this.get$span().get$start());
    },
    $isFormatException: 1
  };
  Y.SourceSpanMixin.prototype = {
    get$sourceUrl: function() {
      return this.get$start().get$sourceUrl();
    },
    get$length: function(_) {
      return J.$sub$n(J.get$offset$z(this.get$end()), J.get$offset$z(this.get$start()));
    },
    compareTo$1: function(_, other) {
      var result;
      H.interceptedTypeCheck(other, "$isSourceSpan");
      result = J.compareTo$1$ns(this.get$start(), other.get$start());
      return result === 0 ? J.compareTo$1$ns(this.get$end(), other.get$end()) : result;
    },
    message$2$color: function(_, message, color) {
      var buffer, highlight, _this = this;
      H.stringTypeCheck(message);
      buffer = P.StringBuffer$("");
      buffer.write$1("line " + H.S(J.$add$ansx(_this.get$start().get$line(), 1)) + ", column " + H.S(J.$add$ansx(_this.get$start().get$column(), 1)));
      if (_this.get$sourceUrl() != null)
        buffer.write$1(" of " + H.S(D.prettyUri(_this.get$sourceUrl())));
      buffer.write$1(": " + H.S(message));
      highlight = _this.highlight$1$color(color);
      if (!J.get$isEmpty$asx(highlight)) {
        buffer.writeln$0();
        buffer.write$1(highlight);
      }
      return buffer.toString$0(0);
    },
    message$1: function($receiver, message) {
      return this.message$2$color($receiver, message, null);
    },
    highlight$1$color: function(color) {
      var _this = this;
      if (!_this.$isSourceSpanWithContext && J.$eq$(_this.get$length(_this), 0))
        return "";
      return U.Highlighter_Highlighter(_this, color).highlight$0();
    },
    highlight$0: function() {
      return this.highlight$1$color(null);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor$(other).$isSourceSpan && J.$eq$(this.get$start(), other.get$start()) && J.$eq$(this.get$end(), other.get$end());
    },
    get$hashCode: function(_) {
      var t1 = J.get$hashCode$(this.get$start()),
        t2 = J.get$hashCode$(this.get$end());
      if (typeof t2 !== "number")
        return H.iae(t2);
      return J.$add$ansx(t1, 31 * t2);
    },
    toString$0: function(_) {
      var _this = this;
      return "<" + H.S(_this.get$runtimeType(_this)) + ": from " + H.S(_this.get$start()) + " to " + H.S(_this.get$end()) + ' "' + H.S(_this.get$text(_this)) + '">';
    },
    $isComparable: 1,
    $asComparable: function() {
      return [V.SourceSpan];
    },
    $isSourceSpan: 1
  };
  X.SourceSpanWithContext.prototype = {
    get$context: function() {
      return this._context;
    },
    SourceSpanWithContext$4: function(start, end, text, _context) {
      var _this = this;
      if (!J.contains$1$asx(_this.get$context(), text))
        throw H.wrapException(P.ArgumentError$('The context line "' + H.S(_this.get$context()) + '" must contain "' + H.S(text) + '".'));
      if (B.findLineStart(_this.get$context(), text, start.get$column()) == null)
        throw H.wrapException(P.ArgumentError$('The span text "' + H.S(text) + '" must start at column ' + H.S(J.$add$ansx(start.get$column(), 1)) + ' in a line within "' + H.S(_this.get$context()) + '".'));
    }
  };
  M.SseClient.prototype = {
    SseClient$1: function(serverUrl) {
      var _this = this,
        clientId = F.Uuid$().v1$0();
      _this._eventSource = H.interceptedTypeCheck(W.EventSource_EventSource(H.S(serverUrl) + "?sseClientId=" + H.S(clientId), true), "$isEventSource");
      _this._serverUrl = H.S(serverUrl) + "?sseClientId=" + H.S(clientId);
      J.get$stream$z(_this._outgoingController).listen$2$onDone(_this.get$_onOutgoingMessage(), _this.get$_onOutgoingDone());
      J.addEventListener$2$x(_this._eventSource, "message", _this.get$_onIncomingMessage());
      J.addEventListener$2$x(_this._eventSource, "control", _this.get$_onIncomingControlMessage());
      J.get$onError$x(_this._eventSource).listen$1(_this._incomingController.get$addError());
    },
    get$onOpen: function(_) {
      return J.get$onOpen$x(this._eventSource);
    },
    get$sink: function() {
      return this._outgoingController.get$sink();
    },
    get$stream: function(_) {
      return J.get$stream$z(this._incomingController);
    },
    close$0: function(_) {
      var _this = this;
      J.close$0$x(_this._eventSource);
      J.close$0$x(_this._incomingController);
      J.close$0$x(_this._outgoingController);
      J.close$0$x(_this._client);
    },
    _onIncomingControlMessage$1: function(message) {
      var data;
      message = H.interceptedTypeCast(H.interceptedTypeCheck(message, "$isEvent"), "$isMessageEvent");
      data = (message && C.MessageEvent_methods).get$data(message);
      if (J.$eq$(data, "close"))
        this.close$0(0);
      else
        throw H.wrapException(P.UnsupportedError$('Illegal Control Message "' + H.S(data) + '"'));
    },
    _onIncomingMessage$1: function(message) {
      message = H.interceptedTypeCast(H.interceptedTypeCheck(message, "$isEvent"), "$isMessageEvent");
      J.add$1$ax(this._incomingController, H.stringTypeCast(P.jsonDecode(H.stringTypeCast((message && C.MessageEvent_methods).get$data(message)))));
    },
    _onOutgoingDone$0: function() {
      this.close$0(0);
    },
    _onOutgoingMessage$1: function(message) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(null),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, e, exception, encoded, $async$exception;
      var $async$_onOutgoingMessage$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              encoded = P.jsonEncode(message);
              $async$handler = 3;
              $async$goto = 6;
              return P._asyncAwait($async$self._client.post$2$body($async$self._serverUrl, encoded), $async$_onOutgoingMessage$1);
            case 6:
              // returning from await.
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              $async$self._logger.warning$1("Unable to encode outgoing message: " + H.S(e));
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return P._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$_onOutgoingMessage$1, $async$completer);
    },
    $asStreamChannel: function() {
      return [P.String];
    },
    $asStreamChannelMixin: function() {
      return [P.String];
    }
  };
  F.CloseGuaranteeChannel.prototype = {};
  F._CloseGuaranteeStream.prototype = {};
  F._CloseGuaranteeSink.prototype = {};
  L.DelegatingStreamChannel.prototype = {};
  F.Disconnector.prototype = {$isStreamChannelTransformer: 1,
    $asStreamChannelTransformer: function($T) {
      return [$T, $T];
    }
  };
  F._DisconnectorSink.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  K.GuaranteeChannel.prototype = {};
  K._GuaranteeSink.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  U.IsolateChannel.prototype = {};
  Y.JsonDocumentTransformer.prototype = {$isStreamChannelTransformer: 1,
    $asStreamChannelTransformer: function() {
      return [P.Object, P.String];
    }
  };
  D.MultiChannel.prototype = {$isStreamChannel: 1};
  D._MultiChannel.prototype = {$isMultiChannel: 1};
  D.VirtualChannel.prototype = {$isMultiChannel: 1};
  N.StreamChannelCompleter.prototype = {};
  B.StreamChannelController.prototype = {};
  Y.StreamChannelTransformer.prototype = {};
  M.TypeSafeStreamChannelTransformer.prototype = {$isStreamChannelTransformer: 1};
  R.StreamChannel.prototype = {};
  R._StreamChannel.prototype = {};
  R.StreamChannelMixin.prototype = {$isStreamChannel: 1};
  D.EagerSpanScanner.prototype = {};
  D._EagerSpanScannerState.prototype = {$isLineScannerState: 1};
  E.StringScannerException.prototype = {
    get$source: function(_) {
      return H.stringTypeCheck(G.SourceSpanFormatException.prototype.get$source.call(this, this));
    }
  };
  Z.LineScanner.prototype = {};
  Z.LineScannerState.prototype = {};
  R.RelativeSpanScanner.prototype = {$isLineScanner: 1, $isSpanScanner: 1};
  R._SpanScannerState.prototype = {$isLineScannerState: 1};
  S.SpanScanner.prototype = {$isLineScanner: 1};
  S._SpanScannerState0.prototype = {$isLineScannerState: 1};
  X.StringScanner.prototype = {
    get$position: function() {
      return this._string_scanner$_position;
    },
    set$position: function(position) {
      var t1;
      H.intTypeCheck(position);
      if (typeof position !== "number")
        return position.$lt();
      if (position >= 0) {
        t1 = J.get$length$asx(this.string);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = position > t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.ArgumentError$("Invalid position " + position));
      this._string_scanner$_position = position;
      this._lastMatch = null;
    },
    get$lastMatch: function() {
      var _this = this;
      if (!J.$eq$(_this._string_scanner$_position, _this._lastMatchPosition))
        _this._lastMatch = null;
      return _this._lastMatch;
    },
    get$isDone: function() {
      return J.$eq$(this.get$position(), J.get$length$asx(this.string));
    },
    StringScanner$3$position$sourceUrl: function(string, position, sourceUrl) {
      if (position != null)
        this.set$position(position);
    },
    scan$1: function(pattern) {
      var _this = this,
        success = _this.matches$1(0, H.stringSuperNativeTypeCheck(pattern, "$isPattern"));
      if (success)
        _this._lastMatchPosition = _this._string_scanner$_position = H.intTypeCheck(_this._lastMatch.get$end());
      return success;
    },
    expect$2$name: function(pattern, $name) {
      var t1, source;
      H.stringSuperNativeTypeCheck(pattern, "$isPattern");
      H.stringTypeCheck($name);
      if (this.scan$1(pattern))
        return;
      if ($name == null) {
        t1 = J.getInterceptor$(pattern);
        if (!!t1.$isRegExp) {
          source = pattern.pattern;
          $name = "/" + H.S(!$.$get$_slashAutoEscape() ? J.replaceAll$2$s(source, "/", "\\/") : source) + "/";
        } else
          $name = '"' + H.S(J.replaceAll$2$s(J.replaceAll$2$s(t1.toString$0(pattern), "\\", "\\\\"), '"', '\\"')) + '"';
      }
      this._fail$1($name);
    },
    expect$1: function(pattern) {
      return this.expect$2$name(pattern, null);
    },
    expectDone$0: function() {
      if (this.get$isDone())
        return;
      this._fail$1("no more input");
    },
    matches$1: function(_, pattern) {
      var _this = this,
        t1 = H.interceptedTypeCheck(J.matchAsPrefix$2$s(H.stringSuperNativeTypeCheck(pattern, "$isPattern"), _this.string, _this.get$position()), "$isMatch");
      _this._lastMatch = t1;
      _this._lastMatchPosition = H.intTypeCheck(_this._string_scanner$_position);
      return t1 != null;
    },
    substring$2: function(_, start, end) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (end == null)
        end = this.get$position();
      return J.substring$2$s(this.string, start, end);
    },
    substring$1: function($receiver, start) {
      return this.substring$2($receiver, start, null);
    },
    error$3$length$position: function(_, message, $length, position) {
      var t1, t2, match, sourceFile, _this = this;
      H.stringTypeCheck(message);
      H.intTypeCheck(position);
      H.intTypeCheck($length);
      t1 = _this.string;
      B.validateErrorArgs(t1, null, position, $length);
      t2 = position == null && $length == null;
      match = t2 ? _this.get$lastMatch() : null;
      if (position == null)
        position = match == null ? _this.get$position() : match.get$start();
      if ($length == null)
        $length = match == null ? 0 : J.$sub$n(match.get$end(), match.get$start());
      sourceFile = Y.SourceFile$fromString(t1, _this.sourceUrl);
      if (typeof position !== "number")
        return position.$add();
      if (typeof $length !== "number")
        return H.iae($length);
      throw H.wrapException(E.StringScannerException$(message, sourceFile.span$2(position, position + $length), t1));
    },
    error$1: function($receiver, message) {
      return this.error$3$length$position($receiver, message, null, null);
    },
    _fail$1: function($name) {
      this.error$3$length$position(0, "expected " + H.S(H.stringTypeCheck($name)) + ".", 0, this.get$position());
    },
    get$sourceUrl: function() {
      return this.sourceUrl;
    }
  };
  A.AsciiGlyphSet.prototype = {$isGlyphSet: 1};
  E.GlyphSet.prototype = {};
  K.UnicodeGlyphSet.prototype = {
    glyphOrAscii$2: function(glyph, alternative) {
      H.stringTypeCheck(glyph);
      H.stringTypeCheck(alternative);
      return glyph;
    },
    get$horizontalLine: function() {
      return "\u2500";
    },
    get$verticalLine: function() {
      return "\u2502";
    },
    get$topLeftCorner: function() {
      return "\u250c";
    },
    get$bottomLeftCorner: function() {
      return "\u2514";
    },
    get$upEnd: function() {
      return "\u2575";
    },
    get$downEnd: function() {
      return "\u2577";
    },
    $isGlyphSet: 1
  };
  N._TypedDataBuffer.prototype = {};
  N._IntBuffer.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $as_TypedDataBuffer: function() {
      return [P.int];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  N._FloatBuffer.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asListBase: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $asIterable: function() {
      return [P.double];
    },
    $asList: function() {
      return [P.double];
    },
    $as_TypedDataBuffer: function() {
      return [P.double];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.double];
    }
  };
  N.Uint8Buffer.prototype = {};
  N.Int8Buffer.prototype = {};
  N.Uint8ClampedBuffer.prototype = {};
  N.Uint16Buffer.prototype = {};
  N.Int16Buffer.prototype = {};
  N.Uint32Buffer.prototype = {};
  N.Int32Buffer.prototype = {};
  N.Uint64Buffer.prototype = {};
  N.Int64Buffer.prototype = {};
  N.Float32Buffer.prototype = {};
  N.Float64Buffer.prototype = {};
  N.Int32x4Buffer.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $asListBase: function() {
      return [P.Int32x4];
    },
    $asListMixin: function() {
      return [P.Int32x4];
    },
    $asIterable: function() {
      return [P.Int32x4];
    },
    $asList: function() {
      return [P.Int32x4];
    },
    $as_TypedDataBuffer: function() {
      return [P.Int32x4];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Int32x4];
    }
  };
  N.Float32x4Buffer.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $asListBase: function() {
      return [P.Float32x4];
    },
    $asListMixin: function() {
      return [P.Float32x4];
    },
    $asIterable: function() {
      return [P.Float32x4];
    },
    $asList: function() {
      return [P.Float32x4];
    },
    $as_TypedDataBuffer: function() {
      return [P.Float32x4];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Float32x4];
    }
  };
  F.Uuid.prototype = {
    Uuid$0: function() {
      var t2, i, hex, _this = this,
        t1 = new Array(256);
      t1.fixed$length = Array;
      t2 = P.String;
      _this.set$_byteToHex(H.setRuntimeTypeInfo(t1, [t2]));
      t1 = P.int;
      _this.set$_hexToByte(H.JsLinkedHashMap_JsLinkedHashMap$es6(t2, t1));
      for (t1 = [t1], i = 0; i < 256; ++i) {
        hex = H.setRuntimeTypeInfo([], t1);
        C.JSArray_methods.add$1(hex, i);
        J.$indexSet$ax(_this._byteToHex, i, C.C_HexCodec.encode$1(hex));
        J.$indexSet$ax(_this._hexToByte, J.$index$asx(_this._byteToHex, i), i);
      }
      t1 = U.UuidUtil_cryptoRNG();
      _this._seedBytes = t1;
      _this._nodeId = [J.$or$bn(J.$index$asx(t1, 0), 1), J.$index$asx(_this._seedBytes, 1), J.$index$asx(_this._seedBytes, 2), J.$index$asx(_this._seedBytes, 3), J.$index$asx(_this._seedBytes, 4), J.$index$asx(_this._seedBytes, 5)];
      _this._clockSeq = J.$and$bn(J.$or$bn(J.$shl$n(J.$index$asx(_this._seedBytes, 6), 8), J.$index$asx(_this._seedBytes, 7)), 262143);
    },
    unparse$1: function(buffer) {
      var t1, _this = this;
      H.assertSubtype(buffer, "$isList", [P.int], "$asList");
      t1 = J.getInterceptor$asx(buffer);
      return H.S(J.$index$asx(_this._byteToHex, t1.$index(buffer, 0))) + H.S(J.$index$asx(_this._byteToHex, t1.$index(buffer, 1))) + H.S(J.$index$asx(_this._byteToHex, t1.$index(buffer, 2))) + H.S(J.$index$asx(_this._byteToHex, t1.$index(buffer, 3))) + "-" + H.S(J.$index$asx(_this._byteToHex, t1.$index(buffer, 4))) + H.S(J.$index$asx(_this._byteToHex, t1.$index(buffer, 5))) + "-" + H.S(J.$index$asx(_this._byteToHex, t1.$index(buffer, 6))) + H.S(J.$index$asx(_this._byteToHex, t1.$index(buffer, 7))) + "-" + H.S(J.$index$asx(_this._byteToHex, t1.$index(buffer, 8))) + H.S(J.$index$asx(_this._byteToHex, t1.$index(buffer, 9))) + "-" + H.S(J.$index$asx(_this._byteToHex, t1.$index(buffer, 10))) + H.S(J.$index$asx(_this._byteToHex, t1.$index(buffer, 11))) + H.S(J.$index$asx(_this._byteToHex, t1.$index(buffer, 12))) + H.S(J.$index$asx(_this._byteToHex, t1.$index(buffer, 13))) + H.S(J.$index$asx(_this._byteToHex, t1.$index(buffer, 14))) + H.S(J.$index$asx(_this._byteToHex, t1.$index(buffer, 15)));
    },
    v1$0: function() {
      var buf, options, clockSeq, mSecs, nSecs, dt, t2, tl, tmh, node, n, _this = this,
        _s8_ = "clockSeq",
        _s5_ = "nSecs", _4294967296 = 4294967296,
        t1 = new Array(16);
      t1.fixed$length = Array;
      buf = H.setRuntimeTypeInfo(t1, [P.int]);
      options = H.JsLinkedHashMap_JsLinkedHashMap$es6(P.String, null);
      clockSeq = options.$index(0, _s8_) != null ? options.$index(0, _s8_) : _this._clockSeq;
      mSecs = options.$index(0, "mSecs") != null ? options.$index(0, "mSecs") : P.DateTime$now().get$millisecondsSinceEpoch();
      nSecs = options.$index(0, _s5_) != null ? options.$index(0, _s5_) : J.$add$ansx(_this._lastNSecs, 1);
      t1 = J.getInterceptor$n(mSecs);
      dt = J.$add$ansx(t1.$sub(mSecs, _this._lastMSecs), J.$div$n(J.$sub$n(nSecs, _this._lastNSecs), 10000));
      t2 = J.getInterceptor$n(dt);
      if (H.boolTypeCheck(t2.$lt(dt, 0)) && options.$index(0, _s8_) == null)
        clockSeq = J.$and$bn(J.$add$ansx(clockSeq, 1), 16383);
      if ((H.boolTypeCheck(t2.$lt(dt, 0)) || H.boolTypeCheck(t1.$gt(mSecs, _this._lastMSecs))) && options.$index(0, _s5_) == null)
        nSecs = 0;
      if (H.boolTypeCheck(J.$ge$n(nSecs, 10000)))
        throw H.wrapException(P.Exception_Exception("uuid.v1(): Can't create more than 10M uuids/sec"));
      H.intTypeCheck(mSecs);
      _this._lastMSecs = mSecs;
      H.intTypeCheck(nSecs);
      _this._lastNSecs = nSecs;
      _this._clockSeq = clockSeq;
      mSecs += 122192928e5;
      tl = C.JSInt_methods.$mod((mSecs & 268435455) * 10000 + nSecs, _4294967296);
      C.JSArray_methods.$indexSet(buf, 0, C.JSInt_methods._shrOtherPositive$1(tl, 24) & 255);
      C.JSArray_methods.$indexSet(buf, 1, C.JSInt_methods._shrOtherPositive$1(tl, 16) & 255);
      C.JSArray_methods.$indexSet(buf, 2, C.JSInt_methods._shrOtherPositive$1(tl, 8) & 255);
      C.JSArray_methods.$indexSet(buf, 3, tl & 255);
      tmh = C.JSInt_methods._tdivFast$1(mSecs, _4294967296) * 10000 & 268435455;
      C.JSArray_methods.$indexSet(buf, 4, tmh >>> 8 & 255);
      C.JSArray_methods.$indexSet(buf, 5, tmh & 255);
      C.JSArray_methods.$indexSet(buf, 6, tmh >>> 24 & 15 | 16);
      C.JSArray_methods.$indexSet(buf, 7, tmh >>> 16 & 255);
      t1 = J.getInterceptor$n(clockSeq);
      C.JSArray_methods.$indexSet(buf, 8, H.intTypeCheck(J.$or$bn(t1.$shr(clockSeq, 8), 128)));
      C.JSArray_methods.$indexSet(buf, 9, H.intTypeCheck(t1.$and(clockSeq, 255)));
      node = options.$index(0, "node") != null ? options.$index(0, "node") : _this._nodeId;
      for (t1 = J.getInterceptor$asx(node), n = 0; n < 6; ++n)
        C.JSArray_methods.$indexSet(buf, 10 + n, H.intTypeCheck(t1.$index(node, n)));
      return _this.unparse$1(buf);
    },
    set$_byteToHex: function(_byteToHex) {
      this._byteToHex = H.assertSubtype(_byteToHex, "$isList", [P.String], "$asList");
    },
    set$_hexToByte: function(_hexToByte) {
      this._hexToByte = H.assertSubtype(_hexToByte, "$isMap", [P.String, P.int], "$asMap");
    }
  };
  U.UuidUtil.prototype = {};
  E.ConnectRequest.prototype = {$isBuilt: 1,
    $asBuilt: function() {
      return [E.ConnectRequest, E.ConnectRequestBuilder];
    }
  };
  E._$ConnectRequestSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(object, "$isConnectRequest");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return H.setRuntimeTypeInfo(["appId", serializers.serialize$2$specifiedType(object.appId, C.FullType_aZ8), "instanceId", serializers.serialize$2$specifiedType(object.instanceId, C.FullType_aZ8)], [P.Object]);
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var result, iterator, key, value;
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.listSuperNativeTypeCheck(serialized, "$isIterable");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      result = E.ConnectRequestBuilder$();
      iterator = J.get$iterator$ax(serialized);
      for (; iterator.moveNext$0();) {
        key = H.stringTypeCast(iterator.get$current());
        iterator.moveNext$0();
        value = iterator.get$current();
        switch (key) {
          case "appId":
            result.set$appId(H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8)));
            break;
          case "instanceId":
            result.set$instanceId(H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8)));
            break;
        }
      }
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [E.ConnectRequest];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [E.ConnectRequest];
    },
    get$types: function() {
      return C.List_ssp;
    },
    get$wireName: function() {
      return "ConnectRequest";
    }
  };
  E._$ConnectRequest.prototype = {
    _$ConnectRequest$_$2$appId$instanceId: function(appId, instanceId) {
      var _s14_ = "ConnectRequest";
      if (this.appId == null)
        throw H.wrapException(Y.BuiltValueNullFieldError$(_s14_, "appId"));
      if (this.instanceId == null)
        throw H.wrapException(Y.BuiltValueNullFieldError$(_s14_, "instanceId"));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      return other instanceof E.ConnectRequest && J.$eq$(this.appId, other.appId) && J.$eq$(this.instanceId, other.instanceId);
    },
    get$hashCode: function(_) {
      return Y.$jf(Y.$jc(Y.$jc(0, J.get$hashCode$(this.appId)), J.get$hashCode$(this.instanceId)));
    },
    toString$0: function(_) {
      var t1 = $.$get$newBuiltValueToStringHelper().call$1("ConnectRequest"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "appId", this.appId);
      t2.add$2(t1, "instanceId", this.instanceId);
      return t2.toString$0(t1);
    },
    get$appId: function() {
      return this.appId;
    },
    get$instanceId: function() {
      return this.instanceId;
    }
  };
  E.ConnectRequestBuilder.prototype = {
    get$appId: function() {
      return this.get$_connect_request$_$this().get$_connect_request$_appId();
    },
    set$appId: function(appId) {
      H.stringTypeCheck(appId);
      this.get$_connect_request$_$this().set$_connect_request$_appId(appId);
    },
    get$instanceId: function() {
      return this.get$_connect_request$_$this().get$_connect_request$_instanceId();
    },
    set$instanceId: function(instanceId) {
      H.stringTypeCheck(instanceId);
      this.get$_connect_request$_$this().set$_connect_request$_instanceId(instanceId);
    },
    get$_connect_request$_$this: function() {
      var _this = this,
        t1 = _this._connect_request$_$v;
      if (t1 != null) {
        _this._connect_request$_appId = H.stringTypeCheck(t1.get$appId());
        _this._connect_request$_instanceId = H.stringTypeCheck(_this._connect_request$_$v.get$instanceId());
        _this._connect_request$_$v = null;
      }
      return _this;
    },
    replace$1: function(_, other) {
      H.interceptedTypeCheck(other, "$isConnectRequest");
      if (other == null)
        throw H.wrapException(P.ArgumentError$notNull("other"));
      this._connect_request$_$v = other;
    },
    update$1: function(updates) {
      H.functionTypeCheck(updates, {func: 1, ret: -1, args: [E.ConnectRequestBuilder]});
      if (updates != null)
        updates.call$1(this);
    },
    build$0: function() {
      var _this = this,
        _$result = _this._connect_request$_$v;
      if (_$result == null)
        _$result = E._$ConnectRequest$_(_this.get$appId(), _this.get$instanceId());
      _this.replace$1(0, _$result);
      return _$result;
    },
    set$_connect_request$_appId: function(_appId) {
      this._connect_request$_appId = H.stringTypeCheck(_appId);
    },
    set$_connect_request$_instanceId: function(_instanceId) {
      this._connect_request$_instanceId = H.stringTypeCheck(_instanceId);
    },
    $isBuilder: 1,
    $asBuilder: function() {
      return [E.ConnectRequest, E.ConnectRequestBuilder];
    },
    get$_connect_request$_appId: function() {
      return this._connect_request$_appId;
    },
    get$_connect_request$_instanceId: function() {
      return this._connect_request$_instanceId;
    }
  };
  M.DevToolsRequest.prototype = {$isBuilt: 1,
    $asBuilt: function() {
      return [M.DevToolsRequest, M.DevToolsRequestBuilder];
    }
  };
  M.DevToolsResponse.prototype = {$isBuilt: 1,
    $asBuilt: function() {
      return [M.DevToolsResponse, M.DevToolsResponseBuilder];
    }
  };
  M._$DevToolsRequestSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(object, "$isDevToolsRequest");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return H.setRuntimeTypeInfo(["appId", serializers.serialize$2$specifiedType(object.appId, C.FullType_aZ8), "instanceId", serializers.serialize$2$specifiedType(object.instanceId, C.FullType_aZ8)], [P.Object]);
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var result, iterator, key, value;
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.listSuperNativeTypeCheck(serialized, "$isIterable");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      result = M.DevToolsRequestBuilder$();
      iterator = J.get$iterator$ax(serialized);
      for (; iterator.moveNext$0();) {
        key = H.stringTypeCast(iterator.get$current());
        iterator.moveNext$0();
        value = iterator.get$current();
        switch (key) {
          case "appId":
            result.set$appId(H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8)));
            break;
          case "instanceId":
            result.set$instanceId(H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8)));
            break;
        }
      }
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [M.DevToolsRequest];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [M.DevToolsRequest];
    },
    get$types: function() {
      return C.List_BCG;
    },
    get$wireName: function() {
      return "DevToolsRequest";
    }
  };
  M._$DevToolsResponseSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      var result, t1;
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(object, "$isDevToolsResponse");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      result = H.setRuntimeTypeInfo(["success", serializers.serialize$2$specifiedType(object.success, C.FullType_6bM)], [P.Object]);
      t1 = object.error;
      if (t1 != null) {
        C.JSArray_methods.add$1(result, "error");
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(t1, C.FullType_aZ8));
      }
      return result;
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var result, iterator, key, value;
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.listSuperNativeTypeCheck(serialized, "$isIterable");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      result = M.DevToolsResponseBuilder$();
      iterator = J.get$iterator$ax(serialized);
      for (; iterator.moveNext$0();) {
        key = H.stringTypeCast(iterator.get$current());
        iterator.moveNext$0();
        value = iterator.get$current();
        switch (key) {
          case "success":
            result.set$success(H.boolTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_6bM)));
            break;
          case "error":
            result.set$error(0, H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8)));
            break;
        }
      }
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [M.DevToolsResponse];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [M.DevToolsResponse];
    },
    get$types: function() {
      return C.List_41A;
    },
    get$wireName: function() {
      return "DevToolsResponse";
    }
  };
  M._$DevToolsRequest.prototype = {
    _$DevToolsRequest$_$2$appId$instanceId: function(appId, instanceId) {
      var _s15_ = "DevToolsRequest";
      if (this.appId == null)
        throw H.wrapException(Y.BuiltValueNullFieldError$(_s15_, "appId"));
      if (this.instanceId == null)
        throw H.wrapException(Y.BuiltValueNullFieldError$(_s15_, "instanceId"));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      return other instanceof M.DevToolsRequest && J.$eq$(this.appId, other.appId) && J.$eq$(this.instanceId, other.instanceId);
    },
    get$hashCode: function(_) {
      return Y.$jf(Y.$jc(Y.$jc(0, J.get$hashCode$(this.appId)), J.get$hashCode$(this.instanceId)));
    },
    toString$0: function(_) {
      var t1 = $.$get$newBuiltValueToStringHelper().call$1("DevToolsRequest"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "appId", this.appId);
      t2.add$2(t1, "instanceId", this.instanceId);
      return t2.toString$0(t1);
    },
    get$appId: function() {
      return this.appId;
    },
    get$instanceId: function() {
      return this.instanceId;
    }
  };
  M.DevToolsRequestBuilder.prototype = {
    get$appId: function() {
      return this.get$_$this().get$_appId();
    },
    set$appId: function(appId) {
      H.stringTypeCheck(appId);
      this.get$_$this().set$_appId(appId);
    },
    get$instanceId: function() {
      return this.get$_$this().get$_instanceId();
    },
    set$instanceId: function(instanceId) {
      H.stringTypeCheck(instanceId);
      this.get$_$this().set$_instanceId(instanceId);
    },
    get$_$this: function() {
      var _this = this,
        t1 = _this._$v;
      if (t1 != null) {
        _this._appId = H.stringTypeCheck(t1.get$appId());
        _this._instanceId = H.stringTypeCheck(_this._$v.get$instanceId());
        _this._$v = null;
      }
      return _this;
    },
    replace$1: function(_, other) {
      H.interceptedTypeCheck(other, "$isDevToolsRequest");
      if (other == null)
        throw H.wrapException(P.ArgumentError$notNull("other"));
      this._$v = other;
    },
    update$1: function(updates) {
      H.functionTypeCheck(updates, {func: 1, ret: -1, args: [M.DevToolsRequestBuilder]});
      if (updates != null)
        updates.call$1(this);
    },
    build$0: function() {
      var _this = this,
        _$result = _this._$v;
      if (_$result == null)
        _$result = M._$DevToolsRequest$_(_this.get$appId(), _this.get$instanceId());
      _this.replace$1(0, _$result);
      return _$result;
    },
    set$_appId: function(_appId) {
      this._appId = H.stringTypeCheck(_appId);
    },
    set$_instanceId: function(_instanceId) {
      this._instanceId = H.stringTypeCheck(_instanceId);
    },
    $isBuilder: 1,
    $asBuilder: function() {
      return [M.DevToolsRequest, M.DevToolsRequestBuilder];
    },
    get$_appId: function() {
      return this._appId;
    },
    get$_instanceId: function() {
      return this._instanceId;
    }
  };
  M._$DevToolsResponse.prototype = {
    _$DevToolsResponse$_$2$error$success: function(error, success) {
      if (this.success == null)
        throw H.wrapException(Y.BuiltValueNullFieldError$("DevToolsResponse", "success"));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      return other instanceof M.DevToolsResponse && J.$eq$(this.success, other.success) && J.$eq$(this.error, other.error);
    },
    get$hashCode: function(_) {
      return Y.$jf(Y.$jc(Y.$jc(0, J.get$hashCode$(this.success)), J.get$hashCode$(this.error)));
    },
    toString$0: function(_) {
      var t1 = $.$get$newBuiltValueToStringHelper().call$1("DevToolsResponse"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "success", this.success);
      t2.add$2(t1, "error", this.error);
      return t2.toString$0(t1);
    },
    get$success: function() {
      return this.success;
    },
    get$error: function(receiver) {
      return this.error;
    }
  };
  M.DevToolsResponseBuilder.prototype = {
    get$success: function() {
      return this.get$_$this().get$_success();
    },
    set$success: function(success) {
      H.boolTypeCheck(success);
      this.get$_$this().set$_success(success);
    },
    get$error: function(_) {
      return this.get$_$this().get$_devtools_request$_error();
    },
    set$error: function(_, error) {
      H.stringTypeCheck(error);
      this.get$_$this().set$_devtools_request$_error(error);
    },
    get$_$this: function() {
      var _this = this,
        t1 = _this._$v;
      if (t1 != null) {
        _this._success = H.boolTypeCheck(t1.get$success());
        _this._devtools_request$_error = H.stringTypeCheck(J.get$error$z(_this._$v));
        _this._$v = null;
      }
      return _this;
    },
    replace$1: function(_, other) {
      H.interceptedTypeCheck(other, "$isDevToolsResponse");
      if (other == null)
        throw H.wrapException(P.ArgumentError$notNull("other"));
      this._$v = other;
    },
    build$0: function() {
      var t1, _this = this,
        _$result = _this._$v;
      if (_$result == null) {
        t1 = _this.get$success();
        _$result = M._$DevToolsResponse$_(_this.get$error(_this), t1);
      }
      _this.replace$1(0, _$result);
      return _$result;
    },
    set$_success: function(_success) {
      this._success = H.boolTypeCheck(_success);
    },
    set$_devtools_request$_error: function(_error) {
      this._devtools_request$_error = H.stringTypeCheck(_error);
    },
    $isBuilder: 1,
    $asBuilder: function() {
      return [M.DevToolsResponse, M.DevToolsResponseBuilder];
    },
    get$_success: function() {
      return this._success;
    },
    get$_devtools_request$_error: function() {
      return this._devtools_request$_error;
    }
  };
  A.RunRequest.prototype = {$isBuilt: 1,
    $asBuilt: function() {
      return [A.RunRequest, A.RunRequestBuilder];
    }
  };
  A._$RunRequestSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.interceptedTypeCheck(object, "$isRunRequest");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return H.setRuntimeTypeInfo([], [P.Object]);
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      H.interceptedTypeCheck(serializers, "$isSerializers");
      H.listSuperNativeTypeCheck(serialized, "$isIterable");
      H.interceptedTypeCheck(specifiedType, "$isFullType");
      return A.RunRequestBuilder$().build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [A.RunRequest];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [A.RunRequest];
    },
    get$types: function() {
      return C.List_wsa;
    },
    get$wireName: function() {
      return "RunRequest";
    }
  };
  A._$RunRequest.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      return other instanceof A.RunRequest;
    },
    get$hashCode: function(_) {
      return 248087772;
    },
    toString$0: function(_) {
      return J.toString$0$($.$get$newBuiltValueToStringHelper().call$1("RunRequest"));
    }
  };
  A.RunRequestBuilder.prototype = {
    replace$1: function(_, other) {
      H.interceptedTypeCheck(other, "$isRunRequest");
      if (other == null)
        throw H.wrapException(P.ArgumentError$notNull("other"));
      this._run_request$_$v = other;
    },
    build$0: function() {
      var _$result = this._run_request$_$v;
      if (_$result == null)
        _$result = A._$RunRequest$_();
      this.replace$1(0, _$result);
      return _$result;
    },
    $isBuilder: 1,
    $asBuilder: function() {
      return [A.RunRequest, A.RunRequestBuilder];
    }
  };
  D.main_closure.prototype = {
    call$1: function(module) {
      var t1;
      H.stringTypeCheck(module);
      t1 = J.$get$1$x(J.get$moduleParentsGraph$x(self.$dartLoader), module);
      return t1 == null ? null : J.cast$1$0$ax(t1, P.String);
    },
    $signature: 62
  };
  D.main_closure0.prototype = {
    call$0: function() {
      return D.keys(J.get$moduleParentsGraph$x(self.$dartLoader), P.String, [P.List, P.String]);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 63
  };
  D.main_closure1.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.Null),
        $async$self = this, t1, t2, t3, newDigests, modulesToLoad;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(D._getDigests(), $async$call$0);
            case 2:
              // returning from await.
              newDigests = $async$result;
              modulesToLoad = H.setRuntimeTypeInfo([], [P.String]);
              for (t1 = J.get$iterator$ax(newDigests.get$keys(newDigests)), t2 = $async$self._box_0; t1.moveNext$0();) {
                t3 = t1.get$current();
                if (!t2.currentDigests.containsKey$1(t3) || !J.$eq$(J.$index$asx(t2.currentDigests, t3), newDigests.$index(0, t3)))
                  C.JSArray_methods.add$1(modulesToLoad, J.replaceFirst$2$s(t3, ".js", ""));
              }
              t2.currentDigests = newDigests;
              $async$goto = C.JSArray_methods.get$isNotEmpty(modulesToLoad) ? 3 : 4;
              break;
            case 3:
              // then
              t1 = $async$self.manager;
              t1.updateGraph$0();
              $async$goto = 5;
              return P._asyncAwait(J.reload$1$x(t1, modulesToLoad), $async$call$0);
            case 5:
              // returning from await.
            case 4:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 64
  };
  D.main_closure2.prototype = {
    call$1: function(serialized) {
      return this.$call$body$main_closure(H.stringTypeCheck(serialized));
    },
    $call$body$main_closure: function(serialized) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.Null),
        $event, t1;
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $event = $.$get$serializers().deserialize$1(P.jsonDecode(serialized));
              t1 = J.getInterceptor$($event);
              $async$goto = !!t1.$isDefaultBuildResult ? 2 : 4;
              break;
            case 2:
              // then
              $async$goto = J.$eq$(self.$dartReloadConfiguration, "ReloadConfiguration.liveReload") ? 5 : 7;
              break;
            case 5:
              // then
              J.reload$0$x(J.get$location$x(W.window()));
              // goto join
              $async$goto = 6;
              break;
            case 7:
              // else
              $async$goto = J.$eq$(self.$dartReloadConfiguration, "ReloadConfiguration.hotRestart") ? 8 : 10;
              break;
            case 8:
              // then
              $async$goto = 11;
              return P._asyncAwait(self.$dartHotRestart.call$0(), $async$call$1);
            case 11:
              // returning from await.
              // goto join
              $async$goto = 9;
              break;
            case 10:
              // else
              if (J.$eq$(self.$dartReloadConfiguration, "ReloadConfiguration.hotReload"))
                P.print("Hot reload is currently unsupported. Ignoring change.");
            case 9:
              // join
            case 6:
              // join
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              if (!!t1.$isDevToolsResponse) {
                if (!$event.success)
                  J.alert$1$x(W.window(), "DevTools failed to open with: " + H.S($event.error));
              } else if (!!t1.$isRunRequest)
                self.$dartRunMain.call$0();
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 65
  };
  D.main_closure3.prototype = {
    call$1: function(e) {
      H.interceptedTypeCheck(e, "$isKeyboardEvent");
      if (C.JSArray_methods.contains$1(C.List_zgw, e.key) && e.altKey && !e.ctrlKey && !e.metaKey) {
        (e && C.KeyboardEvent_methods).preventDefault$0(e);
        J.add$1$ax(this.client.get$sink(), P.jsonEncode($.$get$serializers().serialize$1(M._$DevToolsRequest__$DevToolsRequest(new D.main__closure()))));
      }
    },
    $signature: 66
  };
  D.main__closure.prototype = {
    call$1: function(b) {
      H.interceptedTypeCheck(b, "$isDevToolsRequestBuilder");
      b.set$appId(self.$dartAppId);
      b.set$instanceId(self.$dartAppInstanceId);
      return b;
    },
    $signature: 67
  };
  D.main_closure4.prototype = {
    call$1: function(b) {
      H.interceptedTypeCheck(b, "$isConnectRequestBuilder");
      b.set$appId(self.$dartAppId);
      b.set$instanceId(self.$dartAppInstanceId);
      return b;
    },
    $signature: 68
  };
  D._moduleLibraries_closure.prototype = {
    call$1: function(x) {
      return D.LibraryWrapper$(H.interceptedTypeCheck(x, "$isHotReloadableLibrary"));
    },
    $signature: 69
  };
  D._reloadModule_closure.prototype = {
    call$0: function() {
      this.completer.complete$1(D._moduleLibraries(this.moduleId));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  D._reloadModule_closure0.prototype = {
    call$1: function(e) {
      return this.completer.completeError$2(L.HotReloadFailedException$(J.get$message$x(H.interceptedTypeCheck(e, "$isJsError"))), this.stackTrace);
    },
    $signature: 70
  };
  D.DartLoader.prototype = {};
  D.HotReloadableLibrary.prototype = {};
  D.JsError.prototype = {};
  D.JsMap.prototype = {};
  D.LibraryWrapper.prototype = {
    onChildUpdate$3: function(childId, child, data) {
      var t1;
      H.stringTypeCheck(childId);
      H.interceptedTypeCheck(child, "$isLibrary");
      t1 = this._internal;
      if (t1 != null && P.hasProperty(t1, "hot$onChildUpdate"))
        return J.hot$onChildUpdate$3$x(t1, childId, child._internal, data);
      return;
    },
    onDestroy$0: function() {
      var t1 = this._internal;
      if (t1 != null && P.hasProperty(t1, "hot$onDestroy"))
        return J.hot$onDestroy$0$x(t1);
      return;
    },
    onSelfUpdate$1: function(data) {
      var t1 = this._internal;
      if (t1 != null && P.hasProperty(t1, "hot$onSelfUpdate"))
        return J.hot$onSelfUpdate$1$x(t1, data);
      return;
    },
    $isLibrary: 1
  };
  G.Library.prototype = {};
  G.Module.prototype = {
    onDestroy$0: function() {
      var t1, t2, t3, t4,
        data = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.Object);
      for (t1 = this.libraries, t2 = J.getInterceptor$x(t1), t3 = J.get$iterator$ax(t2.get$keys(t1)); t3.moveNext$0();) {
        t4 = t3.get$current();
        data.$indexSet(0, t4, t2.$index(t1, t4).onDestroy$0());
      }
      return data;
    },
    onSelfUpdate$1: function(data) {
      var t1, t2, t3, result, t4, success;
      H.assertSubtype(data, "$isMap", [P.String, P.Object], "$asMap");
      for (t1 = this.libraries, t2 = J.getInterceptor$x(t1), t3 = J.get$iterator$ax(t2.get$keys(t1)), result = true; t3.moveNext$0();) {
        t4 = t3.get$current();
        success = t2.$index(t1, t4).onSelfUpdate$1(data.$index(0, t4));
        if (success === false)
          return false;
        else if (success == null)
          result = success;
      }
      return result;
    },
    onChildUpdate$3: function(childId, child, data) {
      var t1, t2, t3, result, t4, t5, t6, t7, t8, success;
      H.stringTypeCheck(childId);
      H.interceptedTypeCheck(child, "$isModule");
      H.assertSubtype(data, "$isMap", [P.String, P.Object], "$asMap");
      for (t1 = this.libraries, t2 = J.getInterceptor$x(t1), t3 = J.get$iterator$ax(t2.get$keys(t1)), result = true; t3.moveNext$0();) {
        t4 = t3.get$current();
        for (t5 = child.libraries, t6 = J.getInterceptor$x(t5), t7 = J.get$iterator$ax(t6.get$keys(t5)); t7.moveNext$0();) {
          t8 = t7.get$current();
          success = t2.$index(t1, t4).onChildUpdate$3(t8, t6.$index(t5, t8), data.$index(0, t8));
          if (success === false)
            return false;
          else if (success == null)
            result = success;
        }
      }
      return result;
    }
  };
  L.HotReloadFailedException.prototype = {
    toString$0: function(_) {
      return "HotReloadFailedException: '" + H.S(this._s) + "'";
    },
    $isException: 1
  };
  L.ReloadingManager.prototype = {
    moduleTopologicalCompare$2: function(module1, module2) {
      var t1, t2, topological;
      H.stringTypeCheck(module1);
      H.stringTypeCheck(module2);
      t1 = this._moduleOrdering;
      t2 = J.getInterceptor$asx(t1);
      topological = P.Comparable_compare(t2.$index(t1, module2), t2.$index(t1, module1));
      return topological !== 0 ? topological : J.compareTo$1$ns(module1, module2);
    },
    updateGraph$0: function() {
      var t3, i, t4,
        stronglyConnectedComponents = L.stronglyConnectedComponents(this._allModules.call$0(), this._moduleParents, P.String),
        t1 = this._moduleOrdering,
        t2 = J.getInterceptor$ax(t1);
      t2.clear$0(t1);
      t3 = J.getInterceptor$asx(stronglyConnectedComponents);
      i = 0;
      while (true) {
        t4 = t3.get$length(stronglyConnectedComponents);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i < t4))
          break;
        for (t4 = J.get$iterator$ax(t3.$index(stronglyConnectedComponents, i)); t4.moveNext$0();)
          t2.$indexSet(t1, t4.get$current(), i);
        ++i;
      }
    },
    ReloadingManager$5: function(_reloadModule, _moduleLibraries, _reloadPage, _moduleParents, _allModules) {
      this.set$_dirtyModules(P.SplayTreeSet$(this.get$moduleTopologicalCompare(), null, P.String));
    },
    reload$1: function(_, modules) {
      return this.reload$body$ReloadingManager(_, H.assertSubtype(modules, "$isList", [P.String], "$asList"));
    },
    reload$body$ReloadingManager: function(_, modules) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(-1),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, reloadedModules, moduleId, existing, data, newVersion, success, parentIds, parentId, parentModule, e, t1, t2, t3, t4, t5, exception, $async$exception;
      var $async$reload$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                J.addAll$1$ax($async$self._dirtyModules, modules);
                $async$goto = !$async$self._running.get$isCompleted() ? 3 : 4;
                break;
              case 3:
                // then
                $async$goto = 5;
                return P._asyncAwait($async$self._running.get$future(), $async$reload$1);
              case 5:
                // returning from await.
                $async$returnValue = $async$result;
                // goto return
                $async$goto = 1;
                break;
              case 4:
                // join
                $async$self.set$_running(P.Completer_Completer(-1));
                reloadedModules = 0;
                $async$handler = 7;
                t1 = $async$self._moduleLibraries, t2 = $async$self.get$moduleTopologicalCompare(), t3 = $async$self._moduleParents, t4 = $async$self._reloadModule;
              case 10:
                // for condition
                if (!J.get$isNotEmpty$asx($async$self._dirtyModules)) {
                  // goto after for
                  $async$goto = 11;
                  break;
                }
                moduleId = J.get$first$ax($async$self._dirtyModules);
                J.remove$1$z($async$self._dirtyModules, moduleId);
                reloadedModules = J.$add$ansx(reloadedModules, 1);
                existing = t1.call$1(moduleId);
                data = existing.onDestroy$0();
                $async$goto = 12;
                return P._asyncAwait(t4.call$1(moduleId), $async$reload$1);
              case 12:
                // returning from await.
                newVersion = $async$result;
                success = newVersion.onSelfUpdate$1(data);
                if (J.$eq$(success, true)) {
                  // goto for condition
                  $async$goto = 10;
                  break;
                }
                if (J.$eq$(success, false)) {
                  P.print("Module '" + H.S(moduleId) + "' is marked as unreloadable. Firing full page reload.");
                  $async$self._reloadPage.call$0();
                  $async$self._running.complete$0();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                parentIds = t3.call$1(moduleId);
                if (parentIds == null || J.get$isEmpty$asx(parentIds)) {
                  P.print("Module reloading wasn't handled by any of parents. Firing full page reload.");
                  $async$self._reloadPage.call$0();
                  $async$self._running.complete$0();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                J.sort$1$ax(parentIds, t2);
                for (t5 = J.get$iterator$ax(parentIds); t5.moveNext$0();) {
                  parentId = t5.get$current();
                  parentModule = t1.call$1(parentId);
                  success = parentModule.onChildUpdate$3(moduleId, newVersion, data);
                  if (J.$eq$(success, true))
                    continue;
                  if (J.$eq$(success, false)) {
                    P.print("Module '" + H.S(moduleId) + "' is marked as unreloadable. Firing full page reload.");
                    $async$self._reloadPage.call$0();
                    $async$self._running.complete$0();
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  }
                  J.add$1$ax($async$self._dirtyModules, parentId);
                }
                // goto for condition
                $async$goto = 10;
                break;
              case 11:
                // after for
                P.print(H.S(reloadedModules) + " modules were hot-reloaded.");
                $async$handler = 2;
                // goto after finally
                $async$goto = 9;
                break;
              case 7:
                // catch
                $async$handler = 6;
                $async$exception = $async$currentError;
                t1 = H.unwrapException($async$exception);
                if (t1 instanceof L.HotReloadFailedException) {
                  e = t1;
                  P.print("Error during script reloading. Firing full page reload. " + H.S(e));
                  $async$self._reloadPage.call$0();
                } else
                  throw $async$exception;
                // goto after finally
                $async$goto = 9;
                break;
              case 6:
                // uncaught
                // goto rethrow
                $async$goto = 2;
                break;
              case 9:
                // after finally
                $async$self._running.complete$0();
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return P._asyncRethrow($async$currentError, $async$completer);
            }
      });
      return P._asyncStartSync($async$reload$1, $async$completer);
    },
    set$_dirtyModules: function(_dirtyModules) {
      this._dirtyModules = H.assertSubtype(_dirtyModules, "$isSplayTreeSet", [P.String], "$asSplayTreeSet");
    },
    set$_running: function(_running) {
      this._running = H.assertSubtype(_running, "$isCompleter", [-1], "$asCompleter");
    }
  };
  (function aliases() {
    var _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _.super$Interceptor$noSuchMethod = _.noSuchMethod$1;
    _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = H.JsLinkedHashMap.prototype;
    _.super$JsLinkedHashMap$internalContainsKey = _.internalContainsKey$1;
    _.super$JsLinkedHashMap$internalGet = _.internalGet$1;
    _.super$JsLinkedHashMap$internalSet = _.internalSet$2;
    _.super$JsLinkedHashMap$internalRemove = _.internalRemove$1;
    _ = P._BufferingStreamSubscription.prototype;
    _.super$_BufferingStreamSubscription$_add = _._async$_add$1;
    _.super$_BufferingStreamSubscription$_addError = _._addError$2;
    _ = P._HashMap.prototype;
    _.super$_HashMap$_containsKey = _._containsKey$1;
    _.super$_HashMap$_get = _._get$1;
    _.super$_HashMap$_set = _._set$2;
    _.super$_HashMap$_remove = _._remove$1;
    _ = P._HashSet.prototype;
    _.super$_HashSet$_contains = _._contains$1;
    _.super$_HashSet$_add = _._add$1;
    _.super$_HashSet$_remove = _._remove$1;
    _ = P.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
    _ = P.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _ = W.EventTarget.prototype;
    _.super$EventTarget$addEventListener = _.addEventListener$3;
    _ = G.BaseRequest.prototype;
    _.super$BaseRequest$finalize = _.finalize$0;
    _ = Y.SourceSpanMixin.prototype;
    _.super$SourceSpanMixin$compareTo = _.compareTo$1;
    _.super$SourceSpanMixin$$eq = _.$eq;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _static = hunkHelpers.installStaticTearOff,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_1_i = hunkHelpers._instance_1i,
      _instance_1_u = hunkHelpers._instance_1u,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_0_i = hunkHelpers._instance_0i,
      _instance_2_i = hunkHelpers._instance_2i;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 21);
    _static_1(H, "_js_helper___matchString$closure", "_matchString", 19);
    _static_1(H, "_js_helper___stringIdentity$closure", "_stringIdentity", 11);
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 22);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 22);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 22);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 1);
    _static_1(P, "async___nullDataHandler$closure", "_nullDataHandler", 14);
    _static(P, "async___nullErrorHandler$closure", 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["_nullErrorHandler", function(error) {
      return P._nullErrorHandler(error, null);
    }], 7, 0);
    _static_0(P, "async___nullDoneHandler$closure", "_nullDoneHandler", 1);
    _static(P, "async___rootScheduleMicrotask$closure", 4, null, ["call$4"], ["_rootScheduleMicrotask"], 74, 0);
    var _;
    _instance(_ = P._AsyncAwaitCompleter.prototype, "get$complete", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["complete$1", "complete$0"], 15, 0);
    _instance(_, "get$completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 7, 0);
    _instance(P._Completer.prototype, "get$completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 7, 0);
    _instance(P._AsyncCompleter.prototype, "get$complete", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["complete$1", "complete$0"], 15, 0);
    _instance(P._SyncCompleter.prototype, "get$complete", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["complete$1", "complete$0"], 15, 0);
    _instance(P._Future.prototype, "get$_completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["_completeError$2", "_completeError$1"], 7, 0);
    _instance(P._StreamController.prototype, "get$addError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["addError$2", "addError$1"], 7, 0);
    _instance_0_u(_ = P._ControllerSubscription.prototype, "get$_onPause", "_onPause$0", 1);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 1);
    _instance_1_i(_ = P._BufferingStreamSubscription.prototype, "get$onError", "onError$1", 44);
    _instance_0_u(_, "get$_onPause", "_onPause$0", 1);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 1);
    _instance_1_u(_ = P._StreamIterator.prototype, "get$_onData", "_onData$1", 14);
    _instance(_, "get$_onError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["_onError$2", "_onError$1"], 7, 0);
    _instance_0_u(_, "get$_onDone", "_onDone$0", 1);
    _instance_0_u(_ = P._ForwardingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 1);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 1);
    _instance_1_u(_, "get$_handleData", "_handleData$1", 14);
    _instance_2_u(_, "get$_handleError", "_handleError$2", 47);
    _instance_0_u(_, "get$_handleDone", "_handleDone$0", 1);
    _static_2(P, "collection___defaultEquals$closure", "_defaultEquals", 23);
    _static_1(P, "collection___defaultHashCode$closure", "_defaultHashCode", 76);
    _static_2(P, "collection_ListMixin__compareAny$closure", "ListMixin__compareAny", 21);
    _static_2(P, "collection___dynamicCompare$closure", "_dynamicCompare", 21);
    _instance(P._HashSet.prototype, "get$_newSimilarSet", 0, 0, null, ["call$1$0", "call$0"], ["_newSimilarSet$1$0", "_newSimilarSet$0"], 9, 1);
    _instance(P._IdentityHashSet.prototype, "get$_newSimilarSet", 0, 0, null, ["call$1$0", "call$0"], ["_newSimilarSet$1$0", "_newSimilarSet$0"], 9, 1);
    _instance(P._CustomHashSet.prototype, "get$_newSimilarSet", 0, 0, null, ["call$1$0", "call$0"], ["_newSimilarSet$1$0", "_newSimilarSet$0"], 9, 1);
    _instance(P._LinkedHashSet.prototype, "get$_newSimilarSet", 0, 0, null, ["call$1$0", "call$0"], ["_newSimilarSet$1$0", "_newSimilarSet$0"], 9, 1);
    _instance(P.SplayTreeSet.prototype, "get$_newSet", 0, 0, null, ["call$1$0", "call$0"], ["_newSet$1$0", "_newSet$0"], 9, 1);
    _static_1(P, "convert___defaultToEncodable$closure", "_defaultToEncodable", 2);
    _instance_1_i(_ = P._ByteCallbackSink.prototype, "get$add", "add$1", 14);
    _instance_0_i(_, "get$close", "close$0", 1);
    _static_1(P, "core__identityHashCode$closure", "identityHashCode", 6);
    _static_2(P, "core__identical$closure", "identical", 5);
    _static_2(P, "core_Comparable_compare$closure", "Comparable_compare", 77);
    _static_1(P, "core_Uri_decodeComponent$closure", "Uri_decodeComponent", 11);
    _instance_2_i(W.HttpRequest.prototype, "get$setRequestHeader", "setRequestHeader$2", 18);
    _instance_2_u(_ = U.DefaultEquality.prototype, "get$equals", "equals$2", 5);
    _instance_1_i(_, "get$hash", "hash$1", 6);
    _instance_1_u(_, "get$isValidKey", "isValidKey$1", 4);
    _instance_2_u(_ = U.IterableEquality.prototype, "get$equals", "equals$2", 5);
    _instance_1_i(_, "get$hash", "hash$1", 6);
    _instance_1_u(_, "get$isValidKey", "isValidKey$1", 4);
    _instance_2_u(_ = U.ListEquality.prototype, "get$equals", "equals$2", 5);
    _instance_1_i(_, "get$hash", "hash$1", 6);
    _instance_1_u(_, "get$isValidKey", "isValidKey$1", 4);
    _instance_2_u(_ = U._UnorderedEquality.prototype, "get$equals", "equals$2", 5);
    _instance_1_i(_, "get$hash", "hash$1", 6);
    _instance_1_u(U.UnorderedIterableEquality.prototype, "get$isValidKey", "isValidKey$1", 4);
    _instance_1_u(U.SetEquality.prototype, "get$isValidKey", "isValidKey$1", 4);
    _instance_2_u(_ = U.MapEquality.prototype, "get$equals", "equals$2", 5);
    _instance_1_i(_, "get$hash", "hash$1", 6);
    _instance_1_u(_, "get$isValidKey", "isValidKey$1", 4);
    _instance_2_u(_ = U.DeepCollectionEquality.prototype, "get$equals", "equals$2", 5);
    _instance_1_i(_, "get$hash", "hash$1", 6);
    _instance_1_u(_, "get$isValidKey", "isValidKey$1", 4);
    _static_2(L, "strongly_connected_components___defaultEquals$closure", "_defaultEquals0", 23);
    _instance(Y.SourceFile.prototype, "get$span", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["span$2", "span$1"], 58, 0);
    _instance(Y.SourceSpanMixin.prototype, "get$message", 1, 1, function() {
      return {color: null};
    }, ["call$2$color", "call$1"], ["message$2$color", "message$1"], 59, 0);
    _instance_1_u(_ = M.SseClient.prototype, "get$_onIncomingControlMessage", "_onIncomingControlMessage$1", 32);
    _instance_1_u(_, "get$_onIncomingMessage", "_onIncomingMessage$1", 32);
    _instance_0_u(_, "get$_onOutgoingDone", "_onOutgoingDone$0", 1);
    _instance_1_u(_, "get$_onOutgoingMessage", "_onOutgoingMessage$1", 13);
    _instance(X.StringScanner.prototype, "get$error", 1, 1, function() {
      return {length: null, position: null};
    }, ["call$3$length$position", "call$1"], ["error$3$length$position", "error$1"], 61, 0);
    _static_1(D, "client___moduleLibraries$closure", "_moduleLibraries", 78);
    _static_1(D, "client___reloadModule$closure", "_reloadModule", 52);
    _static_0(D, "client___reloadPage$closure", "_reloadPage", 1);
    _instance_2_u(L.ReloadingManager.prototype, "get$moduleTopologicalCompare", "moduleTopologicalCompare$2", 71);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.ChromeObject, H.Event0, H.API_ChromeApp, H.API_Chrome, H.API_app_window, H.API_app_runtime, H.API_file_system, H.JS_CONST, H._CryptoUtils, H._HashBase, H.HttpServer, H.HttpConnectionsInfo, H.HttpHeaders, H.HeaderValue, H.HttpSession, H.ContentType, H.Cookie, H.HttpRequest0, H.HttpResponse, H.HttpClient, H.HttpClientRequest, H.HttpClientResponse, H.HttpClientCredentials, H.HttpConnectionInfo, H.RedirectInfo, H.DetachedSocket, H.HttpException, H.RedirectException, H.HttpDate, H._HttpHeaders, H._HeaderValue, H._Cookie, H._ServiceObject, H._CopyingBytesBuilder, P.Stream, H._StreamSinkImpl, P.ChunkedConversionSink, H._HttpOutgoing, H._HttpClientConnection, H._ConnectionInfo, H._ConnectionTarget, H._HttpClient, P.LinkedListEntry, H._ProxyConfiguration, H._Proxy, H._HttpConnectionInfo, H._AuthenticationScheme, H._Credentials, H._HttpClientCredentials, H._RedirectInfo, H._Const, H._CharCode, H._State, H._HttpVersion, H._MessageType, H._HttpDetachedStreamSubscription, H._HttpSession, H._HttpSessionManager, H.HttpOverrides, H.WebSocketStatus, H.CompressionOptions, H.WebSocketTransformer, H.WebSocket, H.WebSocketException, H._WebSocketMessageType, H._WebSocketOpcode, H._EncodedString, H._CompressionMaxWindowBits, P.StreamTransformerBase, H._WebSocketPing, H._WebSocketPong, H._WebSocketPerMessageDeflate, H._WebSocketConsumer, J.Interceptor, J.JSIndexable, J.JSObject, J._Growable, J.ArrayIterator, H.CastStreamSubscription, P.Iterable, H.CastIterator, H.Closure, P.MapMixin, P._ListBase_Object_ListMixin, H.ExternalName, H.Since, H.HttpStatus, H.ListIterator, P.Iterator, H.ExpandIterator, H.EmptyIterator, H.FollowedByIterator, H.WhereTypeIterator, H.IterableElementError, H.LinkedListEntry0, H._LinkedListIterator, H.FixedLengthListMixin, H.UnmodifiableListMixin, H.UnmodifiableListError, H.NonGrowableListError, H.Sort, H.Symbol, H.JsGetName, H.JsBuiltin, H.Native, H._Patch, P.MapView, H.ConstantMap, H.InternalMap, H.JSInvocationMirror, H.Primitives, H.JsCache, H.TypeErrorDecoder, P.Error, H.ExceptionAndStackTrace, H._StackTrace, H.Creates, H.Returns, H.JSName, H.TypeImpl, H.TypeVariable, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.JSSyntaxRegExp, H._MatchImplementation, H._AllMatchesIterator, H.StringMatch, H._StringAllMatchesIterator, H._LazyMangledNamesMap, H._LazyReflectiveNamesMap, H.SupportedBrowser, H.Experimental, H.DomName, H.DocsEditable, H.Unstable, H._NativeFloat32x4List_Object_ListMixin, H._NativeInt32x4List_Object_ListMixin, H._NativeFloat64x2List_Object_ListMixin, H.NativeFloat32x4, H.NativeInt32x4, H.NativeFloat64x2, P._TimerImpl, P._AsyncAwaitCompleter, P._AsyncStarStreamController, P._IterationMarker, P._SyncStarIterator, P._BufferingStreamSubscription, P._BroadcastStreamController, P.DeferredLibrary, P.DeferredLoadException, P.FutureOr, P.Future, P.TimeoutException, P.Completer, P._Completer, P._FutureListener, P._Future, P._AsyncCallbackEntry, P._AsyncRun, P.StreamSubscription, P.EventSink, P.StreamConsumer, P.StreamSink, P.StreamTransformer, P.StreamIterator, P._ControllerEventSinkWrapper, P.StreamController, P.SynchronousStreamController, P._StreamControllerLifecycle, P._StreamControllerBase, P._StreamController, P._SyncStreamControllerDispatch, P._AsyncStreamControllerDispatch, P._StreamSinkWrapper, P._AddStreamState, P._EventSink, P._EventDispatch, P._PendingEvents, P._DelayedEvent, P._DelayedDone, P._DoneStreamSubscription, P._BroadcastSubscriptionWrapper, P._StreamIterator, P._EventSinkWrapper, P._HandlerEventSink, P.Timer, P.AsyncError, P._ZoneFunction, P.ZoneSpecification, P._ZoneSpecification, P.ZoneDelegate, P.Zone, P._ZoneDelegate, P._Zone, P._HashMapKeyIterator, P._Es6MapIterator, P._SetBase, P._HashSetIterator, P._LinkedHashSetCell, P._LinkedHashSetIterator, P.HashMap, P.HashSet, P.IterableMixin, P.HasNextIterator, P.LinkedHashMap, P.LinkedHashSet, P._LinkedListIterator0, P.ListMixin, P._MapBaseValueIterator, P._UnmodifiableMapMixin, P.Queue, P._DoubleLink, P._DoubleLinkedQueueIterator, P._ListQueueIterator, P.SetMixin, P._SetBase_Object_SetMixin, P._SplayTreeNode, P._SplayTree, P._TypeTest, P._SplayTreeIterator, P.StringConversionSinkMixin, P.Codec, P._Base64Encoder, P._Base64Decoder, P._ConverterStreamEventSink, P.HtmlEscapeMode, P._JsonStringifier, P._JsonPrettyPrintMixin, P.StringSink, P._ClosableStringSink, P._StringConversionSinkAsStringSinkAdapter, P._Utf8Encoder, P._Utf8Decoder, P._BigIntImpl, P._BigIntReduction, P._BigIntClassic, P.Deprecated, P._Override, P.Provisional, P._Proxy0, P.pragma, P.BigInt, P.bool, P.Comparable, P.DateTime, P.num, P.Duration, P.OutOfMemoryError, P.StackOverflowError, P.Exception, P._Exception, P.FormatException, P.IntegerDivisionByZeroException, P.Expando, P.Function, P.Invocation, P._Invocation, P.BidirectionalIterator, P.List, P.Map, P.MapEntry, P.Null, P.Pattern, P.Match, P.RegExp, P.Sink, P.StackTrace, P._StringStackTrace, P.Stopwatch, P.String, P.RuneIterator, P.StringBuffer, P.Symbol0, P.Type, P.Uri, P._Uri, P.UriData, P._SimpleUri, P._FakeUserTag, P.ServiceExtensionResponse, P.UserTag, P.Metric, P.Metrics, P.ServiceProtocolInfo, P.Service, P.Flow, P.Timeline, P.TimelineTask, P._AsyncBlock, P._SyncBlock, W.CanvasRenderingContext, W.__CssStyleDeclarationSet_Object_CssStyleDeclarationBase, W.CssStyleDeclarationBase, W._ElementFactoryProvider, W.ScrollAlignment, W.Events, W._GeopositionWrapper, W.GlobalEventHandlers, W.InputElementBase, W.HiddenInputElement, W.TextInputElementBase, W.SearchInputElement, W.TextInputElement, W.UrlInputElement, W.TelephoneInputElement, W.EmailInputElement, W.PasswordInputElement, W.RangeInputElementBase, W.DateInputElement, W.MonthInputElement, W.WeekInputElement, W.TimeInputElement, W.LocalDateTimeInputElement, W.NumberInputElement, W.RangeInputElement, W.CheckboxInputElement, W.RadioButtonInputElement, W.FileUploadInputElement, W.SubmitButtonInputElement, W.ImageButtonInputElement, W.ResetButtonInputElement, W.ButtonInputElement, W._WrappedEvent, W._BeforeUnloadEventStreamProvider, W._JenkinsSmiHash, W.CanvasImageSource, W.WindowBase, W.LocationBase, W.HistoryBase, W.CssClassSet, W.CssRect, W.Dimension, W.EventStreamProvider, W.ElementStream, W.CustomStream, W._StreamPool, W._CustomEventStreamProvider, W._Html5NodeValidator, W.ImmutableListMixin, W.KeyCode, W.KeyLocation, W._KeyName, W.KeyboardEventStream, W.NodeValidatorBuilder, W._SimpleNodeValidator, W._SvgNodeValidator, W.ReadyState, W._WrappedIterator, W._HttpRequestUtils, W.FixedSizeListIterator, W._VariableSizeListIterator, W.Console, W._JSElementUpgrader, W._DOMWindowCrossFrame, W._LocationCrossFrame, W._HistoryCrossFrame, W.Platform, W.ElementUpgrader, W.NodeValidator, W.NodeTreeSanitizer, W._TrustedHtmlTreeSanitizer, W.UriPolicy, W._SameOriginUriPolicy, W._ThrowsNodeValidator, W._ValidatingTreeSanitizer, P._StructuredClone, P._AcceptStructuredClone, P.ContextAttributes, P._TypedImageData, P.Device, P.Lists, P.NodeListWrapper, P._KeyRangeFactoryProvider, P.BytesBuilder, P._CopyingBytesBuilder0, P._BytesBuilder, P.IOException, P.OSError, P._BufferAndStart, P._IOCrypto, P.ZLibOption, P.RawZLibFilter, P.Directory, P.FileSystemEntity, P._AsyncDirectoryListerOps, P._AsyncDirectoryLister, P._EmbedderConfig, P._EventHandler, P.FileMode, P.FileLock, P.File0, P.RandomAccessFile, P.FileSystemException, P._RandomAccessFileOps, P._RandomAccessFile, P.FileSystemEntityType, P.FileStat, P.FileSystemEvent, P._FileSystemWatcher, P._IOResourceInfo, P._IOService, P.IOSink, P._StreamSinkImpl0, P.Link, P._Namespace, P.IOOverrides, P.Platform0, P._Platform, P._ProcessUtils, P.ProcessInfo, P.ProcessStartMode, P.Process, P.ProcessResult, P.ProcessSignal, P.SignalException, P.ProcessException, P.SecureSocket, P.RawSecureSocket, P.X509Certificate, P._FilterStatus, P._ExternalBuffer, P._SecureFilter, P.TlsException, P.SecurityContext, P._ServiceObject0, P.InternetAddressType, P.InternetAddress, P.NetworkInterface, P.RawServerSocket, P.ServerSocket, P.SocketDirection, P.SocketOption, P._RawSocketOptions, P.RawSocketOption, P.RawSocketEvent, P.ConnectionTask, P.RawSocket, P.Socket, P.Datagram, P.SocketException, P._StdSink, P.StdoutException, P.StdinException, P._StdConsumer, P.StdioType, P._StdIOUtils, P.RawSynchronousSocket, P.Capability, P.IsolateSpawnException, P.Isolate, P.SendPort, P.ReceivePort, P.RawReceivePort, P.RemoteError, P.JsObject, P._JSRandom, P._Random, P._JSSecureRandom, P._JenkinsSmiHash0, P.Point, P.Random, P._RectangleBase, P.MirrorSystem, P.Mirror, P.IsolateMirror, P.DeclarationMirror, P.ObjectMirror, P.InstanceMirror, P.ClosureMirror, P.LibraryMirror, P.LibraryDependencyMirror, P.CombinatorMirror, P.TypeMirror, P.ClassMirror, P.FunctionTypeMirror, P.TypedefMirror, P.MethodMirror, P.VariableMirror, P.ParameterMirror, P.SourceLocation0, P.Comment0, P.MirrorsUsed, P._SvgElementFactoryProvider, P.ByteBuffer, P.TypedData, P.Endian, P.ByteData, P.Int8List, P.Uint8List, P.Uint8ClampedList, P.Int16List, P.Uint16List, P.Int32List, P.Uint32List, P.Int64List, P.Uint64List, P.Float32List, P.Float64List, P.Float32x4List, P.Int32x4List, P.Float64x2List, P.Float32x4, P.Int32x4, P.Float64x2, P.UnmodifiableByteBufferView, P.UnmodifiableByteDataView, P._UnmodifiableListMixin, S.AsyncCache, S.AsyncMemoizer, E.CancelableOperation, E.CancelableCompleter, V.DelegatingEventSink, R.DelegatingFuture, O.DelegatingSink, G.DelegatingStreamConsumer, O.DelegatingStreamSink, Y.DelegatingStreamSubscription, F.FutureGroup, S.NullStreamSink, L.RestartableTimer, U.CaptureSink, V.ErrorResult, A.ReleaseSink, E.Result, F.ValueResult, Y.StreamCompleter, L.StreamGroup, L._StreamGroupState, G.StreamQueue, G.StreamQueueTransaction, G._EventRequest, G._NextRequest, G._PeekRequest, G._SkipRequest, G._ListRequest, G._CancelRequest, G._RestRequest, G._HasNextRequest, G._TransactionRequest, T.StreamSinkCompleter, T._CompleterSink, F.StreamSinkTransformer, X.HandlerTransformer, X._HandlerSink, Q.StreamTransformerWrapper, Q._StreamTransformerWrapperSink, M.TypeSafeStreamSinkTransformer, N.StreamSplitter, D._TransformedSubscription, Y.TypeSafeStreamSubscription, Y.EnumClass, M.BuildResult, M.DefaultBuildResult, M.BuildResults, M._$BuildStatusSerializer, M._$DefaultBuildResultSerializer, M._$BuildResultsSerializer, M.DefaultBuildResultBuilder, M.BuildResultsBuilder, Q.CopyOnWriteList, S.CopyOnWriteMap, A.CopyOnWriteSet, Z.BuiltIterable, S.BuiltList, S.ListBuilder, M.BuiltListMultimap, M.ListMultimapBuilder, A.BuiltMap, A.MapBuilder, L.BuiltSet, L.SetBuilder, E.BuiltSetMultimap, E.SetMultimapBuilder, Y.Built, Y.Builder, Y.BuiltValue, Y.BuiltValueField, Y.BuiltValueSerializer, Y.BuiltValueEnum, Y.BuiltValueEnumConst, Y.BuiltValueToStringHelper, Y.IndentingBuiltValueToStringHelper, Y.FlatBuiltValueToStringHelper, A.JsonObject, U.SerializersFor, U.Serializers, U.SerializerPlugin, U.SerializersBuilder, U.FullType, U.Serializer, U.PrimitiveSerializer, U.StructuredSerializer, O.BigIntSerializer, R.BoolSerializer, Y.BuiltJsonSerializers, Y.BuiltJsonSerializersBuilder, R.BuiltListMultimapSerializer, K.BuiltListSerializer, K.BuiltMapSerializer, R.BuiltSetMultimapSerializer, O.BuiltSetSerializer, Z.DateTimeSerializer, D.DoubleSerializer, K.DurationSerializer, Q.Int64Serializer, B.IntSerializer, O.JsonObjectSerializer, K.NumSerializer, K.RegExpSerializer, M.StringSerializer, O.UriSerializer, M.CanonicalizedMap, S._CombinedIterator, U.Equality, U.EqualityBy, U.DefaultEquality, U.IdentityEquality, U.IterableEquality, U.ListEquality, U._UnorderedEquality, U._MapEntry, U.MapEquality, U.MultiEquality, U.DeepCollectionEquality, U.CaseInsensitiveEquality, M.DelegatingMap, M._DelegatingIterableBase, A._IteratorZip, Y.PriorityQueue, Y.HeapPriorityQueue, Q._QueueList_Object_ListMixin, Y.UnionSetController, L.NonGrowableListMixin, L.UnmodifiableSetMixin, L.UnmodifiableMapMixin, B.Pair, Y.AccumulatorSink, B.Digest, G.HashSink, V.Int32, V.Int64, V.IntX, B._CrawlAsync, E.BaseClient, G.BaseRequest, T.BaseResponse, U.Client0, E.ClientException, B.Pair0, E.AuthenticationChallenge, B._State0, R.MediaType, Q.JS, Q._Anonymous, N.Logger, N.Level, N.LogRecord, Q.Immutable, Q.Required, Q._AlwaysThrows, Q._Checked, Q._Experimental, Q._Factory, Q._IsTest, Q._IsTestGroup, Q._Literal, Q._MustCallSuper, Q._OptionalTypeArgs, Q._Protected, Q._Sealed, Q._Virtual, Q._VisibleForOverriding, Q._VisibleForTesting, M.Context, M._PathDirection, M._PathRelation, O.Style, X.ParsedPath, X.PathException, S.BiMap, S.HashBiMap, S.DelegatingIterable0, S.DelegatingMap0, S.LruMap, S._LinkedEntry, S.LinkedLruHashMap, S.Multimap, S._BaseMultimap, S._WrappedMap, S._WrappedIterable, S.TreeSearch, S._TreeNode, S._AvlTreeIterator, L._CountIterator, L._CycleIterator, L.IndexedValue, L._GeneratingIterator, L._IteratorPeeker, L._MergeIterator, L.Extent, L._PartitionIterator, Y.SourceFile, D.SourceLocationMixin, Y.FileSpan, Y.SourceSpanMixin, U.Highlighter, V.SourceLocation, V.SourceSpan, G.SourceSpanException, R.StreamChannelMixin, F.Disconnector, F._DisconnectorSink, K._GuaranteeSink, Y.JsonDocumentTransformer, D.MultiChannel, N.StreamChannelCompleter, B.StreamChannelController, Y.StreamChannelTransformer, M.TypeSafeStreamChannelTransformer, R.StreamChannel, X.StringScanner, D._EagerSpanScannerState, Z.LineScannerState, R._SpanScannerState, S._SpanScannerState0, A.AsciiGlyphSet, E.GlyphSet, K.UnicodeGlyphSet, F.Uuid, U.UuidUtil, E.ConnectRequest, E._$ConnectRequestSerializer, E.ConnectRequestBuilder, M.DevToolsRequest, M.DevToolsResponse, M._$DevToolsRequestSerializer, M._$DevToolsResponseSerializer, M.DevToolsRequestBuilder, M.DevToolsResponseBuilder, A.RunRequest, A._$RunRequestSerializer, A.RunRequestBuilder, D.LibraryWrapper, G.Library, G.Module, L.HotReloadFailedException, L.ReloadingManager]);
    _inheritMany(H.ChromeObject, [H.Rule, H.AppWindowBounds, H.AppWindowCreateWindowOptions, H.AppWindowAppWindow, H.AppRuntimeLaunchItem, H.AppRuntimeLaunchData, H.FilesystemAcceptOption, H.FilesystemChooseEntryOptions]);
    _inheritMany(H.Event0, [H.Event_app_window_onBoundsChanged, H.Event_app_window_onClosed, H.Event_app_window_onFullscreened, H.Event_app_window_onMaximized, H.Event_app_window_onMinimized, H.Event_app_window_onRestored, H.Event_app_runtime_onLaunched, H.Event_app_runtime_onRestarted]);
    _inheritMany(H._HashBase, [H._MD5, H._SHA1]);
    _inheritMany(H.HttpClientCredentials, [H.HttpClientBasicCredentials, H.HttpClientDigestCredentials]);
    _inherit(H._ContentType, H._HeaderValue);
    _inheritMany(P.Stream, [H._HttpIncoming, H._HttpInboundMessage, H.__HttpServer_Stream__ServiceObject, H._DetachedSocket, H._HttpDetachedIncoming, H._HttpParser, H.__WebSocketImpl_Stream__ServiceObject, H.CastStream, P._StreamImpl, P.StreamView, P._AsBroadcastStream, P._EmptyStream, P._ForwardingStream, P._BoundSinkStream, P._BoundSubscriptionStream, W._EventStream, W._ElementListEventStreamImpl, W._CustomEventStreamImpl, P._FileStream, P.SecureServerSocket, P.RawSecureServerSocket, P._RawSecureSocket, P.RawDatagramSocket, P._StdStream, P._ReceivePortImpl, V.LazyStream, Y._CompleterStream, L.StreamZip, T.SubscriptionStream, F._CloseGuaranteeStream]);
    _inheritMany(H._HttpInboundMessage, [H._HttpRequest, H._HttpClientResponse]);
    _inherit(H._IOSinkImpl, H._StreamSinkImpl);
    _inherit(H._HttpOutboundMessage, H._IOSinkImpl);
    _inheritMany(H._HttpOutboundMessage, [H._HttpResponse, H._HttpClientRequest]);
    _inheritMany(P.ChunkedConversionSink, [P.ByteConversionSink, P._SimpleCallbackSink, P._JsonEncoderSink, P._JsonUtf8EncoderSink, P.StringConversionSink]);
    _inheritMany(P.ByteConversionSink, [H._HttpGZipSink, P.ByteConversionSinkBase, P._Utf8StringSinkAdapter, P._Utf8ConversionSink, P._BufferSink, P._FilterSink, D._HmacSink]);
    _inherit(H.__HttpConnection_LinkedListEntry__ServiceObject, P.LinkedListEntry);
    _inherit(H._HttpConnection, H.__HttpConnection_LinkedListEntry__ServiceObject);
    _inherit(H._HttpServer, H.__HttpServer_Stream__ServiceObject);
    _inheritMany(H._Credentials, [H._SiteCredentials, H._ProxyCredentials]);
    _inheritMany(H._HttpClientCredentials, [H._HttpClientBasicCredentials, H._HttpClientDigestCredentials]);
    _inherit(H._HttpOverridesScope, H.HttpOverrides);
    _inheritMany(P.StreamTransformerBase, [H._WebSocketProtocolTransformer, H._WebSocketTransformerImpl, H._WebSocketOutgoingTransformer, H.CastStreamTransformer, P.Converter, P._StreamSinkTransformer, P._StreamBindTransformer, P._StreamSubscriptionTransformer, P.LineSplitter, Z.CaptureStreamTransformer, D.ReleaseStreamTransformer, B.SingleSubscriptionTransformer, M._TypeSafeStreamTransformer]);
    _inherit(H._WebSocketImpl, H.__WebSocketImpl_Stream__ServiceObject);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, H.NativeByteBuffer, H.NativeTypedData, W.EventTarget, W.Event, W.AbstractWorker, W.AccessibleNodeList, W.AnimationEffectReadOnly, W.AnimationEffectTimingReadOnly, W.AnimationTimeline, W.WorkletGlobalScope, W.AuthenticatorResponse, W.BackgroundFetchFetch, W.BackgroundFetchManager, W.BarProp, W.BarcodeDetector, W.Blob, W.BluetoothRemoteGattDescriptor, W.Body, W.BudgetState, W.CacheStorage, W.CanvasGradient, W.CanvasPattern, W.CanvasRenderingContext2D, W.ChildNode, W.Client, W.Clients, W.CookieStore, W.Coordinates, W.Credential, W.CredentialUserData, W.CredentialsContainer, W.Crypto, W.CryptoKey, W.Css, W.CssRule, W.CssStyleValue, W.CssTransformComponent, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.StyleSheet, W.CssVariableReferenceValue, W.CustomElementRegistry, W.DataTransfer, W.DataTransferItem, W.DataTransferItemList, W.DeprecatedStorageInfo, W.DeprecatedStorageQuota, W.ReportBody, W.DetectedBarcode, W.DetectedFace, W.DetectedText, W.DeviceAcceleration, W.DeviceRotationRate, W.Entry, W.DirectoryReader, W.DocumentOrShadowRoot, W.DomError, W.DomException, W.DomImplementation, W.DomIterator, W.DomMatrixReadOnly, W.DomParser, W.DomPointReadOnly, W.DomQuad, W._DomRectList_Interceptor_ListMixin, W.DomRectReadOnly, W._DomStringList_Interceptor_ListMixin, W.DomStringMap, W.DomTokenList, W.External, W.FaceDetector, W._FileList_Interceptor_ListMixin, W.FileSystem, W.FontFace, W.FontFaceSource, W.FormData, W.Gamepad, W.GamepadButton, W.GamepadPose, W.Geolocation, W.Geoposition, W.Headers, W.History, W._HtmlCollection_Interceptor_ListMixin, W.HtmlHyperlinkElementUtils, W.IdleDeadline, W.ImageBitmap, W.ImageBitmapRenderingContext, W.ImageCapture, W.ImageData, W.InputDeviceCapabilities, W.IntersectionObserver, W.IntersectionObserverEntry, W.Location, W.MediaCapabilities, W.MediaCapabilitiesInfo, W.MediaDeviceInfo, W.MediaError, W.MediaKeyStatusMap, W.MediaKeySystemAccess, W.MediaKeys, W.MediaKeysPolicy, W.MediaList, W.MediaMetadata, W.MediaSession, W.MediaSettingsRange, W.MemoryInfo, W.MessageChannel, W.Metadata, W._MidiInputMap_Interceptor_MapMixin, W._MidiOutputMap_Interceptor_MapMixin, W.MimeType, W._MimeTypeArray_Interceptor_ListMixin, W.MutationObserver, W.MutationRecord, W.NavigationPreloadManager, W.NavigatorConcurrentHardware, W.NavigatorAutomationInformation, W.NavigatorCookies, W.NavigatorID, W.NavigatorLanguage, W.NavigatorOnLine, W.NavigatorUserMediaError, W.NodeFilter, W.NodeIterator, W._NodeList_Interceptor_ListMixin, W.NonDocumentTypeChildNode, W.NonElementParentNode, W.NoncedElement, W.OffscreenCanvasRenderingContext2D, W.OverconstrainedError, W.PaintRenderingContext2D, W.PaintSize, W.ParentNode, W.Path2D, W.PaymentAddress, W.PaymentInstruments, W.PaymentManager, W.PaymentResponse, W.PerformanceEntry, W.PerformanceNavigation, W.PerformanceObserver, W.PerformanceObserverEntryList, W.PerformanceServerTiming, W.PerformanceTiming, W.Permissions, W.PhotoCapabilities, W.Plugin, W._PluginArray_Interceptor_ListMixin, W.PositionError, W.Presentation, W.PresentationReceiver, W.PushManager, W.PushMessageData, W.PushSubscription, W.PushSubscriptionOptions, W.Range, W.RelatedApplication, W.ReportingObserver, W.ResizeObserver, W.ResizeObserverEntry, W.RtcCertificate, W.RtcIceCandidate, W.RtcLegacyStatsReport, W.RtcRtpContributingSource, W.RtcRtpReceiver, W.RtcRtpSender, W.RtcSessionDescription, W._RtcStatsReport_Interceptor_MapMixin, W.RtcStatsResponse, W.Screen, W.ScrollState, W.Selection, W.SharedArrayBuffer, W.SpeechGrammar, W._SpeechGrammarList_Interceptor_ListMixin, W.SpeechRecognitionAlternative, W.SpeechRecognitionResult, W.SpeechSynthesisVoice, W.StaticRange, W._Storage_Interceptor_MapMixin, W.StorageManager, W.StyleMedia, W.StylePropertyMapReadonly, W.SyncManager, W.TextDetector, W.TextMetrics, W._TextTrackCueList_Interceptor_ListMixin, W.TimeRanges, W.Touch, W._TouchList_Interceptor_ListMixin, W.TrackDefault, W.TrackDefaultList, W.TreeWalker, W.TrustedHtml, W.TrustedScriptUrl, W.TrustedUrl, W.UnderlyingSourceBase, W.Url, W.UrlSearchParams, W.UrlUtilsReadOnly, W.VRCoordinateSystem, W.VRDisplayCapabilities, W.VREyeParameters, W.VRFrameData, W.VRPose, W.VRStageBounds, W.VRStageBoundsPoint, W.VRStageParameters, W.ValidityState, W.VideoPlaybackQuality, W.VideoTrack, W.VttRegion, W.WindowBase64, W.WorkletAnimation, W.XPathEvaluator, W.XPathExpression, W.XPathNSResolver, W.XPathResult, W.XmlSerializer, W.XsltProcessor, W._Bluetooth, W._BluetoothCharacteristicProperties, W._BluetoothRemoteGATTServer, W._BluetoothRemoteGATTService, W._BluetoothUUID, W._BudgetService, W._Cache, W._CanvasPath, W.__CssRuleList_Interceptor_ListMixin, W._DOMFileSystemSync, W._EntrySync, W._DirectoryReaderSync, W._FileReaderSync, W._FileWriterSync, W.__GamepadList_Interceptor_ListMixin, W._HTMLAllCollection, W._Mojo, W._MojoHandle, W._MojoWatcher, W._NFC, W.__NamedNodeMap_Interceptor_ListMixin, W._PagePopupController, W._Report, W.__SpeechRecognitionResultList_Interceptor_ListMixin, W.__StyleSheetList_Interceptor_ListMixin, W._SubtleCrypto, W._USBAlternateInterface, W._USBConfiguration, W._USBDevice, W._USBEndpoint, W._USBInTransferResult, W._USBInterface, W._USBIsochronousInTransferPacket, W._USBIsochronousInTransferResult, W._USBIsochronousOutTransferPacket, W._USBIsochronousOutTransferResult, W._USBOutTransferResult, W._WindowTimers, W._WorkerLocation, W._Worklet, P.Cursor, P.IdbFactory, P.Index, P.KeyRange, P.ObjectStore, P.Observation, P.Observer, P.ObserverChanges, P.Angle, P.AnimatedAngle, P.AnimatedBoolean, P.AnimatedEnumeration, P.AnimatedInteger, P.AnimatedLength, P.AnimatedLengthList, P.AnimatedNumber, P.AnimatedNumberList, P.AnimatedPreserveAspectRatio, P.AnimatedRect, P.AnimatedString, P.AnimatedTransformList, P.FilterPrimitiveStandardAttributes, P.FitToViewBox, P.Length, P._LengthList_Interceptor_ListMixin, P.Matrix, P.Number, P._NumberList_Interceptor_ListMixin, P.Point0, P.PointList, P.PreserveAspectRatio, P.Rect, P._StringList_Interceptor_ListMixin, P.Tests, P.Transform, P._TransformList_Interceptor_ListMixin, P.UnitTypes, P.UriReference, P.ZoomAndPan, P.AudioBuffer, P.AudioListener, P.AudioParam, P._AudioParamMap_Interceptor_MapMixin, P.AudioTrack, P.AudioWorkletProcessor, P.PeriodicWave, P.ActiveInfo, P.AngleInstancedArrays, P.Buffer, P.Canvas, P.ColorBufferFloat, P.CompressedTextureAstc, P.CompressedTextureAtc, P.CompressedTextureETC1, P.CompressedTextureEtc, P.CompressedTexturePvrtc, P.CompressedTextureS3TC, P.CompressedTextureS3TCsRgb, P.DebugRendererInfo, P.DebugShaders, P.DepthTexture, P.DrawBuffers, P.EXTsRgb, P.ExtBlendMinMax, P.ExtColorBufferFloat, P.ExtColorBufferHalfFloat, P.ExtDisjointTimerQuery, P.ExtDisjointTimerQueryWebGL2, P.ExtFragDepth, P.ExtShaderTextureLod, P.ExtTextureFilterAnisotropic, P.Framebuffer, P.GetBufferSubDataAsync, P.LoseContext, P.OesElementIndexUint, P.OesStandardDerivatives, P.OesTextureFloat, P.OesTextureFloatLinear, P.OesTextureHalfFloat, P.OesTextureHalfFloatLinear, P.OesVertexArrayObject, P.Program, P.Query, P.Renderbuffer, P.RenderingContext, P.RenderingContext2, P.Sampler, P.Shader, P.ShaderPrecisionFormat, P.Sync, P.Texture, P.TimerQueryExt, P.TransformFeedback, P.UniformLocation, P.VertexArrayObject, P.VertexArrayObjectOes, P.WebGL, P._WebGL2RenderingContextBase, P._WebGLRenderingContextBase, P.SqlDatabase, P.SqlError, P.SqlResultSet, P._SqlResultSetRowList_Interceptor_ListMixin, P.SqlTransaction]);
    _inherit(J.JSMutableIndexable, J.JSIndexable);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction, D.DartLoader, D.HotReloadableLibrary, D.JsError, D.JsMap]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSDouble]);
    _inheritMany(P.Converter, [H.CastConverter, P._UnicodeSubsetEncoder, P._UnicodeSubsetDecoder, P.Base64Encoder, P.Base64Decoder, P._FusedConverter, P.HtmlEscape, P.JsonEncoder, P.JsonUtf8Encoder, P.JsonDecoder, P.Utf8Encoder, P.Utf8Decoder, P.ZLibEncoder, P.ZLibDecoder, P._WindowsCodePageEncoder, P._WindowsCodePageDecoder, A.HexDecoder, R.HexEncoder, E._IdentityConverter, B.PercentDecoder, B.PercentEncoder, A.Hash, D.Hmac, B.ChunkedCodingDecoder, E.ChunkedCodingEncoder]);
    _inheritMany(P.Iterable, [H._CastIterableBase, H.EfficientLengthIterable, H.MappedIterable, H.WhereIterable, H.ExpandIterable, H.TakeIterable, H.TakeWhileIterable, H.SkipIterable, H.SkipWhileIterable, H.FollowedByIterable, H.WhereTypeIterable, P.IterableBase, H._ConstantMapKeyIterable, H._StringAllMatchesIterable, P.LinkedList0, P.DoubleLinkedQueue, P.Runes]);
    _inheritMany(H._CastIterableBase, [H.CastIterable, H.__CastListBase__CastIterableBase_ListMixin, H.CastSet, H.CastQueue]);
    _inherit(H._EfficientLengthCastIterable, H.CastIterable);
    _inherit(H._CastListBase, H.__CastListBase__CastIterableBase_ListMixin);
    _inheritMany(H.Closure, [H._CastListBase_sort_closure, H.CastMap_putIfAbsent_closure, H.CastMap_forEach_closure, H.ConstantMap_map_closure, H.ConstantStringMap_values_closure, H.Instantiation, H.Primitives_functionNoSuchMethod_closure, H.unwrapException_saveStackTrace, H.Closure_fromTearOff_closure, H.TearOffClosure, H.JsLinkedHashMap_values_closure, H.JsLinkedHashMap_addAll_closure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._AsyncAwaitCompleter_complete_closure, P._AsyncAwaitCompleter_completeError_closure, P._awaitOnObject_closure, P._awaitOnObject_closure0, P._wrapJsFunctionForAsync_closure, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__asyncComplete_closure, P._Future__chainFuture_closure, P._Future__asyncCompleteError_closure, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P.Stream_Stream$fromIterable_closure, P.Stream_length_closure, P.Stream_length_closure0, P.Stream_isEmpty_closure, P.Stream_isEmpty_closure0, P.Stream_first_closure, P.Stream_first_closure0, P._StreamController__subscribe_closure, P._StreamController__recordCancel_complete, P._BufferingStreamSubscription__sendError_sendError, P._BufferingStreamSubscription__sendDone_sendDone, P._PendingEvents_schedule_closure, P._cancelAndValue_closure, P._rootHandleUncaughtError_closure, P._RootZone_bindCallback_closure, P._RootZone_bindCallbackGuarded_closure, P._RootZone_bindUnaryCallbackGuarded_closure, P._HashMap_values_closure, P._HashMap_addAll_closure, P._CustomHashMap_closure, P._Es6LinkedIdentityHashMap_addAll_closure, P._LinkedCustomHashMap_closure, P._CustomHashSet_closure, P._LinkedCustomHashSet_closure, P.LinkedHashMap_LinkedHashMap$from_closure, P.MapBase_mapToString_closure, P.SplayTreeSet_closure, P.SplayTreeSet__newSet_closure, P._convertJsonToDart_walk, P._JsonMap_values_closure, P._JsonMap_addAll_closure, P._JsonStringifier_writeMap_closure, P._JsonPrettyPrintMixin_writeMap_closure, P._symbolMapToStringMap_closure, P.NoSuchMethodError_toString_closure, P._BigIntImpl_hashCode_combine, P._BigIntImpl_hashCode_finish, P._BigIntImpl_toDouble_readBits, P._BigIntImpl_toDouble_roundUp, P.Duration_toString_sixDigits, P.Duration_toString_twoDigits, P.Uri__parseIPv4Address_error, P.Uri_parseIPv6Address_error, P.Uri_parseIPv6Address_parseHex, P._Uri__Uri$notSimple_closure, P._Uri__checkNonWindowsPathReservedCharacters_closure, P._Uri__makePath_closure, P._Uri__makeQuery_writeParameter, P._Uri__makeQuery_closure, P._createTables_closure, P._createTables_build, P._createTables_setChars, P._createTables_setRange, W.HttpRequest_request_closure0, W.HttpRequest_request_closure, W._EventStreamSubscription_closure, P._AcceptStructuredClone_walk_closure, P.convertDartToNative_Dictionary_closure, P.convertNativePromiseToDartFuture_closure, P.convertNativePromiseToDartFuture_closure0, M.BuiltListMultimap_BuiltListMultimap_closure, M.BuiltListMultimap_hashCode_closure, M.ListMultimapBuilder_replace_closure, A.BuiltMap_BuiltMap_closure, A.BuiltMap_hashCode_closure, A.MapBuilder_replace_closure, A.MapBuilder_replace_closure0, L.BuiltSet_hashCode_closure, E.BuiltSetMultimap_hashCode_closure, E.SetMultimapBuilder_replace_closure, Y.closure, U.Serializers_Serializers_closure, U.Serializers_Serializers_closure0, U.Serializers_Serializers_closure1, U.Serializers_Serializers_closure2, U.Serializers_Serializers_closure3, R.BuiltListMultimapSerializer_serialize_closure, R.BuiltListMultimapSerializer_deserialize_closure, K.BuiltListSerializer_serialize_closure, K.BuiltListSerializer_deserialize_closure, R.BuiltSetMultimapSerializer_serialize_closure, R.BuiltSetMultimapSerializer_deserialize_closure, O.BuiltSetSerializer_serialize_closure, O.BuiltSetSerializer_deserialize_closure, M.CanonicalizedMap_addAll_closure, M.CanonicalizedMap_forEach_closure, M.CanonicalizedMap_keys_closure, M.CanonicalizedMap_map_closure, M.CanonicalizedMap_putIfAbsent_closure, M.CanonicalizedMap_values_closure, M.CanonicalizedMap_toString_closure, M._isToStringVisiting_closure, L.stronglyConnectedComponents_strongConnect, G.BaseRequest_closure, G.BaseRequest_closure0, O.BrowserClient_send_closure, O.BrowserClient_send__closure, O.BrowserClient_send__closure0, O.BrowserClient_send_closure0, Z.ByteStream_toBytes_closure, U.Response_fromStream_closure, B.mapToQuery_closure, B.mapToQuery_closure0, Z.CaseInsensitiveMap$from_closure, Z.CaseInsensitiveMap$from_closure0, R.MediaType_MediaType$parse_closure, R.MediaType_toString_closure, R.MediaType_toString__closure, N.expectQuotedString_closure, N.Logger_Logger_closure, M.Context_join_closure, M.Context_joinAll_closure, M.Context_split_closure, M._validateArgList_closure, X.ParsedPath_normalize_closure, X.hashObjects_closure, U.Highlighter__writeFirstLine_closure, U.Highlighter__writeFirstLine_closure0, U.Highlighter__writeFirstLine_closure1, U.Highlighter__writeFirstLine_closure2, U.Highlighter__writeIntermediateLines_closure, U.Highlighter__writeLastLine_closure, U.Highlighter__writeLastLine_closure0, U.Highlighter__writeLastLine_closure1, U.Highlighter__writeSidebar_closure, D.main_closure, D.main_closure0, D.main_closure1, D.main_closure2, D.main_closure3, D.main__closure, D.main_closure4, D._moduleLibraries_closure, D._reloadModule_closure, D._reloadModule_closure0]);
    _inherit(H.CastList, H._CastListBase);
    _inherit(P.MapBase, P.MapMixin);
    _inheritMany(P.MapBase, [H.CastMap, P.UnmodifiableMapBase, H.JsLinkedHashMap, P._HashMap, P._JsonMap, W._AttributeMap, W._DataAttributeMap, P._CaseInsensitiveStringMap]);
    _inherit(P.ListBase, P._ListBase_Object_ListMixin);
    _inheritMany(P.ListBase, [H.UnmodifiableListBase, H.FixedLengthListBase, W._ChildrenElementList, W.ElementList, W._FrozenElementList, W._ChildNodeListLazy, W._WrappedList, P.FilteredElementList, B.CombinedListView, N._TypedDataBuffer]);
    _inheritMany(H.UnmodifiableListBase, [H.CodeUnits, P.UnmodifiableListView, P._UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin]);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.EmptyIterable, H.LinkedHashMapKeyIterable, P._HashMapKeyIterable, P._Es6MapIterable, P._MapBaseValueIterable, P._SplayTreeKeyIterable, P._SplayTreeValueIterable, P.Set]);
    _inheritMany(H.ListIterable, [H.SubListIterable, H.MappedListIterable, H._ListIndicesIterable, H.ReversedListIterable, P.ListQueue, P._JsonMapKeyIterable, P._GeneratorIterable]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [H.MappedIterator, H.WhereIterator, H.TakeIterator, H.TakeWhileIterator, H.SkipIterator, H.SkipWhileIterator, L.EnumerateIterator]);
    _inherit(H.EfficientLengthTakeIterable, H.TakeIterable);
    _inherit(H.EfficientLengthSkipIterable, H.SkipIterable);
    _inherit(H.EfficientLengthFollowedByIterable, H.FollowedByIterable);
    _inheritMany(P.IterableBase, [H.LinkedList, H._AllMatchesIterable, P._SyncStarIterable, S.CombinedIterableView, O.EmptyUnmodifiableSet, A.IterableZip, B.PathSet, S.TreeSet, X.Optional, L.InfiniteIterable, L.EnumerateIterable, L.GeneratingIterable, L._Merge, L._Partition]);
    _inheritMany(P.UnmodifiableMapBase, [H.ListMapView, L.CombinedMapView]);
    _inheritMany(P.MapView, [P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, K.PathMap]);
    _inherit(P.UnmodifiableMapView, P._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(H.ConstantMapView, P.UnmodifiableMapView);
    _inheritMany(H.ConstantMap, [H.ConstantStringMap, H.GeneralConstantMap]);
    _inherit(H.ConstantProtoMap, H.ConstantStringMap);
    _inheritMany(H.Instantiation, [H.Instantiation1, H.Instantiation2, H.Instantiation3, H.Instantiation4, H.Instantiation5, H.Instantiation6, H.Instantiation7, H.Instantiation8, H.Instantiation9, H.Instantiation10, H.Instantiation11, H.Instantiation12, H.Instantiation13, H.Instantiation14, H.Instantiation15, H.Instantiation16, H.Instantiation17, H.Instantiation18, H.Instantiation19, H.Instantiation20]);
    _inheritMany(P.Error, [H.NullError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.TypeErrorImplementation, H.CastErrorImplementation, P.FallThroughError, H.RuntimeError, H.DeferredNotLoadedError, H.UnimplementedNoSuchMethodError, H.MainError, P.AssertionError, P.JsonUnsupportedObjectError, P._CompileTimeError, P._DuplicatedFieldInitializerError, P.CastError, P.NullThrownError, P.ArgumentError, P.AbstractClassInstantiationError, P.NoSuchMethodError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError, Y.BuiltValueNullFieldError, Y.BuiltValueMissingGenericsError, Y.BuiltValueNestedFieldError, U.DeserializationError]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(H.JavaScriptIndexingBehavior, J.JSMutableIndexable);
    _inherit(H.FallThroughErrorImplementation, P.FallThroughError);
    _inheritMany(P.AssertionError, [H._AssertionError, H._UnreachableError, P.TypeError]);
    _inheritMany(H.JsLinkedHashMap, [H.Es6LinkedHashMap, P._LinkedIdentityHashMap, P._LinkedCustomHashMap]);
    _inherit(H._LazyMangledInstanceNamesMap, H._LazyMangledNamesMap);
    _inherit(H._NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin, H._NativeFloat32x4List_Object_ListMixin);
    _inherit(H.NativeFloat32x4List, H._NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeInt32x4List_Object_ListMixin_FixedLengthListMixin, H._NativeInt32x4List_Object_ListMixin);
    _inherit(H.NativeInt32x4List, H._NativeInt32x4List_Object_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin, H._NativeFloat64x2List_Object_ListMixin);
    _inherit(H.NativeFloat64x2List, H._NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedData, [H.NativeByteData, H.NativeTypedArray]);
    _inheritMany(H.NativeTypedArray, [H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfDouble, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfInt, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedArrayOfDouble, [H.NativeFloat32List, H.NativeFloat64List]);
    _inheritMany(H.NativeTypedArrayOfInt, [H.NativeInt16List, H.NativeInt32List, H.NativeInt8List, H.NativeUint16List, H.NativeUint32List, H.NativeUint8ClampedList, H.NativeUint8List]);
    _inheritMany(P._StreamImpl, [P._ControllerStream, P._GeneratedStreamImpl]);
    _inherit(P._BroadcastStream, P._ControllerStream);
    _inheritMany(P._BufferingStreamSubscription, [P._ControllerSubscription, P._ForwardingStreamSubscription, P._SinkTransformerStreamSubscription]);
    _inherit(P._BroadcastSubscription, P._ControllerSubscription);
    _inheritMany(P._BroadcastStreamController, [P._SyncBroadcastStreamController, P._AsyncBroadcastStreamController]);
    _inherit(P._AsBroadcastStreamController, P._SyncBroadcastStreamController);
    _inheritMany(P._Completer, [P._AsyncCompleter, P._SyncCompleter]);
    _inheritMany(P._StreamController, [P._AsyncStreamController, P._SyncStreamController]);
    _inherit(P._StreamControllerAddStreamState, P._AddStreamState);
    _inheritMany(P._PendingEvents, [P._IterablePendingEvents, P._StreamImplEvents]);
    _inheritMany(P._DelayedEvent, [P._DelayedData, P._DelayedError]);
    _inheritMany(P._ForwardingStream, [P._WhereStream, P._MapStream, P._ExpandStream, P._HandleErrorStream, P._TakeStream, P._TakeWhileStream, P._SkipStream, P._SkipWhileStream, P._DistinctStream]);
    _inherit(P._StateStreamSubscription, P._ForwardingStreamSubscription);
    _inherit(P._StreamHandlerTransformer, P._StreamSinkTransformer);
    _inheritMany(P._Zone, [P._CustomZone, P._RootZone]);
    _inheritMany(P._HashMap, [P._IdentityHashMap, P._CustomHashMap]);
    _inherit(P._Es6LinkedIdentityHashMap, P._LinkedIdentityHashMap);
    _inheritMany(P._SetBase, [P._HashSet, P._LinkedHashSet, P._UnmodifiableSet]);
    _inheritMany(P._HashSet, [P._IdentityHashSet, P._CustomHashSet]);
    _inheritMany(P._LinkedHashSet, [P._LinkedIdentityHashSet, P._LinkedCustomHashSet]);
    _inherit(P.DoubleLinkedQueueEntry, P._DoubleLink);
    _inherit(P._DoubleLinkedQueueEntry, P.DoubleLinkedQueueEntry);
    _inheritMany(P._DoubleLinkedQueueEntry, [P._DoubleLinkedQueueElement, P._DoubleLinkedQueueSentinel]);
    _inherit(P.SetBase, P._SetBase_Object_SetMixin);
    _inherit(P._SplayTreeMapNode, P._SplayTreeNode);
    _inheritMany(P._SplayTree, [P._SplayTreeMap__SplayTree_MapMixin, P._SplayTreeSet__SplayTree_IterableMixin]);
    _inherit(P.SplayTreeMap, P._SplayTreeMap__SplayTree_MapMixin);
    _inheritMany(P._SplayTreeIterator, [P._SplayTreeKeyIterator, P._SplayTreeValueIterator, P._SplayTreeNodeIterator]);
    _inherit(P._SplayTreeSet__SplayTree_IterableMixin_SetMixin, P._SplayTreeSet__SplayTree_IterableMixin);
    _inherit(P.SplayTreeSet, P._SplayTreeSet__SplayTree_IterableMixin_SetMixin);
    _inherit(P.StringConversionSinkBase, P.StringConversionSinkMixin);
    _inheritMany(P.StringConversionSinkBase, [P._StringSinkConversionSink, P._UnicodeSubsetEncoderSink, P._Base64DecoderSink, P._HtmlEscapeSink, P._LineSplitterSink, P._StringAdapterSink, P._WindowsCodePageEncoderSink, A._HexDecoderSink, B._PercentDecoderSink, N.StringAccumulatorSink]);
    _inheritMany(P._StringSinkConversionSink, [P._JsonDecoderSink, P._StringCallbackSink]);
    _inheritMany(P.Codec, [P.Encoding, P.Base64Codec, P._FusedCodec, P._InvertedCodec, P.JsonCodec, P.ZLibCodec, P.GZipCodec, N.HexCodec, E.IdentityCodec, U.PercentCodec, S.ChunkedCodingCodec]);
    _inheritMany(P.Encoding, [P.AsciiCodec, P.Latin1Codec, P.Utf8Codec, P.SystemEncoding]);
    _inheritMany(P._UnicodeSubsetEncoder, [P.AsciiEncoder, P.Latin1Encoder]);
    _inheritMany(P._UnicodeSubsetDecoder, [P.AsciiDecoder, P.Latin1Decoder]);
    _inheritMany(P.ByteConversionSinkBase, [P._ErrorHandlingAsciiDecoderSink, P._SimpleAsciiDecoderSink, P._Base64EncoderSink, P._ByteAdapterSink, P._ByteCallbackSink, P._Latin1DecoderSink, P._WindowsCodePageDecoderSink, A.ByteAccumulatorSink, A._HexDecoderByteSink, R._HexEncoderSink, B._PercentDecoderByteSink, B._PercentEncoderSink, B._Sink, E._Sink0]);
    _inherit(P._BufferCachingBase64Encoder, P._Base64Encoder);
    _inheritMany(P._Base64EncoderSink, [P._AsciiBase64EncoderSink, P._Utf8Base64EncoderSink]);
    _inherit(P.JsonCyclicError, P.JsonUnsupportedObjectError);
    _inheritMany(P._JsonStringifier, [P._JsonStringStringifier, P._JsonUtf8Stringifier]);
    _inherit(P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, P._JsonStringStringifier);
    _inherit(P._JsonStringStringifierPretty, P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin);
    _inherit(P.__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin, P._JsonUtf8Stringifier);
    _inherit(P._JsonUtf8StringifierPretty, P.__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin);
    _inherit(P._Latin1AllowInvalidDecoderSink, P._Latin1DecoderSink);
    _inherit(P._LineSplitterEventSink, P._LineSplitterSink);
    _inherit(P.ClosableStringSink, P.StringSink);
    _inherit(P.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin, P._Utf8Encoder);
    _inherit(P._Utf8EncoderSink, P.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin);
    _inheritMany(P.num, [P.double, P.int]);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inherit(P._DataUri, P._Uri);
    _inheritMany(P.Metric, [P.Gauge, P.Counter]);
    _inheritMany(W.EventTarget, [W.Node, W.Sensor, W.AccessibleNode, W.Animation, W.ApplicationCache, W.BackgroundFetchRegistration, W.BatteryManager, W.BroadcastChannel, W.MediaStreamTrack, W.WorkerGlobalScope, W.EventSource, W.FileReader, W.FileWriter, W.FontFaceSet, W.HttpRequestEventTarget, W.MediaDevices, W.MediaKeySession, W.MediaQueryList, W.MediaRecorder, W.MediaSource, W.MediaStream, W.MessagePort, W.MidiAccess, W.MidiPort, W.NetworkInformation, W.Notification, W.OffscreenCanvas, W.PaymentRequest, W.Performance, W.PermissionStatus, W.PresentationAvailability, W.PresentationConnection, W.PresentationConnectionList, W.PresentationRequest, W.RemotePlayback, W.RtcDataChannel, W.RtcDtmfSender, W.RtcPeerConnection, W.ScreenOrientation, W.ServiceWorker, W.ServiceWorkerContainer, W.ServiceWorkerRegistration, W.SharedWorker, W.SourceBuffer, W._SourceBufferList_EventTarget_ListMixin, W.SpeechRecognition, W.SpeechSynthesis, W.SpeechSynthesisUtterance, W.TextTrack, W.TextTrackCue, W._TextTrackList_EventTarget_ListMixin, W.VR, W.VRDevice, W.VRDisplay, W.VRSession, W.VideoTrackList, W.VisualViewport, W.WebSocket0, W.Window, W.WindowEventHandlers, W.Worker, W.WorkerPerformance, W._BluetoothDevice, W._BluetoothRemoteGATTCharacteristic, W._Clipboard, W._MojoInterfaceInterceptor, W._USB, P.Database, P.Request0, P.Transaction, P.AudioNode, P.BaseAudioContext, P.AudioTrackList]);
    _inheritMany(W.Node, [W.Element, W.CharacterData, W.Document, W.DocumentFragment, W._Attr, W._DocumentType]);
    _inheritMany(W.Element, [W.HtmlElement, P.SvgElement]);
    _inheritMany(W.Event, [W.ExtendableEvent, W.AnimationEvent, W.AnimationPlaybackEvent, W.ApplicationCacheErrorEvent, W.BeforeInstallPromptEvent, W.BeforeUnloadEvent, W.BlobEvent, W.ClipboardEvent, W.CloseEvent, W.UIEvent, W.CustomEvent, W.DeviceMotionEvent, W.DeviceOrientationEvent, W.ErrorEvent, W.FontFaceSetLoadEvent, W.GamepadEvent, W.HashChangeEvent, W.MediaEncryptedEvent, W.MediaKeyMessageEvent, W.MediaQueryListEvent, W.MediaStreamEvent, W.MediaStreamTrackEvent, W.MessageEvent, W.MidiConnectionEvent, W.MidiMessageEvent, W.MutationEvent, W.PageTransitionEvent, W.PaymentRequestUpdateEvent, W.PopStateEvent, W.PresentationConnectionAvailableEvent, W.PresentationConnectionCloseEvent, W.ProgressEvent, W.PromiseRejectionEvent, W.RtcDataChannelEvent, W.RtcDtmfToneChangeEvent, W.RtcPeerConnectionIceEvent, W.RtcTrackEvent, W.SecurityPolicyViolationEvent, W.SensorErrorEvent, W.SpeechRecognitionError, W.SpeechRecognitionEvent, W.SpeechSynthesisEvent, W.StorageEvent, W.TrackEvent, W.TransitionEvent, W.VRDeviceEvent, W.VRDisplayEvent, W.VRSessionEvent, W._MojoInterfaceRequestEvent, W._USBConnectionEvent, P.VersionChangeEvent, P.AudioProcessingEvent, P.OfflineAudioCompletionEvent, P.ContextEvent]);
    _inheritMany(W.ExtendableEvent, [W.AbortPaymentEvent, W.BackgroundFetchEvent, W.CanMakePaymentEvent, W.ExtendableMessageEvent, W.FetchEvent, W.ForeignFetchEvent, W.InstallEvent, W.NotificationEvent, W.PaymentRequestEvent, W.PushEvent, W.SyncEvent]);
    _inheritMany(W.Sensor, [W.OrientationSensor, W.Accelerometer, W.AmbientLightSensor, W.Gyroscope, W.Magnetometer]);
    _inheritMany(W.OrientationSensor, [W.AbsoluteOrientationSensor, W.RelativeOrientationSensor]);
    _inheritMany(W.HtmlElement, [W.AnchorElement, W.AreaElement, W.MediaElement, W.BRElement, W.BaseElement, W.BodyElement, W.ButtonElement, W.CanvasElement, W.ContentElement, W.DListElement, W.DataElement, W.DataListElement, W.DetailsElement, W.DialogElement, W.DivElement, W.EmbedElement, W.FieldSetElement, W.FormElement, W.HRElement, W.HeadElement, W.HeadingElement, W.HtmlHtmlElement, W.IFrameElement, W.ImageElement, W.InputElement, W.LIElement, W.LabelElement, W.LegendElement, W.LinkElement, W.MapElement, W.MenuElement, W.MetaElement, W.MeterElement, W.ModElement, W.OListElement, W.ObjectElement, W.OptGroupElement, W.OptionElement, W.OutputElement, W.ParagraphElement, W.ParamElement, W.PictureElement, W.PreElement, W.ProgressElement, W.QuoteElement, W.ScriptElement, W.SelectElement, W.ShadowElement, W.SlotElement, W.SourceElement, W.SpanElement, W.StyleElement, W.TableCaptionElement, W.TableCellElement, W.TableColElement, W.TableElement, W.TableRowElement, W.TableSectionElement, W.TemplateElement, W.TextAreaElement, W.TimeElement, W.TitleElement, W.TrackElement, W.UListElement, W.UnknownElement, W._HTMLDirectoryElement, W._HTMLFontElement, W._HTMLFrameElement, W._HTMLFrameSetElement, W._HTMLMarqueeElement]);
    _inherit(W.AnimationEffectTiming, W.AnimationEffectTimingReadOnly);
    _inheritMany(W.WorkletGlobalScope, [W.AnimationWorkletGlobalScope, W.PaintWorkletGlobalScope, P.AudioWorkletGlobalScope]);
    _inheritMany(W.MediaElement, [W.AudioElement, W.VideoElement]);
    _inheritMany(W.AuthenticatorResponse, [W.AuthenticatorAssertionResponse, W.AuthenticatorAttestationResponse]);
    _inheritMany(W.BackgroundFetchEvent, [W.BackgroundFetchClickEvent, W.BackgroundFetchFailEvent, W.BackgroundFetchedEvent]);
    _inherit(W.BackgroundFetchSettledFetch, W.BackgroundFetchFetch);
    _inheritMany(W.CharacterData, [W.Text, W.Comment, W.ProcessingInstruction]);
    _inherit(W.CDataSection, W.Text);
    _inherit(W.CanvasCaptureMediaStreamTrack, W.MediaStreamTrack);
    _inheritMany(W.UIEvent, [W.CompositionEvent, W.FocusEvent, W.KeyboardEvent, W.MouseEvent, W.TextEvent, W.TouchEvent]);
    _inheritMany(W.CssRule, [W.CssCharsetRule, W.CssGroupingRule, W.CssFontFaceRule, W.CssImportRule, W.CssKeyframeRule, W.CssKeyframesRule, W.CssNamespaceRule, W.CssPageRule, W.CssStyleRule, W.CssViewportRule]);
    _inherit(W.CssConditionRule, W.CssGroupingRule);
    _inheritMany(W.CssStyleValue, [W.CssResourceValue, W.CssKeywordValue, W.CssNumericValue, W.CssPositionValue, W.CssTransformValue, W.CssUnparsedValue]);
    _inherit(W.CssImageValue, W.CssResourceValue);
    _inheritMany(W.CssTransformComponent, [W.CssMatrixComponent, W.CssPerspective, W.CssRotation, W.CssScale, W.CssSkew, W.CssTranslation]);
    _inheritMany(W.CssConditionRule, [W.CssMediaRule, W.CssSupportsRule]);
    _inherit(W.CssStyleDeclaration, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase);
    _inherit(W._CssStyleDeclarationSet, W.__CssStyleDeclarationSet_Object_CssStyleDeclarationBase);
    _inherit(W.CssStyleSheet, W.StyleSheet);
    _inherit(W.CssUnitValue, W.CssNumericValue);
    _inherit(W.CssurlImageValue, W.CssImageValue);
    _inheritMany(W.WorkerGlobalScope, [W.DedicatedWorkerGlobalScope, W.ServiceWorkerGlobalScope, W.SharedWorkerGlobalScope]);
    _inheritMany(W.ReportBody, [W.DeprecationReport, W.InterventionReport]);
    _inheritMany(W.Entry, [W.DirectoryEntry, W.FileEntry]);
    _inheritMany(W.AnimationTimeline, [W.DocumentTimeline, W.ScrollTimeline]);
    _inherit(W.DomMatrix, W.DomMatrixReadOnly);
    _inherit(W.DomPoint, W.DomPointReadOnly);
    _inherit(W._DomRectList_Interceptor_ListMixin_ImmutableListMixin, W._DomRectList_Interceptor_ListMixin);
    _inherit(W.DomRectList, W._DomRectList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._DomStringList_Interceptor_ListMixin_ImmutableListMixin, W._DomStringList_Interceptor_ListMixin);
    _inherit(W.DomStringList, W._DomStringList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.ElementEvents, W.Events);
    _inheritMany(W.Credential, [W.FederatedCredential, W.PasswordCredential, W.PublicKeyCredential]);
    _inherit(W.File, W.Blob);
    _inherit(W._FileList_Interceptor_ListMixin_ImmutableListMixin, W._FileList_Interceptor_ListMixin);
    _inherit(W.FileList, W._FileList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W._HtmlCollection_Interceptor_ListMixin);
    _inherit(W.HtmlCollection, W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.Document, [W.HtmlDocument, W.XmlDocument]);
    _inheritMany(W.HtmlCollection, [W.HtmlFormControlsCollection, W.HtmlOptionsCollection]);
    _inheritMany(W.HttpRequestEventTarget, [W.HttpRequest, W.HttpRequestUpload]);
    _inherit(W.KeyframeEffectReadOnly, W.AnimationEffectReadOnly);
    _inherit(W.KeyframeEffect, W.KeyframeEffectReadOnly);
    _inherit(W.LinearAccelerationSensor, W.Accelerometer);
    _inheritMany(W.MidiPort, [W.MidiInput, W.MidiOutput]);
    _inherit(W.MidiInputMap, W._MidiInputMap_Interceptor_MapMixin);
    _inherit(W.MidiOutputMap, W._MidiOutputMap_Interceptor_MapMixin);
    _inherit(W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin, W._MimeTypeArray_Interceptor_ListMixin);
    _inherit(W.MimeTypeArray, W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.NavigatorConcurrentHardware, [W.Navigator, W._WorkerNavigator]);
    _inherit(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W._NodeList_Interceptor_ListMixin);
    _inherit(W.NodeList, W._NodeList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.PerformanceEntry, [W.PerformanceLongTaskTiming, W.PerformanceMark, W.PerformanceMeasure, W.PerformanceResourceTiming, W.PerformancePaintTiming, W.TaskAttributionTiming]);
    _inherit(W.PerformanceNavigationTiming, W.PerformanceResourceTiming);
    _inherit(W._PluginArray_Interceptor_ListMixin_ImmutableListMixin, W._PluginArray_Interceptor_ListMixin);
    _inherit(W.PluginArray, W._PluginArray_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.MouseEvent, [W.PointerEvent, W.WheelEvent]);
    _inherit(W.RtcStatsReport, W._RtcStatsReport_Interceptor_MapMixin);
    _inherit(W.ShadowRoot, W.DocumentFragment);
    _inherit(W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, W._SourceBufferList_EventTarget_ListMixin);
    _inherit(W.SourceBufferList, W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin, W._SpeechGrammarList_Interceptor_ListMixin);
    _inherit(W.SpeechGrammarList, W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.Storage, W._Storage_Interceptor_MapMixin);
    _inherit(W.StylePropertyMap, W.StylePropertyMapReadonly);
    _inherit(W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin, W._TextTrackCueList_Interceptor_ListMixin);
    _inherit(W.TextTrackCueList, W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, W._TextTrackList_EventTarget_ListMixin);
    _inherit(W.TextTrackList, W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(W._TouchList_Interceptor_ListMixin_ImmutableListMixin, W._TouchList_Interceptor_ListMixin);
    _inherit(W.TouchList, W._TouchList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.VRFrameOfReference, W.VRCoordinateSystem);
    _inherit(W.VttCue, W.TextTrackCue);
    _inheritMany(W._WrappedEvent, [W._BeforeUnloadEvent, W.KeyEvent]);
    _inherit(W.WindowClient, W.Client);
    _inherit(W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin, W.__CssRuleList_Interceptor_ListMixin);
    _inherit(W._CssRuleList, W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W._EntrySync, [W._DirectoryEntrySync, W._FileEntrySync]);
    _inherit(W._DomRect, W.DomRectReadOnly);
    _inherit(W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin, W.__GamepadList_Interceptor_ListMixin);
    _inherit(W._GamepadList, W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.__NamedNodeMap_Interceptor_ListMixin);
    _inherit(W._NamedNodeMap, W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.Body, [W._Request, W._Response]);
    _inherit(W._ResourceProgressEvent, W.ProgressEvent);
    _inherit(W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin, W.__SpeechRecognitionResultList_Interceptor_ListMixin);
    _inherit(W._SpeechRecognitionResultList, W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin, W.__StyleSheetList_Interceptor_ListMixin);
    _inherit(W._StyleSheetList, W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W._AttributeMap, [W._ElementAttributeMap, W._NamespacedAttributeMap]);
    _inheritMany(W.CssRect, [W._ContentCssRect, W._PaddingCssRect, W._BorderCssRect, W._MarginCssRect]);
    _inherit(W._ContentCssListRect, W._ContentCssRect);
    _inheritMany(P.SetBase, [P.CssClassSetImpl, M._UnionSet_SetBase_UnmodifiableSetMixin]);
    _inheritMany(P.CssClassSetImpl, [W._MultiElementCssClassSet, W._ElementCssClassSet, P.AttributeClassSet]);
    _inherit(W._ElementEventStreamImpl, W._EventStream);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inherit(W._CustomKeyEventStreamImpl, W._CustomEventStreamImpl);
    _inherit(W._KeyboardEventHandler, W.EventStreamProvider);
    _inheritMany(W._SimpleNodeValidator, [W._CustomElementNodeValidator, W._TemplatingNodeValidator]);
    _inherit(P._StructuredCloneDart2Js, P._StructuredClone);
    _inherit(P._AcceptStructuredCloneDart2Js, P._AcceptStructuredClone);
    _inherit(P.CursorWithValue, P.Cursor);
    _inherit(P.OpenDBRequest, P.Request0);
    _inheritMany(P._FilterSink, [P._ZLibEncoderSink, P._ZLibDecoderSink]);
    _inheritMany(P.FileSystemEntity, [P._Directory, P._File, P._Link]);
    _inherit(P._FileStreamConsumer, P.StreamConsumer);
    _inheritMany(P.FileSystemEvent, [P.FileSystemCreateEvent, P.FileSystemModifyEvent, P.FileSystemDeleteEvent, P.FileSystemMoveEvent]);
    _inheritMany(P._IOResourceInfo, [P._ReadWriteResourceInfo, P._ProcessResourceInfo]);
    _inheritMany(P._ReadWriteResourceInfo, [P._FileResourceInfo, P._SocketResourceInfo]);
    _inherit(P._IOSinkImpl0, P._StreamSinkImpl0);
    _inherit(P._IOOverridesScope, P.IOOverrides);
    _inheritMany(P.TlsException, [P.HandshakeException, P.CertificateException]);
    _inherit(P.Stdin, P._StdStream);
    _inherit(P.Stdout, P._StdSink);
    _inheritMany(P.JsObject, [P.JsFunction, P._JsArray_JsObject_ListMixin]);
    _inherit(P.JsArray, P._JsArray_JsObject_ListMixin);
    _inheritMany(P._RectangleBase, [P.Rectangle, P.MutableRectangle]);
    _inherit(P.TypeVariableMirror, P.TypeMirror);
    _inheritMany(P.SvgElement, [P.GraphicsElement, P.AnimationElement, P.DescElement, P.DiscardElement, P.FEBlendElement, P.FEColorMatrixElement, P.FEComponentTransferElement, P.FECompositeElement, P.FEConvolveMatrixElement, P.FEDiffuseLightingElement, P.FEDisplacementMapElement, P.FEDistantLightElement, P.FEFloodElement, P._SVGComponentTransferFunctionElement, P.FEGaussianBlurElement, P.FEImageElement, P.FEMergeElement, P.FEMergeNodeElement, P.FEMorphologyElement, P.FEOffsetElement, P.FEPointLightElement, P.FESpecularLightingElement, P.FESpotLightElement, P.FETileElement, P.FETurbulenceElement, P.FilterElement, P._GradientElement, P.MarkerElement, P.MaskElement, P.MetadataElement, P.PatternElement, P.ScriptElement0, P.StopElement, P.StyleElement0, P.SymbolElement, P.TitleElement0, P.ViewElement, P._SVGFEDropShadowElement, P._SVGMPathElement]);
    _inheritMany(P.GraphicsElement, [P.AElement, P.GeometryElement, P.ClipPathElement, P.DefsElement, P.ForeignObjectElement, P.GElement, P.ImageElement0, P.SvgSvgElement, P.SwitchElement, P.TextContentElement, P.UseElement]);
    _inheritMany(P.AnimationElement, [P.AnimateElement, P.AnimateMotionElement, P.AnimateTransformElement, P.SetElement]);
    _inheritMany(P.GeometryElement, [P.CircleElement, P.EllipseElement, P.LineElement, P.PathElement, P.PolygonElement, P.PolylineElement, P.RectElement]);
    _inheritMany(P._SVGComponentTransferFunctionElement, [P.FEFuncAElement, P.FEFuncBElement, P.FEFuncGElement, P.FEFuncRElement]);
    _inherit(P._LengthList_Interceptor_ListMixin_ImmutableListMixin, P._LengthList_Interceptor_ListMixin);
    _inherit(P.LengthList, P._LengthList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(P._GradientElement, [P.LinearGradientElement, P.RadialGradientElement]);
    _inherit(P._NumberList_Interceptor_ListMixin_ImmutableListMixin, P._NumberList_Interceptor_ListMixin);
    _inherit(P.NumberList, P._NumberList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._StringList_Interceptor_ListMixin_ImmutableListMixin, P._StringList_Interceptor_ListMixin);
    _inherit(P.StringList, P._StringList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(P.TextContentElement, [P.TextPositioningElement, P.TextPathElement]);
    _inheritMany(P.TextPositioningElement, [P.TSpanElement, P.TextElement]);
    _inherit(P._TransformList_Interceptor_ListMixin_ImmutableListMixin, P._TransformList_Interceptor_ListMixin);
    _inherit(P.TransformList, P._TransformList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(P.TypedData, [P._TypedIntList, P._TypedFloatList]);
    _inherit(P.UnmodifiableUint8ListView, P._UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableInt8ListView, P._UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableUint8ClampedListView, P._UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableUint16ListView, P._UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableInt16ListView, P._UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableUint32ListView, P._UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableInt32ListView, P._UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableUint64ListView, P._UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableInt64ListView, P._UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableInt32x4ListView, P._UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableFloat32x4ListView, P._UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableFloat64x2ListView, P._UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableFloat32ListView, P._UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableFloat64ListView, P._UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inheritMany(P.AudioNode, [P.AnalyserNode, P.AudioScheduledSourceNode, P.AudioDestinationNode, P.AudioWorkletNode, P.BiquadFilterNode, P.ChannelMergerNode, P.ChannelSplitterNode, P.ConvolverNode, P.DelayNode, P.DynamicsCompressorNode, P.GainNode, P.IirFilterNode, P.MediaElementAudioSourceNode, P.MediaStreamAudioDestinationNode, P.MediaStreamAudioSourceNode, P.PannerNode, P.ScriptProcessorNode, P.StereoPannerNode, P.WaveShaperNode]);
    _inheritMany(P.AudioScheduledSourceNode, [P.AudioBufferSourceNode, P.ConstantSourceNode, P.OscillatorNode]);
    _inheritMany(P.BaseAudioContext, [P.AudioContext, P.OfflineAudioContext]);
    _inherit(P.AudioParamMap, P._AudioParamMap_Interceptor_MapMixin);
    _inherit(P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin, P._SqlResultSetRowList_Interceptor_ListMixin);
    _inherit(P.SqlResultSetRowList, P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(P.StreamView, [Y.DelegatingStream, Z.ByteStream]);
    _inherit(R.ResultFuture, R.DelegatingFuture);
    _inheritMany(G._ListRequest, [G._TakeRequest, G._LookAheadRequest]);
    _inheritMany(O.DelegatingStreamSink, [X._SafeCloseSink, F._CloseGuaranteeSink]);
    _inherit(T._CancelOnErrorSubscriptionWrapper, Y.DelegatingStreamSubscription);
    _inherit(M.BuildStatus, Y.EnumClass);
    _inherit(M._$DefaultBuildResult, M.DefaultBuildResult);
    _inherit(M._$BuildResults, M.BuildResults);
    _inherit(S._BuiltList, S.BuiltList);
    _inherit(S.OverriddenHashcodeBuiltList, S._BuiltList);
    _inherit(M._BuiltListMultimap, M.BuiltListMultimap);
    _inherit(M.OverriddenHashcodeBuiltListMultimap, M._BuiltListMultimap);
    _inherit(A._BuiltMap, A.BuiltMap);
    _inherit(A.OverriddenHashcodeBuiltMap, A._BuiltMap);
    _inherit(L._BuiltSet, L.BuiltSet);
    _inherit(L.OverriddenHashcodeBuiltSet, L._BuiltSet);
    _inherit(E._BuiltSetMultimap, E.BuiltSetMultimap);
    _inherit(E.OverriddenHashcodeBuiltSetMultimap, E._BuiltSetMultimap);
    _inheritMany(A.JsonObject, [A.BoolJsonObject, A.ListJsonObject, A.MapJsonObject, A.NumJsonObject, A.StringJsonObject]);
    _inheritMany(U._UnorderedEquality, [U.UnorderedIterableEquality, U.SetEquality]);
    _inherit(N.EqualityMap, M.DelegatingMap);
    _inheritMany(M._DelegatingIterableBase, [M.DelegatingIterable, M._MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin, M.MapValueSet]);
    _inheritMany(M.DelegatingIterable, [M.DelegatingSet, M.DelegatingList, M.DelegatingQueue]);
    _inheritMany(M.DelegatingSet, [E.EqualitySet, L._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin]);
    _inherit(Q.QueueList, Q._QueueList_Object_ListMixin);
    _inherit(Q._CastQueueList, Q.QueueList);
    _inherit(M.UnionSet, M._UnionSet_SetBase_UnmodifiableSetMixin);
    _inherit(L._NonGrowableListView_DelegatingList_NonGrowableListMixin, M.DelegatingList);
    _inherit(L.NonGrowableListView, L._NonGrowableListView_DelegatingList_NonGrowableListMixin);
    _inherit(L.UnmodifiableSetView, L._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin);
    _inherit(M.MapKeySet, M._MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin);
    _inherit(R.DigestSink, P.Sink);
    _inheritMany(A.Hash, [M.MD5, L.Sha1, V.Sha256]);
    _inheritMany(G.HashSink, [M._MD5Sink, L._Sha1Sink, V._Sha256Sink]);
    _inherit(O.BrowserClient, E.BaseClient);
    _inherit(O.Request, G.BaseRequest);
    _inheritMany(T.BaseResponse, [U.Response, X.StreamedResponse]);
    _inherit(Z.CaseInsensitiveMap, M.CanonicalizedMap);
    _inherit(B.InternalStyle, O.Style);
    _inheritMany(B.InternalStyle, [E.PosixStyle, F.UrlStyle, L.WindowsStyle]);
    _inheritMany(S.DelegatingIterable0, [S.DelegatingList0, S.DelegatingQueue0, S.DelegatingSet0]);
    _inheritMany(S._BaseMultimap, [S.ListMultimap, S.SetMultimap]);
    _inheritMany(S._WrappedIterable, [S._WrappedList0, S._WrappedSet]);
    _inherit(S.AvlTreeSet, S.TreeSet);
    _inherit(S.AvlNode, S._TreeNode);
    _inheritMany(L.InfiniteIterable, [L._Count, L._Cycle]);
    _inherit(Y.FileLocation, D.SourceLocationMixin);
    _inheritMany(Y.SourceSpanMixin, [Y._FileSpan, V.SourceSpanBase]);
    _inherit(V.SourceLocationBase, V.SourceLocation);
    _inherit(G.SourceSpanFormatException, G.SourceSpanException);
    _inherit(X.SourceSpanWithContext, V.SourceSpanBase);
    _inheritMany(R.StreamChannelMixin, [M.SseClient, F.CloseGuaranteeChannel, L.DelegatingStreamChannel, K.GuaranteeChannel, U.IsolateChannel, D._MultiChannel, D.VirtualChannel, R._StreamChannel]);
    _inheritMany(X.StringScanner, [S.SpanScanner, Z.LineScanner, R.RelativeSpanScanner]);
    _inherit(D.EagerSpanScanner, S.SpanScanner);
    _inherit(E.StringScannerException, G.SourceSpanFormatException);
    _inheritMany(N._TypedDataBuffer, [N._IntBuffer, N._FloatBuffer, N.Int32x4Buffer, N.Float32x4Buffer]);
    _inheritMany(N._IntBuffer, [N.Uint8Buffer, N.Int8Buffer, N.Uint8ClampedBuffer, N.Uint16Buffer, N.Int16Buffer, N.Uint32Buffer, N.Int32Buffer, N.Uint64Buffer, N.Int64Buffer]);
    _inheritMany(N._FloatBuffer, [N.Float32Buffer, N.Float64Buffer]);
    _inherit(E._$ConnectRequest, E.ConnectRequest);
    _inherit(M._$DevToolsRequest, M.DevToolsRequest);
    _inherit(M._$DevToolsResponse, M.DevToolsResponse);
    _inherit(A._$RunRequest, A.RunRequest);
    _mixin(H.UnmodifiableListBase, H.UnmodifiableListMixin);
    _mixin(H.__CastListBase__CastIterableBase_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(P._AsyncStreamController, P._AsyncStreamControllerDispatch);
    _mixin(P._ListBase_Object_ListMixin, P.ListMixin);
    _mixin(P._SplayTreeSet__SplayTree_IterableMixin, P.IterableMixin);
    _mixin(P._SplayTreeSet__SplayTree_IterableMixin_SetMixin, P.SetMixin);
    _mixin(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P._UnmodifiableMapMixin);
    _mixin(P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, P._JsonPrettyPrintMixin);
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.FileReader_methods = W.FileReader.prototype;
    C.HttpRequest_methods = W.HttpRequest.prototype;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSDouble_methods = J.JSDouble.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNull_methods = J.JSNull.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.KeyboardEvent_methods = W.KeyboardEvent.prototype;
    C.MessageEvent_methods = W.MessageEvent.prototype;
    C.NativeByteBuffer_methods = H.NativeByteBuffer.prototype;
    C.NativeUint16List_methods = H.NativeUint16List.prototype;
    C.NativeUint8List_methods = H.NativeUint8List.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.AsciiDecoder_false_127 = new P.AsciiDecoder(false, 127, []);
    C.AsciiEncoder_127 = new P.AsciiEncoder(127, []);
    C.Base64Encoder_false = new P.Base64Encoder(false, []);
    C.Base64Codec_Base64Encoder_false = new P.Base64Codec(C.Base64Encoder_false, []);
    C.BuildStatus_failed = new M.BuildStatus("failed", []);
    C.BuildStatus_started = new M.BuildStatus("started", []);
    C.BuildStatus_succeeded = new M.BuildStatus("succeeded", []);
    C.C_AsciiCodec = new P.AsciiCodec([]);
    C.C_Base64Decoder = new P.Base64Decoder([]);
    C.C_DefaultEquality = new U.DefaultEquality([P.Null]);
    C.C_EmptyIterator = new H.EmptyIterator([P.Null]);
    C.C_Endian0 = new P.Endian([]);
    C.C_Endian = new P.Endian([]);
    C.C_HexCodec = new N.HexCodec([]);
    C.C_HexDecoder = new A.HexDecoder([]);
    C.C_HexEncoder = new R.HexEncoder([]);
    C.C_IntegerDivisionByZeroException = new P.IntegerDivisionByZeroException([]);
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST3 = function(hooks) { return hooks; }
;
    C.C_Latin1Codec = new P.Latin1Codec([]);
    C.C_OutOfMemoryError = new P.OutOfMemoryError([]);
    C.C_UnicodeGlyphSet = new K.UnicodeGlyphSet([]);
    C.C_Utf8Codec = new P.Utf8Codec([]);
    C.C_Utf8Encoder = new P.Utf8Encoder([]);
    C.C__DelayedDone = new P._DelayedDone([]);
    C.C__RootZone = new P._RootZone([]);
    C.C_DefaultEquality0 = new U.DefaultEquality([null]);
    C.DeepCollectionEquality_DefaultEquality_false = new U.DeepCollectionEquality(C.C_DefaultEquality0, false, []);
    C.Duration_0 = new P.Duration(0, []);
    C.EventStreamProvider_error = new W.EventStreamProvider("error", [W.Event]);
    C.EventStreamProvider_error0 = new W.EventStreamProvider("error", [W.ProgressEvent]);
    C.EventStreamProvider_keydown = new W.EventStreamProvider("keydown", [W.KeyboardEvent]);
    C.EventStreamProvider_load = new W.EventStreamProvider("load", [W.ProgressEvent]);
    C.EventStreamProvider_open = new W.EventStreamProvider("open", [W.Event]);
    C.Type_bool_lhE = H.createRuntimeType(P.bool);
    C.List_empty2 = H.setRuntimeTypeInfo(makeConstList([]), [U.FullType]);
    C.FullType_6bM = new U.FullType(C.Type_bool_lhE, C.List_empty2, []);
    C.Type_BuiltSetMultimap_9Fi = H.createRuntimeType([E.BuiltSetMultimap,,,]);
    C.Type_Object_xQ6 = H.createRuntimeType(P.Object);
    C.FullType_sIv = new U.FullType(C.Type_Object_xQ6, C.List_empty2, []);
    C.List_Ult = H.setRuntimeTypeInfo(makeConstList([C.FullType_sIv, C.FullType_sIv]), [U.FullType]);
    C.FullType_C1B = new U.FullType(C.Type_BuiltSetMultimap_9Fi, C.List_Ult, []);
    C.Type_BuiltSet_fcN = H.createRuntimeType([L.BuiltSet,,]);
    C.List_0ju = H.setRuntimeTypeInfo(makeConstList([C.FullType_sIv]), [U.FullType]);
    C.FullType_ECn = new U.FullType(C.Type_BuiltSet_fcN, C.List_0ju, []);
    C.Type_BuiltList_iTR = H.createRuntimeType([S.BuiltList,,]);
    C.FullType_GJM = new U.FullType(C.Type_BuiltList_iTR, C.List_0ju, []);
    C.Type_BuildStatus_qBS = H.createRuntimeType(M.BuildStatus);
    C.FullType_GJj = new U.FullType(C.Type_BuildStatus_qBS, C.List_empty2, []);
    C.Type_BuiltListMultimap_2Mt = H.createRuntimeType([M.BuiltListMultimap,,,]);
    C.FullType_UGJ = new U.FullType(C.Type_BuiltListMultimap_2Mt, C.List_Ult, []);
    C.Type_String_k8F = H.createRuntimeType(P.String);
    C.FullType_aZ8 = new U.FullType(C.Type_String_k8F, C.List_empty2, []);
    C.FullType_null_List_empty = new U.FullType(null, C.List_empty2, []);
    C.Type_BuiltMap_qd4 = H.createRuntimeType([A.BuiltMap,,,]);
    C.FullType_sEu = new U.FullType(C.Type_BuiltMap_qd4, C.List_Ult, []);
    C.Int64_0_0_0 = new V.Int64(0, 0, 0, []);
    C.Int64_4194303_4194303_1048575 = new V.Int64(4194303, 4194303, 1048575, []);
    C.JsonCodec_null_null = new P.JsonCodec(null, null, []);
    C.JsonDecoder_null = new P.JsonDecoder(null, []);
    C.JsonEncoder_null_null = new P.JsonEncoder(null, null, []);
    C.Latin1Decoder_false_255 = new P.Latin1Decoder(false, 255, []);
    C.Latin1Encoder_255 = new P.Latin1Encoder(255, []);
    C.Level_INFO_800 = new N.Level("INFO", 800, []);
    C.Level_OFF_2000 = new N.Level("OFF", 2000, []);
    C.Level_WARNING_900 = new N.Level("WARNING", 900, []);
    C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(makeConstList([127, 2047, 65535, 1114111]), [P.int]);
    C.List_2Vk = H.setRuntimeTypeInfo(makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]), [P.int]);
    C.Type_DevToolsResponse_Hhy = H.createRuntimeType(M.DevToolsResponse);
    C.Type__$DevToolsResponse_23h = H.createRuntimeType(M._$DevToolsResponse);
    C.List_41A = H.setRuntimeTypeInfo(makeConstList([C.Type_DevToolsResponse_Hhy, C.Type__$DevToolsResponse_23h]), [P.Type]);
    C.Type_DevToolsRequest_A0n = H.createRuntimeType(M.DevToolsRequest);
    C.Type__$DevToolsRequest_cDy = H.createRuntimeType(M._$DevToolsRequest);
    C.List_BCG = H.setRuntimeTypeInfo(makeConstList([C.Type_DevToolsRequest_A0n, C.Type__$DevToolsRequest_cDy]), [P.Type]);
    C.List_CVk = H.setRuntimeTypeInfo(makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]), [P.int]);
    C.List_JYB = H.setRuntimeTypeInfo(makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]), [P.int]);
    C.List_Type_BuildStatus_qBS = H.setRuntimeTypeInfo(makeConstList([C.Type_BuildStatus_qBS]), [P.Type]);
    C.List_WrN = H.setRuntimeTypeInfo(makeConstList([0, 0, 1048576, 531441, 1048576, 390625, 279936, 823543, 262144, 531441, 1000000, 161051, 248832, 371293, 537824, 759375, 1048576, 83521, 104976, 130321, 160000, 194481, 234256, 279841, 331776, 390625, 456976, 531441, 614656, 707281, 810000, 923521, 1048576, 35937, 39304, 42875, 46656]), [P.int]);
    C.List_empty = H.setRuntimeTypeInfo(makeConstList([]), [P.Null]);
    C.List_empty1 = H.setRuntimeTypeInfo(makeConstList([]), [P.String]);
    C.List_empty0 = makeConstList([]);
    C.List_gRj = H.setRuntimeTypeInfo(makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]), [P.int]);
    C.Type_DefaultBuildResult_2J4 = H.createRuntimeType(M.DefaultBuildResult);
    C.Type__$DefaultBuildResult_aUS = H.createRuntimeType(M._$DefaultBuildResult);
    C.List_j8H = H.setRuntimeTypeInfo(makeConstList([C.Type_DefaultBuildResult_2J4, C.Type__$DefaultBuildResult_aUS]), [P.Type]);
    C.List_nxB = H.setRuntimeTypeInfo(makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]), [P.int]);
    C.List_qNA = H.setRuntimeTypeInfo(makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]), [P.int]);
    C.List_qg40 = H.setRuntimeTypeInfo(makeConstList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]), [P.int]);
    C.List_qg4 = H.setRuntimeTypeInfo(makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]), [P.int]);
    C.Type_ConnectRequest_UGQ = H.createRuntimeType(E.ConnectRequest);
    C.Type__$ConnectRequest_cJC = H.createRuntimeType(E._$ConnectRequest);
    C.List_ssp = H.setRuntimeTypeInfo(makeConstList([C.Type_ConnectRequest_UGQ, C.Type__$ConnectRequest_cJC]), [P.Type]);
    C.Type_RunRequest_Pkw = H.createRuntimeType(A.RunRequest);
    C.Type__$RunRequest_Im4 = H.createRuntimeType(A._$RunRequest);
    C.List_wsa = H.setRuntimeTypeInfo(makeConstList([C.Type_RunRequest_Pkw, C.Type__$RunRequest_Im4]), [P.Type]);
    C.List_zgw = H.setRuntimeTypeInfo(makeConstList(["d", "D", "\u2202", "\xce"]), [P.String]);
    C.Map_empty1 = new H.ConstantStringMap(0, {}, C.List_empty1, [P.String, P.String]);
    C.List_empty3 = H.setRuntimeTypeInfo(makeConstList([]), [P.Symbol0]);
    C.Map_empty0 = new H.ConstantStringMap(0, {}, C.List_empty3, [P.Symbol0, null]);
    C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty0, [null, null]);
    C.Symbol_call = new H.Symbol("call", []);
    C.Type_BigInt_8OV = H.createRuntimeType(P.BigInt);
    C.Type_BoolJsonObject_8HQ = H.createRuntimeType(A.BoolJsonObject);
    C.Type_ByteBuffer_RkP = H.createRuntimeType(P.ByteBuffer);
    C.Type_ByteData_zNC = H.createRuntimeType(P.ByteData);
    C.Type_DateTime_8AS = H.createRuntimeType(P.DateTime);
    C.Type_Duration_SnA = H.createRuntimeType(P.Duration);
    C.Type_Float32List_LB7 = H.createRuntimeType(P.Float32List);
    C.Type_Float64List_LB7 = H.createRuntimeType(P.Float64List);
    C.Type_Int16List_uXf = H.createRuntimeType(P.Int16List);
    C.Type_Int32List_O50 = H.createRuntimeType(P.Int32List);
    C.Type_Int64_gc6 = H.createRuntimeType(V.Int64);
    C.Type_Int8List_ekJ = H.createRuntimeType(P.Int8List);
    C.Type_JSObject_8k0 = H.createRuntimeType(J.JSObject);
    C.Type_JsonObject_gyf = H.createRuntimeType(A.JsonObject);
    C.Type_ListJsonObject_yPV = H.createRuntimeType(A.ListJsonObject);
    C.Type_MapJsonObject_bBG = H.createRuntimeType(A.MapJsonObject);
    C.Type_Null_Yyn = H.createRuntimeType(P.Null);
    C.Type_NumJsonObject_H9C = H.createRuntimeType(A.NumJsonObject);
    C.Type_RegExp_Eeh = H.createRuntimeType(P.RegExp);
    C.Type_StringJsonObject_GAC = H.createRuntimeType(A.StringJsonObject);
    C.Type_Uint16List_2bx = H.createRuntimeType(P.Uint16List);
    C.Type_Uint32List_2bx = H.createRuntimeType(P.Uint32List);
    C.Type_Uint8ClampedList_Jik = H.createRuntimeType(P.Uint8ClampedList);
    C.Type_Uint8List_WLA = H.createRuntimeType(P.Uint8List);
    C.Type_Uri_EFX = H.createRuntimeType(P.Uri);
    C.Type_double_K1J = H.createRuntimeType(P.double);
    C.Type_dynamic_0Rz = H.createRuntimeType(null);
    C.Type_int_tHn = H.createRuntimeType(P.int);
    C.Type_num_cv7 = H.createRuntimeType(P.num);
    C._ZoneFunction__RootZone = new P._ZoneFunction(C.C__RootZone, [{func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: -1}]}]);
  })();
  (function staticFields() {
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $._inTypeAssertion = false;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._BigIntImpl__lastDividendDigits = null;
    $._BigIntImpl__lastDividendUsed = null;
    $._BigIntImpl__lastDivisorDigits = null;
    $._BigIntImpl__lastDivisorUsed = null;
    $._BigIntImpl__lastQuoRemDigits = null;
    $._BigIntImpl__lastQuoRemUsed = null;
    $._BigIntImpl__lastRemUsed = null;
    $._BigIntImpl__lastRem_nsh = null;
    $._indentingBuiltValueToStringHelperIndent = 0;
    $.LogRecord__nextNumber = 0;
    $._currentUriBase = null;
    $._current = null;
  })();
  (function lazyInitializers() {
    var _lazy = hunkHelpers.lazy;
    _lazy($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazy($, "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
      return H.getIsolateAffinityTag("_$dart_js");
    });
    _lazy($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(H.TypeErrorDecoder_buildJavaScriptObject())), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(H.TypeErrorDecoder_buildJavaScriptObjectWithNonClosure())), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null)), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull()), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0)), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined()), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null)), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull()), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0)), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined()), "$isTypeErrorDecoder");
    });
    _lazy($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazy($, "Future__nullFuture", "$get$Future__nullFuture", function() {
      return P._Future$zoneValue(null, C.C__RootZone, P.Null);
    });
    _lazy($, "Future__falseFuture", "$get$Future__falseFuture", function() {
      return P._Future$zoneValue(false, C.C__RootZone, P.bool);
    });
    _lazy($, "_toStringVisiting", "$get$_toStringVisiting", function() {
      return [];
    });
    _lazy($, "Utf8Decoder__decoder", "$get$Utf8Decoder__decoder", function() {
      return P.Utf8Decoder__makeDecoder();
    });
    _lazy($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", function() {
      return H.NativeInt8List_NativeInt8List$fromList(H.setRuntimeTypeInfo([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], [P.int]));
    });
    _lazy($, "Encoding__nameToEncoding", "$get$Encoding__nameToEncoding", function() {
      return P.LinkedHashMap_LinkedHashMap$_literal(["iso_8859-1:1987", C.C_Latin1Codec, "iso-ir-100", C.C_Latin1Codec, "iso_8859-1", C.C_Latin1Codec, "iso-8859-1", C.C_Latin1Codec, "latin1", C.C_Latin1Codec, "l1", C.C_Latin1Codec, "ibm819", C.C_Latin1Codec, "cp819", C.C_Latin1Codec, "csisolatin1", C.C_Latin1Codec, "iso-ir-6", C.C_AsciiCodec, "ansi_x3.4-1968", C.C_AsciiCodec, "ansi_x3.4-1986", C.C_AsciiCodec, "iso_646.irv:1991", C.C_AsciiCodec, "iso646-us", C.C_AsciiCodec, "us-ascii", C.C_AsciiCodec, "us", C.C_AsciiCodec, "ibm367", C.C_AsciiCodec, "cp367", C.C_AsciiCodec, "csascii", C.C_AsciiCodec, "ascii", C.C_AsciiCodec, "csutf8", C.C_Utf8Codec, "utf-8", C.C_Utf8Codec], P.String, P.Encoding);
    });
    _lazy($, "_Uri__isWindowsCached", "$get$_Uri__isWindowsCached", function() {
      return typeof process != "undefined" && Object.prototype.toString.call(process) == "[object process]" && process.platform == "win32";
    });
    _lazy($, "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", function() {
      return P.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$", true);
    });
    _lazy($, "_hasErrorStackProperty", "$get$_hasErrorStackProperty", function() {
      return new Error().stack != void 0;
    });
    _lazy($, "_BigIntImpl_zero", "$get$_BigIntImpl_zero", function() {
      return P._BigIntImpl__BigIntImpl$_fromInt(0);
    });
    _lazy($, "_BigIntImpl_one", "$get$_BigIntImpl_one", function() {
      return P._BigIntImpl__BigIntImpl$_fromInt(1);
    });
    _lazy($, "_BigIntImpl__minusOne", "$get$_BigIntImpl__minusOne", function() {
      return J.$negate$in($.$get$_BigIntImpl_one());
    });
    _lazy($, "_BigIntImpl__bigInt10000", "$get$_BigIntImpl__bigInt10000", function() {
      return P._BigIntImpl__BigIntImpl$_fromInt(10000);
    });
    _lazy($, "_scannerTables", "$get$_scannerTables", function() {
      return P._createTables();
    });
    _lazy($, "Random__secureRandom", "$get$Random__secureRandom", function() {
      return P._JSSecureRandom$();
    });
    _lazy($, "_$buildStatusSerializer", "$get$_$buildStatusSerializer", function() {
      return M._$BuildStatusSerializer$();
    });
    _lazy($, "_$defaultBuildResultSerializer", "$get$_$defaultBuildResultSerializer", function() {
      return M._$DefaultBuildResultSerializer$();
    });
    _lazy($, "newBuiltValueToStringHelper", "$get$newBuiltValueToStringHelper", function() {
      return new Y.closure();
    });
    _lazy($, "_runtimeType", "$get$_runtimeType", function() {
      return J.get$runtimeType$(P.RegExp_RegExp("", true));
    });
    _lazy($, "_toStringVisiting0", "$get$_toStringVisiting0", function() {
      return [];
    });
    _lazy($, "_escapedChar", "$get$_escapedChar", function() {
      return P.RegExp_RegExp('["\\x00-\\x1F\\x7F]', true);
    });
    _lazy($, "token", "$get$token", function() {
      return P.RegExp_RegExp('[^()<>@,;:"\\\\/[\\]?={} \\t\\x00-\\x1F\\x7F]+', true);
    });
    _lazy($, "_lws", "$get$_lws", function() {
      return P.RegExp_RegExp("(?:\\r\\n)?[ \\t]+", true);
    });
    _lazy($, "_quotedString", "$get$_quotedString", function() {
      return P.RegExp_RegExp('"(?:[^"\\x00-\\x1F\\x7F]|\\\\.)*"', true);
    });
    _lazy($, "_quotedPair", "$get$_quotedPair", function() {
      return P.RegExp_RegExp("\\\\(.)", true);
    });
    _lazy($, "nonToken", "$get$nonToken", function() {
      return P.RegExp_RegExp('[()<>@,;:"\\\\/\\[\\]?={} \\t\\x00-\\x1F\\x7F]', true);
    });
    _lazy($, "whitespace", "$get$whitespace", function() {
      return P.RegExp_RegExp("(?:" + H.S($.$get$_lws().get$pattern()) + ")*", true);
    });
    _lazy($, "Logger_root", "$get$Logger_root", function() {
      return N.Logger_Logger("");
    });
    _lazy($, "Logger__loggers", "$get$Logger__loggers", function() {
      return P.LinkedHashMap_LinkedHashMap$_empty(P.String, N.Logger);
    });
    _lazy($, "context", "$get$context", function() {
      return M.createInternal();
    });
    _lazy($, "Style_posix", "$get$Style_posix", function() {
      return E.PosixStyle$();
    });
    _lazy($, "Style_windows", "$get$Style_windows", function() {
      return L.WindowsStyle$();
    });
    _lazy($, "Style_url", "$get$Style_url", function() {
      return F.UrlStyle$();
    });
    _lazy($, "Style_platform", "$get$Style_platform", function() {
      return O.Style__getPlatformStyle();
    });
    _lazy($, "_slashAutoEscape", "$get$_slashAutoEscape", function() {
      return J.$eq$(P.RegExp_RegExp("/", true).get$pattern(), "\\/");
    });
    _lazy($, "_$connectRequestSerializer", "$get$_$connectRequestSerializer", function() {
      return E._$ConnectRequestSerializer$();
    });
    _lazy($, "_$devToolsRequestSerializer", "$get$_$devToolsRequestSerializer", function() {
      return M._$DevToolsRequestSerializer$();
    });
    _lazy($, "_$devToolsResponseSerializer", "$get$_$devToolsResponseSerializer", function() {
      return M._$DevToolsResponseSerializer$();
    });
    _lazy($, "_$runRequestSerializer", "$get$_$runRequestSerializer", function() {
      return A._$RunRequestSerializer$();
    });
    _lazy($, "serializers", "$get$serializers", function() {
      return $.$get$_$serializers();
    });
    _lazy($, "_$serializers", "$get$_$serializers", function() {
      var t1 = U.Serializers_Serializers().toBuilder$0(),
        t2 = J.getInterceptor$ax(t1);
      t2.add$1(t1, M.BuildStatus_serializer());
      t2.add$1(t1, E.ConnectRequest_serializer());
      t2.add$1(t1, M.DefaultBuildResult_serializer());
      t2.add$1(t1, M.DevToolsRequest_serializer());
      t2.add$1(t1, M.DevToolsResponse_serializer());
      t2.add$1(t1, A.RunRequest_serializer());
      return t1.build$0();
    });
  })();
  var init = {mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"}, mangledNames: {}, getTypeFromName: getGlobalFromName, metadata: [], types: [{func: 1, ret: P.Null}, {func: 1, ret: -1}, {func: 1, args: [,]}, {func: 1, ret: P.Object, args: [,]}, {func: 1, ret: P.bool, args: [P.Object]}, {func: 1, ret: P.bool, args: [P.Object, P.Object]}, {func: 1, ret: P.int, args: [P.Object]}, {func: 1, ret: -1, args: [P.Object], opt: [P.StackTrace]}, {func: 1, ret: P.bool, args: [,]}, {func: 1, bounds: [P.Object], ret: [P.Set, 0]}, {func: 1, ret: P.Null, args: [,,]}, {func: 1, ret: P.String, args: [P.String]}, {func: 1, ret: P.Null, args: [W.ProgressEvent]}, {func: 1, ret: -1, args: [,]}, {func: 1, ret: -1, args: [P.Object]}, {func: 1, ret: -1, opt: [P.Object]}, {func: 1, ret: P.String, args: [P.int]}, {func: 1, ret: P.Null, args: [P.String,,]}, {func: 1, ret: -1, args: [P.String, P.String]}, {func: 1, ret: P.String, args: [P.Match]}, {func: 1, ret: P.bool, args: [P.String]}, {func: 1, ret: P.int, args: [,,]}, {func: 1, ret: -1, args: [{func: 1, ret: -1}]}, {func: 1, ret: P.bool, args: [,,]}, {func: 1, ret: P.Null, args: [,]}, {func: 1, ret: P.Null, args: [P.Symbol0,,]}, {func: 1, ret: P.int, args: [P.int, P.int]}, {func: 1, ret: P.int, args: [P.int]}, {func: 1, ret: P.Null, args: [P.String]}, {func: 1, ret: -1, args: [P.Uint8List, P.String, P.int]}, {func: 1, ret: P.Null, args: [P.String, P.String]}, {func: 1, ret: P.Null, args: [P.Object, P.Object]}, {func: 1, ret: -1, args: [W.Event]}, {func: 1, ret: -1, args: [P.String], opt: [,]}, {func: 1, ret: P.Null, args: [,], opt: [P.StackTrace]}, {func: 1, args: [W.Event]}, {func: 1, args: [,,]}, {func: 1, ret: [P._Future,,], args: [,]}, {func: 1, ret: Y.IndentingBuiltValueToStringHelper, args: [P.String]}, {func: 1, ret: [S.ListBuilder, P.Object]}, {func: 1, ret: [M.ListMultimapBuilder, P.Object, P.Object]}, {func: 1, ret: [A.MapBuilder, P.Object, P.Object]}, {func: 1, ret: [L.SetBuilder, P.Object]}, {func: 1, ret: [E.SetMultimapBuilder, P.Object, P.Object]}, {func: 1, ret: -1, args: [P.Function]}, {func: 1, ret: -1, args: [P.String, P.int]}, {func: 1, args: [, P.String]}, {func: 1, ret: -1, args: [, P.StackTrace]}, {func: 1, ret: P.bool, args: [P.String, P.String]}, {func: 1, ret: P.int, args: [P.String]}, {func: 1, ret: -1, args: [[P.List, P.int]]}, {func: 1, ret: U.Response, args: [P.Uint8List]}, {func: 1, ret: [P.Future, G.Module], args: [P.String]}, {func: 1, ret: R.MediaType}, {func: 1, ret: P.Null, args: [{func: 1, ret: -1}]}, {func: 1, ret: N.Logger}, {func: 1, args: [P.String]}, {func: 1, ret: P.int, args: [P.int,,]}, {func: 1, ret: Y.FileSpan, args: [P.int], opt: [P.int]}, {func: 1, ret: P.String, args: [P.String], named: {color: null}}, {func: 1, ret: P.Uint8List, args: [P.int]}, {func: 1, ret: -1, args: [P.String], named: {length: P.int, match: P.Match, position: P.int}}, {func: 1, ret: [P.List, P.String], args: [P.String]}, {func: 1, ret: [P.List, P.String]}, {func: 1, ret: [P.Future, P.Null]}, {func: 1, ret: [P.Future, P.Null], args: [P.String]}, {func: 1, ret: P.Null, args: [W.KeyboardEvent]}, {func: 1, ret: M.DevToolsRequestBuilder, args: [M.DevToolsRequestBuilder]}, {func: 1, ret: E.ConnectRequestBuilder, args: [E.ConnectRequestBuilder]}, {func: 1, ret: D.LibraryWrapper, args: [D.HotReloadableLibrary]}, {func: 1, ret: -1, args: [D.JsError]}, {func: 1, ret: P.int, args: [P.String, P.String]}, {func: 1, ret: P.Uint8List, args: [,,]}, {func: 1, ret: P.Null, args: [, P.StackTrace]}, {func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: -1}]}, {func: 1, ret: P.Null, args: [P.int,,]}, {func: 1, ret: P.int, args: [,]}, {func: 1, ret: P.int, args: [[P.Comparable,,], [P.Comparable,,]]}, {func: 1, ret: G.Module, args: [P.String]}, {func: 1, ret: P.String, args: [[P.List, P.String]]}], interceptorsByTag: null, leafTags: null};
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: H.NativeByteBuffer, ArrayBufferView: H.NativeTypedData, DataView: H.NativeByteData, Float32Array: H.NativeFloat32List, Float64Array: H.NativeFloat64List, Int16Array: H.NativeInt16List, Int32Array: H.NativeInt32List, Int8Array: H.NativeInt8List, Uint16Array: H.NativeUint16List, Uint32Array: H.NativeUint32List, Uint8ClampedArray: H.NativeUint8ClampedList, CanvasPixelArray: H.NativeUint8ClampedList, Uint8Array: H.NativeUint8List, AbortPaymentEvent: W.AbortPaymentEvent, AnimationEvent: W.AnimationEvent, AnimationPlaybackEvent: W.AnimationPlaybackEvent, ApplicationCacheErrorEvent: W.ApplicationCacheErrorEvent, BackgroundFetchClickEvent: W.BackgroundFetchClickEvent, BackgroundFetchEvent: W.BackgroundFetchEvent, BackgroundFetchFailEvent: W.BackgroundFetchFailEvent, BackgroundFetchedEvent: W.BackgroundFetchedEvent, BeforeInstallPromptEvent: W.BeforeInstallPromptEvent, BeforeUnloadEvent: W.BeforeUnloadEvent, Blob: W.Blob, BlobEvent: W.BlobEvent, CanMakePaymentEvent: W.CanMakePaymentEvent, ClipboardEvent: W.ClipboardEvent, CloseEvent: W.CloseEvent, CompositionEvent: W.CompositionEvent, CustomEvent: W.CustomEvent, DeviceMotionEvent: W.DeviceMotionEvent, DeviceOrientationEvent: W.DeviceOrientationEvent, Document: W.Document, DOMError: W.DomError, DOMException: W.DomException, ErrorEvent: W.ErrorEvent, Event: W.Event, InputEvent: W.Event, EventSource: W.EventSource, EventTarget: W.EventTarget, ExtendableEvent: W.ExtendableEvent, ExtendableMessageEvent: W.ExtendableMessageEvent, FetchEvent: W.FetchEvent, File: W.File, FileReader: W.FileReader, FocusEvent: W.FocusEvent, FontFaceSetLoadEvent: W.FontFaceSetLoadEvent, ForeignFetchEvent: W.ForeignFetchEvent, GamepadEvent: W.GamepadEvent, HashChangeEvent: W.HashChangeEvent, HTMLDocument: W.HtmlDocument, XMLHttpRequest: W.HttpRequest, XMLHttpRequestEventTarget: W.HttpRequestEventTarget, InstallEvent: W.InstallEvent, KeyboardEvent: W.KeyboardEvent, Location: W.Location, MediaEncryptedEvent: W.MediaEncryptedEvent, MediaError: W.MediaError, MediaKeyMessageEvent: W.MediaKeyMessageEvent, MediaQueryListEvent: W.MediaQueryListEvent, MediaStreamEvent: W.MediaStreamEvent, MediaStreamTrackEvent: W.MediaStreamTrackEvent, MessageEvent: W.MessageEvent, MessagePort: W.MessagePort, MIDIConnectionEvent: W.MidiConnectionEvent, MIDIMessageEvent: W.MidiMessageEvent, MouseEvent: W.MouseEvent, DragEvent: W.MouseEvent, MutationEvent: W.MutationEvent, NavigatorUserMediaError: W.NavigatorUserMediaError, Node: W.Node, NotificationEvent: W.NotificationEvent, OverconstrainedError: W.OverconstrainedError, PageTransitionEvent: W.PageTransitionEvent, PaymentRequestEvent: W.PaymentRequestEvent, PaymentRequestUpdateEvent: W.PaymentRequestUpdateEvent, PointerEvent: W.PointerEvent, PopStateEvent: W.PopStateEvent, PositionError: W.PositionError, PresentationConnectionAvailableEvent: W.PresentationConnectionAvailableEvent, PresentationConnectionCloseEvent: W.PresentationConnectionCloseEvent, ProgressEvent: W.ProgressEvent, PromiseRejectionEvent: W.PromiseRejectionEvent, PushEvent: W.PushEvent, RTCDataChannelEvent: W.RtcDataChannelEvent, RTCDTMFToneChangeEvent: W.RtcDtmfToneChangeEvent, RTCPeerConnectionIceEvent: W.RtcPeerConnectionIceEvent, RTCTrackEvent: W.RtcTrackEvent, SecurityPolicyViolationEvent: W.SecurityPolicyViolationEvent, SensorErrorEvent: W.SensorErrorEvent, SpeechRecognitionError: W.SpeechRecognitionError, SpeechRecognitionEvent: W.SpeechRecognitionEvent, SpeechSynthesisEvent: W.SpeechSynthesisEvent, StorageEvent: W.StorageEvent, SyncEvent: W.SyncEvent, TextEvent: W.TextEvent, TouchEvent: W.TouchEvent, TrackEvent: W.TrackEvent, TransitionEvent: W.TransitionEvent, WebKitTransitionEvent: W.TransitionEvent, UIEvent: W.UIEvent, VRDeviceEvent: W.VRDeviceEvent, VRDisplayEvent: W.VRDisplayEvent, VRSessionEvent: W.VRSessionEvent, WheelEvent: W.WheelEvent, Window: W.Window, DOMWindow: W.Window, XMLDocument: W.XmlDocument, MojoInterfaceRequestEvent: W._MojoInterfaceRequestEvent, ResourceProgressEvent: W._ResourceProgressEvent, USBConnectionEvent: W._USBConnectionEvent, IDBVersionChangeEvent: P.VersionChangeEvent, AudioProcessingEvent: P.AudioProcessingEvent, OfflineAudioCompletionEvent: P.OfflineAudioCompletionEvent, WebGLContextEvent: P.ContextEvent, SQLError: P.SqlError});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: false, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, Blob: false, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CompositionEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, Document: false, DOMError: true, DOMException: true, ErrorEvent: true, Event: false, InputEvent: false, EventSource: true, EventTarget: false, ExtendableEvent: false, ExtendableMessageEvent: true, FetchEvent: true, File: true, FileReader: true, FocusEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, HTMLDocument: true, XMLHttpRequest: true, XMLHttpRequestEventTarget: false, InstallEvent: true, KeyboardEvent: true, Location: true, MediaEncryptedEvent: true, MediaError: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MessageEvent: true, MessagePort: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MouseEvent: false, DragEvent: false, MutationEvent: true, NavigatorUserMediaError: true, Node: false, NotificationEvent: true, OverconstrainedError: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PointerEvent: true, PopStateEvent: true, PositionError: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, ProgressEvent: false, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, StorageEvent: true, SyncEvent: true, TextEvent: true, TouchEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, UIEvent: false, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, WheelEvent: true, Window: true, DOMWindow: true, XMLDocument: true, MojoInterfaceRequestEvent: true, ResourceProgressEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, SQLError: true});
    H.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$3$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$2$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$1$0 = function() {
    return this();
  };
  Function.prototype.call$1$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$2$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$2$0 = function() {
    return this();
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(D.main, []);
    else
      D.main([]);
  });
})();

//# sourceMappingURL=client.dart.js.map
