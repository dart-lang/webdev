// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.6.0-dev.1.0.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
{
}
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == 'function')
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    copyProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == 'string')
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo += typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {JS_CONST: function JS_CONST() {
    },
    CastIterable_CastIterable: function(source, $S, $T) {
      if (H.checkSubtype(source, "$isEfficientLengthIterable", [$S], "$asEfficientLengthIterable"))
        return new H._EfficientLengthCastIterable(source, [$S, $T]);
      return new H.CastIterable(source, [$S, $T]);
    },
    hexDigitValue: function(char) {
      var letter,
        digit = char ^ 48;
      if (digit <= 9)
        return digit;
      letter = char | 32;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
      P.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        P.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          H.throwExpression(P.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new H.SubListIterable(_iterable, _start, _endOrLength, [$E]);
    },
    MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
        return new H.EfficientLengthMappedIterable(iterable, $function, [$S, $T]);
      return new H.MappedIterable(iterable, $function, [$S, $T]);
    },
    SkipIterable_SkipIterable: function(iterable, count, $E) {
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable) {
        P.RangeError_checkNotNegative(count, "count");
        return new H.EfficientLengthSkipIterable(iterable, count, [$E]);
      }
      P.RangeError_checkNotNegative(count, "count");
      return new H.SkipIterable(iterable, count, [$E]);
    },
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    Sort_sort: function(a, compare, $E) {
      var t1 = J.get$length$asx(a);
      if (typeof t1 !== "number")
        return t1.$sub();
      H.Sort__doSort(a, 0, t1 - 1, compare, $E);
    },
    Sort__doSort: function(a, left, right, compare, $E) {
      if (right - left <= 32)
        H.Sort__insertionSort(a, left, right, compare, $E);
      else
        H.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort: function(a, left, right, compare, $E) {
      var i, t1, el, j, t2, j0;
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (j > left) {
            t2 = compare.call$2(t1.$index(a, j - 1), el);
            if (typeof t2 !== "number")
              return t2.$gt();
            t2 = t2 > 0;
          } else
            t2 = false;
          if (!t2)
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort: function(a, left, right, compare, $E) {
      var t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, comp_pivot1, comp_pivot2,
        sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6),
        index1 = left + sixth,
        index5 = right - sixth,
        index3 = C.JSInt_methods._tdivFast$1(left + right, 2),
        index2 = index3 - sixth,
        index4 = index3 + sixth,
        t1 = J.getInterceptor$asx(a),
        el1 = t1.$index(a, index1),
        el2 = t1.$index(a, index2),
        el3 = t1.$index(a, index3),
        el4 = t1.$index(a, index4),
        el5 = t1.$index(a, index5),
        t2 = compare.call$2(el1, el2);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t2 = compare.call$2(el1, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el1, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el3, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      t2 = compare.call$2(el2, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (typeof comp !== "number")
            return comp.$lt();
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (typeof comp !== "number")
                return comp.$gt();
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp_pivot1 = compare.call$2(ak, el2);
          if (typeof comp_pivot1 !== "number")
            return comp_pivot1.$lt();
          if (comp_pivot1 < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else {
            comp_pivot2 = compare.call$2(ak, el4);
            if (typeof comp_pivot2 !== "number")
              return comp_pivot2.$gt();
            if (comp_pivot2 > 0)
              for (; true;) {
                comp = compare.call$2(t1.$index(a, great), el4);
                if (typeof comp !== "number")
                  return comp.$gt();
                if (comp > 0) {
                  --great;
                  if (great < k)
                    break;
                  continue;
                } else {
                  comp = compare.call$2(t1.$index(a, great), el2);
                  if (typeof comp !== "number")
                    return comp.$lt();
                  great0 = great - 1;
                  if (comp < 0) {
                    t1.$indexSet(a, k, t1.$index(a, less));
                    less0 = less + 1;
                    t1.$indexSet(a, less, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    less = less0;
                  } else {
                    t1.$indexSet(a, k, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                  }
                  great = great0;
                  break;
                }
              }
          }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      H.Sort__doSort(a, left, less - 2, compare, $E);
      H.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                comp = compare.call$2(t1.$index(a, great), el2);
                if (typeof comp !== "number")
                  return comp.$lt();
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        H.Sort__doSort(a, less, great, compare, $E);
      } else
        H.Sort__doSort(a, less, great, compare, $E);
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    _CastListBase_sort_closure: function _CastListBase_sort_closure(t0, t1) {
      this.$this = t0;
      this.compare = t1;
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastMap: function CastMap(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastMap_forEach_closure: function CastMap_forEach_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    CodeUnits: function CodeUnits(t0) {
      this.__internal$_string = t0;
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol(t0) {
      this.__internal$_name = t0;
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    ConstantMap__throwUnmodifiable: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (typeof preserved === "string")
        return preserved;
      return rawClassName;
    },
    getType: function(index) {
      return init.types[H.intTypeCheck(index)];
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor$(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseInt: function(source, radix) {
      var decimalMatch, maxCharCode, digitsPart, t1, i,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return;
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = H.stringTypeCheck(match[3]);
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return;
      }
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((C.JSString_methods._codeUnitAt$1(digitsPart, i) | 32) > maxCharCode)
            return;
      }
      return parseInt(source, radix);
    },
    Primitives_objectTypeName: function(object) {
      return H.Primitives__objectClassName(object) + H._joinArguments(H.getRuntimeTypeInfo(object), 0, null);
    },
    Primitives__objectClassName: function(object) {
      var interceptorConstructorName, $name, t1, dispatchName, objectConstructor, match, decompiledName,
        interceptor = J.getInterceptor$(object),
        interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      t1 = $name == null;
      if (t1 || interceptor === C.Interceptor_methods || !!interceptor.$isUnknownJavaScriptObject) {
        dispatchName = C.C_JS_CONST(object);
        if (t1)
          $name = dispatchName;
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
        }
        return $name;
      }
      $name = $name;
      return H.unminifyOrTag($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36 ? C.JSString_methods.substring$1($name, 1) : $name);
    },
    Primitives_currentUri: function() {
      if (!!self.location)
        return self.location.href;
      return;
    },
    Primitives__fromCharCodeApply: function(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var t1, _i, i,
        a = H.setRuntimeTypeInfo([], [P.int]);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, H.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          C.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          C.JSArray_methods.add$1(a, 55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          C.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List: function(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (typeof end !== "number")
        return end.$le();
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        if (i0 < end)
          chunkEnd = i0;
        else
          chunkEnd = end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      if (typeof charCode !== "number")
        return H.iae(charCode);
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
        }
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
        namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      "" + t1.argumentCount;
      return J.noSuchMethod$1$($function, new H.JSInvocationMirror(C.Symbol_call, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
      var t1, $arguments, argumentCount, jsStub;
      if (positionalArguments instanceof Array)
        t1 = namedArguments == null || namedArguments.get$isEmpty(namedArguments);
      else
        t1 = false;
      if (t1) {
        $arguments = positionalArguments;
        argumentCount = $arguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1($arguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2($arguments[0], $arguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4($arguments[0], $arguments[1], $arguments[2], $arguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5($arguments[0], $arguments[1], $arguments[2], $arguments[3], $arguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, $arguments);
      }
      return H.Primitives__genericApplyFunction2($function, positionalArguments, namedArguments);
    },
    Primitives__genericApplyFunction2: function($function, positionalArguments, namedArguments) {
      var $arguments, argumentCount, requiredParameterCount, defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, keys, _i, used, t2;
      if (positionalArguments != null)
        $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, null);
      else
        $arguments = [];
      argumentCount = $arguments.length;
      requiredParameterCount = $function.$requiredArgCount;
      if (argumentCount < requiredParameterCount)
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t1 = defaultValuesClosure == null;
      defaultValues = !t1 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction === "string")
        jsFunction = interceptor[jsFunction];
      if (t1) {
        if (namedArguments != null && namedArguments.get$isNotEmpty(namedArguments))
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (defaultValues instanceof Array) {
        if (namedArguments != null && namedArguments.get$isNotEmpty(namedArguments))
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount > requiredParameterCount + defaultValues.length)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        C.JSArray_methods.addAll$1($arguments, defaultValues.slice(argumentCount - requiredParameterCount));
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i)
            C.JSArray_methods.add$1($arguments, defaultValues[H.stringTypeCheck(keys[_i])]);
        else {
          for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
            t2 = H.stringTypeCheck(keys[_i]);
            if (namedArguments.containsKey$1(0, t2)) {
              ++used;
              C.JSArray_methods.add$1($arguments, namedArguments.$index(0, t2));
            } else
              C.JSArray_methods.add$1($arguments, defaultValues[t2]);
          }
          if (used !== namedArguments.get$length(namedArguments))
            return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1, _s5_ = "index";
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, _s5_, null);
      $length = H.intTypeCheck(J.get$length$asx(indexable));
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_);
    },
    diagnoseRangeError: function(start, end, $length) {
      var _s13_ = "Invalid value";
      if (start < 0 || start > $length)
        return new P.RangeError(0, $length, true, start, "start", _s13_);
      if (end != null)
        if (end < start || end > $length)
          return new P.RangeError(start, $length, true, end, "end", _s13_);
      return new P.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkNum: function(value) {
      if (typeof value !== "number")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    checkBool: function(value) {
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = H.quoteStringForRegExp(message.replace(String({}), '$receiver$'));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], [P.String]);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = '$arguments$';
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    NullError$: function(_message, match) {
      return new H.NullError(_message, match == null ? null : match.method);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException: function(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t2, _null = null,
        t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (ex instanceof H.ExceptionAndStackTrace)
        return t1.call$1(ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              return t1.call$1(H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(H.NullError$(H.stringTypeCheck(message), match));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, _null, _null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    objectHashCode: function(object) {
      if (object == null || typeof object != 'object')
        return J.get$hashCode$(object);
      else
        return H.Primitives_objectHashCode(object);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      H.interceptedTypeCheck(closure, "$isFunction");
      switch (H.intTypeCheck(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $constructor, t1, trampoline, signatureFunction, applyTrampoline, i, stub, stubCallName, _null = null,
        $function = functions[0],
        callName = $function.$callName,
        $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(_null, _null, _null, _null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      signatureFunction = H.Closure__computeSignatureFunctionLegacy(reflectionInfo, isStatic, isIntercepted);
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure__computeSignatureFunctionLegacy: function(functionType, isStatic, isIntercepted) {
      var getReceiver;
      if (typeof functionType == "number")
        return function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, functionType);
      if (typeof functionType == "function")
        if (isStatic)
          return functionType;
        else {
          getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
          return function(f, r) {
            return function() {
              return f.apply({$receiver: r(this)}, arguments);
            };
          }(functionType, getReceiver);
        }
      throw H.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        return new Function(t1 + H.S(t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      return new Function(t1 + H.S(t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf = H.BoundClosure_selfOf,
        getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var t2, stubName, arity, lookedUpFunction, t3, t4, $arguments,
        t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null)
        t1 = $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self");
      t2 = $.BoundClosure_receiverFieldNameCache;
      if (t2 == null)
        t2 = $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver");
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t3 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t4 = !t3 || arity >= 28;
      if (t4)
        return H.Closure_cspForwardInterceptedCall(arity, !t3, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, applyTrampolineIndex, reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    BoundClosure_selfOf: function(closure) {
      return closure._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return closure._receiver;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var t1, i, $name,
        template = new H.BoundClosure("self", "target", "receiver", "name"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
    },
    boolConversionCheck: function(value) {
      if (value == null)
        H.assertThrow("boolean expression must not be null");
      return value;
    },
    stringTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
    },
    stringTypeCast: function(value) {
      if (typeof value === "string" || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "String"));
    },
    doubleTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "double"));
    },
    numTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
    },
    numTypeCast: function(value) {
      if (typeof value === "number" || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "num"));
    },
    boolTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "boolean")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
    },
    boolTypeCast: function(value) {
      if (typeof value === "boolean" || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "bool"));
    },
    intTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number" && Math.floor(value) === value)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
    },
    intTypeCast: function(value) {
      if (typeof value === "number" && Math.floor(value) === value || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "int"));
    },
    propertyTypeError: function(value, property) {
      throw H.wrapException(H.TypeErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    propertyTypeCastError: function(value, property) {
      throw H.wrapException(H.CastErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    interceptedTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if ((typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = (typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    numberOrStringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (typeof value === "number")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    stringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listTypeCheck: function(value) {
      if (value == null)
        return value;
      if (!!J.getInterceptor$(value).$isList)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "List<dynamic>"));
    },
    listTypeCast: function(value) {
      if (!!J.getInterceptor$(value).$isList || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "List<dynamic>"));
    },
    listSuperNativeTypeCheck: function(value, property) {
      var t1;
      if (value == null)
        return value;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isList)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listSuperNativeTypeCast: function(value, property) {
      var t1 = J.getInterceptor$(value);
      if (!!t1.$isList || value == null)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeCastError(value, property);
    },
    extractFunctionTypeObjectFromInternal: function(o) {
      var signature;
      if ("$signature" in o) {
        signature = o.$signature;
        if (typeof signature == "number")
          return init.types[H.intTypeCheck(signature)];
        else
          return o.$signature();
      }
      return;
    },
    functionTypeTest: function(value, functionTypeRti) {
      var functionTypeObject;
      if (typeof value == "function")
        return true;
      functionTypeObject = H.extractFunctionTypeObjectFromInternal(J.getInterceptor$(value));
      if (functionTypeObject == null)
        return false;
      return H._isFunctionSubtype(functionTypeObject, null, functionTypeRti, null);
    },
    functionTypeCheck: function(value, functionTypeRti) {
      var $self, t1;
      if (value == null)
        return value;
      if ($._inTypeAssertion)
        return value;
      $._inTypeAssertion = true;
      try {
        if (H.functionTypeTest(value, functionTypeRti))
          return value;
        $self = H.runtimeTypeToString(functionTypeRti);
        t1 = H.TypeErrorImplementation$(value, $self);
        throw H.wrapException(t1);
      } finally {
        $._inTypeAssertion = false;
      }
    },
    futureOrCheck: function(o, futureOrRti) {
      if (o != null && !H.checkSubtypeOfRuntimeType(o, futureOrRti))
        H.throwExpression(H.TypeErrorImplementation$(o, H.runtimeTypeToString(futureOrRti)));
      return o;
    },
    TypeErrorImplementation$: function(value, type) {
      return new H.TypeErrorImplementation("TypeError: " + P.Error_safeToString(value) + ": type '" + H.S(H._typeDescription(value)) + "' is not a subtype of type '" + type + "'");
    },
    CastErrorImplementation$: function(value, type) {
      return new H.CastErrorImplementation("CastError: " + P.Error_safeToString(value) + ": type '" + H.S(H._typeDescription(value)) + "' is not a subtype of type '" + type + "'");
    },
    _typeDescription: function(value) {
      var functionTypeObject,
        t1 = J.getInterceptor$(value);
      if (!!t1.$isClosure) {
        functionTypeObject = H.extractFunctionTypeObjectFromInternal(t1);
        if (functionTypeObject != null)
          return H.runtimeTypeToString(functionTypeObject);
        return "Closure";
      }
      return H.Primitives_objectTypeName(value);
    },
    assertThrow: function(message) {
      throw H.wrapException(new H._AssertionError(message));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(staticName));
    },
    RuntimeError$: function(message) {
      return new H.RuntimeError(message);
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    createRuntimeType: function(rti) {
      return new H.TypeImpl(rti);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(interceptor, object, substitutionName) {
      return H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(object));
    },
    getRuntimeTypeArgumentIntercepted: function(interceptor, target, substitutionName, index) {
      var $arguments = H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments = H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti) {
      return H._runtimeTypeToString(rti, null);
    },
    _runtimeTypeToString: function(rti, genericContext) {
      var t1, t2;
      if (rti == null)
        return "dynamic";
      if (rti === -1)
        return "void";
      if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return H.unminifyOrTag(rti[0].name) + H._joinArguments(rti, 1, genericContext);
      if (typeof rti == "function")
        return H.unminifyOrTag(rti.name);
      if (rti === -2)
        return "dynamic";
      if (typeof rti === "number") {
        H.intTypeCheck(rti);
        if (genericContext == null || rti < 0 || rti >= genericContext.length)
          return "unexpected-generic-index:" + rti;
        t1 = genericContext.length;
        t2 = t1 - rti - 1;
        if (t2 < 0 || t2 >= t1)
          return H.ioore(genericContext, t2);
        return H.S(genericContext[t2]);
      }
      if ('func' in rti)
        return H._functionRtiToString(rti, genericContext);
      if ('futureOr' in rti)
        return "FutureOr<" + H._runtimeTypeToString("type" in rti ? rti.type : null, genericContext) + ">";
      return "unknown-reified-type";
    },
    _functionRtiToString: function(rti, genericContext) {
      var boundsRti, outerContextLength, offset, i, i0, typeParameters, typeSep, t1, t2, boundRti, returnTypeText, $arguments, argumentsText, sep, _i, argument, optionalArguments, namedArguments, t3, _s2_ = ", ";
      if ("bounds" in rti) {
        boundsRti = rti.bounds;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], [P.String]);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsRti.length, i0 = i; i0 > 0; --i0)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i0));
        for (typeParameters = "<", typeSep = "", i0 = 0; i0 < i; ++i0, typeSep = _s2_) {
          typeParameters += typeSep;
          t1 = genericContext.length;
          t2 = t1 - i0 - 1;
          if (t2 < 0)
            return H.ioore(genericContext, t2);
          typeParameters = C.JSString_methods.$add(typeParameters, genericContext[t2]);
          boundRti = boundsRti[i0];
          if (boundRti != null && boundRti !== P.Object)
            typeParameters += " extends " + H._runtimeTypeToString(boundRti, genericContext);
        }
        typeParameters += ">";
      } else {
        typeParameters = "";
        outerContextLength = null;
      }
      returnTypeText = !!rti.v ? "void" : H._runtimeTypeToString(rti.ret, genericContext);
      if ("args" in rti) {
        $arguments = rti.args;
        for (t1 = $arguments.length, argumentsText = "", sep = "", _i = 0; _i < t1; ++_i, sep = _s2_) {
          argument = $arguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
      } else {
        argumentsText = "";
        sep = "";
      }
      if ("opt" in rti) {
        optionalArguments = rti.opt;
        argumentsText += sep + "[";
        for (t1 = optionalArguments.length, sep = "", _i = 0; _i < t1; ++_i, sep = _s2_) {
          argument = optionalArguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
        argumentsText += "]";
      }
      if ("named" in rti) {
        namedArguments = rti.named;
        argumentsText += sep + "{";
        for (t1 = H.extractKeys(namedArguments), t2 = t1.length, sep = "", _i = 0; _i < t2; ++_i, sep = _s2_) {
          t3 = H.stringTypeCheck(t1[_i]);
          argumentsText = argumentsText + sep + H._runtimeTypeToString(namedArguments[t3], genericContext) + (" " + H.S(t3));
        }
        argumentsText += "}";
      }
      if (outerContextLength != null)
        genericContext.length = outerContextLength;
      return typeParameters + "(" + argumentsText + ") => " + returnTypeText;
    },
    _joinArguments: function(types, startIndex, genericContext) {
      var buffer, index, separator, allDynamic, t1, argument;
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, separator = "", allDynamic = true, t1 = ""; index < types.length; ++index, separator = ", ") {
        buffer._contents = t1 + separator;
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H._runtimeTypeToString(argument, genericContext);
      }
      return "<" + buffer.toString$0(0) + ">";
    },
    getRti: function(o) {
      var functionRti, type, rti,
        t1 = J.getInterceptor$(o);
      if (!!t1.$isClosure) {
        functionRti = H.extractFunctionTypeObjectFromInternal(t1);
        if (functionRti != null)
          return functionRti;
      }
      type = t1.constructor;
      if (typeof o != "object")
        return type;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return type;
    },
    getRuntimeType: function(object) {
      return new H.TypeImpl(H.getRti(object));
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = substitution.apply(null, $arguments);
      if (substitution == null)
        return;
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        return substitution;
      if (typeof substitution == "function")
        return substitution.apply(null, $arguments);
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor$(object);
      if (interceptor[isField] == null)
        return false;
      return H.areSubtypes(H.substitute(interceptor[asField], $arguments), null, checks, null);
    },
    subtypeCast: function(object, isField, checks, asField) {
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.CastErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(H.unminifyOrTag(isField.substring(3)) + H._joinArguments(checks, 0, null), init.mangledGlobalNames)));
    },
    assertSubtype: function(object, isField, checks, asField) {
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.TypeErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(H.unminifyOrTag(isField.substring(3)) + H._joinArguments(checks, 0, null), init.mangledGlobalNames)));
    },
    areSubtypes: function(s, sEnv, t, tEnv) {
      var len, i;
      if (t == null)
        return true;
      if (s == null) {
        len = t.length;
        for (i = 0; i < len; ++i)
          if (!H._isSubtype(null, null, t[i], tEnv))
            return false;
        return true;
      }
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H._isSubtype(s[i], sEnv, t[i], tEnv))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return signature.apply(context, H.substitute(J.getInterceptor$(context)["$as" + H.S(contextName)], H.getRuntimeTypeInfo(context)));
    },
    isSupertypeOfNullRecursive: function(type) {
      var typeArgument;
      if (typeof type === "number")
        return false;
      if ('futureOr' in type) {
        typeArgument = "type" in type ? type.type : null;
        return type == null || type.name === "Object" || type.name === "Null" || type === -1 || type === -2 || H.isSupertypeOfNullRecursive(typeArgument);
      }
      return false;
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var type, rti;
      if (o == null)
        return t == null || t.name === "Object" || t.name === "Null" || t === -1 || t === -2 || H.isSupertypeOfNullRecursive(t);
      if (t == null || t === -1 || t.name === "Object" || t === -2)
        return true;
      if (typeof t == "object") {
        if ('futureOr' in t)
          if (H.checkSubtypeOfRuntimeType(o, "type" in t ? t.type : null))
            return true;
        if ('func' in t)
          return H.functionTypeTest(o, t);
      }
      type = J.getInterceptor$(o).constructor;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return H._isSubtype(type, null, t, null);
    },
    subtypeOfRuntimeTypeCast: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.CastErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    assertSubtypeOfRuntimeType: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    _isSubtype: function(s, sEnv, t, tEnv) {
      var t1, typeOfS, tTypeArgument, futureSubstitution, futureArguments, t2, typeOfT, typeOfTString, substitution, _null = null;
      if (s === t)
        return true;
      if (t == null || t === -1 || t.name === "Object" || t === -2)
        return true;
      if (s === -2)
        return true;
      if (s == null || s === -1 || s.name === "Object" || s === -2) {
        if (typeof t === "number")
          return false;
        if ('futureOr' in t)
          return H._isSubtype(s, sEnv, "type" in t ? t.type : _null, tEnv);
        return false;
      }
      if (typeof s === "number")
        return false;
      if (typeof t === "number")
        return false;
      if (s.name === "Null")
        return true;
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      if ('futureOr' in t) {
        tTypeArgument = "type" in t ? t.type : _null;
        if ('futureOr' in s)
          return H._isSubtype("type" in s ? s.type : _null, sEnv, tTypeArgument, tEnv);
        else if (H._isSubtype(s, sEnv, tTypeArgument, tEnv))
          return true;
        else {
          if (!('$is' + "Future" in typeOfS.prototype))
            return false;
          futureSubstitution = typeOfS.prototype["$as" + "Future"];
          futureArguments = H.substitute(futureSubstitution, t1 ? s.slice(1) : _null);
          return H._isSubtype(typeof futureArguments === "object" && futureArguments !== null && futureArguments.constructor === Array ? futureArguments[0] : _null, sEnv, tTypeArgument, tEnv);
        }
      }
      if ('func' in t)
        return H._isFunctionSubtype(s, sEnv, t, tEnv);
      if ('func' in s)
        return t.name === "Function";
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        typeOfTString = typeOfT.name;
        if (!('$is' + typeOfTString in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + typeOfTString];
      } else
        substitution = _null;
      if (!t2)
        return true;
      t1 = t1 ? s.slice(1) : _null;
      t2 = t.slice(1);
      return H.areSubtypes(H.substitute(substitution, t1), sEnv, t2, tEnv);
    },
    _isFunctionSubtype: function(s, sEnv, t, tEnv) {
      var sBounds, tBounds, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, tPos, sPos, sNamedParameters, tNamedParameters;
      if (!('func' in s))
        return false;
      if ("bounds" in s) {
        if (!("bounds" in t))
          return false;
        sBounds = s.bounds;
        tBounds = t.bounds;
        if (sBounds.length !== tBounds.length)
          return false;
      } else if ("bounds" in t)
        return false;
      if (!H._isSubtype(s.ret, sEnv, t.ret, tEnv))
        return false;
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      for (pos = 0; pos < sParametersLen; ++pos)
        if (!H._isSubtype(tParameterTypes[pos], tEnv, sParameterTypes[pos], sEnv))
          return false;
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tOptionalParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      sNamedParameters = s.named;
      tNamedParameters = t.named;
      if (tNamedParameters == null)
        return true;
      if (sNamedParameters == null)
        return false;
      return H.namedParametersSubtypeCheck(sNamedParameters, sEnv, tNamedParameters, tEnv);
    },
    namedParametersSubtypeCheck: function(s, sEnv, t, tEnv) {
      var t1, i, $name,
        names = Object.getOwnPropertyNames(t);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        if (!H._isSubtype(t[$name], tEnv, s[$name], sEnv))
          return false;
      }
      return true;
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var interceptor, interceptorClass, mark, t1,
        tag = H.stringTypeCheck($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST0();
      hooks = H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5, H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m, i, u, s, g, regexp;
      if (typeof source !== "string")
        H.throwExpression(H.argumentErrorValue(source));
      m = multiLine ? "m" : "";
      i = caseSensitive ? "" : "i";
      u = unicode ? "u" : "";
      s = dotAll ? "s" : "";
      g = global ? "g" : "";
      regexp = function(source, modifiers) {
        try {
          return new RegExp(source, modifiers);
        } catch (e) {
          return e;
        }
      }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw H.wrapException(P.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1;
      if (typeof other === "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else {
        t1 = J.getInterceptor$(other);
        if (!!t1.$isJSSyntaxRegExp) {
          t1 = C.JSString_methods.substring$1(receiver, startIndex);
          return other._nativeRegExp.test(t1);
        } else {
          t1 = t1.allMatches$1(other, C.JSString_methods.substring$1(receiver, startIndex));
          return !t1.get$isEmpty(t1);
        }
      }
    },
    escapeReplacement: function(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp: function(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
      var t1 = H.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      return t1;
    },
    stringReplaceAllUncheckedString: function(receiver, pattern, replacement) {
      var $length, t1, i, index;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        for (t1 = replacement, i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      index = receiver.indexOf(pattern, 0);
      if (index < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(H.quoteStringForRegExp(pattern), 'g'), H.escapeReplacement(replacement));
    },
    _stringIdentity: function(string) {
      return string;
    },
    stringReplaceAllFuncUnchecked: function(receiver, pattern, onMatch, onNonMatch) {
      var t1, startIndex, t2, t3, t4, t5;
      if (!J.getInterceptor$(pattern).$isPattern)
        throw H.wrapException(P.ArgumentError$value(pattern, "pattern", "is not a Pattern"));
      for (t1 = pattern.allMatches$1(0, receiver), t1 = new H._AllMatchesIterator(t1._re, t1._string, t1._start), startIndex = 0, t2 = ""; t1.moveNext$0(); t2 = t3) {
        t3 = t1.__js_helper$_current;
        t4 = t3._match;
        t5 = t4.index;
        t3 = t2 + H.S(H._stringIdentity(C.JSString_methods.substring$2(receiver, startIndex, t5))) + H.S(onMatch.call$1(t3));
        startIndex = t5 + t4[0].length;
      }
      t1 = t2 + H.S(H._stringIdentity(C.JSString_methods.substring$1(receiver, startIndex)));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceFirstUnchecked: function(receiver, pattern, replacement, startIndex) {
      var index = receiver.indexOf(pattern, startIndex);
      if (index < 0)
        return receiver;
      return H.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
    },
    stringReplaceRangeUnchecked: function(receiver, start, end, replacement) {
      var prefix = receiver.substring(0, start),
        suffix = receiver.substring(end);
      return prefix + replacement + suffix;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantMap_map_closure: function ConstantMap_map_closure(t0, t1, t2) {
      this.$this = t0;
      this.transform = t1;
      this.result = t2;
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_length = t0;
      _._jsObject = t1;
      _.__js_helper$_keys = t2;
      _.$ti = t3;
    },
    _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _._memberName = t0;
      _._kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this._message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this._message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this._message = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    unwrapException_saveStackTrace: function unwrapException_saveStackTrace(t0) {
      this.ex = t0;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3) {
      var _ = this;
      _._self = t0;
      _._target = t1;
      _._receiver = t2;
      _._name = t3;
    },
    TypeErrorImplementation: function TypeErrorImplementation(t0) {
      this.message = t0;
    },
    CastErrorImplementation: function CastErrorImplementation(t0) {
      this.message = t0;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    TypeImpl: function TypeImpl(t0) {
      this._rti = t0;
      this.__js_helper$_hashCode = this.__typeName = null;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _._rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
      this._re = t0;
      this._string = t1;
      this._start = t2;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _._string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this._input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    _checkViewArguments: function(buffer, offsetInBytes, $length) {
    },
    _ensureNativeList: function(list) {
      var t2, result, i,
        t1 = J.getInterceptor$(list);
      if (!!t1.$isJSIndexable)
        return list;
      t2 = t1.get$length(list);
      if (typeof t2 !== "number")
        return H.iae(t2);
      result = new Array(t2);
      result.fixed$length = Array;
      i = 0;
      while (true) {
        t2 = t1.get$length(list);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        C.JSArray_methods.$indexSet(result, i, t1.$index(list, i));
        ++i;
      }
      return result;
    },
    NativeInt8List__create1: function(arg) {
      return new Int8Array(arg);
    },
    NativeUint8List_NativeUint8List$view: function(buffer, offsetInBytes, $length) {
      var t1;
      H._checkViewArguments(buffer, offsetInBytes, $length);
      t1 = new Uint8Array(buffer, offsetInBytes);
      return t1;
    },
    _checkValidIndex: function(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    _checkValidRange: function(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        if (end == null)
          t1 = start > $length;
        else
          t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    isBrowserObject: function(o) {
      var t1 = J.getInterceptor$(o);
      return !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isWindow || !!t1.$isWorkerGlobalScope;
    },
    extractKeys: function(victim) {
      return J.JSArray_JSArray$markFixed(victim ? Object.keys(victim) : [], null);
    },
    unmangleGlobalNameIfPreservedAnyways: function($name) {
      return init.mangledGlobalNames[$name];
    },
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  },
  J = {
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var proto, objectProto, $constructor, interceptor,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        Object.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed: function($length, $E) {
      if (typeof $length !== "number" || Math.floor($length) !== $length)
        throw H.wrapException(P.ArgumentError$value($length, "length", "is not an integer"));
      if ($length < 0 || $length > 4294967295)
        throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, [$E]));
    },
    JSArray_markFixedList: function(list) {
      list.fixed$length = Array;
      return list;
    },
    JSArray_markUnmodifiableList: function(list) {
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    JSArray__compareAny: function(a, b) {
      return J.compareTo$1$ns(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSDouble.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$bn: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$n: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x: function(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z: function(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    get$appDigests$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$appDigests(receiver);
    },
    get$first$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNegative$n: function(receiver) {
      return J.getInterceptor$n(receiver).get$isNegative(receiver);
    },
    get$isNotEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$keys$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$keys(receiver);
    },
    get$length$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$message$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$message(receiver);
    },
    get$moduleParentsGraph$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$moduleParentsGraph(receiver);
    },
    get$offset$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$offset(receiver);
    },
    get$runtimeType$: function(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    get$setRequestHeader$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$setRequestHeader(receiver);
    },
    get$source$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$source(receiver);
    },
    get$urlToModuleId$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$urlToModuleId(receiver);
    },
    $add$ansx: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $and$bn: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return (receiver & a0) >>> 0;
      return J.getInterceptor$bn(receiver).$and(receiver, a0);
    },
    $div$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver / a0;
      return J.getInterceptor$n(receiver).$div(receiver, a0);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $ge$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver >= a0;
      return J.getInterceptor$n(receiver).$ge(receiver, a0);
    },
    $get$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).$get$1(receiver, a0);
    },
    $index$asx: function(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    $or$bn: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return (receiver | a0) >>> 0;
      return J.getInterceptor$bn(receiver).$or(receiver, a0);
    },
    $shl$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).$shl(receiver, a0);
    },
    $sub$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver - a0;
      return J.getInterceptor$n(receiver).$sub(receiver, a0);
    },
    _add$1$z: function(receiver, a0) {
      return J.getInterceptor$z(receiver)._add$1(receiver, a0);
    },
    _codeUnitAt$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver)._codeUnitAt$1(receiver, a0);
    },
    _removeEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver)._removeEventListener$3(receiver, a0, a1, a2);
    },
    addAll$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
    },
    addEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
    },
    cast$1$0$ax: function(receiver, $T1) {
      return J.getInterceptor$ax(receiver).cast$1$0(receiver, $T1);
    },
    cast$2$0$ax: function(receiver, $T1, $T2) {
      return J.getInterceptor$ax(receiver).cast$2$0(receiver, $T1, $T2);
    },
    codeUnitAt$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
    },
    compareTo$1$ns: function(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx: function(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    containsKey$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).containsKey$1(receiver, a0);
    },
    elementAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    endsWith$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
    },
    fillRange$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).fillRange$3(receiver, a0, a1, a2);
    },
    forEach$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    forceLoadModule$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).forceLoadModule$3(receiver, a0, a1, a2);
    },
    getModuleLibraries$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).getModuleLibraries$1(receiver, a0);
    },
    hot$onChildUpdate$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).hot$onChildUpdate$3(receiver, a0, a1, a2);
    },
    hot$onDestroy$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).hot$onDestroy$0(receiver);
    },
    hot$onSelfUpdate$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).hot$onSelfUpdate$1(receiver, a0);
    },
    keys$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).keys$0(receiver);
    },
    map$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).map$1(receiver, a0);
    },
    map$1$1$ax: function(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    map$2$1$ax: function(receiver, a0, $T1, $T2) {
      return J.getInterceptor$ax(receiver).map$2$1(receiver, a0, $T1, $T2);
    },
    matchAsPrefix$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    noSuchMethod$1$: function(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    replaceRange$3$asx: function(receiver, a0, a1, a2) {
      return J.getInterceptor$asx(receiver).replaceRange$3(receiver, a0, a1, a2);
    },
    send$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).send$1(receiver, a0);
    },
    skip$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sort$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
    },
    splitMapJoin$2$onMatch$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).splitMapJoin$2$onMatch(receiver, a0, a1);
    },
    startsWith$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).startsWith$2(receiver, a0, a1);
    },
    substring$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).substring$1(receiver, a0);
    },
    substring$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
    },
    then$1$1$x: function(receiver, a0, $T1) {
      return J.getInterceptor$x(receiver).then$1$1(receiver, a0, $T1);
    },
    then$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).then$2(receiver, a0, a1);
    },
    toList$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toRadixString$1$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JSObject: function JSObject() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _.__interceptors$_length = t1;
      _._index = 0;
      _.__interceptors$_current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSDouble: function JSDouble() {
    },
    JSString: function JSString() {
    }
  },
  P = {
    _AsyncRun__initializeScheduleImmediate: function() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer: function(callback) {
      P.Timer__createTimer(C.Duration_0, H.functionTypeCheck(callback, {func: 1, ret: -1}));
    },
    Timer__createTimer: function(duration, callback) {
      var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return P._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$: function(milliseconds, callback) {
      var t1 = new P._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _TimerImpl$periodic: function(milliseconds, callback) {
      var t1 = new P._TimerImpl();
      t1._TimerImpl$periodic$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter: function($T) {
      return new P._AsyncAwaitCompleter(new P._Future($.Zone__current, [$T]), [$T]);
    },
    _asyncStartSync: function(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait: function(object, bodyFunction) {
      P._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn: function(object, completer) {
      completer.complete$1(0, object);
    },
    _asyncRethrow: function(object, completer) {
      completer.completeError$2(H.unwrapException(object), H.getTraceFromException(object));
    },
    _awaitOnObject: function(object, bodyFunction) {
      var future, _null = null,
        thenCallback = new P._awaitOnObject_closure(bodyFunction),
        errorCallback = new P._awaitOnObject_closure0(bodyFunction),
        t1 = J.getInterceptor$(object);
      if (!!t1.$is_Future)
        object._thenAwait$1$2(thenCallback, errorCallback, _null);
      else if (!!t1.$isFuture)
        object.then$1$2$onError(0, thenCallback, errorCallback, _null);
      else {
        future = new P._Future($.Zone__current, [null]);
        H.assertSubtypeOfRuntimeType(object, null);
        future._state = 4;
        future._resultOrListeners = object;
        future._thenAwait$1$2(thenCallback, _null, _null);
      }
    },
    _wrapJsFunctionForAsync: function($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new P._wrapJsFunctionForAsync_closure($protected), P.Null, P.int, null);
    },
    _Future$zoneValue: function(value, _zone, $T) {
      var t1 = new P._Future(_zone, [$T]);
      H.assertSubtypeOfRuntimeType(value, $T);
      t1._state = 4;
      t1._resultOrListeners = value;
      return t1;
    },
    _Future__chainForeignFuture: function(source, target) {
      var e, s, exception;
      target._state = 1;
      try {
        source.then$1$2$onError(0, new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), P.Null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
      }
    },
    _Future__chainCoreFuture: function(source, target) {
      var t1, listeners;
      for (; t1 = source._state, t1 === 2;)
        source = H.interceptedTypeCheck(source._resultOrListeners, "$is_Future");
      if (t1 >= 4) {
        listeners = target._removeListeners$0();
        target._state = source._state;
        target._resultOrListeners = source._resultOrListeners;
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = H.interceptedTypeCheck(target._resultOrListeners, "$is_FutureListener");
        target._state = 2;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners: function(source, listeners) {
      var _box_0, hasError, asyncError, listeners0, sourceResult, t2, t3, zone, oldZone, current, result, _box_1 = {},
        t1 = _box_1.source = source;
      for (; true;) {
        _box_0 = {};
        hasError = t1._state === 8;
        if (listeners == null) {
          if (hasError) {
            asyncError = H.interceptedTypeCheck(t1._resultOrListeners, "$isAsyncError");
            t1._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
          listeners._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, listeners);
        }
        t1 = _box_1.source;
        sourceResult = t1._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        t2 = !hasError;
        if (t2) {
          t3 = listeners.state;
          t3 = (t3 & 1) !== 0 || (t3 & 15) === 8;
        } else
          t3 = true;
        if (t3) {
          t3 = listeners.result;
          zone = t3._zone;
          if (hasError) {
            t1 = t1._zone;
            t1.toString;
            t1 = !(t1 == zone || t1.get$errorZone() === zone.get$errorZone());
          } else
            t1 = false;
          if (t1) {
            t1 = _box_1.source;
            asyncError = H.interceptedTypeCheck(t1._resultOrListeners, "$isAsyncError");
            t1._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone != zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = listeners.state;
          if ((t1 & 15) === 8)
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, listeners, hasError).call$0();
          else if (t2) {
            if ((t1 & 1) !== 0)
              new P._Future__propagateToListeners_handleValueCallback(_box_0, listeners, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new P._Future__propagateToListeners_handleError(_box_1, _box_0, listeners).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (!!J.getInterceptor$(t1).$isFuture) {
            if (t1._state >= 4) {
              current = H.interceptedTypeCheck(t3._resultOrListeners, "$is_FutureListener");
              t3._resultOrListeners = null;
              listeners = t3._reverseListeners$1(current);
              t3._state = t1._state;
              t3._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              P._Future__chainCoreFuture(t1, t3);
            return;
          }
        }
        result = listeners.result;
        current = H.interceptedTypeCheck(result._resultOrListeners, "$is_FutureListener");
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t2 = _box_0.listenerValueOrError;
        if (!t1) {
          H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(result, 0));
          result._state = 4;
          result._resultOrListeners = t2;
        } else {
          H.interceptedTypeCheck(t2, "$isAsyncError");
          result._state = 8;
          result._resultOrListeners = t2;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler: function(errorHandler, zone) {
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object, P.StackTrace]}))
        return zone.registerBinaryCallback$3$1(errorHandler, null, P.Object, P.StackTrace);
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object]}))
        return zone.registerUnaryCallback$2$1(errorHandler, null, P.Object);
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.callback.call$0();
      }
    },
    _startMicrotaskLoop: function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(callback);
      if ($._nextCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = $._lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var entry, t2,
        t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        entry.next = t2.next;
        $._lastPriorityCallback = t2.next = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var t1, _null = null,
        currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
        return;
      }
      if (C.C__RootZone === currentZone.get$_scheduleMicrotask().zone)
        t1 = C.C__RootZone.get$errorZone() === currentZone.get$errorZone();
      else
        t1 = false;
      if (t1) {
        P._rootScheduleMicrotask(_null, _null, currentZone, currentZone.registerCallback$1$1(callback, -1));
        return;
      }
      t1 = $.Zone__current;
      t1.scheduleMicrotask$1(t1.bindCallbackGuarded$1(callback));
    },
    Stream_Stream$fromIterable: function(elements, $T) {
      return new P._GeneratedStreamImpl(new P.Stream_Stream$fromIterable_closure(elements, $T), [$T]);
    },
    StreamIterator_StreamIterator: function(stream, $T) {
      var t1 = stream == null ? H.throwExpression(P.ArgumentError$notNull("stream")) : stream;
      return new P._StreamIterator(t1, [$T]);
    },
    StreamController_StreamController: function($T) {
      var _null = null;
      return new P._AsyncStreamController(_null, _null, _null, _null, [$T]);
    },
    _runGuarded: function(notificationHandler) {
      return;
    },
    _BufferingStreamSubscription$: function(onData, onError, onDone, cancelOnError, $T) {
      var t1 = $.Zone__current,
        t2 = cancelOnError ? 1 : 0;
      t2 = new P._BufferingStreamSubscription(t1, t2, [$T]);
      t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
      return t2;
    },
    _nullErrorHandler: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      $.Zone__current.handleUncaughtError$2(error, stackTrace);
    },
    _nullDoneHandler: function() {
    },
    _cancelAndValue: function(subscription, future, value) {
      var cancelFuture = subscription.cancel$0(0);
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
      else
        future._complete$1(value);
    },
    _ZoneSpecification$: function(createPeriodicTimer, createTimer, errorCallback, fork, handleUncaughtError, $print, registerBinaryCallback, registerCallback, registerUnaryCallback, run, runBinary, runUnary, scheduleMicrotask) {
      return new P._ZoneSpecification(handleUncaughtError, run, runUnary, runBinary, registerCallback, registerUnaryCallback, registerBinaryCallback, errorCallback, scheduleMicrotask, createTimer, createPeriodicTimer, $print, fork);
    },
    _parentDelegate: function(zone) {
      if (zone.get$parent(zone) == null)
        return;
      return zone.get$parent(zone).get$_delegate();
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old, t1;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R});
      t1 = $.Zone__current;
      if (t1 == zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      t1 = $.Zone__current;
      if (t1 == zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      t1 = $.Zone__current;
      if (t1 == zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRegisterCallback: function($self, $parent, zone, f, $R) {
      return H.functionTypeCheck(f, {func: 1, ret: $R});
    },
    _rootRegisterUnaryCallback: function($self, $parent, zone, f, $R, $T) {
      return H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
    },
    _rootRegisterBinaryCallback: function($self, $parent, zone, f, $R, T1, T2) {
      return H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
    },
    _rootErrorCallback: function($self, $parent, zone, error, stackTrace) {
      return;
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      t1 = C.C__RootZone !== zone;
      if (t1)
        f = !(!t1 || C.C__RootZone.get$errorZone() === zone.get$errorZone()) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, -1);
      P._scheduleAsyncCallback(f);
    },
    _rootCreateTimer: function($self, $parent, zone, duration, callback) {
      H.interceptedTypeCheck(duration, "$isDuration");
      callback = zone.bindCallback$1$1(H.functionTypeCheck(callback, {func: 1, ret: -1}), -1);
      return P.Timer__createTimer(duration, callback);
    },
    _rootCreatePeriodicTimer: function($self, $parent, zone, duration, callback) {
      var milliseconds;
      H.interceptedTypeCheck(duration, "$isDuration");
      callback = zone.bindUnaryCallback$2$1(H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.Timer]}), null, P.Timer);
      milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return P._TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _rootPrint: function($self, $parent, zone, line) {
      H.printString(H.stringTypeCheck(line));
    },
    _printToZone: function(line) {
      $.Zone__current.print$1(0, line);
    },
    _rootFork: function($self, $parent, zone, specification, zoneValues) {
      var valueMap, t1, t2;
      H.interceptedTypeCheck(specification, "$isZoneSpecification");
      H.interceptedTypeCheck(zoneValues, "$isMap");
      $.printToZone = P.async___printToZone$closure();
      if (specification == null)
        specification = C._ZoneSpecification_ALf;
      valueMap = zone.get$_async$_map();
      t1 = new P._CustomZone(zone, valueMap);
      t2 = zone.get$_run();
      t1.set$_run(t2);
      t2 = zone.get$_runUnary();
      t1.set$_runUnary(t2);
      t2 = zone.get$_runBinary();
      t1.set$_runBinary(t2);
      t2 = zone.get$_registerCallback();
      t1.set$_registerCallback(t2);
      t2 = zone.get$_registerUnaryCallback();
      t1.set$_registerUnaryCallback(t2);
      t2 = zone.get$_registerBinaryCallback();
      t1.set$_registerBinaryCallback(t2);
      t2 = zone.get$_errorCallback();
      t1.set$_errorCallback(t2);
      t2 = zone.get$_scheduleMicrotask();
      t1.set$_scheduleMicrotask(t2);
      t2 = zone.get$_createTimer();
      t1.set$_createTimer(t2);
      t2 = zone.get$_createPeriodicTimer();
      t1.set$_createPeriodicTimer(t2);
      t2 = zone.get$_print();
      t1.set$_print(t2);
      t2 = zone.get$_fork();
      t1.set$_fork(t2);
      t2 = specification.handleUncaughtError;
      t1.set$_handleUncaughtError(t2 != null ? new P._ZoneFunction(t1, t2, [{func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Object, P.StackTrace]}]) : zone.get$_handleUncaughtError());
      return t1;
    },
    runZoned: function(body, onError, $R) {
      var e, stackTrace, errorHandler, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, exception, _null = null, t1 = {}, zoneSpecification = null, zoneValues = null;
      t1.binaryOnError = t1.unaryOnError = null;
      if (H.functionTypeTest(onError, {func: 1, ret: -1, args: [P.Object, P.StackTrace]}))
        t1.binaryOnError = onError;
      else if (H.functionTypeTest(onError, {func: 1, ret: -1, args: [P.Object]}))
        t1.unaryOnError = onError;
      else
        throw H.wrapException(P.ArgumentError$("onError callback must take either an Object (the error), or both an Object (the error) and a StackTrace."));
      errorHandler = new P.runZoned_closure(t1);
      if (zoneSpecification == null)
        zoneSpecification = P._ZoneSpecification$(_null, _null, _null, _null, errorHandler, _null, _null, _null, _null, _null, _null, _null, _null);
      else {
        t2 = zoneSpecification;
        t3 = t2.run;
        t4 = t2.runUnary;
        t5 = t2.runBinary;
        t6 = t2.registerCallback;
        t7 = t2.registerUnaryCallback;
        t8 = t2.registerBinaryCallback;
        t9 = t2.errorCallback;
        t10 = t2.scheduleMicrotask;
        t11 = t2.createTimer;
        t12 = t2.createPeriodicTimer;
        t13 = t2.print;
        t2 = t2.fork;
        zoneSpecification = P._ZoneSpecification$(t12, t11, t9, t2, errorHandler, t13, t8, t6, t7, t3, t5, t4, t10);
      }
      try {
        t2 = P._runZoned(body, zoneValues, zoneSpecification, $R);
        return t2;
      } catch (exception) {
        e = H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        t2 = t1.binaryOnError;
        if (t2 != null)
          t2.call$2(e, stackTrace);
        else
          t1.unaryOnError.call$1(e);
      }
      return;
    },
    _runZoned: function(body, zoneValues, specification, $R) {
      return $.Zone__current.fork$2$specification$zoneValues(specification, zoneValues).run$1$1(body, $R);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
      this._tick = 0;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _TimerImpl$periodic_closure: function _TimerImpl$periodic_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.milliseconds = t1;
      _.start = t2;
      _.callback = t3;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    Future: function Future() {
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.target = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncComplete_closure: function _Future__asyncComplete_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2, t3) {
      var _ = this;
      _._box_1 = t0;
      _._box_0 = t1;
      _.listener = t2;
      _.hasError = t3;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1, t2) {
      this._box_0 = t0;
      this.listener = t1;
      this.sourceResult = t2;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1, t2) {
      this._box_1 = t0;
      this._box_0 = t1;
      this.listener = t2;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_Stream$fromIterable_closure: function Stream_Stream$fromIterable_closure(t0, t1) {
      this.elements = t0;
      this.T = t1;
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    Stream_first_closure: function Stream_first_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.future = t2;
    },
    Stream_first_closure0: function Stream_first_closure0(t0) {
      this.future = t0;
    },
    StreamSubscription: function StreamSubscription() {
    },
    StreamView: function StreamView() {
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0) {
      this.$this = t0;
    },
    _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    },
    _AsyncStreamController: function _AsyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _ControllerStream: function _ControllerStream(t0, t1) {
      this._controller = t0;
      this.$ti = t1;
    },
    _ControllerSubscription: function _ControllerSubscription(t0, t1, t2, t3) {
      var _ = this;
      _._controller = t0;
      _._onDone = _._onError = _._async$_onData = null;
      _._zone = t1;
      _._state = t2;
      _._pending = _._cancelFuture = null;
      _.$ti = t3;
    },
    _StreamSinkWrapper: function _StreamSinkWrapper(t0, t1) {
      this._async$_target = t0;
      this.$ti = t1;
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription(t0, t1, t2) {
      var _ = this;
      _._onDone = _._onError = _._async$_onData = null;
      _._zone = t0;
      _._state = t1;
      _._pending = _._cancelFuture = null;
      _.$ti = t2;
    },
    _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _GeneratedStreamImpl: function _GeneratedStreamImpl(t0, t1) {
      this._pending = t0;
      this._isUsed = false;
      this.$ti = t1;
    },
    _IterablePendingEvents: function _IterablePendingEvents(t0, t1) {
      this._async$_iterator = t0;
      this._state = 0;
      this.$ti = t1;
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0, t1) {
      this.value = t0;
      this.next = null;
      this.$ti = t1;
    },
    _DelayedError: function _DelayedError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
      this.next = null;
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents() {
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _StreamImplEvents: function _StreamImplEvents(t0) {
      var _ = this;
      _.lastPendingEvent = _.firstPendingEvent = null;
      _._state = 0;
      _.$ti = t0;
    },
    _StreamIterator: function _StreamIterator(t0, t1) {
      var _ = this;
      _._subscription = null;
      _._stateData = t0;
      _._isPaused = false;
      _.$ti = t1;
    },
    _cancelAndValue_closure: function _cancelAndValue_closure(t0, t1) {
      this.future = t0;
      this.value = t1;
    },
    _ForwardingStream: function _ForwardingStream() {
    },
    _ForwardingStreamSubscription: function _ForwardingStreamSubscription(t0, t1, t2, t3) {
      var _ = this;
      _._stream = t0;
      _._onDone = _._onError = _._async$_onData = _._subscription = null;
      _._zone = t1;
      _._state = t2;
      _._pending = _._cancelFuture = null;
      _.$ti = t3;
    },
    _MapStream: function _MapStream(t0, t1, t2) {
      this._transform = t0;
      this._async$_source = t1;
      this.$ti = t2;
    },
    Timer: function Timer() {
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _ZoneFunction: function _ZoneFunction(t0, t1, t2) {
      this.zone = t0;
      this.$function = t1;
      this.$ti = t2;
    },
    ZoneSpecification: function ZoneSpecification() {
    },
    _ZoneSpecification: function _ZoneSpecification(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.handleUncaughtError = t0;
      _.run = t1;
      _.runUnary = t2;
      _.runBinary = t3;
      _.registerCallback = t4;
      _.registerUnaryCallback = t5;
      _.registerBinaryCallback = t6;
      _.errorCallback = t7;
      _.scheduleMicrotask = t8;
      _.createTimer = t9;
      _.createPeriodicTimer = t10;
      _.print = t11;
      _.fork = t12;
    },
    ZoneDelegate: function ZoneDelegate() {
    },
    Zone: function Zone() {
    },
    _ZoneDelegate: function _ZoneDelegate(t0) {
      this._delegationTarget = t0;
    },
    _Zone: function _Zone() {
    },
    _CustomZone: function _CustomZone(t0, t1) {
      var _ = this;
      _._delegateCache = _._handleUncaughtError = _._fork = _._print = _._createPeriodicTimer = _._createTimer = _._scheduleMicrotask = _._errorCallback = _._registerBinaryCallback = _._registerUnaryCallback = _._registerCallback = _._runBinary = _._runUnary = _._run = null;
      _.parent = t0;
      _._async$_map = t1;
    },
    _CustomZone_bindCallback_closure: function _CustomZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.registered = t1;
      this.R = t2;
    },
    _CustomZone_bindUnaryCallback_closure: function _CustomZone_bindUnaryCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.registered = t1;
      _.T = t2;
      _.R = t3;
    },
    _CustomZone_bindCallbackGuarded_closure: function _CustomZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.registered = t1;
    },
    _CustomZone_bindUnaryCallbackGuarded_closure: function _CustomZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.registered = t1;
      this.T = t2;
    },
    _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0, t1) {
      this._box_0 = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    runZoned_closure: function runZoned_closure(t0) {
      this._box_0 = t0;
    },
    HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
      if (isValidKey == null)
        if (hashCode == null) {
          if (equals == null)
            return new P._HashMap([$K, $V]);
          hashCode = P.collection___defaultHashCode$closure();
        } else {
          if (P.core__identityHashCode$closure() === hashCode && P.core__identical$closure() === equals)
            return new P._IdentityHashMap([$K, $V]);
          if (equals == null)
            equals = P.collection___defaultEquals$closure();
        }
      else {
        if (hashCode == null)
          hashCode = P.collection___defaultHashCode$closure();
        if (equals == null)
          equals = P.collection___defaultEquals$closure();
      }
      return P._CustomHashMap$(equals, hashCode, isValidKey, $K, $V);
    },
    _HashMap__getTableEntry: function(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry: function(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable: function() {
      var table = Object.create(null);
      P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    _CustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
      var t1 = validKey != null ? validKey : new P._CustomHashMap_closure($K);
      return new P._CustomHashMap(_equals, _hashCode, t1, [$K, $V]);
    },
    LinkedHashMap_LinkedHashMap: function(equals, hashCode, $K, $V) {
      if (hashCode == null) {
        if (equals == null)
          return new H.JsLinkedHashMap([$K, $V]);
        hashCode = P.collection___defaultHashCode$closure();
      } else {
        if (P.core__identityHashCode$closure() === hashCode && P.core__identical$closure() === equals)
          return new P._LinkedIdentityHashMap([$K, $V]);
        if (equals == null)
          equals = P.collection___defaultEquals$closure();
      }
      return P._LinkedCustomHashMap$(equals, hashCode, null, $K, $V);
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      return H.assertSubtype(H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap([$K, $V])), "$isLinkedHashMap", [$K, $V], "$asLinkedHashMap");
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap([$K, $V]);
    },
    LinkedHashMap__makeEmpty: function() {
      return new H.JsLinkedHashMap([null, null]);
    },
    _LinkedCustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
      return new P._LinkedCustomHashMap(_equals, _hashCode, new P._LinkedCustomHashMap_closure($K), [$K, $V]);
    },
    HashSet_HashSet: function(equals, hashCode, $E) {
      if (equals == null)
        return new P._HashSet([$E]);
      return P._CustomHashSet$(equals, P.collection___defaultHashCode$closure(), null, $E);
    },
    _HashSet__newHashTable: function() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _CustomHashSet$: function(_equality, _hasher, validKey, $E) {
      return new P._CustomHashSet(_equality, _hasher, new P._CustomHashSet_closure($E), [$E]);
    },
    LinkedHashSet_LinkedHashSet: function($E) {
      return new P._LinkedHashSet([$E]);
    },
    _LinkedHashSet__newHashTable: function() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$: function(_set, _modifications, $E) {
      var t1 = new P._LinkedHashSetIterator(_set, _modifications, [$E]);
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    _defaultEquals: function(a, b) {
      return J.$eq$(a, b);
    },
    _defaultHashCode: function(a) {
      return J.get$hashCode$(a);
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = H.setRuntimeTypeInfo([], [P.String]);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, H.listSuperNativeTypeCheck(parts, "$isIterable"), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = P.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = J.get$iterator$ax(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current(it));
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current(it);
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current(it);
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current(it);
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from: function(other, $K, $V) {
      var result = P.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
      other.forEach$1(0, new P.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    ListMixin__compareAny: function(a, b) {
      return J.compareTo$1$ns(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        J.forEach$1$ax(m, new P.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    MapBase__fillMapWithIterables: function(map, keys, values) {
      var keyIterator = new J.ArrayIterator(keys, keys.length, [H.getTypeArgumentByIndex(keys, 0)]),
        valueIterator = new H.ListIterator(values, values.get$length(values), [H.getRuntimeTypeArgument(values, "ListIterable", 0)]),
        hasNextKey = keyIterator.moveNext$0(),
        hasNextValue = valueIterator.moveNext$0();
      while (true) {
        if (!(hasNextKey && hasNextValue))
          break;
        map.$indexSet(0, keyIterator.__interceptors$_current, valueIterator.__internal$_current);
        hasNextKey = keyIterator.moveNext$0();
        hasNextValue = valueIterator.moveNext$0();
      }
      if (hasNextKey || hasNextValue)
        throw H.wrapException(P.ArgumentError$("Iterables do not have same length."));
    },
    SplayTreeSet$: function(compare, isValidKey, $E) {
      var t1 = isValidKey == null ? new P.SplayTreeSet_closure($E) : isValidKey;
      return new P.SplayTreeSet(new P._SplayTreeNode(null, [$E]), compare, t1, [$E]);
    },
    _HashMap: function _HashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMap_addAll_closure: function _HashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    _IdentityHashMap: function _IdentityHashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _CustomHashMap: function _CustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t3;
    },
    _CustomHashMap_closure: function _CustomHashMap_closure(t0) {
      this.K = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._collection$_map = t0;
      _._keys = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _LinkedIdentityHashMap: function _LinkedIdentityHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _._rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    _LinkedCustomHashMap: function _LinkedCustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _.__js_helper$_length = 0;
      _._last = _._first = _._rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t3;
    },
    _LinkedCustomHashMap_closure: function _LinkedCustomHashMap_closure(t0) {
      this.K = t0;
    },
    _HashSet: function _HashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._elements = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _CustomHashSet: function _CustomHashSet(t0, t1, t2, t3) {
      var _ = this;
      _._equality = t0;
      _._hasher = t1;
      _._validKey = t2;
      _._collection$_length = 0;
      _._elements = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t3;
    },
    _CustomHashSet_closure: function _CustomHashSet_closure(t0) {
      this.E = t0;
    },
    _HashSetIterator: function _HashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._elements = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._collection$_previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    UnmodifiableListView: function UnmodifiableListView(t0, t1) {
      this._collection$_source = t0;
      this.$ti = t1;
    },
    IterableMixin: function IterableMixin() {
    },
    IterableBase: function IterableBase() {
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ListQueue: function ListQueue(t0) {
      var _ = this;
      _._table = null;
      _._modificationCount = _._tail = _._head = 0;
      _.$ti = t0;
    },
    _ListQueueIterator: function _ListQueueIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._queue = t0;
      _._end = t1;
      _._modificationCount = t2;
      _._collection$_position = t3;
      _._collection$_current = null;
      _.$ti = t4;
    },
    SetMixin: function SetMixin() {
    },
    _SetBase: function _SetBase() {
    },
    _SplayTreeNode: function _SplayTreeNode(t0, t1) {
      var _ = this;
      _.key = t0;
      _.right = _.left = null;
      _.$ti = t1;
    },
    _SplayTree: function _SplayTree() {
    },
    _SplayTreeIterator: function _SplayTreeIterator() {
    },
    _SplayTreeKeyIterator: function _SplayTreeKeyIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._tree = t0;
      _._workList = t1;
      _._modificationCount = t2;
      _._splayCount = t3;
      _._currentNode = null;
      _.$ti = t4;
    },
    SplayTreeSet: function SplayTreeSet(t0, t1, t2, t3) {
      var _ = this;
      _._root = null;
      _._dummy = t0;
      _._comparator = t1;
      _._validKey = t2;
      _._splayCount = _._modificationCount = _._count = 0;
      _.$ti = t3;
    },
    SplayTreeSet_closure: function SplayTreeSet_closure(t0) {
      this.E = t0;
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    _SplayTreeSet__SplayTree_IterableMixin: function _SplayTreeSet__SplayTree_IterableMixin() {
    },
    _SplayTreeSet__SplayTree_IterableMixin_SetMixin: function _SplayTreeSet__SplayTree_IterableMixin_SetMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    _parseJson: function(source, reviver) {
      var parsed, e, exception, t1;
      if (typeof source !== "string")
        throw H.wrapException(H.argumentErrorValue(source));
      parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.FormatException$(String(e), null, null);
        throw H.wrapException(t1);
      }
      t1 = P._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy: function(object) {
      var i;
      if (object == null)
        return;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new P._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    Utf8Decoder__convertIntercepted: function(allowMalformed, codeUnits, start, end) {
      if (codeUnits instanceof Uint8Array)
        return P.Utf8Decoder__convertInterceptedUint8List(false, codeUnits, start, end);
      return;
    },
    Utf8Decoder__convertInterceptedUint8List: function(allowMalformed, codeUnits, start, end) {
      var t1, $length,
        decoder = $.$get$Utf8Decoder__decoder();
      if (decoder == null)
        return;
      t1 = 0 === start;
      if (t1 && true)
        return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits);
      $length = codeUnits.length;
      end = P.RangeError_checkValidRange(start, end, $length);
      if (t1 && end === $length)
        return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits);
      return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits.subarray(start, end));
    },
    Utf8Decoder__useTextDecoderChecked: function(decoder, codeUnits) {
      if (P.Utf8Decoder__unsafe(codeUnits))
        return;
      return P.Utf8Decoder__useTextDecoderUnchecked(decoder, codeUnits);
    },
    Utf8Decoder__useTextDecoderUnchecked: function(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return;
    },
    Utf8Decoder__unsafe: function(codeUnits) {
      var i,
        limit = codeUnits.length - 2;
      for (i = 0; i < limit; ++i)
        if (codeUnits[i] === 237)
          if ((codeUnits[i + 1] & 224) === 160)
            return true;
      return false;
    },
    Utf8Decoder__makeDecoder: function() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return;
    },
    _scanOneByteCharacters: function(units, from, endIndex) {
      var t1, i, unit;
      if (typeof endIndex !== "number")
        return H.iae(endIndex);
      t1 = J.getInterceptor$asx(units);
      i = from;
      for (; i < endIndex; ++i) {
        unit = t1.$index(units, i);
        if (typeof unit !== "number")
          return unit.$and();
        if ((unit & 127) !== unit)
          return i - from;
      }
      return endIndex - from;
    },
    Base64Codec__checkPadding: function(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (C.JSInt_methods.$mod($length, 4) !== 0)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Base64Encoder_encodeChunk: function(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      var t1, t2, i, byteOr, byte, outputIndex0, t3, outputIndex1,
        bits = state >>> 2,
        expectedChars = 3 - (state & 3);
      for (t1 = bytes.length, t2 = output.length, i = start, byteOr = 0; i < end; ++i) {
        if (i >= t1)
          return H.ioore(bytes, i);
        byte = bytes[i];
        if (typeof byte !== "number")
          return H.iae(byte);
        byteOr = (byteOr | byte) >>> 0;
        bits = (bits << 8 | byte) & 16777215;
        --expectedChars;
        if (expectedChars === 0) {
          outputIndex0 = outputIndex + 1;
          t3 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 18 & 63);
          if (outputIndex >= t2)
            return H.ioore(output, outputIndex);
          output[outputIndex] = t3;
          outputIndex = outputIndex0 + 1;
          t3 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 12 & 63);
          if (outputIndex0 >= t2)
            return H.ioore(output, outputIndex0);
          output[outputIndex0] = t3;
          outputIndex0 = outputIndex + 1;
          t3 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 6 & 63);
          if (outputIndex >= t2)
            return H.ioore(output, outputIndex);
          output[outputIndex] = t3;
          outputIndex = outputIndex0 + 1;
          t3 = C.JSString_methods._codeUnitAt$1(alphabet, bits & 63);
          if (outputIndex0 >= t2)
            return H.ioore(output, outputIndex0);
          output[outputIndex0] = t3;
          bits = 0;
          expectedChars = 3;
        }
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (expectedChars < 3) {
          outputIndex0 = outputIndex + 1;
          outputIndex1 = outputIndex0 + 1;
          if (3 - expectedChars === 1) {
            t1 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 2 & 63);
            if (outputIndex >= t2)
              return H.ioore(output, outputIndex);
            output[outputIndex] = t1;
            t1 = C.JSString_methods._codeUnitAt$1(alphabet, bits << 4 & 63);
            if (outputIndex0 >= t2)
              return H.ioore(output, outputIndex0);
            output[outputIndex0] = t1;
            outputIndex = outputIndex1 + 1;
            if (outputIndex1 >= t2)
              return H.ioore(output, outputIndex1);
            output[outputIndex1] = 61;
            if (outputIndex >= t2)
              return H.ioore(output, outputIndex);
            output[outputIndex] = 61;
          } else {
            t1 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 10 & 63);
            if (outputIndex >= t2)
              return H.ioore(output, outputIndex);
            output[outputIndex] = t1;
            t1 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 4 & 63);
            if (outputIndex0 >= t2)
              return H.ioore(output, outputIndex0);
            output[outputIndex0] = t1;
            outputIndex = outputIndex1 + 1;
            t1 = C.JSString_methods._codeUnitAt$1(alphabet, bits << 2 & 63);
            if (outputIndex1 >= t2)
              return H.ioore(output, outputIndex1);
            output[outputIndex1] = t1;
            if (outputIndex >= t2)
              return H.ioore(output, outputIndex);
            output[outputIndex] = 61;
          }
          return 0;
        }
        return (bits << 2 | 3 - expectedChars) >>> 0;
      }
      for (i = start; i < end;) {
        if (i >= t1)
          return H.ioore(bytes, i);
        byte = bytes[i];
        if (typeof byte !== "number")
          return byte.$lt();
        if (byte < 0 || byte > 255)
          break;
        ++i;
      }
      t1 = "Not a byte value at index " + i + ": 0x";
      if (i >= bytes.length)
        return H.ioore(bytes, i);
      throw H.wrapException(P.ArgumentError$value(bytes, t1 + J.toRadixString$1$n(bytes[i], 16), null));
    },
    Encoding_getByName: function($name) {
      if ($name == null)
        return;
      return $.Encoding__nameToEncoding.$index(0, $name.toLowerCase());
    },
    JsonUnsupportedObjectError$: function(unsupportedObject, cause, partialResult) {
      return new P.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable: function(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier_stringify: function(object, toEncodable, indent) {
      var t1,
        output = new P.StringBuffer(""),
        stringifier = new P._JsonStringStringifier(output, [], P.convert___defaultToEncodable$closure());
      stringifier.writeObject$1(object);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _JsonMap: function _JsonMap(t0, t1) {
      this._original = t0;
      this._processed = t1;
      this._data = null;
    },
    _JsonMap_addAll_closure: function _JsonMap_addAll_closure(t0) {
      this.$this = t0;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0) {
      this._parent = t0;
    },
    AsciiCodec: function AsciiCodec() {
    },
    _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {
    },
    AsciiEncoder: function AsciiEncoder(t0) {
      this._subsetMask = t0;
    },
    Base64Codec: function Base64Codec() {
    },
    Base64Encoder: function Base64Encoder() {
    },
    _Base64Encoder: function _Base64Encoder(t0) {
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    ByteConversionSink: function ByteConversionSink() {
    },
    ByteConversionSinkBase: function ByteConversionSinkBase() {
    },
    _ByteCallbackSink: function _ByteCallbackSink(t0, t1) {
      this._callback = t0;
      this._buffer = t1;
      this._bufferIndex = 0;
    },
    ChunkedConversionSink: function ChunkedConversionSink() {
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0) {
      this._toEncodable = t0;
    },
    JsonDecoder: function JsonDecoder(t0) {
      this._reviver = t0;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    Latin1Codec: function Latin1Codec() {
    },
    Latin1Encoder: function Latin1Encoder(t0) {
      this._subsetMask = t0;
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = 0;
      this._buffer = t0;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0, t1) {
      var _ = this;
      _._allowMalformed = t0;
      _._stringSink = t1;
      _._isFirstCharacter = true;
      _._extraUnits = _._expectedUnits = _._convert$_value = 0;
    },
    _symbolMapToStringMap: function(map) {
      var result = new H.JsLinkedHashMap([P.String, null]);
      J.forEach$1$ax(map, new P._symbolMapToStringMap_closure(result));
      return result;
    },
    identityHashCode: function(object) {
      return H.objectHashCode(object);
    },
    Function_apply: function($function, positionalArguments, namedArguments) {
      return H.Primitives_applyFunction($function, positionalArguments, namedArguments == null ? null : P._symbolMapToStringMap(namedArguments));
    },
    int_parse: function(source, onError, radix) {
      var value = H.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      if (onError != null)
        return onError.call$1(source);
      throw H.wrapException(P.FormatException$(source, null, null));
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.S(H.Primitives_objectTypeName(object)) + "'";
    },
    List_List$filled: function($length, fill, $E) {
      var i,
        result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && true)
        for (i = 0; i < result.length; ++i)
          C.JSArray_methods.$indexSet(result, i, fill);
      return H.assertSubtype(result, "$isList", [$E], "$asList");
    },
    List_List$from: function(elements, growable, $E) {
      var t2,
        t1 = [$E],
        list = H.setRuntimeTypeInfo([], t1);
      for (t2 = J.get$iterator$ax(elements); t2.moveNext$0();)
        C.JSArray_methods.add$1(list, H.assertSubtypeOfRuntimeType(t2.get$current(t2), $E));
      if (growable)
        return list;
      return H.assertSubtype(J.JSArray_markFixedList(list), "$isList", t1, "$asList");
    },
    List_List$unmodifiable: function(elements, $E) {
      var t1 = [$E];
      return H.assertSubtype(J.JSArray_markUnmodifiableList(H.assertSubtype(P.List_List$from(elements, false, $E), "$isList", t1, "$asList")), "$isList", t1, "$asList");
    },
    String_String$fromCharCodes: function(charCodes, start, end) {
      var len, t1;
      if (typeof charCodes === "object" && charCodes !== null && charCodes.constructor === Array) {
        H.assertSubtype(charCodes, "$isJSArray", [P.int], "$asJSArray");
        len = charCodes.length;
        end = P.RangeError_checkValidRange(start, end, len);
        if (start <= 0) {
          if (typeof end !== "number")
            return end.$lt();
          t1 = end < len;
        } else
          t1 = true;
        return H.Primitives_stringFromCharCodes(t1 ? C.JSArray_methods.sublist$2(charCodes, start, end) : charCodes);
      }
      if (!!J.getInterceptor$(charCodes).$isNativeUint8List)
        return H.Primitives_stringFromNativeUint8List(charCodes, start, P.RangeError_checkValidRange(start, end, charCodes.length));
      return P.String__stringFromIterable(charCodes, start, end);
    },
    String_String$fromCharCode: function(charCode) {
      return H.Primitives_stringFromCharCode(charCode);
    },
    String__stringFromIterable: function(charCodes, start, end) {
      var t1, it, i, list, _null = null;
      if (start < 0)
        throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(charCodes), _null, _null));
      t1 = end == null;
      if (!t1 && end < start)
        throw H.wrapException(P.RangeError$range(end, start, J.get$length$asx(charCodes), _null, _null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, _null, _null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current(it));
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw H.wrapException(P.RangeError$range(end, start, i, _null, _null));
          list.push(it.get$current(it));
        }
      return H.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp: function(source, caseSensitive) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, false, caseSensitive, false, false, false));
    },
    identical: function(a, b) {
      return a == null ? b == null : a === b;
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += H.S(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        string += H.S(iterator.get$current(iterator));
        for (; iterator.moveNext$0();)
          string = string + separator + H.S(iterator.get$current(iterator));
      }
      return string;
    },
    NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments) {
      return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments);
    },
    Uri_base: function() {
      var uri = H.Primitives_currentUri();
      if (uri != null)
        return P.Uri_parse(uri);
      throw H.wrapException(P.UnsupportedError$("'Uri.base' is not supported"));
    },
    _Uri__uriEncode: function(canonicalTable, text, encoding, spaceToPlus) {
      var t1, bytes, i, t2, t3, byte,
        _s16_ = "0123456789ABCDEF";
      if (encoding === C.C_Utf8Codec) {
        t1 = $.$get$_Uri__needsNoEncoding()._nativeRegExp;
        t1 = t1.test(text);
      } else
        t1 = false;
      if (t1)
        return text;
      bytes = encoding.encode$1(text);
      t1 = J.getInterceptor$asx(bytes);
      i = 0;
      t2 = "";
      while (true) {
        t3 = t1.get$length(bytes);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        byte = t1.$index(bytes, i);
        if (typeof byte !== "number")
          return byte.$lt();
        if (byte < 128) {
          t3 = C.JSInt_methods._shrOtherPositive$1(byte, 4);
          if (t3 >= 8)
            return H.ioore(canonicalTable, t3);
          t3 = (canonicalTable[t3] & 1 << (byte & 15)) !== 0;
        } else
          t3 = false;
        if (t3)
          t2 += H.Primitives_stringFromCharCode(byte);
        else
          t2 = spaceToPlus && byte === 32 ? t2 + "+" : t2 + "%" + _s16_[C.JSInt_methods._shrOtherPositive$1(byte, 4) & 15] + _s16_[byte & 15];
        ++i;
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    StackTrace_current: function() {
      var stackTrace, exception;
      if (H.boolConversionCheck($.$get$_hasErrorStackProperty()))
        return H.getTraceFromException(new Error());
      try {
        throw H.wrapException("");
      } catch (exception) {
        H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        return stackTrace;
      }
    },
    _BigIntImpl__parseDecimal: function(source, isNegative) {
      var part, i,
        result = $.$get$_BigIntImpl_zero(),
        t1 = source.length,
        digitInPartCount = 4 - t1 % 4;
      if (digitInPartCount === 4)
        digitInPartCount = 0;
      for (part = 0, i = 0; i < t1; ++i) {
        part = part * 10 + C.JSString_methods._codeUnitAt$1(source, i) - 48;
        ++digitInPartCount;
        if (digitInPartCount === 4) {
          result = result.$mul(0, $.$get$_BigIntImpl__bigInt10000()).$add(0, P._BigIntImpl__BigIntImpl$_fromInt(part));
          part = 0;
          digitInPartCount = 0;
        }
      }
      if (isNegative)
        return result.$negate(0);
      return result;
    },
    _BigIntImpl__codeUnitToRadixValue: function(codeUnit) {
      if (48 <= codeUnit && codeUnit <= 57)
        return codeUnit - 48;
      return (codeUnit | 32) - 97 + 10;
    },
    _BigIntImpl__parseHex: function(source, startPos, isNegative) {
      var t3, i, chunk, j, i0, digitValue, digitIndex0,
        t1 = source.length,
        sourceLength = t1 - startPos,
        chunkCount = C.JSDouble_methods.ceil$0(sourceLength / 4),
        digits = new Uint16Array(chunkCount),
        lastDigitLength = sourceLength - (chunkCount - 1) * 4,
        t2 = digits.length,
        digitIndex = t2 - 1;
      for (t3 = J.getInterceptor$s(source), i = startPos, chunk = 0, j = 0; j < lastDigitLength; ++j, i = i0) {
        i0 = i + 1;
        digitValue = P._BigIntImpl__codeUnitToRadixValue(t3._codeUnitAt$1(source, i));
        if (digitValue >= 16)
          return;
        chunk = chunk * 16 + digitValue;
      }
      digitIndex0 = digitIndex - 1;
      if (digitIndex < 0)
        return H.ioore(digits, digitIndex);
      digits[digitIndex] = chunk;
      for (digitIndex = digitIndex0; i < t1; digitIndex = digitIndex0) {
        for (chunk = 0, j = 0; j < 4; ++j, i = i0) {
          i0 = i + 1;
          digitValue = P._BigIntImpl__codeUnitToRadixValue(C.JSString_methods._codeUnitAt$1(source, i));
          if (digitValue >= 16)
            return;
          chunk = chunk * 16 + digitValue;
        }
        digitIndex0 = digitIndex - 1;
        if (digitIndex < 0)
          return H.ioore(digits, digitIndex);
        digits[digitIndex] = chunk;
      }
      if (t2 === 1) {
        if (0 >= t2)
          return H.ioore(digits, 0);
        t1 = digits[0] === 0;
      } else
        t1 = false;
      if (t1)
        return $.$get$_BigIntImpl_zero();
      t1 = P._BigIntImpl__normalize(t2, digits);
      return new P._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__tryParse: function(source, radix) {
      var match, t1, t2, isNegative, decimalMatch, hexMatch;
      if (source === "")
        return;
      match = P.RegExp_RegExp("^\\s*([+-]?)((0x[a-f0-9]+)|(\\d+)|([a-z0-9]+))\\s*$", false).firstMatch$1(source);
      if (match == null)
        return;
      t1 = match._match;
      t2 = t1.length;
      if (1 >= t2)
        return H.ioore(t1, 1);
      isNegative = t1[1] === "-";
      if (4 >= t2)
        return H.ioore(t1, 4);
      decimalMatch = t1[4];
      hexMatch = t1[3];
      if (5 >= t2)
        return H.ioore(t1, 5);
      if (decimalMatch != null)
        return P._BigIntImpl__parseDecimal(decimalMatch, isNegative);
      if (hexMatch != null)
        return P._BigIntImpl__parseHex(hexMatch, 2, isNegative);
      return;
    },
    _BigIntImpl__normalize: function(used, digits) {
      var t2,
        t1 = digits.length;
      while (true) {
        if (typeof used !== "number")
          return used.$gt();
        if (used > 0) {
          t2 = used - 1;
          if (t2 >= t1)
            return H.ioore(digits, t2);
          t2 = digits[t2] === 0;
        } else
          t2 = false;
        if (!t2)
          break;
        --used;
      }
      return used;
    },
    _BigIntImpl__cloneDigits: function(digits, from, to, $length) {
      var n, i, t2,
        t1 = typeof $length === "number" && Math.floor($length) === $length ? $length : H.throwExpression(P.ArgumentError$("Invalid length " + H.S($length))),
        resultDigits = new Uint16Array(t1);
      if (typeof to !== "number")
        return to.$sub();
      if (typeof from !== "number")
        return H.iae(from);
      n = to - from;
      for (t1 = resultDigits.length, i = 0; i < n; ++i) {
        t2 = from + i;
        if (t2 < 0 || t2 >= digits.length)
          return H.ioore(digits, t2);
        t2 = digits[t2];
        if (i >= t1)
          return H.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      return resultDigits;
    },
    _BigIntImpl__BigIntImpl$_fromInt: function(value) {
      var digits, t1, t2, i, i0,
        isNegative = value < 0;
      if (isNegative) {
        if (value === -9223372036854776e3) {
          digits = new Uint16Array(4);
          if (3 >= digits.length)
            return H.ioore(digits, 3);
          digits[3] = 32768;
          t1 = P._BigIntImpl__normalize(4, digits);
          return new P._BigIntImpl(t1 !== 0 || false, digits, t1);
        }
        value = -value;
      }
      if (value < 65536) {
        digits = new Uint16Array(1);
        if (0 >= digits.length)
          return H.ioore(digits, 0);
        digits[0] = value;
        t1 = P._BigIntImpl__normalize(1, digits);
        return new P._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      if (value <= 4294967295) {
        digits = new Uint16Array(2);
        t1 = digits.length;
        if (0 >= t1)
          return H.ioore(digits, 0);
        digits[0] = value & 65535;
        t2 = C.JSInt_methods._shrOtherPositive$1(value, 16);
        if (1 >= t1)
          return H.ioore(digits, 1);
        digits[1] = t2;
        t2 = P._BigIntImpl__normalize(2, digits);
        return new P._BigIntImpl(t2 === 0 ? false : isNegative, digits, t2);
      }
      t1 = C.JSInt_methods._tdivFast$1(C.JSInt_methods.get$bitLength(value) - 1, 16);
      digits = new Uint16Array(t1 + 1);
      for (t1 = digits.length, i = 0; value !== 0; i = i0) {
        i0 = i + 1;
        if (i >= t1)
          return H.ioore(digits, i);
        digits[i] = value & 65535;
        value = C.JSInt_methods._tdivFast$1(value, 65536);
      }
      t1 = P._BigIntImpl__normalize(t1, digits);
      return new P._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__dlShiftDigits: function(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, t3, t4;
      if (xUsed === 0)
        return 0;
      if (n === 0 && resultDigits === xDigits)
        return xUsed;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.length; i >= 0; --i) {
        t3 = i + n;
        if (i >= t1)
          return H.ioore(xDigits, i);
        t4 = xDigits[i];
        if (t3 < 0 || t3 >= t2)
          return H.ioore(resultDigits, t3);
        resultDigits[t3] = t4;
      }
      for (i = n - 1; i >= 0; --i) {
        if (i >= t2)
          return H.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      return xUsed + n;
    },
    _BigIntImpl__lsh: function(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, carry, digit, t3, t4,
        digitShift = C.JSInt_methods._tdivFast$1(n, 16),
        bitShift = C.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = C.JSInt_methods.$shl(1, carryBitShift) - 1;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.length, carry = 0; i >= 0; --i) {
        if (i >= t1)
          return H.ioore(xDigits, i);
        digit = xDigits[i];
        t3 = i + digitShift + 1;
        t4 = C.JSInt_methods._shrReceiverPositive$1(digit, carryBitShift);
        if (t3 < 0 || t3 >= t2)
          return H.ioore(resultDigits, t3);
        resultDigits[t3] = (t4 | carry) >>> 0;
        carry = C.JSInt_methods.$shl(digit & bitMask, bitShift);
      }
      if (digitShift < 0 || digitShift >= t2)
        return H.ioore(resultDigits, digitShift);
      resultDigits[digitShift] = carry;
    },
    _BigIntImpl__lShiftDigits: function(xDigits, xUsed, n, resultDigits) {
      var resultUsed, t1, i, t2,
        digitsShift = C.JSInt_methods._tdivFast$1(n, 16);
      if (C.JSInt_methods.$mod(n, 16) === 0)
        return P._BigIntImpl__dlShiftDigits(xDigits, xUsed, digitsShift, resultDigits);
      resultUsed = xUsed + digitsShift + 1;
      P._BigIntImpl__lsh(xDigits, xUsed, n, resultDigits);
      for (t1 = resultDigits.length, i = digitsShift; --i, i >= 0;) {
        if (i >= t1)
          return H.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      t2 = resultUsed - 1;
      if (t2 < 0 || t2 >= t1)
        return H.ioore(resultDigits, t2);
      if (resultDigits[t2] === 0)
        resultUsed = t2;
      return resultUsed;
    },
    _BigIntImpl__rsh: function(xDigits, xUsed, n, resultDigits) {
      var carry, last, t2, i, t3, digit,
        digitsShift = C.JSInt_methods._tdivFast$1(n, 16),
        bitShift = C.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = C.JSInt_methods.$shl(1, bitShift) - 1,
        t1 = xDigits.length;
      if (digitsShift < 0 || digitsShift >= t1)
        return H.ioore(xDigits, digitsShift);
      carry = C.JSInt_methods._shrReceiverPositive$1(xDigits[digitsShift], bitShift);
      last = xUsed - digitsShift - 1;
      for (t2 = resultDigits.length, i = 0; i < last; ++i) {
        t3 = i + digitsShift + 1;
        if (t3 >= t1)
          return H.ioore(xDigits, t3);
        digit = xDigits[t3];
        t3 = C.JSInt_methods.$shl(digit & bitMask, carryBitShift);
        if (i >= t2)
          return H.ioore(resultDigits, i);
        resultDigits[i] = (t3 | carry) >>> 0;
        carry = C.JSInt_methods._shrReceiverPositive$1(digit, bitShift);
      }
      if (last < 0 || last >= t2)
        return H.ioore(resultDigits, last);
      resultDigits[last] = carry;
    },
    _BigIntImpl__compareDigits: function(digits, used, otherDigits, otherUsed) {
      var i, t1, t2, t3,
        result = used - otherUsed;
      if (result === 0)
        for (i = used - 1, t1 = digits.length, t2 = otherDigits.length; i >= 0; --i) {
          if (i >= t1)
            return H.ioore(digits, i);
          t3 = digits[i];
          if (i >= t2)
            return H.ioore(otherDigits, i);
          result = t3 - otherDigits[i];
          if (result !== 0)
            return result;
        }
      return result;
    },
    _BigIntImpl__absAdd: function(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.length, carry = 0, i = 0; i < otherUsed; ++i) {
        if (i >= t1)
          return H.ioore(digits, i);
        t4 = digits[i];
        if (i >= t2)
          return H.ioore(otherDigits, i);
        carry += t4 + otherDigits[i];
        if (i >= t3)
          return H.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = carry >>> 16;
      }
      for (i = otherUsed; i < used; ++i) {
        if (i < 0 || i >= t1)
          return H.ioore(digits, i);
        carry += digits[i];
        if (i >= t3)
          return H.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = carry >>> 16;
      }
      if (used < 0 || used >= t3)
        return H.ioore(resultDigits, used);
      resultDigits[used] = carry;
    },
    _BigIntImpl__absSub: function(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.length, carry = 0, i = 0; i < otherUsed; ++i) {
        if (i >= t1)
          return H.ioore(digits, i);
        t4 = digits[i];
        if (i >= t2)
          return H.ioore(otherDigits, i);
        carry += t4 - otherDigits[i];
        if (i >= t3)
          return H.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (C.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
      for (i = otherUsed; i < used; ++i) {
        if (i < 0 || i >= t1)
          return H.ioore(digits, i);
        carry += digits[i];
        if (i >= t3)
          return H.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (C.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
    },
    _BigIntImpl__mulAdd: function(x, multiplicandDigits, i, accumulatorDigits, j, n) {
      var t1, t2, c, i0, t3, combined, j0, l;
      if (x === 0)
        return;
      for (t1 = multiplicandDigits.length, t2 = accumulatorDigits.length, c = 0; --n, n >= 0; j = j0, i = i0) {
        i0 = i + 1;
        if (i >= t1)
          return H.ioore(multiplicandDigits, i);
        t3 = multiplicandDigits[i];
        if (j < 0 || j >= t2)
          return H.ioore(accumulatorDigits, j);
        combined = x * t3 + accumulatorDigits[j] + c;
        j0 = j + 1;
        accumulatorDigits[j] = combined & 65535;
        c = C.JSInt_methods._tdivFast$1(combined, 65536);
      }
      for (; c !== 0; j = j0) {
        if (j < 0 || j >= t2)
          return H.ioore(accumulatorDigits, j);
        l = accumulatorDigits[j] + c;
        j0 = j + 1;
        accumulatorDigits[j] = l & 65535;
        c = C.JSInt_methods._tdivFast$1(l, 65536);
      }
    },
    _BigIntImpl__estimateQuotientDigit: function(topDigitDivisor, digits, i) {
      var t2, t3, quotientDigit,
        t1 = digits.length;
      if (i < 0 || i >= t1)
        return H.ioore(digits, i);
      t2 = digits[i];
      if (t2 === topDigitDivisor)
        return 65535;
      t3 = i - 1;
      if (t3 < 0 || t3 >= t1)
        return H.ioore(digits, t3);
      quotientDigit = C.JSInt_methods.$tdiv((t2 << 16 | digits[t3]) >>> 0, topDigitDivisor);
      if (quotientDigit > 65535)
        return 65535;
      return quotientDigit;
    },
    DateTime__fourDigits: function(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits: function(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message);
    },
    ArgumentError$notNull: function($name) {
      return new P.ArgumentError(false, null, $name, "Must not be null");
    },
    RangeError$: function(message) {
      var _null = null;
      return new P.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value: function(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValueInInterval: function(value, minValue, maxValue, $name) {
      var t1;
      if (value >= minValue) {
        if (typeof maxValue !== "number")
          return H.iae(maxValue);
        t1 = value > maxValue;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(value, minValue, maxValue, $name, null));
    },
    RangeError_checkValidRange: function(start, end, $length) {
      var t1;
      if (typeof start !== "number")
        return H.iae(start);
      if (0 <= start) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = start > $length;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (!(start > end)) {
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = end > $length;
        } else
          t1 = true;
        if (t1)
          throw H.wrapException(P.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative: function(value, $name) {
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0)
        throw H.wrapException(P.RangeError$range(value, 0, null, $name, null));
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      var t1 = H.intTypeCheck($length == null ? J.get$length$asx(indexable) : $length);
      return new P.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message);
    },
    StateError$: function(message) {
      return new P.StateError(message);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception: function(message) {
      return new P._Exception(message);
    },
    FormatException$: function(message, source, offset) {
      return new P.FormatException(message, source, offset);
    },
    List_List$generate: function($length, generator, growable, $E) {
      var i,
        result = H.setRuntimeTypeInfo([], [$E]);
      C.JSArray_methods.set$length(result, $length);
      for (i = 0; i < $length; ++i)
        C.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    Map_castFrom: function(source, $K, $V, K2, V2) {
      return new H.CastMap(source, [$K, $V, K2, V2]);
    },
    print: function(object) {
      var t1 = $.printToZone;
      if (t1 == null)
        H.printString(object);
      else
        t1.call$1(object);
    },
    Uri_parse: function(uri) {
      var delta, t1, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t2, schemeAuth, queryStart0, pathStart0, _null = null,
        end = uri.length;
      if (end >= 5) {
        delta = ((J._codeUnitAt$1$s(uri, 4) ^ 58) * 3 | C.JSString_methods._codeUnitAt$1(uri, 0) ^ 100 | C.JSString_methods._codeUnitAt$1(uri, 1) ^ 97 | C.JSString_methods._codeUnitAt$1(uri, 2) ^ 116 | C.JSString_methods._codeUnitAt$1(uri, 3) ^ 97) >>> 0;
        if (delta === 0)
          return P.UriData__parse(end < end ? C.JSString_methods.substring$2(uri, 0, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return P.UriData__parse(C.JSString_methods.substring$2(uri, 5, end), 0, _null).get$uri();
      }
      t1 = new Array(8);
      t1.fixed$length = Array;
      indices = H.setRuntimeTypeInfo(t1, [P.int]);
      C.JSArray_methods.$indexSet(indices, 0, 0);
      C.JSArray_methods.$indexSet(indices, 1, -1);
      C.JSArray_methods.$indexSet(indices, 2, -1);
      C.JSArray_methods.$indexSet(indices, 7, -1);
      C.JSArray_methods.$indexSet(indices, 3, 0);
      C.JSArray_methods.$indexSet(indices, 4, 0);
      C.JSArray_methods.$indexSet(indices, 5, end);
      C.JSArray_methods.$indexSet(indices, 6, end);
      if (P._scan(uri, 0, end, 0, indices) >= 14)
        C.JSArray_methods.$indexSet(indices, 7, end);
      schemeEnd = indices[1];
      if (typeof schemeEnd !== "number")
        return schemeEnd.$ge();
      if (schemeEnd >= 0)
        if (P._scan(uri, 0, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      t1 = indices[2];
      if (typeof t1 !== "number")
        return t1.$add();
      hostStart = t1 + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (typeof fragmentStart !== "number")
        return fragmentStart.$lt();
      if (typeof queryStart !== "number")
        return H.iae(queryStart);
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (typeof pathStart !== "number")
        return pathStart.$lt();
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (typeof portStart !== "number")
        return portStart.$lt();
      if (portStart < hostStart)
        portStart = pathStart;
      t1 = indices[7];
      if (typeof t1 !== "number")
        return t1.$lt();
      isSimple = t1 < 0;
      if (isSimple)
        if (hostStart > schemeEnd + 3) {
          scheme = _null;
          isSimple = false;
        } else {
          t1 = portStart > 0;
          if (t1 && portStart + 1 === pathStart) {
            scheme = _null;
            isSimple = false;
          } else {
            if (!(queryStart < end && queryStart === pathStart + 2 && J.startsWith$2$s(uri, "..", pathStart)))
              t2 = queryStart > pathStart + 2 && J.startsWith$2$s(uri, "/..", queryStart - 3);
            else
              t2 = true;
            if (t2) {
              scheme = _null;
              isSimple = false;
            } else {
              if (schemeEnd === 4)
                if (J.startsWith$2$s(uri, "file", 0)) {
                  if (hostStart <= 0) {
                    if (!C.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                      schemeAuth = "file:///";
                      delta = 3;
                    } else {
                      schemeAuth = "file://";
                      delta = 2;
                    }
                    uri = schemeAuth + C.JSString_methods.substring$2(uri, pathStart, end);
                    schemeEnd -= 0;
                    t1 = delta - 0;
                    queryStart += t1;
                    fragmentStart += t1;
                    end = uri.length;
                    hostStart = 7;
                    portStart = 7;
                    pathStart = 7;
                  } else if (pathStart === queryStart) {
                    queryStart0 = queryStart + 1;
                    ++fragmentStart;
                    uri = C.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                    ++end;
                    queryStart = queryStart0;
                  }
                  scheme = "file";
                } else if (C.JSString_methods.startsWith$2(uri, "http", 0)) {
                  if (t1 && portStart + 3 === pathStart && C.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                    pathStart0 = pathStart - 3;
                    queryStart -= 3;
                    fragmentStart -= 3;
                    uri = C.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "http";
                } else
                  scheme = _null;
              else if (schemeEnd === 5 && J.startsWith$2$s(uri, "https", 0)) {
                if (t1 && portStart + 4 === pathStart && J.startsWith$2$s(uri, "443", portStart + 1)) {
                  pathStart0 = pathStart - 4;
                  queryStart -= 4;
                  fragmentStart -= 4;
                  uri = J.replaceRange$3$asx(uri, portStart, pathStart, "");
                  end -= 3;
                  pathStart = pathStart0;
                }
                scheme = "https";
              } else
                scheme = _null;
              isSimple = true;
            }
          }
        }
      else
        scheme = _null;
      if (isSimple) {
        t1 = uri.length;
        if (end < t1) {
          uri = J.substring$2$s(uri, 0, end);
          schemeEnd -= 0;
          hostStart -= 0;
          portStart -= 0;
          pathStart -= 0;
          queryStart -= 0;
          fragmentStart -= 0;
        }
        return new P._SimpleUri(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      }
      return P._Uri__Uri$notSimple(uri, 0, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
    },
    Uri_decodeComponent: function(encodedComponent) {
      H.stringTypeCheck(encodedComponent);
      return P._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, C.C_Utf8Codec, false);
    },
    Uri__parseIPv4Address: function(host, start, end) {
      var t1, i, partStart, partIndex, char, part, partIndex0, _null = null,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new P.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (t1 = result.length, i = start, partStart = i, partIndex = 0; i < end; ++i) {
        char = C.JSString_methods.codeUnitAt$1(host, i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = P.int_parse(C.JSString_methods.substring$2(host, partStart, i), _null, _null);
          if (typeof part !== "number")
            return part.$gt();
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          if (partIndex >= t1)
            return H.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = P.int_parse(C.JSString_methods.substring$2(host, partStart, end), _null, _null);
      if (typeof part !== "number")
        return part.$gt();
      if (part > 255)
        error.call$2(_s37_, partStart);
      if (partIndex >= t1)
        return H.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address: function(host, start, end) {
      var parts, i, partStart, wildcardSeen, seenDot, char, atEnd, t1, last, bytes, t2, wildCardLength, index, value, j, t3,
        error = new P.Uri_parseIPv6Address_error(host),
        parseHex = new P.Uri_parseIPv6Address_parseHex(error, host);
      if (host.length < 2)
        error.call$1("address is too short");
      parts = H.setRuntimeTypeInfo([], [P.int]);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        char = C.JSString_methods.codeUnitAt$1(host, i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (C.JSString_methods.codeUnitAt$1(host, i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            C.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            C.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$1("too few parts");
      atEnd = partStart === end;
      t1 = C.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          C.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = P.Uri__parseIPv4Address(host, partStart, end);
          C.JSArray_methods.add$1(parts, (last[0] << 8 | last[1]) >>> 0);
          C.JSArray_methods.add$1(parts, (last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$1("an address with a wildcard must have less than 7 parts");
      } else if (parts.length !== 8)
        error.call$1("an address without a wildcard must contain exactly 8 parts");
      bytes = new Uint8Array(16);
      for (t1 = parts.length, t2 = bytes.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            if (index < 0 || index >= t2)
              return H.ioore(bytes, index);
            bytes[index] = 0;
            t3 = index + 1;
            if (t3 >= t2)
              return H.ioore(bytes, t3);
            bytes[t3] = 0;
            index += 2;
          }
        else {
          t3 = C.JSInt_methods._shrOtherPositive$1(value, 8);
          if (index < 0 || index >= t2)
            return H.ioore(bytes, index);
          bytes[index] = t3;
          t3 = index + 1;
          if (t3 >= t2)
            return H.ioore(bytes, t3);
          bytes[t3] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri__Uri$notSimple: function(uri, start, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme) {
      var userInfoStart, userInfo, host, t1, port, path, query, _null = null;
      if (scheme == null)
        if (schemeEnd > start)
          scheme = P._Uri__makeScheme(uri, start, schemeEnd);
        else {
          if (schemeEnd === start)
            P._Uri__fail(uri, start, "Invalid empty scheme");
          scheme = "";
        }
      if (hostStart > start) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? P._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = P._Uri__makeHost(uri, hostStart, portStart, false);
        if (typeof portStart !== "number")
          return portStart.$add();
        t1 = portStart + 1;
        if (typeof pathStart !== "number")
          return H.iae(pathStart);
        port = t1 < pathStart ? P._Uri__makePort(P.int_parse(J.substring$2$s(uri, t1, pathStart), new P._Uri__Uri$notSimple_closure(uri, portStart), _null), scheme) : _null;
      } else {
        port = _null;
        host = port;
        userInfo = "";
      }
      path = P._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      if (typeof queryStart !== "number")
        return queryStart.$lt();
      query = queryStart < fragmentStart ? P._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return new P._Uri(scheme, userInfo, host, port, path, query, fragmentStart < end ? P._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    _Uri__defaultPort: function(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail: function(uri, index, message) {
      throw H.wrapException(P.FormatException$(message, uri, index));
    },
    _Uri__checkNonWindowsPathReservedCharacters: function(segments, argumentError) {
      C.JSArray_methods.forEach$1(segments, new P._Uri__checkNonWindowsPathReservedCharacters_closure(false));
    },
    _Uri__checkWindowsPathReservedCharacters: function(segments, argumentError, firstSegment) {
      var t1, t2, t3;
      for (t1 = H.SubListIterable$(segments, firstSegment, null, H.getTypeArgumentByIndex(segments, 0)), t1 = new H.ListIterator(t1, t1.get$length(t1), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        t2 = t1.__internal$_current;
        t3 = P.RegExp_RegExp('["*/:<>?\\\\|]', true);
        t2.length;
        if (H.stringContainsUnchecked(t2, t3, 0)) {
          t1 = P.UnsupportedError$("Illegal character in path: " + H.S(t2));
          throw H.wrapException(t1);
        }
      }
    },
    _Uri__checkWindowsDriveLetter: function(charCode, argumentError) {
      var t1;
      if (!(65 <= charCode && charCode <= 90))
        t1 = 97 <= charCode && charCode <= 122;
      else
        t1 = true;
      if (t1)
        return;
      t1 = P.UnsupportedError$("Illegal drive letter " + P.String_String$fromCharCode(charCode));
      throw H.wrapException(t1);
    },
    _Uri__makePort: function(port, scheme) {
      if (port != null && port === P._Uri__defaultPort(scheme))
        return;
      return port;
    },
    _Uri__makeHost: function(host, start, end, strictIPv6) {
      var t1, t2, index, zoneIDstart, zoneID, i;
      if (host == null)
        return;
      if (start === end)
        return "";
      if (C.JSString_methods.codeUnitAt$1(host, start) === 91) {
        if (typeof end !== "number")
          return end.$sub();
        t1 = end - 1;
        if (C.JSString_methods.codeUnitAt$1(host, t1) !== 93)
          P._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        t2 = start + 1;
        index = P._Uri__checkZoneID(host, t2, t1);
        if (typeof index !== "number")
          return index.$lt();
        if (index < t1) {
          zoneIDstart = index + 1;
          zoneID = P._Uri__normalizeZoneID(host, C.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, t1, "%25");
        } else
          zoneID = "";
        P.Uri_parseIPv6Address(host, t2, index);
        return C.JSString_methods.substring$2(host, start, index).toLowerCase() + zoneID + "]";
      }
      if (typeof end !== "number")
        return H.iae(end);
      i = start;
      for (; i < end; ++i)
        if (C.JSString_methods.codeUnitAt$1(host, i) === 58) {
          index = C.JSString_methods.indexOf$2(host, "%", start);
          if (!(index >= start && index < end))
            index = end;
          if (index < end) {
            zoneIDstart = index + 1;
            zoneID = P._Uri__normalizeZoneID(host, C.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, end, "%25");
          } else
            zoneID = "";
          P.Uri_parseIPv6Address(host, start, index);
          return "[" + C.JSString_methods.substring$2(host, start, index) + zoneID + "]";
        }
      return P._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID: function(host, start, end) {
      var t1,
        index = C.JSString_methods.indexOf$2(host, "%", start);
      if (index >= start) {
        if (typeof end !== "number")
          return H.iae(end);
        t1 = index < end;
      } else
        t1 = false;
      return t1 ? index : end;
    },
    _Uri__normalizeZoneID: function(host, start, end, prefix) {
      var index, sectionStart, isNormalized, char, replacement, t1, t2, tail, sourceLength,
        buffer = prefix !== "" ? new P.StringBuffer(prefix) : null;
      if (typeof end !== "number")
        return H.iae(end);
      index = start;
      sectionStart = index;
      isNormalized = true;
      for (; index < end;) {
        char = C.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = P._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new P.StringBuffer("");
          t2 = buffer._contents += C.JSString_methods.substring$2(host, sectionStart, index);
          if (t1)
            replacement = C.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%")
            P._Uri__fail(host, index, "ZoneID should not contain % anymore");
          buffer._contents = t2 + replacement;
          index += 3;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t1 = char >>> 4;
            if (t1 >= 8)
              return H.ioore(C.List_nxB, t1);
            t1 = (C.List_nxB[t1] & 1 << (char & 15)) !== 0;
          } else
            t1 = false;
          if (t1) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new P.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += C.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if ((char & 64512) === 55296 && index + 1 < end) {
              tail = C.JSString_methods.codeUnitAt$1(host, index + 1);
              if ((tail & 64512) === 56320) {
                char = 65536 | (char & 1023) << 10 | tail & 1023;
                sourceLength = 2;
              } else
                sourceLength = 1;
            } else
              sourceLength = 1;
            if (buffer == null)
              buffer = new P.StringBuffer("");
            buffer._contents += C.JSString_methods.substring$2(host, sectionStart, index);
            buffer._contents += P._Uri__escapeChar(char);
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return C.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end)
        buffer._contents += C.JSString_methods.substring$2(host, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__normalizeRegName: function(host, start, end) {
      var index, sectionStart, buffer, isNormalized, char, replacement, t1, slice, t2, sourceLength, tail;
      if (typeof end !== "number")
        return H.iae(end);
      index = start;
      sectionStart = index;
      buffer = null;
      isNormalized = true;
      for (; index < end;) {
        char = C.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = P._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new P.StringBuffer("");
          slice = C.JSString_methods.substring$2(host, sectionStart, index);
          t2 = buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
          if (t1) {
            replacement = C.JSString_methods.substring$2(host, index, index + 3);
            sourceLength = 3;
          } else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          } else
            sourceLength = 3;
          buffer._contents = t2 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t1 = char >>> 4;
            if (t1 >= 8)
              return H.ioore(C.List_qNA, t1);
            t1 = (C.List_qNA[t1] & 1 << (char & 15)) !== 0;
          } else
            t1 = false;
          if (t1) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new P.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += C.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if (char <= 93) {
              t1 = char >>> 4;
              if (t1 >= 8)
                return H.ioore(C.List_2Vk, t1);
              t1 = (C.List_2Vk[t1] & 1 << (char & 15)) !== 0;
            } else
              t1 = false;
            if (t1)
              P._Uri__fail(host, index, "Invalid character");
            else {
              if ((char & 64512) === 55296 && index + 1 < end) {
                tail = C.JSString_methods.codeUnitAt$1(host, index + 1);
                if ((tail & 64512) === 56320) {
                  char = 65536 | (char & 1023) << 10 | tail & 1023;
                  sourceLength = 2;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              if (buffer == null)
                buffer = new P.StringBuffer("");
              slice = C.JSString_methods.substring$2(host, sectionStart, index);
              buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
              buffer._contents += P._Uri__escapeChar(char);
              index += sourceLength;
              sectionStart = index;
            }
          }
        }
      }
      if (buffer == null)
        return C.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = C.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme: function(scheme, start, end) {
      var i, containsUpperCase, codeUnit, t1;
      if (start === end)
        return "";
      if (!P._Uri__isAlphabeticCharacter(J.getInterceptor$s(scheme)._codeUnitAt$1(scheme, start)))
        P._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(scheme, i);
        if (codeUnit < 128) {
          t1 = codeUnit >>> 4;
          if (t1 >= 8)
            return H.ioore(C.List_JYB, t1);
          t1 = (C.List_JYB[t1] & 1 << (codeUnit & 15)) !== 0;
        } else
          t1 = false;
        if (!t1)
          P._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = C.JSString_methods.substring$2(scheme, start, end);
      return P._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme: function(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo: function(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return P._Uri__normalizeOrSubstring(userInfo, start, end, C.List_gRj, false);
    },
    _Uri__makePath: function(path, start, end, pathSegments, scheme, hasAuthority) {
      var result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority,
        t1 = path == null;
      if (t1 && true)
        return isFile ? "/" : "";
      result = !t1 ? P._Uri__normalizeOrSubstring(path, start, end, C.List_qg4, true) : C.JSNull_methods.map$1$1(pathSegments, new P._Uri__makePath_closure(), P.String).join$1(0, "/");
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !C.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return P._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath: function(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !C.JSString_methods.startsWith$1(path, "/"))
        return P._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return P._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery: function(query, start, end, queryParameters) {
      if (query != null)
        return P._Uri__normalizeOrSubstring(query, start, end, C.List_CVk, true);
      return;
    },
    _Uri__makeFragment: function(fragment, start, end) {
      if (fragment == null)
        return;
      return P._Uri__normalizeOrSubstring(fragment, start, end, C.List_CVk, true);
    },
    _Uri__normalizeEscape: function(source, index, lowerCase) {
      var firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        t1 = index + 2;
      if (t1 >= source.length)
        return "%";
      firstDigit = C.JSString_methods.codeUnitAt$1(source, index + 1);
      secondDigit = C.JSString_methods.codeUnitAt$1(source, t1);
      firstDigitValue = H.hexDigitValue(firstDigit);
      secondDigitValue = H.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127) {
        t1 = C.JSInt_methods._shrOtherPositive$1(value, 4);
        if (t1 >= 8)
          return H.ioore(C.List_nxB, t1);
        t1 = (C.List_nxB[t1] & 1 << (value & 15)) !== 0;
      } else
        t1 = false;
      if (t1)
        return H.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return C.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return;
    },
    _Uri__escapeChar: function(char) {
      var t1, codeUnits, flag, encodedBytes, index, byte,
        _s16_ = "0123456789ABCDEF";
      if (char < 128) {
        t1 = new Array(3);
        t1.fixed$length = Array;
        codeUnits = H.setRuntimeTypeInfo(t1, [P.int]);
        C.JSArray_methods.$indexSet(codeUnits, 0, 37);
        C.JSArray_methods.$indexSet(codeUnits, 1, C.JSString_methods._codeUnitAt$1(_s16_, char >>> 4));
        C.JSArray_methods.$indexSet(codeUnits, 2, C.JSString_methods._codeUnitAt$1(_s16_, char & 15));
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        t1 = new Array(3 * encodedBytes);
        t1.fixed$length = Array;
        codeUnits = H.setRuntimeTypeInfo(t1, [P.int]);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = C.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          C.JSArray_methods.$indexSet(codeUnits, index, 37);
          C.JSArray_methods.$indexSet(codeUnits, index + 1, C.JSString_methods._codeUnitAt$1(_s16_, byte >>> 4));
          C.JSArray_methods.$indexSet(codeUnits, index + 2, C.JSString_methods._codeUnitAt$1(_s16_, byte & 15));
          index += 3;
        }
      }
      return P.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring: function(component, start, end, charTable, escapeDelimiters) {
      var t1 = P._Uri__normalize(component, start, end, charTable, escapeDelimiters);
      return t1 == null ? C.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize: function(component, start, end, charTable, escapeDelimiters) {
      var char, t2, replacement, sourceLength, tail,
        t1 = !escapeDelimiters,
        index = start,
        sectionStart = index,
        buffer = null;
      while (true) {
        if (typeof index !== "number")
          return index.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(index < end))
          break;
        c$0: {
          char = C.JSString_methods.codeUnitAt$1(component, index);
          if (char < 127) {
            t2 = char >>> 4;
            if (t2 >= 8)
              return H.ioore(charTable, t2);
            t2 = (charTable[t2] & 1 << (char & 15)) !== 0;
          } else
            t2 = false;
          if (t2)
            ++index;
          else {
            if (char === 37) {
              replacement = P._Uri__normalizeEscape(component, index, false);
              if (replacement == null) {
                index += 3;
                break c$0;
              }
              if ("%" === replacement) {
                replacement = "%25";
                sourceLength = 1;
              } else
                sourceLength = 3;
            } else {
              if (t1)
                if (char <= 93) {
                  t2 = char >>> 4;
                  if (t2 >= 8)
                    return H.ioore(C.List_2Vk, t2);
                  t2 = (C.List_2Vk[t2] & 1 << (char & 15)) !== 0;
                } else
                  t2 = false;
              else
                t2 = false;
              if (t2) {
                P._Uri__fail(component, index, "Invalid character");
                replacement = null;
                sourceLength = null;
              } else {
                if ((char & 64512) === 55296) {
                  t2 = index + 1;
                  if (t2 < end) {
                    tail = C.JSString_methods.codeUnitAt$1(component, t2);
                    if ((tail & 64512) === 56320) {
                      char = 65536 | (char & 1023) << 10 | tail & 1023;
                      sourceLength = 2;
                    } else
                      sourceLength = 1;
                  } else
                    sourceLength = 1;
                } else
                  sourceLength = 1;
                replacement = P._Uri__escapeChar(char);
              }
            }
            if (buffer == null)
              buffer = new P.StringBuffer("");
            buffer._contents += C.JSString_methods.substring$2(component, sectionStart, index);
            buffer._contents += H.S(replacement);
            if (typeof sourceLength !== "number")
              return H.iae(sourceLength);
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return;
      if (typeof sectionStart !== "number")
        return sectionStart.$lt();
      if (sectionStart < end)
        buffer._contents += C.JSString_methods.substring$2(component, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments: function(path) {
      if (C.JSString_methods.startsWith$1(path, "."))
        return true;
      return C.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments: function(path) {
      var output, t1, t2, appendSlash, _i, segment, t3;
      if (!P._Uri__mayContainDotSegments(path))
        return path;
      output = H.setRuntimeTypeInfo([], [P.String]);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (J.$eq$(segment, "..")) {
          t3 = output.length;
          if (t3 !== 0) {
            if (0 >= t3)
              return H.ioore(output, -1);
            output.pop();
            if (output.length === 0)
              C.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else if ("." === segment)
          appendSlash = true;
        else {
          C.JSArray_methods.add$1(output, segment);
          appendSlash = false;
        }
      }
      if (appendSlash)
        C.JSArray_methods.add$1(output, "");
      return C.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath: function(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!P._Uri__mayContainDotSegments(path))
        return !allowScheme ? P._Uri__escapeScheme(path) : path;
      output = H.setRuntimeTypeInfo([], [P.String]);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment)
          if (output.length !== 0 && C.JSArray_methods.get$last(output) !== "..") {
            if (0 >= output.length)
              return H.ioore(output, -1);
            output.pop();
            appendSlash = true;
          } else {
            C.JSArray_methods.add$1(output, "..");
            appendSlash = false;
          }
        else if ("." === segment)
          appendSlash = true;
        else {
          C.JSArray_methods.add$1(output, segment);
          appendSlash = false;
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        if (t1 === 1) {
          if (0 >= t1)
            return H.ioore(output, 0);
          t1 = output[0].length === 0;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || C.JSArray_methods.get$last(output) === "..")
        C.JSArray_methods.add$1(output, "");
      if (!allowScheme) {
        if (0 >= output.length)
          return H.ioore(output, 0);
        C.JSArray_methods.$indexSet(output, 0, P._Uri__escapeScheme(output[0]));
      }
      return C.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme: function(path) {
      var i, char, t2,
        t1 = path.length;
      if (t1 >= 2 && P._Uri__isAlphabeticCharacter(J._codeUnitAt$1$s(path, 0)))
        for (i = 1; i < t1; ++i) {
          char = C.JSString_methods._codeUnitAt$1(path, i);
          if (char === 58)
            return C.JSString_methods.substring$2(path, 0, i) + "%3A" + C.JSString_methods.substring$1(path, i + 1);
          if (char <= 127) {
            t2 = char >>> 4;
            if (t2 >= 8)
              return H.ioore(C.List_JYB, t2);
            t2 = (C.List_JYB[t2] & 1 << (char & 15)) === 0;
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__toWindowsFilePath: function(uri) {
      var hasDriveLetter, t2, host,
        segments = uri.get$pathSegments(),
        t1 = segments.length;
      if (t1 > 0 && J.get$length$asx(segments[0]) === 2 && J.codeUnitAt$1$s(segments[0], 1) === 58) {
        if (0 >= t1)
          return H.ioore(segments, 0);
        P._Uri__checkWindowsDriveLetter(J.codeUnitAt$1$s(segments[0], 0), false);
        P._Uri__checkWindowsPathReservedCharacters(segments, false, 1);
        hasDriveLetter = true;
      } else {
        P._Uri__checkWindowsPathReservedCharacters(segments, false, 0);
        hasDriveLetter = false;
      }
      t2 = uri.get$hasAbsolutePath() && !hasDriveLetter ? "\\" : "";
      if (uri.get$hasAuthority()) {
        host = uri.get$host(uri);
        if (host.length !== 0)
          t2 = t2 + "\\" + H.S(host) + "\\";
      }
      t2 = P.StringBuffer__writeAll(t2, segments, "\\");
      t1 = hasDriveLetter && t1 === 1 ? t2 + "\\" : t2;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__hexCharPairToByte: function(s, pos) {
      var byte, i, charCode;
      for (byte = 0, i = 0; i < 2; ++i) {
        charCode = C.JSString_methods._codeUnitAt$1(s, pos + i);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode |= 32;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw H.wrapException(P.ArgumentError$("Invalid URL encoding"));
        }
      }
      return byte;
    },
    _Uri__uriDecode: function(text, start, end, encoding, plusToSpace) {
      var simple, codeUnit, t2, bytes,
        t1 = J.getInterceptor$s(text),
        i = start;
      while (true) {
        if (!(i < end)) {
          simple = true;
          break;
        }
        codeUnit = t1._codeUnitAt$1(text, i);
        if (codeUnit <= 127)
          if (codeUnit !== 37)
            t2 = false;
          else
            t2 = true;
        else
          t2 = true;
        if (t2) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple) {
        if (C.C_Utf8Codec !== encoding)
          t2 = false;
        else
          t2 = true;
        if (t2)
          return t1.substring$2(text, start, end);
        else
          bytes = new H.CodeUnits(t1.substring$2(text, start, end));
      } else {
        bytes = H.setRuntimeTypeInfo([], [P.int]);
        for (i = start; i < end; ++i) {
          codeUnit = t1._codeUnitAt$1(text, i);
          if (codeUnit > 127)
            throw H.wrapException(P.ArgumentError$("Illegal percent encoding in URI"));
          if (codeUnit === 37) {
            if (i + 3 > text.length)
              throw H.wrapException(P.ArgumentError$("Truncated URI"));
            C.JSArray_methods.add$1(bytes, P._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else
            C.JSArray_methods.add$1(bytes, codeUnit);
        }
      }
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      return new P.Utf8Decoder(false).convert$1(bytes);
    },
    _Uri__isAlphabeticCharacter: function(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__parse: function(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = H.setRuntimeTypeInfo([start - 1], [P.int]);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = C.JSString_methods._codeUnitAt$1(text, i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw H.wrapException(P.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw H.wrapException(P.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        C.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          char = C.JSString_methods._codeUnitAt$1(text, i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          C.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = C.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !C.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw H.wrapException(P.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      C.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = C.C_Base64Codec.normalize$3(0, text, t2, t1);
      else {
        data = P._Uri__normalize(text, t2, t1, C.List_CVk, true);
        if (data != null)
          text = C.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new P.UriData(text, indices, sourceUri);
    },
    _createTables: function() {
      var _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "?", _s1_3 = "#",
        tables = P.List_List$generate(22, new P._createTables_closure(), true, P.Uint8List),
        t1 = new P._createTables_build(tables),
        t2 = new P._createTables_setChars(),
        t3 = new P._createTables_setRange(),
        b = H.interceptedTypeCheck(t1.call$2(0, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 14);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 3);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(14, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 15);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(15, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, "%", 225);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(1, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(2, 235), "$isUint8List");
      t2.call$3(b, _s77_, 139);
      t2.call$3(b, _s1_1, 131);
      t2.call$3(b, _s1_, 146);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(3, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 68);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(4, 229), "$isUint8List");
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "[", 232);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(5, 229), "$isUint8List");
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(6, 231), "$isUint8List");
      t3.call$3(b, "19", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(7, 231), "$isUint8List");
      t3.call$3(b, "09", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      t2.call$3(H.interceptedTypeCheck(t1.call$2(8, 8), "$isUint8List"), "]", 5);
      b = H.interceptedTypeCheck(t1.call$2(9, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 16);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(16, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 17);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(17, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(10, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(18, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 19);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(19, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(11, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(12, 236), "$isUint8List");
      t2.call$3(b, _s77_, 12);
      t2.call$3(b, _s1_2, 12);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(13, 237), "$isUint8List");
      t2.call$3(b, _s77_, 13);
      t2.call$3(b, _s1_2, 13);
      t3.call$3(H.interceptedTypeCheck(t1.call$2(20, 245), "$isUint8List"), "az", 21);
      b = H.interceptedTypeCheck(t1.call$2(21, 245), "$isUint8List");
      t3.call$3(b, "az", 21);
      t3.call$3(b, "09", 21);
      t2.call$3(b, "+-.", 21);
      return tables;
    },
    _scan: function(uri, start, end, state, indices) {
      var t1, i, table, char, transition,
        tables = $.$get$_scannerTables();
      for (t1 = J.getInterceptor$s(uri), i = start; i < end; ++i) {
        if (state < 0 || state >= tables.length)
          return H.ioore(tables, state);
        table = tables[state];
        char = t1._codeUnitAt$1(uri, i) ^ 96;
        if (char > 95)
          char = 31;
        if (char >= table.length)
          return H.ioore(table, char);
        transition = table[char];
        state = transition & 31;
        C.JSArray_methods.$indexSet(indices, transition >>> 5, i);
      }
      return state;
    },
    _symbolMapToStringMap_closure: function _symbolMapToStringMap_closure(t0) {
      this.result = t0;
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    _BigIntImpl: function _BigIntImpl(t0, t1, t2) {
      this._isNegative = t0;
      this._digits = t1;
      this._used = t2;
    },
    _BigIntImpl_hashCode_combine: function _BigIntImpl_hashCode_combine() {
    },
    _BigIntImpl_hashCode_finish: function _BigIntImpl_hashCode_finish() {
    },
    _BigIntImpl_toDouble_readBits: function _BigIntImpl_toDouble_readBits(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _BigIntImpl_toDouble_roundUp: function _BigIntImpl_toDouble_roundUp(t0) {
      this.resultBits = t0;
    },
    BigInt: function BigInt() {
    },
    bool: function bool() {
    },
    DateTime: function DateTime(t0, t1) {
      this._value = t0;
      this.isUtc = t1;
    },
    double: function double() {
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    Duration_toString_sixDigits: function Duration_toString_sixDigits() {
    },
    Duration_toString_twoDigits: function Duration_toString_twoDigits() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._core$_receiver = t0;
      _._core$_memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    IntegerDivisionByZeroException: function IntegerDivisionByZeroException() {
    },
    Function: function Function() {
    },
    int: function int() {
    },
    Iterable: function Iterable() {
    },
    Iterator: function Iterator() {
    },
    List: function List() {
    },
    Map: function Map() {
    },
    MapEntry: function MapEntry() {
    },
    Null: function Null() {
    },
    num: function num() {
    },
    Object: function Object() {
    },
    Match: function Match() {
    },
    RegExp: function RegExp() {
    },
    RegExpMatch: function RegExpMatch() {
    },
    Set: function Set() {
    },
    StackTrace: function StackTrace() {
    },
    String: function String() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Symbol0: function Symbol0() {
    },
    Type: function Type() {
    },
    Uri: function Uri() {
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _._hashCodeCache = _._text = _._pathSegments = null;
    },
    _Uri__Uri$notSimple_closure: function _Uri__Uri$notSimple_closure(t0, t1) {
      this.uri = t0;
      this.portStart = t1;
    },
    _Uri__checkNonWindowsPathReservedCharacters_closure: function _Uri__checkNonWindowsPathReservedCharacters_closure(t0) {
      this.argumentError = t0;
    },
    _Uri__makePath_closure: function _Uri__makePath_closure() {
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _createTables_closure: function _createTables_closure() {
    },
    _createTables_build: function _createTables_build(t0) {
      this.tables = t0;
    },
    _createTables_setChars: function _createTables_setChars() {
    },
    _createTables_setRange: function _createTables_setRange() {
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _._hashCodeCache = _._text = _._pathSegments = null;
    },
    convertNativeToDart_Dictionary: function(object) {
      var dict, keys, t1, _i, key;
      if (object == null)
        return;
      dict = P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
      keys = Object.getOwnPropertyNames(object);
      for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
        key = H.stringTypeCheck(keys[_i]);
        dict.$indexSet(0, key, object[key]);
      }
      return dict;
    },
    convertDartToNative_Dictionary: function(dict) {
      var object = {};
      dict.forEach$1(0, new P.convertDartToNative_Dictionary_closure(object));
      return object;
    },
    convertNativePromiseToDartFuture: function(promise) {
      var t1 = new P._Future($.Zone__current, [null]),
        completer = new P._AsyncCompleter(t1, [null]);
      promise.then(H.convertDartClosureToJS(new P.convertNativePromiseToDartFuture_closure(completer), 1))["catch"](H.convertDartClosureToJS(new P.convertNativePromiseToDartFuture_closure0(completer), 1));
      return t1;
    },
    _AcceptStructuredClone: function _AcceptStructuredClone() {
    },
    _AcceptStructuredClone_walk_closure: function _AcceptStructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    convertDartToNative_Dictionary_closure: function convertDartToNative_Dictionary_closure(t0) {
      this.object = t0;
    },
    _AcceptStructuredCloneDart2Js: function _AcceptStructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
      this.mustCopy = false;
    },
    convertNativePromiseToDartFuture_closure: function convertNativePromiseToDartFuture_closure(t0) {
      this.completer = t0;
    },
    convertNativePromiseToDartFuture_closure0: function convertNativePromiseToDartFuture_closure0(t0) {
      this.completer = t0;
    },
    KeyRange: function KeyRange() {
    },
    _callDartFunction: function(callback, captureThis, $self, $arguments) {
      var arguments0, dartArgs;
      H.boolTypeCheck(captureThis);
      H.listTypeCheck($arguments);
      if (H.boolConversionCheck(captureThis)) {
        arguments0 = [$self];
        C.JSArray_methods.addAll$1(arguments0, $arguments);
        $arguments = arguments0;
      }
      dartArgs = P.List_List$from(J.map$1$1$ax($arguments, P.js___convertToDart$closure(), null), true, null);
      return P._convertToJS(P.Function_apply(H.interceptedTypeCheck(callback, "$isFunction"), dartArgs, null));
    },
    _defineProperty: function(o, $name, value) {
      var exception;
      try {
        if (Object.isExtensible(o) && !Object.prototype.hasOwnProperty.call(o, $name)) {
          Object.defineProperty(o, $name, {value: value});
          return true;
        }
      } catch (exception) {
        H.unwrapException(exception);
      }
      return false;
    },
    _getOwnProperty: function(o, $name) {
      if (Object.prototype.hasOwnProperty.call(o, $name))
        return o[$name];
      return;
    },
    _convertToJS: function(o) {
      var t1;
      if (o == null || typeof o === "string" || typeof o === "number" || typeof o === "boolean")
        return o;
      t1 = J.getInterceptor$(o);
      if (!!t1.$isJsObject)
        return o._js$_jsObject;
      if (H.isBrowserObject(o))
        return o;
      if (!!t1.$isTypedData)
        return o;
      if (!!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      if (!!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.$get$_dartProxyCtor()));
    },
    _getJsProxy: function(o, propertyName, createProxy) {
      var jsProxy = P._getOwnProperty(o, propertyName);
      if (jsProxy == null) {
        jsProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, jsProxy);
      }
      return jsProxy;
    },
    _convertToDart: function(o) {
      var ms, t1;
      if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
        return o;
      else if (o instanceof Object && H.isBrowserObject(o))
        return o;
      else if (o instanceof Object && !!J.getInterceptor$(o).$isTypedData)
        return o;
      else if (o instanceof Date) {
        ms = H.intTypeCheck(o.getTime());
        t1 = new P.DateTime(ms, false);
        t1.DateTime$_withValue$2$isUtc(ms, false);
        return t1;
      } else if (o.constructor === $.$get$_dartProxyCtor())
        return o.o;
      else
        return P._wrapToDart(o);
    },
    _wrapToDart: function(o) {
      if (typeof o == "function")
        return P._getDartProxy(o, $.$get$DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
      if (o instanceof Array)
        return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
      return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
    },
    _getDartProxy: function(o, propertyName, createProxy) {
      var dartProxy = P._getOwnProperty(o, propertyName);
      if (dartProxy == null || !(o instanceof Object)) {
        dartProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, dartProxy);
      }
      return dartProxy;
    },
    _convertDartFunctionFast: function(f) {
      var ret,
        existing = f.$dart_jsFunction;
      if (existing != null)
        return existing;
      ret = function(_call, f) {
        return function() {
          return _call(f, Array.prototype.slice.apply(arguments));
        };
      }(P._callDartFunctionFast, f);
      ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      f.$dart_jsFunction = ret;
      return ret;
    },
    _callDartFunctionFast: function(callback, $arguments) {
      H.listTypeCheck($arguments);
      return P.Function_apply(H.interceptedTypeCheck(callback, "$isFunction"), $arguments, null);
    },
    allowInterop: function(f, $F) {
      if (typeof f == "function")
        return f;
      else
        return H.assertSubtypeOfRuntimeType(P._convertDartFunctionFast(f), $F);
    },
    JsObject: function JsObject(t0) {
      this._js$_jsObject = t0;
    },
    JsFunction: function JsFunction(t0) {
      this._js$_jsObject = t0;
    },
    JsArray: function JsArray(t0, t1) {
      this._js$_jsObject = t0;
      this.$ti = t1;
    },
    _convertToJS_closure: function _convertToJS_closure() {
    },
    _convertToJS_closure0: function _convertToJS_closure0(t0) {
      this.ctor = t0;
    },
    _wrapToDart_closure: function _wrapToDart_closure() {
    },
    _wrapToDart_closure0: function _wrapToDart_closure0() {
    },
    _wrapToDart_closure1: function _wrapToDart_closure1() {
    },
    _JsArray_JsObject_ListMixin: function _JsArray_JsObject_ListMixin() {
    },
    _JSRandom: function _JSRandom() {
    },
    _RectangleBase: function _RectangleBase() {
    },
    Rectangle: function Rectangle() {
    },
    Length: function Length() {
    },
    LengthList: function LengthList() {
    },
    Number: function Number() {
    },
    NumberList: function NumberList() {
    },
    PointList: function PointList() {
    },
    StringList: function StringList() {
    },
    Transform: function Transform() {
    },
    TransformList: function TransformList() {
    },
    _LengthList_Interceptor_ListMixin: function _LengthList_Interceptor_ListMixin() {
    },
    _LengthList_Interceptor_ListMixin_ImmutableListMixin: function _LengthList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NumberList_Interceptor_ListMixin: function _NumberList_Interceptor_ListMixin() {
    },
    _NumberList_Interceptor_ListMixin_ImmutableListMixin: function _NumberList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _StringList_Interceptor_ListMixin: function _StringList_Interceptor_ListMixin() {
    },
    _StringList_Interceptor_ListMixin_ImmutableListMixin: function _StringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TransformList_Interceptor_ListMixin: function _TransformList_Interceptor_ListMixin() {
    },
    _TransformList_Interceptor_ListMixin_ImmutableListMixin: function _TransformList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    ByteBuffer: function ByteBuffer() {
    },
    ByteData: function ByteData() {
    },
    Int8List: function Int8List() {
    },
    Uint8List: function Uint8List() {
    },
    Uint8ClampedList: function Uint8ClampedList() {
    },
    Int16List: function Int16List() {
    },
    Uint16List: function Uint16List() {
    },
    Int32List: function Int32List() {
    },
    Uint32List: function Uint32List() {
    },
    Float32List: function Float32List() {
    },
    Float64List: function Float64List() {
    },
    AudioBuffer: function AudioBuffer() {
    },
    AudioParamMap: function AudioParamMap() {
    },
    AudioParamMap_keys_closure: function AudioParamMap_keys_closure(t0) {
      this.keys = t0;
    },
    AudioTrackList: function AudioTrackList() {
    },
    BaseAudioContext: function BaseAudioContext() {
    },
    OfflineAudioContext: function OfflineAudioContext() {
    },
    _AudioParamMap_Interceptor_MapMixin: function _AudioParamMap_Interceptor_MapMixin() {
    },
    SqlResultSetRowList: function SqlResultSetRowList() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin: function _SqlResultSetRowList_Interceptor_ListMixin() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin: function _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin() {
    }
  },
  W = {
    Blob_Blob: function(blobParts) {
      var t1 = new self.Blob(blobParts);
      return t1;
    },
    EventSource__factoryEventSource: function(url, eventSourceInitDict) {
      var t1 = new EventSource(url, P.convertDartToNative_Dictionary(eventSourceInitDict));
      return t1;
    },
    HttpRequest_request: function(url, method, responseType) {
      var t3,
        t1 = W.HttpRequest,
        t2 = new P._Future($.Zone__current, [t1]),
        completer = new P._AsyncCompleter(t2, [t1]),
        xhr = new XMLHttpRequest();
      C.HttpRequest_methods.open$3$async(xhr, method, url, true);
      xhr.responseType = responseType;
      t1 = W.ProgressEvent;
      t3 = {func: 1, ret: -1, args: [t1]};
      W._EventStreamSubscription$(xhr, "load", H.functionTypeCheck(new W.HttpRequest_request_closure(xhr, completer), t3), false, t1);
      W._EventStreamSubscription$(xhr, "error", H.functionTypeCheck(completer.get$completeError(), t3), false, t1);
      xhr.send();
      return t2;
    },
    _JenkinsSmiHash_combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_hash4: function(a, b, c, d) {
      var t1 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, a), b), c), d),
        hash = 536870911 & t1 + ((67108863 & t1) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
      var t1 = W._wrapZone(new W._EventStreamSubscription_closure(onData), W.Event);
      t1 = new W._EventStreamSubscription(_target, _eventType, t1, false, [$T]);
      t1._tryResume$0();
      return t1;
    },
    _convertNativeToDart_XHR_Response: function(o) {
      if (!!J.getInterceptor$(o).$isDocument)
        return o;
      return new P._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(o, true);
    },
    _wrapZone: function(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    HtmlElement: function HtmlElement() {
    },
    AccessibleNodeList: function AccessibleNodeList() {
    },
    AnchorElement: function AnchorElement() {
    },
    AreaElement: function AreaElement() {
    },
    Blob: function Blob() {
    },
    CharacterData: function CharacterData() {
    },
    CssNumericValue: function CssNumericValue() {
    },
    CssPerspective: function CssPerspective() {
    },
    CssRule: function CssRule() {
    },
    CssStyleDeclaration: function CssStyleDeclaration() {
    },
    CssStyleDeclarationBase: function CssStyleDeclarationBase() {
    },
    CssStyleValue: function CssStyleValue() {
    },
    CssTransformComponent: function CssTransformComponent() {
    },
    CssTransformValue: function CssTransformValue() {
    },
    CssUnparsedValue: function CssUnparsedValue() {
    },
    DataTransferItemList: function DataTransferItemList() {
    },
    Document: function Document() {
    },
    DomException: function DomException() {
    },
    DomRectList: function DomRectList() {
    },
    DomRectReadOnly: function DomRectReadOnly() {
    },
    DomStringList: function DomStringList() {
    },
    DomTokenList: function DomTokenList() {
    },
    Element: function Element() {
    },
    Event: function Event() {
    },
    EventSource: function EventSource() {
    },
    EventTarget: function EventTarget() {
    },
    File: function File() {
    },
    FileList: function FileList() {
    },
    FileReader: function FileReader() {
    },
    FileWriter: function FileWriter() {
    },
    FormElement: function FormElement() {
    },
    Gamepad: function Gamepad() {
    },
    History: function History() {
    },
    HtmlCollection: function HtmlCollection() {
    },
    HttpRequest: function HttpRequest() {
    },
    HttpRequest_request_closure: function HttpRequest_request_closure(t0, t1) {
      this.xhr = t0;
      this.completer = t1;
    },
    HttpRequestEventTarget: function HttpRequestEventTarget() {
    },
    ImageData: function ImageData() {
    },
    KeyboardEvent: function KeyboardEvent() {
    },
    Location: function Location() {
    },
    MediaList: function MediaList() {
    },
    MessageEvent: function MessageEvent() {
    },
    MidiInputMap: function MidiInputMap() {
    },
    MidiInputMap_keys_closure: function MidiInputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MidiOutputMap: function MidiOutputMap() {
    },
    MidiOutputMap_keys_closure: function MidiOutputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MimeType: function MimeType() {
    },
    MimeTypeArray: function MimeTypeArray() {
    },
    Node: function Node() {
    },
    NodeList: function NodeList() {
    },
    Plugin: function Plugin() {
    },
    PluginArray: function PluginArray() {
    },
    ProgressEvent: function ProgressEvent() {
    },
    RtcStatsReport: function RtcStatsReport() {
    },
    RtcStatsReport_keys_closure: function RtcStatsReport_keys_closure(t0) {
      this.keys = t0;
    },
    SelectElement: function SelectElement() {
    },
    SourceBuffer: function SourceBuffer() {
    },
    SourceBufferList: function SourceBufferList() {
    },
    SpeechGrammar: function SpeechGrammar() {
    },
    SpeechGrammarList: function SpeechGrammarList() {
    },
    SpeechRecognitionResult: function SpeechRecognitionResult() {
    },
    Storage: function Storage() {
    },
    Storage_addAll_closure: function Storage_addAll_closure(t0) {
      this.$this = t0;
    },
    Storage_keys_closure: function Storage_keys_closure(t0) {
      this.keys = t0;
    },
    StyleSheet: function StyleSheet() {
    },
    TextTrack: function TextTrack() {
    },
    TextTrackCue: function TextTrackCue() {
    },
    TextTrackCueList: function TextTrackCueList() {
    },
    TextTrackList: function TextTrackList() {
    },
    TimeRanges: function TimeRanges() {
    },
    Touch: function Touch() {
    },
    TouchList: function TouchList() {
    },
    TrackDefaultList: function TrackDefaultList() {
    },
    UIEvent: function UIEvent() {
    },
    Url: function Url() {
    },
    VideoTrackList: function VideoTrackList() {
    },
    Window: function Window() {
    },
    WorkerGlobalScope: function WorkerGlobalScope() {
    },
    _CssRuleList: function _CssRuleList() {
    },
    _DomRect: function _DomRect() {
    },
    _GamepadList: function _GamepadList() {
    },
    _NamedNodeMap: function _NamedNodeMap() {
    },
    _SpeechRecognitionResultList: function _SpeechRecognitionResultList() {
    },
    _StyleSheetList: function _StyleSheetList() {
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._html$_target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._pauseCount = 0;
      _._html$_target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    },
    ImmutableListMixin: function ImmutableListMixin() {
    },
    FixedSizeListIterator: function FixedSizeListIterator(t0, t1, t2) {
      var _ = this;
      _._array = t0;
      _._length = t1;
      _._position = -1;
      _._current = null;
      _.$ti = t2;
    },
    _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase: function _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase() {
    },
    _DomRectList_Interceptor_ListMixin: function _DomRectList_Interceptor_ListMixin() {
    },
    _DomRectList_Interceptor_ListMixin_ImmutableListMixin: function _DomRectList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _DomStringList_Interceptor_ListMixin: function _DomStringList_Interceptor_ListMixin() {
    },
    _DomStringList_Interceptor_ListMixin_ImmutableListMixin: function _DomStringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _FileList_Interceptor_ListMixin: function _FileList_Interceptor_ListMixin() {
    },
    _FileList_Interceptor_ListMixin_ImmutableListMixin: function _FileList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin: function _HtmlCollection_Interceptor_ListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin: function _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _MidiInputMap_Interceptor_MapMixin: function _MidiInputMap_Interceptor_MapMixin() {
    },
    _MidiOutputMap_Interceptor_MapMixin: function _MidiOutputMap_Interceptor_MapMixin() {
    },
    _MimeTypeArray_Interceptor_ListMixin: function _MimeTypeArray_Interceptor_ListMixin() {
    },
    _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin: function _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NodeList_Interceptor_ListMixin: function _NodeList_Interceptor_ListMixin() {
    },
    _NodeList_Interceptor_ListMixin_ImmutableListMixin: function _NodeList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _PluginArray_Interceptor_ListMixin: function _PluginArray_Interceptor_ListMixin() {
    },
    _PluginArray_Interceptor_ListMixin_ImmutableListMixin: function _PluginArray_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _RtcStatsReport_Interceptor_MapMixin: function _RtcStatsReport_Interceptor_MapMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin: function _SourceBufferList_EventTarget_ListMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin: function _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _SpeechGrammarList_Interceptor_ListMixin: function _SpeechGrammarList_Interceptor_ListMixin() {
    },
    _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin: function _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _Storage_Interceptor_MapMixin: function _Storage_Interceptor_MapMixin() {
    },
    _TextTrackCueList_Interceptor_ListMixin: function _TextTrackCueList_Interceptor_ListMixin() {
    },
    _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin: function _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin: function _TextTrackList_EventTarget_ListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin_ImmutableListMixin: function _TextTrackList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _TouchList_Interceptor_ListMixin: function _TouchList_Interceptor_ListMixin() {
    },
    _TouchList_Interceptor_ListMixin_ImmutableListMixin: function _TouchList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __CssRuleList_Interceptor_ListMixin: function __CssRuleList_Interceptor_ListMixin() {
    },
    __CssRuleList_Interceptor_ListMixin_ImmutableListMixin: function __CssRuleList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __GamepadList_Interceptor_ListMixin: function __GamepadList_Interceptor_ListMixin() {
    },
    __GamepadList_Interceptor_ListMixin_ImmutableListMixin: function __GamepadList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin: function __NamedNodeMap_Interceptor_ListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin: function __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin() {
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __StyleSheetList_Interceptor_ListMixin: function __StyleSheetList_Interceptor_ListMixin() {
    },
    __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin: function __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin() {
    }
  },
  M = {
    _$valueOf: function($name) {
      switch ($name) {
        case "started":
          return C.BuildStatus_started;
        case "succeeded":
          return C.BuildStatus_succeeded;
        case "failed":
          return C.BuildStatus_failed;
        default:
          throw H.wrapException(P.ArgumentError$($name));
      }
    },
    BuildStatus: function BuildStatus(t0) {
      this.name = t0;
    },
    DefaultBuildResult: function DefaultBuildResult() {
    },
    _$BuildStatusSerializer: function _$BuildStatusSerializer() {
    },
    _$DefaultBuildResultSerializer: function _$DefaultBuildResultSerializer() {
    },
    _$DefaultBuildResult: function _$DefaultBuildResult(t0, t1, t2, t3, t4) {
      var _ = this;
      _.status = t0;
      _.target = t1;
      _.buildId = t2;
      _.error = t3;
      _.isCached = t4;
    },
    DefaultBuildResultBuilder: function DefaultBuildResultBuilder() {
      var _ = this;
      _._isCached = _._error = _._buildId = _._build_status$_target = _._status = _._build_status$_$v = null;
    },
    BuiltListMultimap_BuiltListMultimap: function($K, $V) {
      var t1 = M._BuiltListMultimap$copyAndCheck(C.Map_empty.get$keys(C.Map_empty), new M.BuiltListMultimap_BuiltListMultimap_closure(C.Map_empty), $K, $V);
      return t1;
    },
    _BuiltListMultimap$copyAndCheck: function(keys, lookup, $K, $V) {
      var t1 = new H.JsLinkedHashMap([$K, [S.BuiltList, $V]]),
        t2 = new M._BuiltListMultimap(t1, S.BuiltList_BuiltList$from(C.List_empty, $V), [$K, $V]);
      t2.BuiltListMultimap$_$1(t1, $K, $V);
      t2._BuiltListMultimap$copyAndCheck$2(keys, lookup, $K, $V);
      return t2;
    },
    ListMultimapBuilder_ListMultimapBuilder: function($K, $V) {
      var t1 = new M.ListMultimapBuilder([$K, $V]);
      if (new H.TypeImpl($K).$eq(0, C.Type_dynamic_0Rz))
        H.throwExpression(P.UnsupportedError$('explicit key type required, for example "new ListMultimapBuilder<int, int>"'));
      if (new H.TypeImpl($V).$eq(0, C.Type_dynamic_0Rz))
        H.throwExpression(P.UnsupportedError$('explicit value type required, for example "new ListMultimapBuilder<int, int>"'));
      t1.replace$1(0, C.Map_empty);
      return t1;
    },
    BuiltListMultimap: function BuiltListMultimap() {
    },
    BuiltListMultimap_BuiltListMultimap_closure: function BuiltListMultimap_BuiltListMultimap_closure(t0) {
      this.multimap = t0;
    },
    BuiltListMultimap_hashCode_closure: function BuiltListMultimap_hashCode_closure(t0) {
      this.$this = t0;
    },
    _BuiltListMultimap: function _BuiltListMultimap(t0, t1, t2) {
      var _ = this;
      _._list_multimap$_map = t0;
      _._emptyList = t1;
      _._list_multimap$_keys = _._list_multimap$_hashCode = null;
      _.$ti = t2;
    },
    ListMultimapBuilder: function ListMultimapBuilder(t0) {
      var _ = this;
      _._list_multimap$_builderMap = _._list_multimap$_builtMapOwner = _._list_multimap$_builtMap = null;
      _.$ti = t0;
    },
    ListMultimapBuilder_replace_closure: function ListMultimapBuilder_replace_closure(t0) {
      this.multimap = t0;
    },
    StringSerializer: function StringSerializer(t0) {
      this.types = t0;
    },
    _isToStringVisiting0: function(o) {
      return C.JSArray_methods.any$1($._toStringVisiting0, new M._isToStringVisiting_closure(o));
    },
    CanonicalizedMap: function CanonicalizedMap() {
    },
    CanonicalizedMap_addAll_closure: function CanonicalizedMap_addAll_closure(t0) {
      this.$this = t0;
    },
    CanonicalizedMap_forEach_closure: function CanonicalizedMap_forEach_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    CanonicalizedMap_keys_closure: function CanonicalizedMap_keys_closure(t0) {
      this.$this = t0;
    },
    CanonicalizedMap_map_closure: function CanonicalizedMap_map_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.transform = t1;
      _.K2 = t2;
      _.V2 = t3;
    },
    CanonicalizedMap_toString_closure: function CanonicalizedMap_toString_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.result = t2;
    },
    _isToStringVisiting_closure: function _isToStringVisiting_closure(t0) {
      this.o = t0;
    },
    DevToolsRequest: function DevToolsRequest() {
    },
    DevToolsResponse: function DevToolsResponse() {
    },
    _$DevToolsRequestSerializer: function _$DevToolsRequestSerializer() {
    },
    _$DevToolsResponseSerializer: function _$DevToolsResponseSerializer() {
    },
    _$DevToolsRequest: function _$DevToolsRequest(t0, t1, t2) {
      this.appId = t0;
      this.instanceId = t1;
      this.tabUrl = t2;
    },
    DevToolsRequestBuilder: function DevToolsRequestBuilder() {
      var _ = this;
      _._tabUrl = _._devtools_request$_instanceId = _._devtools_request$_appId = _._devtools_request$_$v = null;
    },
    _$DevToolsResponse: function _$DevToolsResponse(t0, t1) {
      this.success = t0;
      this.error = t1;
    },
    DevToolsResponseBuilder: function DevToolsResponseBuilder() {
      this._devtools_request$_error = this._success = this._devtools_request$_$v = null;
    },
    IsolateExit: function IsolateExit() {
    },
    IsolateStart: function IsolateStart() {
    },
    _$IsolateExitSerializer: function _$IsolateExitSerializer() {
    },
    _$IsolateStartSerializer: function _$IsolateStartSerializer() {
    },
    _$IsolateExit: function _$IsolateExit(t0, t1) {
      this.appId = t0;
      this.instanceId = t1;
    },
    IsolateExitBuilder: function IsolateExitBuilder() {
      this._isolate_events$_instanceId = this._isolate_events$_appId = this._isolate_events$_$v = null;
    },
    _$IsolateStart: function _$IsolateStart(t0, t1) {
      this.appId = t0;
      this.instanceId = t1;
    },
    IsolateStartBuilder: function IsolateStartBuilder() {
      this._isolate_events$_instanceId = this._isolate_events$_appId = this._isolate_events$_$v = null;
    },
    _parseUri: function(uri) {
      if (!!J.getInterceptor$(uri).$isUri)
        return uri;
      throw H.wrapException(P.ArgumentError$value(uri, "uri", "Value must be a String or a Uri"));
    },
    _validateArgList: function(method, args) {
      var numArgs, i, numArgs0, message, t1, t2, t3, t4;
      for (numArgs = args.length, i = 1; i < numArgs; ++i) {
        if (args[i] == null || args[i - 1] != null)
          continue;
        for (; numArgs >= 1; numArgs = numArgs0) {
          numArgs0 = numArgs - 1;
          if (args[numArgs0] != null)
            break;
        }
        message = new P.StringBuffer("");
        t1 = method + "(";
        message._contents = t1;
        t2 = H.SubListIterable$(args, 0, numArgs, H.getTypeArgumentByIndex(args, 0));
        t3 = P.String;
        t4 = H.getTypeArgumentByIndex(t2, 0);
        t3 = t1 + new H.MappedListIterable(t2, H.functionTypeCheck(new M._validateArgList_closure(), {func: 1, ret: t3, args: [t4]}), [t4, t3]).join$1(0, ", ");
        message._contents = t3;
        message._contents = t3 + ("): part " + (i - 1) + " was null, but part " + i + " was not.");
        throw H.wrapException(P.ArgumentError$(message.toString$0(0)));
      }
    },
    Context: function Context(t0, t1) {
      this.style = t0;
      this._context$_current = t1;
    },
    Context_join_closure: function Context_join_closure() {
    },
    Context_joinAll_closure: function Context_joinAll_closure() {
    },
    Context_split_closure: function Context_split_closure() {
    },
    _validateArgList_closure: function _validateArgList_closure() {
    },
    SseClient: function SseClient(t0, t1, t2, t3, t4) {
      var _ = this;
      _._incomingController = t0;
      _._outgoingController = t1;
      _._sse_client$_client = t2;
      _._logger = t3;
      _._serverUrl = _._eventSource = null;
      _._messages = t4;
    }
  },
  S = {
    BuiltList_BuiltList$from: function(iterable, $E) {
      if (iterable instanceof S._BuiltList && new H.TypeImpl(H.getTypeArgumentByIndex(iterable, 0)).$eq(0, new H.TypeImpl($E)))
        return H.subtypeCast(iterable, "$isBuiltList", [$E], "$asBuiltList");
      else
        return S._BuiltList$copyAndCheckTypes(iterable, $E);
    },
    _BuiltList$copyAndCheckTypes: function(iterable, $E) {
      var t1 = P.List_List$from(iterable, false, $E),
        t2 = new S._BuiltList(t1, [$E]);
      t2.BuiltList$_$1(t1, $E);
      t2._BuiltList$copyAndCheckTypes$1(iterable, $E);
      return t2;
    },
    ListBuilder_ListBuilder: function(iterable, $E) {
      var t1 = new S.ListBuilder([$E]);
      if (new H.TypeImpl($E).$eq(0, C.Type_dynamic_0Rz))
        H.throwExpression(P.UnsupportedError$('explicit element type required, for example "new ListBuilder<int>"'));
      t1.replace$1(0, iterable);
      return t1;
    },
    BuiltList: function BuiltList() {
    },
    _BuiltList: function _BuiltList(t0, t1) {
      this._list = t0;
      this._list$_hashCode = null;
      this.$ti = t1;
    },
    ListBuilder: function ListBuilder(t0) {
      this._listOwner = this._list = null;
      this.$ti = t0;
    },
    ExtensionRequest: function ExtensionRequest() {
    },
    ExtensionResponse: function ExtensionResponse() {
    },
    ExtensionEvent: function ExtensionEvent() {
    },
    _$ExtensionRequestSerializer: function _$ExtensionRequestSerializer() {
    },
    _$ExtensionResponseSerializer: function _$ExtensionResponseSerializer() {
    },
    _$ExtensionEventSerializer: function _$ExtensionEventSerializer() {
    },
    _$ExtensionRequest: function _$ExtensionRequest(t0, t1, t2) {
      this.id = t0;
      this.command = t1;
      this.commandParams = t2;
    },
    ExtensionRequestBuilder: function ExtensionRequestBuilder() {
      var _ = this;
      _._commandParams = _._command = _._id = _._extension_request$_$v = null;
    },
    _$ExtensionResponse: function _$ExtensionResponse(t0, t1, t2, t3) {
      var _ = this;
      _.id = t0;
      _.success = t1;
      _.result = t2;
      _.error = t3;
    },
    ExtensionResponseBuilder: function ExtensionResponseBuilder() {
      var _ = this;
      _._extension_request$_error = _._extension_request$_result = _._extension_request$_success = _._id = _._extension_request$_$v = null;
    },
    _$ExtensionEvent: function _$ExtensionEvent(t0, t1) {
      this.params = t0;
      this.method = t1;
    },
    ExtensionEventBuilder: function ExtensionEventBuilder() {
      this._extension_request$_method = this._params = this._extension_request$_$v = null;
    },
    toPromise: function(future, $T) {
      var t1 = P.allowInterop(new S.toPromise_closure(future, $T), {func: 1, ret: -1, args: [{func: 1, ret: -1, args: [$T]}, {func: 1, ret: -1, args: [,]}]});
      return new self.Promise(t1, $T);
    },
    Promise: function Promise() {
    },
    toPromise_closure: function toPromise_closure(t0, t1) {
      this.future = t0;
      this.T = t1;
    }
  },
  A = {
    BuiltMap_BuiltMap: function($K, $V) {
      var t1 = A._BuiltMap$copyAndCheckTypes(C.Map_empty.get$keys(C.Map_empty), new A.BuiltMap_BuiltMap_closure(C.Map_empty), $K, $V);
      return t1;
    },
    _BuiltMap$copyAndCheckTypes: function(keys, lookup, $K, $V) {
      var t1 = new H.JsLinkedHashMap([$K, $V]),
        t2 = new A._BuiltMap(null, t1, [$K, $V]);
      t2.BuiltMap$_$2(null, t1, $K, $V);
      t2._BuiltMap$copyAndCheckTypes$2(keys, lookup, $K, $V);
      return t2;
    },
    MapBuilder_MapBuilder: function($K, $V) {
      var t1 = new A.MapBuilder(null, null, null, [$K, $V]);
      if (new H.TypeImpl($K).$eq(0, C.Type_dynamic_0Rz))
        H.throwExpression(P.UnsupportedError$('explicit key type required, for example "new MapBuilder<int, int>"'));
      if (new H.TypeImpl($V).$eq(0, C.Type_dynamic_0Rz))
        H.throwExpression(P.UnsupportedError$('explicit value type required, for example "new MapBuilder<int, int>"'));
      t1.replace$1(0, C.Map_empty);
      return t1;
    },
    BuiltMap: function BuiltMap() {
    },
    BuiltMap_BuiltMap_closure: function BuiltMap_BuiltMap_closure(t0) {
      this.map = t0;
    },
    BuiltMap_hashCode_closure: function BuiltMap_hashCode_closure(t0) {
      this.$this = t0;
    },
    _BuiltMap: function _BuiltMap(t0, t1, t2) {
      var _ = this;
      _._mapFactory = t0;
      _._map$_map = t1;
      _._map$_keys = _._map$_hashCode = null;
      _.$ti = t2;
    },
    MapBuilder: function MapBuilder(t0, t1, t2, t3) {
      var _ = this;
      _._mapFactory = t0;
      _._map$_map = t1;
      _._mapOwner = t2;
      _.$ti = t3;
    },
    MapBuilder_replace_closure: function MapBuilder_replace_closure(t0, t1) {
      this.$this = t0;
      this.replacement = t1;
    },
    JsonObject_JsonObject: function(value) {
      var t1, t2;
      if (typeof value === "number")
        return new A.NumJsonObject(value);
      else if (typeof value === "string")
        return new A.StringJsonObject(value);
      else if (typeof value === "boolean")
        return new A.BoolJsonObject(value);
      else if (!!J.getInterceptor$(value).$isList)
        return new A.ListJsonObject(new P.UnmodifiableListView(value, [P.Object]));
      else {
        t1 = P.String;
        t2 = P.Object;
        if (H.checkSubtype(value, "$isMap", [t1, t2], "$asMap"))
          return new A.MapJsonObject(new P.UnmodifiableMapView(value, [t1, t2]));
        else
          throw H.wrapException(P.ArgumentError$value(value, "value", "Must be bool, List<Object>, Map<String, Object>, num or String"));
      }
    },
    JsonObject: function JsonObject() {
    },
    BoolJsonObject: function BoolJsonObject(t0) {
      this.value = t0;
    },
    ListJsonObject: function ListJsonObject(t0) {
      this.value = t0;
    },
    MapJsonObject: function MapJsonObject(t0) {
      this.value = t0;
    },
    NumJsonObject: function NumJsonObject(t0) {
      this.value = t0;
    },
    StringJsonObject: function StringJsonObject(t0) {
      this.value = t0;
    },
    RunRequest: function RunRequest() {
    },
    RunResponse: function RunResponse() {
    },
    _$RunRequestSerializer: function _$RunRequestSerializer() {
    },
    _$RunResponseSerializer: function _$RunResponseSerializer() {
    },
    _$RunRequest: function _$RunRequest() {
    },
    RunRequestBuilder: function RunRequestBuilder() {
    },
    _$RunResponse: function _$RunResponse(t0, t1) {
      this.appId = t0;
      this.instanceId = t1;
    },
    RunResponseBuilder: function RunResponseBuilder() {
      this._run_request$_instanceId = this._run_request$_appId = this._run_request$_$v = null;
    }
  },
  L = {
    BuiltSet_BuiltSet$from: function(iterable, $E) {
      var t1 = L._BuiltSet$copyAndCheckTypes(iterable, $E);
      return t1;
    },
    _BuiltSet$copyAndCheckTypes: function(iterable, $E) {
      var t1 = P.LinkedHashSet_LinkedHashSet($E),
        t2 = new L._BuiltSet(null, t1, [$E]);
      t2.BuiltSet$_$2(null, t1, $E);
      t2._BuiltSet$copyAndCheckTypes$1(iterable, $E);
      return t2;
    },
    SetBuilder_SetBuilder: function($E) {
      var t1 = new L.SetBuilder(null, null, null, [$E]);
      if (new H.TypeImpl($E).$eq(0, C.Type_dynamic_0Rz))
        H.throwExpression(P.UnsupportedError$('explicit element type required, for example "new SetBuilder<int>"'));
      t1.replace$1(0, C.List_empty);
      return t1;
    },
    BuiltSet: function BuiltSet() {
    },
    BuiltSet_hashCode_closure: function BuiltSet_hashCode_closure(t0) {
      this.$this = t0;
    },
    _BuiltSet: function _BuiltSet(t0, t1, t2) {
      var _ = this;
      _._setFactory = t0;
      _._set$_set = t1;
      _._set$_hashCode = null;
      _.$ti = t2;
    },
    SetBuilder: function SetBuilder(t0, t1, t2, t3) {
      var _ = this;
      _._setFactory = t0;
      _._set$_set = t1;
      _._setOwner = t2;
      _.$ti = t3;
    },
    stronglyConnectedComponents: function(nodes, edges, $T) {
      var equals, result, t1, lowLinks, indexes, onStack, _i, lastVisited, strongConnect, node, _null = null, _box_0 = {};
      _box_0.equals = equals;
      _box_0.equals = null;
      result = H.setRuntimeTypeInfo([], [[P.List, $T]]);
      t1 = P.int;
      lowLinks = P.HashMap_HashMap(_null, _null, _null, $T, t1);
      indexes = P.HashMap_HashMap(_null, _null, _null, $T, t1);
      onStack = P.HashSet_HashSet(_null, _null, $T);
      _box_0.equals = L.strongly_connected_components___defaultEquals$closure();
      _i = _box_0.index = 0;
      lastVisited = new P.ListQueue([$T]);
      t1 = new Array(8);
      t1.fixed$length = Array;
      lastVisited.set$_table(H.setRuntimeTypeInfo(t1, [$T]));
      strongConnect = new L.stronglyConnectedComponents_strongConnect(_box_0, indexes, lowLinks, lastVisited, onStack, edges, result, $T);
      for (t1 = nodes.length; _i < nodes.length; nodes.length === t1 || (0, H.throwConcurrentModificationError)(nodes), ++_i) {
        node = nodes[_i];
        if (!indexes.containsKey$1(0, node))
          strongConnect.call$1(node);
      }
      return result;
    },
    _defaultEquals0: function(a, b) {
      return J.$eq$(a, b);
    },
    stronglyConnectedComponents_strongConnect: function stronglyConnectedComponents_strongConnect(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._box_0 = t0;
      _.indexes = t1;
      _.lowLinks = t2;
      _.lastVisited = t3;
      _.onStack = t4;
      _.edges = t5;
      _.result = t6;
      _.T = t7;
    },
    WindowsStyle: function WindowsStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    }
  },
  E = {
    SetMultimapBuilder_SetMultimapBuilder: function($K, $V) {
      var t1 = new E.SetMultimapBuilder([$K, $V]);
      if (new H.TypeImpl($K).$eq(0, C.Type_dynamic_0Rz))
        H.throwExpression(P.UnsupportedError$('explicit key type required, for example "new SetMultimapBuilder<int, int>"'));
      if (new H.TypeImpl($V).$eq(0, C.Type_dynamic_0Rz))
        H.throwExpression(P.UnsupportedError$('explicit value type required, for example "new SetMultimapBuilder<int, int>"'));
      t1.replace$1(0, C.Map_empty);
      return t1;
    },
    BuiltSetMultimap: function BuiltSetMultimap() {
    },
    BuiltSetMultimap_hashCode_closure: function BuiltSetMultimap_hashCode_closure(t0) {
      this.$this = t0;
    },
    _BuiltSetMultimap: function _BuiltSetMultimap(t0, t1, t2) {
      var _ = this;
      _._set_multimap$_map = t0;
      _._emptySet = t1;
      _._set_multimap$_keys = _._set_multimap$_hashCode = null;
      _.$ti = t2;
    },
    SetMultimapBuilder: function SetMultimapBuilder(t0) {
      var _ = this;
      _._builderMap = _._builtMapOwner = _._builtMap = null;
      _.$ti = t0;
    },
    SetMultimapBuilder_replace_closure: function SetMultimapBuilder_replace_closure(t0) {
      this.multimap = t0;
    },
    ConnectRequest: function ConnectRequest() {
    },
    _$ConnectRequestSerializer: function _$ConnectRequestSerializer() {
    },
    _$ConnectRequest: function _$ConnectRequest(t0, t1) {
      this.appId = t0;
      this.instanceId = t1;
    },
    ConnectRequestBuilder: function ConnectRequestBuilder() {
      this._instanceId = this._appId = this._$v = null;
    },
    BaseClient: function BaseClient() {
    },
    ClientException: function ClientException(t0) {
      this.message = t0;
    },
    PosixStyle: function PosixStyle(t0, t1, t2) {
      this.separatorPattern = t0;
      this.needsSeparatorPattern = t1;
      this.rootPattern = t2;
    },
    StringScannerException: function StringScannerException(t0, t1, t2) {
      this._span_exception$_source = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    }
  },
  Y = {
    $jc: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    $jf: function(hash) {
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    BuiltValueNullFieldError$: function(type, field) {
      return new Y.BuiltValueNullFieldError(type, field);
    },
    EnumClass: function EnumClass() {
    },
    closure: function closure() {
    },
    IndentingBuiltValueToStringHelper: function IndentingBuiltValueToStringHelper(t0) {
      this._result = t0;
    },
    BuiltValueNullFieldError: function BuiltValueNullFieldError(t0, t1) {
      this.type = t0;
      this.field = t1;
    },
    BuiltJsonSerializersBuilder$_: function(_typeToSerializer, _wireNameToSerializer, _typeNameToSerializer, _builderFactories, _plugins) {
      return new Y.BuiltJsonSerializersBuilder(_typeToSerializer, _wireNameToSerializer, _typeNameToSerializer, _builderFactories, _plugins);
    },
    _getRawName: function(type) {
      var $name = J.toString$0$(type),
        genericsStart = J.getInterceptor$s($name).indexOf$1($name, "<");
      return genericsStart === -1 ? $name : C.JSString_methods.substring$2($name, 0, genericsStart);
    },
    BuiltJsonSerializers: function BuiltJsonSerializers(t0, t1, t2, t3, t4) {
      var _ = this;
      _._typeToSerializer = t0;
      _._wireNameToSerializer = t1;
      _._typeNameToSerializer = t2;
      _.builderFactories = t3;
      _._plugins = t4;
    },
    BuiltJsonSerializersBuilder: function BuiltJsonSerializersBuilder(t0, t1, t2, t3, t4) {
      var _ = this;
      _._typeToSerializer = t0;
      _._wireNameToSerializer = t1;
      _._typeNameToSerializer = t2;
      _._builderFactories = t3;
      _._plugins = t4;
    },
    FileLocation$_: function(file, offset) {
      if (offset < 0)
        H.throwExpression(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > file._decodedChars.length)
        H.throwExpression(P.RangeError$("Offset " + offset + " must not be greater than the number of characters in the file, " + file.get$length(file) + "."));
      return new Y.FileLocation(file, offset);
    },
    SourceFile: function SourceFile(t0, t1, t2) {
      var _ = this;
      _.url = t0;
      _._lineStarts = t1;
      _._decodedChars = t2;
      _._cachedLine = null;
    },
    FileLocation: function FileLocation(t0, t1) {
      this.file = t0;
      this.offset = t1;
    },
    _FileSpan: function _FileSpan(t0, t1, t2) {
      this.file = t0;
      this._file$_start = t1;
      this._file$_end = t2;
    },
    SourceSpanMixin: function SourceSpanMixin() {
    }
  },
  U = {
    Serializers_Serializers: function() {
      var t1 = P.Type,
        t2 = [U.Serializer,,],
        t3 = P.String;
      t2 = Y.BuiltJsonSerializersBuilder$_(A.MapBuilder_MapBuilder(t1, t2), A.MapBuilder_MapBuilder(t3, t2), A.MapBuilder_MapBuilder(t3, t2), A.MapBuilder_MapBuilder(U.FullType, P.Function), S.ListBuilder_ListBuilder(C.List_empty, U.SerializerPlugin));
      t2.add$1(0, new O.BigIntSerializer(S.BuiltList_BuiltList$from([C.Type_BigInt_8OV, J.get$runtimeType$($.$get$_BigIntImpl_zero())], t1)));
      t2.add$1(0, new R.BoolSerializer(S.BuiltList_BuiltList$from([C.Type_bool_lhE], t1)));
      t3 = P.Object;
      t2.add$1(0, new K.BuiltListSerializer(S.BuiltList_BuiltList$from([C.Type_BuiltList_iTR, H.getRuntimeType(S.BuiltList_BuiltList$from(C.List_empty, t3))], t1)));
      t2.add$1(0, new R.BuiltListMultimapSerializer(S.BuiltList_BuiltList$from([C.Type_BuiltListMultimap_2Mt, H.getRuntimeType(M.BuiltListMultimap_BuiltListMultimap(t3, t3))], t1)));
      t2.add$1(0, new K.BuiltMapSerializer(S.BuiltList_BuiltList$from([C.Type_BuiltMap_qd4, H.getRuntimeType(A.BuiltMap_BuiltMap(t3, t3))], t1)));
      t2.add$1(0, new O.BuiltSetSerializer(S.BuiltList_BuiltList$from([C.Type_BuiltSet_fcN, H.getRuntimeType(L.BuiltSet_BuiltSet$from(C.List_empty, t3))], t1)));
      t2.add$1(0, new R.BuiltSetMultimapSerializer(L.BuiltSet_BuiltSet$from([C.Type_BuiltSetMultimap_9Fi], t1)));
      t2.add$1(0, new Z.DateTimeSerializer(S.BuiltList_BuiltList$from([C.Type_DateTime_8AS], t1)));
      t2.add$1(0, new D.DoubleSerializer(S.BuiltList_BuiltList$from([C.Type_double_K1J], t1)));
      t2.add$1(0, new K.DurationSerializer(S.BuiltList_BuiltList$from([C.Type_Duration_SnA], t1)));
      t2.add$1(0, new B.IntSerializer(S.BuiltList_BuiltList$from([C.Type_int_tHn], t1)));
      t2.add$1(0, new Q.Int64Serializer(S.BuiltList_BuiltList$from([C.Type_Int64_gc6], t1)));
      t2.add$1(0, new O.JsonObjectSerializer(S.BuiltList_BuiltList$from([C.Type_JsonObject_gyf, C.Type_BoolJsonObject_8HQ, C.Type_ListJsonObject_yPV, C.Type_MapJsonObject_bBG, C.Type_NumJsonObject_H9C, C.Type_StringJsonObject_GAC], t1)));
      t2.add$1(0, new K.NumSerializer(S.BuiltList_BuiltList$from([C.Type_num_cv7], t1)));
      t2.add$1(0, new K.RegExpSerializer(S.BuiltList_BuiltList$from([C.Type_RegExp_Eeh, $.$get$_runtimeType()], t1)));
      t2.add$1(0, new M.StringSerializer(S.BuiltList_BuiltList$from([C.Type_String_k8F], t1)));
      t2.add$1(0, new O.UriSerializer(S.BuiltList_BuiltList$from([C.Type_Uri_EFX, J.get$runtimeType$(P.Uri_parse("http://example.com")), J.get$runtimeType$(P.Uri_parse("http://example.com:"))], t1)));
      t1 = t2._builderFactories;
      t1.$indexSet(0, C.FullType_GJM, new U.Serializers_Serializers_closure());
      t1.$indexSet(0, C.FullType_UGJ, new U.Serializers_Serializers_closure0());
      t1.$indexSet(0, C.FullType_sEu, new U.Serializers_Serializers_closure1());
      t1.$indexSet(0, C.FullType_ECn, new U.Serializers_Serializers_closure2());
      t1.$indexSet(0, C.FullType_C1B, new U.Serializers_Serializers_closure3());
      return t2.build$0();
    },
    FullType__getRawName: function(type) {
      var $name = J.toString$0$(type),
        genericsStart = C.JSString_methods.indexOf$1($name, "<");
      return genericsStart === -1 ? $name : C.JSString_methods.substring$2($name, 0, genericsStart);
    },
    DeserializationError_DeserializationError: function(json, type, error) {
      var limitedJson = J.toString$0$(json),
        t1 = limitedJson.length;
      return new U.DeserializationError(t1 > 80 ? J.replaceRange$3$asx(limitedJson, 77, t1, "...") : limitedJson, type, error);
    },
    Serializers_Serializers_closure: function Serializers_Serializers_closure() {
    },
    Serializers_Serializers_closure0: function Serializers_Serializers_closure0() {
    },
    Serializers_Serializers_closure1: function Serializers_Serializers_closure1() {
    },
    Serializers_Serializers_closure2: function Serializers_Serializers_closure2() {
    },
    Serializers_Serializers_closure3: function Serializers_Serializers_closure3() {
    },
    SerializerPlugin: function SerializerPlugin() {
    },
    FullType: function FullType(t0, t1) {
      this.root = t0;
      this.parameters = t1;
    },
    Serializer: function Serializer() {
    },
    DeserializationError: function DeserializationError(t0, t1, t2) {
      this.json = t0;
      this.type = t1;
      this.error = t2;
    },
    DefaultEquality: function DefaultEquality(t0) {
      this.$ti = t0;
    },
    IterableEquality: function IterableEquality(t0, t1) {
      this._elementEquality = t0;
      this.$ti = t1;
    },
    ListEquality: function ListEquality(t0, t1) {
      this._elementEquality = t0;
      this.$ti = t1;
    },
    _UnorderedEquality: function _UnorderedEquality() {
    },
    SetEquality: function SetEquality(t0, t1) {
      this._elementEquality = t0;
      this.$ti = t1;
    },
    _MapEntry: function _MapEntry(t0, t1, t2) {
      this.equality = t0;
      this.key = t1;
      this.value = t2;
    },
    MapEquality: function MapEquality(t0, t1, t2) {
      this._keyEquality = t0;
      this._valueEquality = t1;
      this.$ti = t2;
    },
    DeepCollectionEquality: function DeepCollectionEquality() {
    },
    Response_fromStream: function(response) {
      return response.stream.toBytes$0().then$1$1(0, new U.Response_fromStream_closure(response), U.Response);
    },
    Response: function Response(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.request = t0;
      _.statusCode = t1;
      _.reasonPhrase = t2;
      _.contentLength = t3;
      _.headers = t4;
      _.isRedirect = t5;
      _.persistentConnection = t6;
    },
    Response_fromStream_closure: function Response_fromStream_closure(t0) {
      this.response = t0;
    },
    Highlighter__normalizeNewlines: function(span) {
      var t1, endOffset, i, t2, t3, t4,
        text = span.get$text(span);
      if (!C.JSString_methods.contains$1(text, "\r\n"))
        return span;
      t1 = span.get$end(span);
      endOffset = t1.get$offset(t1);
      for (t1 = text.length - 1, i = 0; i < t1; ++i)
        if (C.JSString_methods._codeUnitAt$1(text, i) === 13 && C.JSString_methods._codeUnitAt$1(text, i + 1) === 10)
          --endOffset;
      t1 = span.get$start(span);
      t2 = span.get$sourceUrl();
      t3 = span.get$end(span);
      t3 = t3.get$line(t3);
      t2 = V.SourceLocation$(endOffset, span.get$end(span).get$column(), t3, t2);
      t3 = H.stringReplaceAllUnchecked(text, "\r\n", "\n");
      t4 = span.get$context(span);
      return X.SourceSpanWithContext$(t1, t2, t3, H.stringReplaceAllUnchecked(t4, "\r\n", "\n"));
    },
    Highlighter__normalizeTrailingNewline: function(span) {
      var context, text, start, end, t1, t2, t3;
      if (!C.JSString_methods.endsWith$1(span.get$context(span), "\n"))
        return span;
      if (C.JSString_methods.endsWith$1(span.get$text(span), "\n\n"))
        return span;
      context = C.JSString_methods.substring$2(span.get$context(span), 0, span.get$context(span).length - 1);
      text = span.get$text(span);
      start = span.get$start(span);
      end = span.get$end(span);
      if (C.JSString_methods.endsWith$1(span.get$text(span), "\n")) {
        t1 = B.findLineStart(span.get$context(span), span.get$text(span), span.get$start(span).get$column());
        t2 = span.get$start(span).get$column();
        if (typeof t1 !== "number")
          return t1.$add();
        t2 = t1 + t2 + span.get$length(span) === span.get$context(span).length;
        t1 = t2;
      } else
        t1 = false;
      if (t1) {
        text = C.JSString_methods.substring$2(span.get$text(span), 0, span.get$text(span).length - 1);
        t1 = span.get$end(span);
        t1 = t1.get$offset(t1);
        t2 = span.get$sourceUrl();
        t3 = span.get$end(span);
        t3 = t3.get$line(t3);
        if (typeof t3 !== "number")
          return t3.$sub();
        end = V.SourceLocation$(t1 - 1, U.Highlighter__lastLineLength(text), t3 - 1, t2);
        t1 = span.get$start(span);
        t1 = t1.get$offset(t1);
        t2 = span.get$end(span);
        start = t1 === t2.get$offset(t2) ? end : span.get$start(span);
      }
      return X.SourceSpanWithContext$(start, end, text, context);
    },
    Highlighter__normalizeEndOfLine: function(span) {
      var t1, t2, text, t3, t4;
      if (span.get$end(span).get$column() !== 0)
        return span;
      t1 = span.get$end(span);
      t1 = t1.get$line(t1);
      t2 = span.get$start(span);
      if (t1 == t2.get$line(t2))
        return span;
      text = C.JSString_methods.substring$2(span.get$text(span), 0, span.get$text(span).length - 1);
      t1 = span.get$start(span);
      t2 = span.get$end(span);
      t2 = t2.get$offset(t2);
      t3 = span.get$sourceUrl();
      t4 = span.get$end(span);
      t4 = t4.get$line(t4);
      if (typeof t4 !== "number")
        return t4.$sub();
      return X.SourceSpanWithContext$(t1, V.SourceLocation$(t2 - 1, U.Highlighter__lastLineLength(text), t4 - 1, t3), text, span.get$context(span));
    },
    Highlighter__lastLineLength: function(text) {
      var t1 = text.length;
      if (t1 === 0)
        return 0;
      if (C.JSString_methods.codeUnitAt$1(text, t1 - 1) === 10)
        return t1 === 1 ? 0 : t1 - C.JSString_methods.lastIndexOf$2(text, "\n", t1 - 2) - 1;
      else
        return t1 - C.JSString_methods.lastIndexOf$1(text, "\n") - 1;
    },
    Highlighter: function Highlighter(t0, t1, t2, t3, t4) {
      var _ = this;
      _._highlighter$_span = t0;
      _._color = t1;
      _._multiline = t2;
      _._paddingBeforeSidebar = t3;
      _._highlighter$_buffer = t4;
    },
    Highlighter__writeFirstLine_closure: function Highlighter__writeFirstLine_closure(t0, t1) {
      this.$this = t0;
      this.line = t1;
    },
    Highlighter__writeFirstLine_closure0: function Highlighter__writeFirstLine_closure0(t0, t1) {
      this.$this = t0;
      this.textInside = t1;
    },
    Highlighter__writeFirstLine_closure1: function Highlighter__writeFirstLine_closure1(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Highlighter__writeFirstLine_closure2: function Highlighter__writeFirstLine_closure2(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Highlighter__writeIntermediateLines_closure: function Highlighter__writeIntermediateLines_closure(t0, t1) {
      this.$this = t0;
      this.line = t1;
    },
    Highlighter__writeLastLine_closure: function Highlighter__writeLastLine_closure(t0, t1) {
      this.$this = t0;
      this.line = t1;
    },
    Highlighter__writeLastLine_closure0: function Highlighter__writeLastLine_closure0(t0, t1) {
      this.$this = t0;
      this.textInside = t1;
    },
    Highlighter__writeLastLine_closure1: function Highlighter__writeLastLine_closure1(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Highlighter__writeSidebar_closure: function Highlighter__writeSidebar_closure(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.end = t2;
    },
    UuidUtil_mathRNG: function() {
      var b, rand, i,
        t1 = new Array(16);
      t1.fixed$length = Array;
      b = H.setRuntimeTypeInfo(t1, [P.int]);
      for (rand = null, i = 0; i < 16; ++i) {
        t1 = i & 3;
        if (t1 === 0)
          rand = C.JSInt_methods.toInt$0(C.JSNumber_methods.floor$0(C.C__JSRandom.nextDouble$0() * 4294967296));
        if (typeof rand !== "number")
          return rand.$shr();
        C.JSArray_methods.$indexSet(b, i, C.JSInt_methods._shrOtherPositive$1(rand, t1 << 3) & 255);
      }
      return b;
    }
  },
  O = {BigIntSerializer: function BigIntSerializer(t0) {
      this.types = t0;
    }, BuiltSetSerializer: function BuiltSetSerializer(t0) {
      this.types = t0;
    }, BuiltSetSerializer_serialize_closure: function BuiltSetSerializer_serialize_closure(t0, t1) {
      this.serializers = t0;
      this.elementType = t1;
    }, BuiltSetSerializer_deserialize_closure: function BuiltSetSerializer_deserialize_closure(t0, t1) {
      this.serializers = t0;
      this.elementType = t1;
    }, JsonObjectSerializer: function JsonObjectSerializer(t0) {
      this.types = t0;
    }, UriSerializer: function UriSerializer(t0) {
      this.types = t0;
    }, BrowserClient: function BrowserClient(t0) {
      this._xhrs = t0;
      this.withCredentials = false;
    }, BrowserClient_send_closure: function BrowserClient_send_closure(t0, t1, t2) {
      this.xhr = t0;
      this.completer = t1;
      this.request = t2;
    }, BrowserClient_send__closure: function BrowserClient_send__closure(t0, t1, t2, t3) {
      var _ = this;
      _.reader = t0;
      _.completer = t1;
      _.xhr = t2;
      _.request = t3;
    }, BrowserClient_send__closure0: function BrowserClient_send__closure0(t0, t1) {
      this.completer = t0;
      this.request = t1;
    }, BrowserClient_send_closure0: function BrowserClient_send_closure0(t0, t1) {
      this.completer = t0;
      this.request = t1;
    }, Request: function Request(t0, t1, t2, t3, t4) {
      var _ = this;
      _._defaultEncoding = t0;
      _._bodyBytes = t1;
      _.method = t2;
      _.url = t3;
      _.headers = t4;
      _._finalized = false;
    },
    Style__getPlatformStyle: function() {
      var t1, scheme, userInfo, host, query, fragment, port, isFile, hasAuthority, path, t2, _null = null;
      if (P.Uri_base().get$scheme() !== "file")
        return $.$get$Style_url();
      t1 = P.Uri_base();
      if (!C.JSString_methods.endsWith$1(t1.get$path(t1), "/"))
        return $.$get$Style_url();
      scheme = P._Uri__makeScheme(_null, 0, 0);
      userInfo = P._Uri__makeUserInfo(_null, 0, 0);
      host = P._Uri__makeHost(_null, 0, 0, false);
      query = P._Uri__makeQuery(_null, 0, 0, _null);
      fragment = P._Uri__makeFragment(_null, 0, 0);
      port = P._Uri__makePort(_null, scheme);
      isFile = scheme === "file";
      if (host == null)
        t1 = userInfo.length !== 0 || port != null || isFile;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = P._Uri__makePath("a/b", 0, 3, _null, scheme, hasAuthority);
      t2 = scheme.length === 0;
      if (t2 && t1 && !C.JSString_methods.startsWith$1(path, "/"))
        path = P._Uri__normalizeRelativePath(path, !t2 || hasAuthority);
      else
        path = P._Uri__removeDotSegments(path);
      if (new P._Uri(scheme, userInfo, t1 && C.JSString_methods.startsWith$1(path, "//") ? "" : host, port, path, query, fragment).toFilePath$0() === "a\\b")
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    }
  },
  R = {BoolSerializer: function BoolSerializer(t0) {
      this.types = t0;
    }, BuiltListMultimapSerializer: function BuiltListMultimapSerializer(t0) {
      this.types = t0;
    }, BuiltListMultimapSerializer_serialize_closure: function BuiltListMultimapSerializer_serialize_closure(t0, t1) {
      this.serializers = t0;
      this.valueType = t1;
    }, BuiltListMultimapSerializer_deserialize_closure: function BuiltListMultimapSerializer_deserialize_closure(t0, t1) {
      this.serializers = t0;
      this.valueType = t1;
    }, BuiltSetMultimapSerializer: function BuiltSetMultimapSerializer(t0) {
      this.types = t0;
    }, BuiltSetMultimapSerializer_serialize_closure: function BuiltSetMultimapSerializer_serialize_closure(t0, t1) {
      this.serializers = t0;
      this.valueType = t1;
    }, BuiltSetMultimapSerializer_deserialize_closure: function BuiltSetMultimapSerializer_deserialize_closure(t0, t1) {
      this.serializers = t0;
      this.valueType = t1;
    },
    _convert: function(bytes, start, end) {
      var t1, t2, i, bufferIndex, byteOr, byte, bufferIndex0, t3,
        buffer = new Uint8Array((end - start) * 2);
      for (t1 = buffer.length, t2 = bytes.length, i = start, bufferIndex = 0, byteOr = 0; i < end; ++i) {
        if (i >= t2)
          return H.ioore(bytes, i);
        byte = bytes[i];
        if (typeof byte !== "number")
          return H.iae(byte);
        byteOr = (byteOr | byte) >>> 0;
        bufferIndex0 = bufferIndex + 1;
        t3 = (byte & 240) >>> 4;
        t3 = t3 < 10 ? t3 + 48 : t3 + 97 - 10;
        if (bufferIndex >= t1)
          return H.ioore(buffer, bufferIndex);
        buffer[bufferIndex] = t3;
        bufferIndex = bufferIndex0 + 1;
        t3 = byte & 15;
        t3 = t3 < 10 ? t3 + 48 : t3 + 97 - 10;
        if (bufferIndex0 >= t1)
          return H.ioore(buffer, bufferIndex0);
        buffer[bufferIndex0] = t3;
      }
      if (byteOr >= 0 && byteOr <= 255)
        return P.String_String$fromCharCodes(buffer, 0, null);
      for (i = start; i < end; ++i) {
        if (i >= t2)
          return H.ioore(bytes, i);
        byte = bytes[i];
        if (typeof byte !== "number")
          return byte.$ge();
        if (byte >= 0 && byte <= 255)
          continue;
        throw H.wrapException(P.FormatException$("Invalid byte " + (byte < 0 ? "-" : "") + "0x" + C.JSInt_methods.toRadixString$1(Math.abs(byte), 16) + ".", bytes, i));
      }
      throw H.wrapException("unreachable");
    },
    HexEncoder: function HexEncoder() {
    },
    MediaType_MediaType$parse: function(mediaType) {
      return B.wrapFormatException("media type", mediaType, new R.MediaType_MediaType$parse_closure(mediaType), R.MediaType);
    },
    MediaType$: function(type, subtype, parameters) {
      var t1 = type.toLowerCase(),
        t2 = subtype.toLowerCase(),
        t3 = P.String,
        t4 = parameters == null ? P.LinkedHashMap_LinkedHashMap$_empty(t3, t3) : Z.CaseInsensitiveMap$from(parameters, t3);
      return new R.MediaType(t1, t2, new P.UnmodifiableMapView(t4, [t3, t3]));
    },
    MediaType: function MediaType(t0, t1, t2) {
      this.type = t0;
      this.subtype = t1;
      this.parameters = t2;
    },
    MediaType_MediaType$parse_closure: function MediaType_MediaType$parse_closure(t0) {
      this.mediaType = t0;
    },
    MediaType_toString_closure: function MediaType_toString_closure(t0) {
      this.buffer = t0;
    },
    MediaType_toString__closure: function MediaType_toString__closure() {
    },
    StreamChannelMixin: function StreamChannelMixin() {
    }
  },
  K = {BuiltListSerializer: function BuiltListSerializer(t0) {
      this.types = t0;
    }, BuiltListSerializer_serialize_closure: function BuiltListSerializer_serialize_closure(t0, t1) {
      this.serializers = t0;
      this.elementType = t1;
    }, BuiltListSerializer_deserialize_closure: function BuiltListSerializer_deserialize_closure(t0, t1) {
      this.serializers = t0;
      this.elementType = t1;
    }, BuiltMapSerializer: function BuiltMapSerializer(t0) {
      this.types = t0;
    }, DurationSerializer: function DurationSerializer(t0) {
      this.types = t0;
    }, NumSerializer: function NumSerializer(t0) {
      this.types = t0;
    }, RegExpSerializer: function RegExpSerializer(t0) {
      this.types = t0;
    }},
  Z = {DateTimeSerializer: function DateTimeSerializer(t0) {
      this.types = t0;
    }, ByteStream: function ByteStream(t0) {
      this._stream = t0;
    }, ByteStream_toBytes_closure: function ByteStream_toBytes_closure(t0) {
      this.completer = t0;
    },
    CaseInsensitiveMap$from: function(other, $V) {
      var t1 = P.String;
      t1 = new Z.CaseInsensitiveMap(new Z.CaseInsensitiveMap$from_closure(), new Z.CaseInsensitiveMap$from_closure0(), new H.JsLinkedHashMap([t1, [B.Pair, t1, $V]]), [$V]);
      t1.addAll$1(0, other);
      return t1;
    },
    CaseInsensitiveMap: function CaseInsensitiveMap(t0, t1, t2, t3) {
      var _ = this;
      _._canonicalize = t0;
      _._isValidKeyFn = t1;
      _._base = t2;
      _.$ti = t3;
    },
    CaseInsensitiveMap$from_closure: function CaseInsensitiveMap$from_closure() {
    },
    CaseInsensitiveMap$from_closure0: function CaseInsensitiveMap$from_closure0() {
    },
    LegacyRestarter: function LegacyRestarter() {
    }
  },
  D = {DoubleSerializer: function DoubleSerializer(t0) {
      this.types = t0;
    }, SourceLocationMixin: function SourceLocationMixin() {
    },
    main: function() {
      return P.runZoned(new D.main_closure(), new D.main_closure0(), [P.Future, -1]);
    },
    _isChrome: function() {
      return J.contains$1$asx(window.navigator.userAgent, "Chrome") && !J.contains$1$asx(window.navigator.userAgent, "Edg");
    },
    main_closure: function main_closure() {
    },
    main__closure: function main__closure(t0) {
      this.manager = t0;
    },
    main__closure0: function main__closure0(t0) {
      this.client = t0;
    },
    main___closure0: function main___closure0() {
    },
    main__closure1: function main__closure1(t0, t1) {
      this.manager = t0;
      this.client = t1;
    },
    main___closure: function main___closure() {
    },
    main__closure2: function main__closure2() {
    },
    main__closure3: function main__closure3() {
    },
    main__closure4: function main__closure4() {
    },
    main_closure0: function main_closure0() {
    },
    current: function() {
      var exception, t1, path, lastIndex, uri = null;
      try {
        uri = P.Uri_base();
      } catch (exception) {
        if (!!J.getInterceptor$(H.unwrapException(exception)).$isException) {
          t1 = $._current;
          if (t1 != null)
            return t1;
          throw exception;
        } else
          throw exception;
      }
      if (J.$eq$(uri, $._currentUriBase))
        return $._current;
      $._currentUriBase = uri;
      if ($.$get$Style_platform() == $.$get$Style_url())
        return $._current = uri.resolve$1(".").toString$0(0);
      else {
        path = uri.toFilePath$0();
        lastIndex = path.length - 1;
        return $._current = lastIndex === 0 ? path : C.JSString_methods.substring$2(path, 0, lastIndex);
      }
    }
  },
  Q = {Int64Serializer: function Int64Serializer(t0) {
      this.types = t0;
    }, ReloadingManager: function ReloadingManager(t0, t1, t2, t3) {
      var _ = this;
      _._client = t0;
      _._manager$_appId = t1;
      _._appInstanceId = t2;
      _._restarter = t3;
    }, ReloadingManager__afterRestart_closure: function ReloadingManager__afterRestart_closure(t0) {
      this.$this = t0;
    }, ReloadingManager__beforeRestart_closure: function ReloadingManager__beforeRestart_closure(t0) {
      this.$this = t0;
    }},
  B = {IntSerializer: function IntSerializer(t0) {
      this.types = t0;
    }, Pair: function Pair(t0, t1, t2) {
      this.first = t0;
      this.last = t1;
      this.$ti = t2;
    }, InternalStyle: function InternalStyle() {
    },
    requiredEncodingForCharset: function(charset) {
      var encoding = P.Encoding_getByName(charset);
      if (encoding != null)
        return encoding;
      throw H.wrapException(P.FormatException$('Unsupported encoding "' + H.S(charset) + '".', null, null));
    },
    toUint8List: function(input) {
      var t1 = J.getInterceptor$(input);
      if (!!t1.$isUint8List)
        return input;
      if (!!t1.$isTypedData) {
        t1 = input.buffer;
        t1.toString;
        return H.NativeUint8List_NativeUint8List$view(t1, 0, null);
      }
      return new Uint8Array(H._ensureNativeList(input));
    },
    toByteStream: function(stream) {
      return stream;
    },
    wrapFormatException: function($name, value, body, $T) {
      var error, error0, t1, exception, t2;
      try {
        t1 = body.call$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        t2 = J.getInterceptor$(t1);
        if (!!t2.$isSourceSpanFormatException) {
          error = t1;
          throw H.wrapException(G.SourceSpanFormatException$("Invalid " + $name + ": " + error._span_exception$_message, error._span, J.get$source$z(error)));
        } else if (!!t2.$isFormatException) {
          error0 = t1;
          throw H.wrapException(P.FormatException$("Invalid " + $name + ' "' + value + '": ' + J.get$message$x(error0), J.get$source$z(error0), J.get$offset$z(error0)));
        } else
          throw exception;
      }
    },
    isAlphabetic: function(char) {
      var t1;
      if (!(char >= 65 && char <= 90))
        t1 = char >= 97 && char <= 122;
      else
        t1 = true;
      return t1;
    },
    isDriveLetter: function(path, index) {
      var t1 = path.length,
        t2 = index + 2;
      if (t1 < t2)
        return false;
      if (!B.isAlphabetic(C.JSString_methods.codeUnitAt$1(path, index)))
        return false;
      if (C.JSString_methods.codeUnitAt$1(path, index + 1) !== 58)
        return false;
      if (t1 === t2)
        return true;
      return C.JSString_methods.codeUnitAt$1(path, t2) === 47;
    },
    countCodeUnits: function(string, codeUnit) {
      var t1, count;
      for (t1 = new H.CodeUnits(string), t1 = new H.ListIterator(t1, t1.get$length(t1), [P.int]), count = 0; t1.moveNext$0();)
        if (t1.__internal$_current === codeUnit)
          ++count;
      return count;
    },
    findLineStart: function(context, text, column) {
      var beginningOfLine, index, lineStart;
      if (text.length === 0)
        for (beginningOfLine = 0; true;) {
          index = C.JSString_methods.indexOf$2(context, "\n", beginningOfLine);
          if (index === -1)
            return context.length - beginningOfLine >= column ? beginningOfLine : null;
          if (index - beginningOfLine >= column)
            return beginningOfLine;
          beginningOfLine = index + 1;
        }
      index = C.JSString_methods.indexOf$1(context, text);
      for (; index !== -1;) {
        lineStart = index === 0 ? 0 : C.JSString_methods.lastIndexOf$2(context, "\n", index - 1) + 1;
        if (column === index - lineStart)
          return lineStart;
        index = C.JSString_methods.indexOf$2(context, text, index + 1);
      }
      return;
    }
  },
  N = {HexCodec: function HexCodec() {
    },
    expectQuotedString: function(scanner) {
      var string;
      scanner.expect$2$name($.$get$_quotedString(), "quoted string");
      string = scanner.get$lastMatch().$index(0, 0);
      return C.JSString_methods.splitMapJoin$2$onMatch(J.substring$2$s(string, 1, string.length - 1), $.$get$_quotedPair(), H.functionTypeCheck(new N.expectQuotedString_closure(), {func: 1, ret: P.String, args: [P.Match]}));
    },
    expectQuotedString_closure: function expectQuotedString_closure() {
    },
    Logger_Logger: function($name) {
      return $.Logger__loggers.putIfAbsent$2(0, $name, new N.Logger_Logger_closure($name));
    },
    Logger: function Logger(t0, t1, t2) {
      this.name = t0;
      this.parent = t1;
      this._children = t2;
    },
    Logger_Logger_closure: function Logger_Logger_closure(t0) {
      this.name = t0;
    },
    Level: function Level(t0, t1) {
      this.name = t0;
      this.value = t1;
    },
    LogRecord: function LogRecord(t0, t1, t2) {
      this.level = t0;
      this.message = t1;
      this.loggerName = t2;
    }
  },
  X = {ErrorResponse: function ErrorResponse() {
    }, _$ErrorResponseSerializer: function _$ErrorResponseSerializer() {
    }, _$ErrorResponse: function _$ErrorResponse(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    }, ErrorResponseBuilder: function ErrorResponseBuilder() {
      this._stackTrace = this._error_response$_error = this._error_response$_$v = null;
    }, StreamedResponse: function StreamedResponse(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.stream = t0;
      _.request = t1;
      _.statusCode = t2;
      _.reasonPhrase = t3;
      _.contentLength = t4;
      _.headers = t5;
      _.isRedirect = t6;
      _.persistentConnection = t7;
    },
    ParsedPath_ParsedPath$parse: function(path, style) {
      var t1, parts, separators, start, i,
        root = style.getRoot$1(path);
      style.isRootRelative$1(path);
      if (root != null)
        path = J.substring$1$s(path, root.length);
      t1 = [P.String];
      parts = H.setRuntimeTypeInfo([], t1);
      separators = H.setRuntimeTypeInfo([], t1);
      t1 = path.length;
      if (t1 !== 0 && style.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 0))) {
        if (0 >= t1)
          return H.ioore(path, 0);
        C.JSArray_methods.add$1(separators, path[0]);
        start = 1;
      } else {
        C.JSArray_methods.add$1(separators, "");
        start = 0;
      }
      for (i = start; i < t1; ++i)
        if (style.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, i))) {
          C.JSArray_methods.add$1(parts, C.JSString_methods.substring$2(path, start, i));
          C.JSArray_methods.add$1(separators, path[i]);
          start = i + 1;
        }
      if (start < t1) {
        C.JSArray_methods.add$1(parts, C.JSString_methods.substring$1(path, start));
        C.JSArray_methods.add$1(separators, "");
      }
      return new X.ParsedPath(style, root, parts, separators);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.parts = t2;
      _.separators = t3;
    },
    ParsedPath_normalize_closure: function ParsedPath_normalize_closure(t0) {
      this.$this = t0;
    },
    PathException$: function(message) {
      return new X.PathException(message);
    },
    PathException: function PathException(t0) {
      this.message = t0;
    },
    hashObjects: function(objects) {
      return X._finish((objects && C.JSArray_methods).fold$1$2(objects, 0, new X.hashObjects_closure(), P.int));
    },
    _combine: function(hash, value) {
      if (typeof hash !== "number")
        return hash.$add();
      if (typeof value !== "number")
        return H.iae(value);
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _finish: function(hash) {
      if (typeof hash !== "number")
        return H.iae(hash);
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    hashObjects_closure: function hashObjects_closure() {
    },
    SourceSpanWithContext$: function(start, end, text, _context) {
      var t1 = new X.SourceSpanWithContext(_context, start, end, text);
      t1.SourceSpanBase$3(start, end, text);
      if (!C.JSString_methods.contains$1(_context, text))
        H.throwExpression(P.ArgumentError$('The context line "' + _context + '" must contain "' + text + '".'));
      if (B.findLineStart(_context, text, start.get$column()) == null)
        H.throwExpression(P.ArgumentError$('The span text "' + text + '" must start at column ' + (start.get$column() + 1) + ' in a line within "' + _context + '".'));
      return t1;
    },
    SourceSpanWithContext: function SourceSpanWithContext(t0, t1, t2, t3) {
      var _ = this;
      _._context = t0;
      _.start = t1;
      _.end = t2;
      _.text = t3;
    },
    StringScanner: function StringScanner(t0, t1) {
      var _ = this;
      _.sourceUrl = t0;
      _.string = t1;
      _._string_scanner$_position = 0;
      _._lastMatchPosition = _._lastMatch = null;
    },
    HotReloadFailedException$: function(_s) {
      return new X.HotReloadFailedException(_s);
    },
    RequireRestarter_create: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(X.RequireRestarter),
        $async$returnValue, reloader, t1, t2, t3;
      var $async$RequireRestarter_create = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = P.String;
              t2 = P.HashMap_HashMap(null, null, null, t1, P.int);
              t3 = P.bool;
              t3 = new P._AsyncCompleter(new P._Future($.Zone__current, [t3]), [t3]);
              t3.complete$0(0);
              reloader = new X.RequireRestarter(t2, t3);
              reloader.set$_dirtyModules(P.SplayTreeSet$(reloader.get$_moduleTopologicalCompare(), null, t1));
              $async$goto = 3;
              return P._asyncAwait(reloader._initialize$0(), $async$RequireRestarter_create);
            case 3:
              // returning from await.
              $async$returnValue = reloader;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$RequireRestarter_create, $async$completer);
    },
    DartLoader: function DartLoader() {
    },
    HotReloadableLibrary: function HotReloadableLibrary() {
    },
    HotReloadFailedException: function HotReloadFailedException(t0) {
      this._s = t0;
    },
    JsError: function JsError() {
    },
    JsMap: function JsMap() {
    },
    LibraryWrapper: function LibraryWrapper(t0) {
      this._internal = t0;
    },
    RequireRestarter: function RequireRestarter(t0, t1) {
      this._moduleOrdering = t0;
      this._dirtyModules = null;
      this._running = t1;
    },
    RequireRestarter__moduleLibraries_closure: function RequireRestarter__moduleLibraries_closure() {
    },
    RequireRestarter__reload_closure: function RequireRestarter__reload_closure(t0) {
      this.$this = t0;
    },
    RequireRestarter__reloadModule_closure: function RequireRestarter__reloadModule_closure(t0, t1, t2) {
      this.$this = t0;
      this.completer = t1;
      this.moduleId = t2;
    },
    RequireRestarter__reloadModule_closure0: function RequireRestarter__reloadModule_closure0(t0, t1) {
      this.completer = t0;
      this.stackTrace = t1;
    }
  },
  V = {
    Int32__decodeDigit: function(c) {
      if (c >= 48 && c <= 57)
        return c - 48;
      else if (c >= 97 && c <= 122)
        return c - 97 + 10;
      else if (c >= 65 && c <= 90)
        return c - 65 + 10;
      else
        return -1;
    },
    Int64__parseRadix: function(s, radix) {
      var i, negative, d0, d1, d2, c, digit, d00, d10,
        t1 = s.length;
      if (0 >= t1)
        return H.ioore(s, 0);
      if (s[0] === "-") {
        i = 1;
        negative = true;
      } else {
        i = 0;
        negative = false;
      }
      for (d0 = 0, d1 = 0, d2 = 0; i < t1; ++i, d1 = d10, d0 = d00) {
        c = C.JSString_methods._codeUnitAt$1(s, i);
        digit = V.Int32__decodeDigit(c);
        if (digit < 0 || digit >= radix)
          throw H.wrapException(P.FormatException$("Non-radix char code: " + c, null, null));
        d0 = d0 * radix + digit;
        d00 = 4194303 & d0;
        d1 = d1 * radix + C.JSInt_methods._shrOtherPositive$1(d0, 22);
        d10 = 4194303 & d1;
        d2 = 1048575 & d2 * radix + (d1 >>> 22);
      }
      if (negative)
        return V.Int64__sub(0, 0, 0, d0, d1, d2);
      return new V.Int64(4194303 & d0, 4194303 & d1, 1048575 & d2);
    },
    Int64_Int64: function(value) {
      var negative, v2, v1, t1, t2, t3;
      if (value < 0) {
        value = -value;
        negative = true;
      } else
        negative = false;
      v2 = C.JSInt_methods._tdivFast$1(value, 17592186044416);
      value -= v2 * 17592186044416;
      v1 = C.JSInt_methods._tdivFast$1(value, 4194304);
      t1 = 4194303 & v1;
      t2 = 1048575 & v2;
      t3 = 4194303 & value - v1 * 4194304;
      return negative ? V.Int64__sub(0, 0, 0, t3, t1, t2) : new V.Int64(t3, t1, t2);
    },
    Int64__promote: function(value) {
      if (value instanceof V.Int64)
        return value;
      else if (typeof value === "number" && Math.floor(value) === value)
        return V.Int64_Int64(value);
      throw H.wrapException(P.ArgumentError$value(value, null, null));
    },
    Int64__toRadixStringUnsigned: function(radix, d0, d1, d2, sign) {
      var d4, d3, fatRadix, chunk1, chunk2, chunk3, q, q0, q1, q2, q3, chunk10, residue;
      if (d0 === 0 && d1 === 0 && d2 === 0)
        return "0";
      d4 = (d2 << 4 | d1 >>> 18) >>> 0;
      d3 = d1 >>> 8 & 1023;
      d2 = (d1 << 2 | d0 >>> 20) & 1023;
      d1 = d0 >>> 10 & 1023;
      d0 &= 1023;
      if (radix >= 37)
        return H.ioore(C.List_WrN, radix);
      fatRadix = C.List_WrN[radix];
      chunk1 = "";
      chunk2 = "";
      chunk3 = "";
      while (true) {
        if (!!(d4 === 0 && d3 === 0))
          break;
        q = C.JSInt_methods.$tdiv(d4, fatRadix);
        d3 += d4 - q * fatRadix << 10 >>> 0;
        q0 = C.JSInt_methods.$tdiv(d3, fatRadix);
        d2 += d3 - q0 * fatRadix << 10 >>> 0;
        q1 = C.JSInt_methods.$tdiv(d2, fatRadix);
        d1 += d2 - q1 * fatRadix << 10 >>> 0;
        q2 = C.JSInt_methods.$tdiv(d1, fatRadix);
        d0 += d1 - q2 * fatRadix << 10 >>> 0;
        q3 = C.JSInt_methods.$tdiv(d0, fatRadix);
        chunk10 = C.JSString_methods.substring$1(C.JSInt_methods.toRadixString$1(fatRadix + (d0 - q3 * fatRadix), radix), 1);
        chunk3 = chunk2;
        chunk2 = chunk1;
        chunk1 = chunk10;
        d3 = q0;
        d4 = q;
        d2 = q1;
        d1 = q2;
        d0 = q3;
      }
      residue = (d2 << 20 >>> 0) + (d1 << 10 >>> 0) + d0;
      return sign + (residue === 0 ? "" : C.JSInt_methods.toRadixString$1(residue, radix)) + chunk1 + chunk2 + chunk3;
    },
    Int64__sub: function(a0, a1, a2, b0, b1, b2) {
      var diff0 = a0 - b0,
        diff1 = a1 - b1 - (C.JSInt_methods._shrOtherPositive$1(diff0, 22) & 1);
      return new V.Int64(4194303 & diff0, 4194303 & diff1, 1048575 & a2 - b2 - (C.JSInt_methods._shrOtherPositive$1(diff1, 22) & 1));
    },
    Int64__shiftRight: function(x, n) {
      var shifted;
      if (x >= 0)
        return C.JSInt_methods.$shr(x, n);
      else {
        shifted = C.JSInt_methods.$shr(x, n);
        return shifted >= 2147483648 ? shifted - 4294967296 : shifted;
      }
    },
    Int64: function Int64(t0, t1, t2) {
      this._l = t0;
      this._m = t1;
      this._h = t2;
    },
    SourceLocation$: function(offset, column, line, sourceUrl) {
      var t1 = line == null,
        t2 = t1 ? 0 : line;
      if (offset < 0)
        H.throwExpression(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (!t1 && line < 0)
        H.throwExpression(P.RangeError$("Line may not be negative, was " + H.S(line) + "."));
      else if (column < 0)
        H.throwExpression(P.RangeError$("Column may not be negative, was " + column + "."));
      return new V.SourceLocation(sourceUrl, offset, t2, column);
    },
    SourceLocation: function SourceLocation(t0, t1, t2, t3) {
      var _ = this;
      _.sourceUrl = t0;
      _.offset = t1;
      _.line = t2;
      _.column = t3;
    },
    SourceSpan: function SourceSpan() {
    },
    SourceSpanBase: function SourceSpanBase() {
    }
  },
  G = {BaseRequest: function BaseRequest() {
    }, BaseRequest_closure: function BaseRequest_closure() {
    }, BaseRequest_closure0: function BaseRequest_closure0() {
    },
    SourceSpanFormatException$: function(message, span, _source) {
      return new G.SourceSpanFormatException(_source, message, span);
    },
    SourceSpanException: function SourceSpanException() {
    },
    SourceSpanFormatException: function SourceSpanFormatException(t0, t1, t2) {
      this._span_exception$_source = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    },
    Library: function Library() {
    },
    Module: function Module(t0) {
      this.libraries = t0;
    }
  },
  T = {BaseResponse: function BaseResponse() {
    }},
  F = {UrlStyle: function UrlStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    Uuid$: function() {
      var options, t2, t1 = {};
      t1.options = options;
      t1.options = null;
      t2 = new F.Uuid();
      t2.Uuid$1$options(t1);
      return t2;
    },
    Uuid: function Uuid() {
      var _ = this;
      _._clockSeq = _._nodeId = _._seedBytes = null;
      _._lastNSecs = _._lastMSecs = 0;
      _._hexToByte = _._byteToHex = null;
    }
  };
  var holders = [C, H, J, P, W, M, S, A, L, E, Y, U, O, R, K, Z, D, Q, B, N, X, V, G, T, F];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return "Instance of '" + H.S(H.Primitives_objectTypeName(receiver)) + "'";
    },
    noSuchMethod$1: function(receiver, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    get$runtimeType: function(receiver) {
      return H.getRuntimeType(receiver);
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $and: function(receiver, other) {
      return H.checkBool(H.boolTypeCheck(other)) && receiver;
    },
    $or: function(receiver, other) {
      return H.checkBool(H.boolTypeCheck(other)) || receiver;
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType: function(receiver) {
      return C.Type_bool_lhE;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_Null_Yyn;
    },
    noSuchMethod$1: function(receiver, invocation) {
      return this.super$Interceptor$noSuchMethod(receiver, H.interceptedTypeCheck(invocation, "$isInvocation"));
    },
    $isNull: 1
  };
  J.JSObject.prototype = {};
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_JSObject_8k0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isPromise: 1,
    $asPromise: function() {
      return [-2];
    },
    $isHotReloadableLibrary: 1,
    $isJsError: 1,
    then$1$1: function(receiver, p0) {
      return receiver.then(p0);
    },
    then$2: function(receiver, p0, p1) {
      return receiver.then(p0, p1);
    },
    get$appDigests: function(obj) {
      return obj.appDigests;
    },
    get$moduleParentsGraph: function(obj) {
      return obj.moduleParentsGraph;
    },
    get$urlToModuleId: function(obj) {
      return obj.urlToModuleId;
    },
    forceLoadModule$3: function(receiver, p0, p1, p2) {
      return receiver.forceLoadModule(p0, p1, p2);
    },
    getModuleLibraries$1: function(receiver, p0) {
      return receiver.getModuleLibraries(p0);
    },
    hot$onChildUpdate$3: function(receiver, p0, p1, p2) {
      return receiver.hot$onChildUpdate(p0, p1, p2);
    },
    hot$onDestroy$0: function(receiver) {
      return receiver.hot$onDestroy();
    },
    hot$onSelfUpdate$1: function(receiver, p0) {
      return receiver.hot$onSelfUpdate(p0);
    },
    get$message: function(obj) {
      return obj.message;
    },
    $get$1: function(receiver, p0) {
      return receiver.get(p0);
    },
    get$keys: function(obj) {
      return obj.keys;
    },
    keys$0: function(receiver) {
      return receiver.keys();
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
    },
    $signature: function() {
      return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    cast$1$0: function(receiver, $R) {
      return new H.CastList(receiver, [H.getTypeArgumentByIndex(receiver, 0), $R]);
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      var t1;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      t1 = receiver.length;
      if (index >= t1)
        throw H.wrapException(P.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2: function(receiver, index, value) {
      var t1;
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insert"));
      t1 = receiver.length;
      if (index > t1)
        throw H.wrapException(P.RangeError$value(index, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2: function(receiver, index, iterable) {
      var t1, insertionLength, end;
      H.assertSubtype(iterable, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insertAll"));
      P.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      t1 = J.getInterceptor$(iterable);
      if (!t1.$isEfficientLengthIterable)
        iterable = t1.toList$0(iterable);
      insertionLength = J.get$length$asx(iterable);
      t1 = receiver.length;
      if (typeof insertionLength !== "number")
        return H.iae(insertionLength);
      this.set$length(receiver, t1 + insertionLength);
      end = index + insertionLength;
      this.setRange$4(receiver, end, receiver.length, receiver, index);
      this.setRange$3(receiver, index, end, iterable);
    },
    removeLast$0: function(receiver) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeLast"));
      if (receiver.length === 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    addAll$1: function(receiver, collection) {
      var t1;
      H.assertSubtype(collection, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("addAll"));
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current(t1));
    },
    forEach$1: function(receiver, f) {
      var end, i;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return new H.MappedListIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    join$1: function(receiver, separator) {
      var i,
        list = new Array(receiver.length);
      list.fixed$length = Array;
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, H.S(receiver[i]));
      return list.join(separator);
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, n, null, H.getTypeArgumentByIndex(receiver, 0));
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(receiver, 0)]});
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, "start", null));
      if (end == null)
        end = receiver.length;
      else if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, t2, otherStart, otherList, i,
        t1 = H.getTypeArgumentByIndex(receiver, 0);
      H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("setRange"));
      P.RangeError_checkValidRange(start, end, receiver.length);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      t2 = J.getInterceptor$(iterable);
      if (!!t2.$isList) {
        H.assertSubtype(iterable, "$isList", [t1], "$asList");
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = t2.skip$1(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      t2 = t1.get$length(otherList);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (otherStart + $length > t2)
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    any$1: function(receiver, test) {
      var end, i;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (H.boolConversionCheck(test.call$1(receiver[i])))
          return true;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    sort$1: function(receiver, compare) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("sort"));
      H.Sort_sort(receiver, compare == null ? J._interceptors_JSArray__compareAny$closure() : compare, t1);
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1 = H.setRuntimeTypeInfo(receiver.slice(0), [H.getTypeArgumentByIndex(receiver, 0)]);
      return t1;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      var _s9_ = "newLength";
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(P.ArgumentError$value(newLength, _s9_, null));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$range(newLength, 0, null, _s9_, null));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $add: function(receiver, other) {
      var totalLength,
        t1 = [H.getTypeArgumentByIndex(receiver, 0)];
      H.assertSubtype(other, "$isList", t1, "$asList");
      totalLength = C.JSInt_methods.$add(receiver.length, other.get$length(other));
      t1 = H.setRuntimeTypeInfo([], t1);
      this.set$length(t1, totalLength);
      this.setRange$3(t1, 0, receiver.length, receiver);
      this.setRange$3(t1, receiver.length, totalLength, other);
      return t1;
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function(_) {
      return this.__interceptors$_current;
    },
    moveNext$0: function() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this.__interceptors$_length !== $length)
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$__interceptors$_current(null);
        return false;
      }
      _this.set$__interceptors$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$__interceptors$_current: function(_current) {
      this.__interceptors$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      H.numTypeCheck(b);
      if (typeof b !== "number")
        throw H.wrapException(H.argumentErrorValue(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0: function(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".round()"));
    },
    toRadixString$1: function(receiver, radix) {
      var result, match, t1, exponent;
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (C.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        H.throwExpression(P.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return H.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return H.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + C.JSString_methods.$mul("0", exponent);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return 536870911 & intValue;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return 536870911 & ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259;
    },
    $add: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver - other;
    },
    $div: function(receiver, other) {
      return receiver / other;
    },
    $mod: function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
    },
    $shl: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      var t1;
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $and: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return (receiver & other) >>> 0;
    },
    $or: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return (receiver | other) >>> 0;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver > other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver >= other;
    },
    get$runtimeType: function(receiver) {
      return C.Type_num_cv7;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$bitLength: function(receiver) {
      var wordBits, i,
        nonneg = receiver < 0 ? -receiver - 1 : receiver;
      for (wordBits = 32; nonneg >= 4294967296;) {
        nonneg = this._tdivFast$1(nonneg, 4294967296);
        wordBits += 32;
      }
      i = nonneg | nonneg >> 1;
      i |= i >> 2;
      i |= i >> 4;
      i |= i >> 8;
      i = (i | i >> 16) >>> 0;
      i = (i >>> 0) - (i >>> 1 & 1431655765);
      i = (i & 858993459) + (i >>> 2 & 858993459);
      i = 252645135 & i + (i >>> 4);
      i += i >>> 8;
      return wordBits - (32 - (i + (i >>> 16) & 63));
    },
    get$runtimeType: function(receiver) {
      return C.Type_int_tHn;
    },
    $isint: 1
  };
  J.JSDouble.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_double_K1J;
    }
  };
  J.JSString.prototype = {
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        H.throwExpression(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    allMatches$2: function(receiver, string, start) {
      if (start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return new H._StringAllMatchesIterable(string, receiver, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    matchAsPrefix$2: function(receiver, string, start) {
      var t1, i;
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      t1 = receiver.length;
      if (start + t1 > string.length)
        return;
      for (i = 0; i < t1; ++i)
        if (this.codeUnitAt$1(string, start + i) !== this._codeUnitAt$1(receiver, i))
          return;
      return new H.StringMatch(start, receiver);
    },
    $add: function(receiver, other) {
      H.stringTypeCheck(other);
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$value(other, null, null));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    splitMapJoin$2$onMatch: function(receiver, from, onMatch) {
      return H.stringReplaceAllFuncUnchecked(receiver, from, H.functionTypeCheck(onMatch, {func: 1, ret: P.String, args: [P.Match]}), null);
    },
    replaceRange$3: function(receiver, start, end, replacement) {
      end = P.RangeError_checkValidRange(start, end, receiver.length);
      if (typeof end !== "number" || Math.floor(end) !== end)
        H.throwExpression(H.argumentErrorValue(end));
      return H.stringReplaceRangeUnchecked(receiver, start, end, replacement);
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      if (typeof index !== "number" || Math.floor(index) !== index)
        H.throwExpression(H.argumentErrorValue(index));
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0 || index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
        H.throwExpression(H.argumentErrorValue(startIndex));
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof startIndex !== "number")
        return startIndex.$lt();
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padRight$1: function(receiver, width) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return receiver + this.$mul(" ", delta);
    },
    indexOf$2: function(receiver, pattern, start) {
      var t1;
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      t1 = receiver.indexOf(pattern, start);
      return t1;
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2: function(receiver, pattern, start) {
      var t1, t2;
      if (start == null)
        start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1: function($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$2: function(receiver, other, startIndex) {
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1: function($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    compareTo$1: function(receiver, other) {
      var t1;
      H.stringTypeCheck(other);
      if (typeof other !== "string")
        throw H.wrapException(H.argumentErrorValue(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    get$runtimeType: function(receiver) {
      return C.Type_String_k8F;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >= receiver.length || false)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1,
    $isString: 1
  };
  H._CastIterableBase.prototype = {
    get$iterator: function(_) {
      return new H.CastIterator(J.get$iterator$ax(this.get$_source()), this.$ti);
    },
    get$length: function(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1: function(_, count) {
      return H.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    elementAt$1: function(_, index) {
      return H.subtypeOfRuntimeTypeCast(J.elementAt$1$ax(this.get$_source(), index), H.getTypeArgumentByIndex(this, 1));
    },
    get$first: function(_) {
      return H.subtypeOfRuntimeTypeCast(J.get$first$ax(this.get$_source()), H.getTypeArgumentByIndex(this, 1));
    },
    contains$1: function(_, other) {
      return J.contains$1$asx(this.get$_source(), other);
    },
    toString$0: function(_) {
      return J.toString$0$(this.get$_source());
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.CastIterator.prototype = {
    moveNext$0: function() {
      return this._source.moveNext$0();
    },
    get$current: function(_) {
      var t1 = this._source;
      return H.subtypeOfRuntimeTypeCast(t1.get$current(t1), H.getTypeArgumentByIndex(this, 1));
    },
    $isIterator: 1,
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.CastIterable.prototype = {
    cast$1$0: function(_, $R) {
      return H.CastIterable_CastIterable(this._source, H.getTypeArgumentByIndex(this, 0), $R);
    },
    get$_source: function() {
      return this._source;
    }
  };
  H._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    }
  };
  H._CastListBase.prototype = {
    $index: function(_, index) {
      return H.subtypeOfRuntimeTypeCast(J.$index$asx(this._source, index), H.getTypeArgumentByIndex(this, 1));
    },
    $indexSet: function(_, index, value) {
      J.$indexSet$ax(this._source, H.intTypeCheck(index), H.subtypeOfRuntimeTypeCast(H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)), H.getTypeArgumentByIndex(this, 0)));
    },
    sort$1: function(_, compare) {
      var t1 = H.getTypeArgumentByIndex(this, 1);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      t1 = compare == null ? null : new H._CastListBase_sort_closure(this, compare);
      J.sort$1$ax(this._source, t1);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $asListMixin: function($S, $T) {
      return [$T];
    },
    $isList: 1,
    $asList: function($S, $T) {
      return [$T];
    }
  };
  H._CastListBase_sort_closure.prototype = {
    call$2: function(v1, v2) {
      var t1 = this.$this,
        t2 = H.getTypeArgumentByIndex(t1, 0);
      H.assertSubtypeOfRuntimeType(v1, t2);
      H.assertSubtypeOfRuntimeType(v2, t2);
      t1 = H.getTypeArgumentByIndex(t1, 1);
      return this.compare.call$2(H.subtypeOfRuntimeTypeCast(v1, t1), H.subtypeOfRuntimeTypeCast(v2, t1));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: function() {
      var t1 = H.getTypeArgumentByIndex(this.$this, 0);
      return {func: 1, ret: P.int, args: [t1, t1]};
    }
  };
  H.CastList.prototype = {
    cast$1$0: function(_, $R) {
      return new H.CastList(this._source, [H.getTypeArgumentByIndex(this, 0), $R]);
    },
    get$_source: function() {
      return this._source;
    }
  };
  H.CastMap.prototype = {
    cast$2$0: function(_, RK, RV) {
      return new H.CastMap(this._source, [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1), RK, RV]);
    },
    containsKey$1: function(_, key) {
      return J.containsKey$1$x(this._source, key);
    },
    $index: function(_, key) {
      return H.subtypeOfRuntimeTypeCast(J.$index$asx(this._source, key), H.getTypeArgumentByIndex(this, 3));
    },
    $indexSet: function(_, key, value) {
      var _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 2));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 3));
      J.$indexSet$ax(_this._source, H.subtypeOfRuntimeTypeCast(key, H.getTypeArgumentByIndex(_this, 0)), H.subtypeOfRuntimeTypeCast(value, H.getTypeArgumentByIndex(_this, 1)));
    },
    addAll$1: function(_, other) {
      var _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 2),
        t2 = H.getTypeArgumentByIndex(_this, 3);
      J.addAll$1$ax(_this._source, new H.CastMap(H.assertSubtype(other, "$isMap", [t1, t2], "$asMap"), [t1, t2, H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1)]));
    },
    forEach$1: function(_, f) {
      var _this = this;
      J.forEach$1$ax(_this._source, new H.CastMap_forEach_closure(_this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 2), H.getTypeArgumentByIndex(_this, 3)]})));
    },
    get$keys: function(_) {
      return H.CastIterable_CastIterable(J.get$keys$x(this._source), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 2));
    },
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._source);
    },
    $asMapMixin: function(SK, SV, $K, $V) {
      return [$K, $V];
    },
    $asMap: function(SK, SV, $K, $V) {
      return [$K, $V];
    }
  };
  H.CastMap_forEach_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(t1, 1));
      this.f.call$2(H.subtypeOfRuntimeTypeCast(key, H.getTypeArgumentByIndex(t1, 2)), H.subtypeOfRuntimeTypeCast(value, H.getTypeArgumentByIndex(t1, 3)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]};
    }
  };
  H.CodeUnits.prototype = {
    get$length: function(_) {
      return this.__internal$_string.length;
    },
    $index: function(_, i) {
      return C.JSString_methods.codeUnitAt$1(this.__internal$_string, i);
    },
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    }
  };
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return new H.ListIterator(_this, _this.get$length(_this), [H.getRuntimeTypeArgument(_this, "ListIterable", 0)]);
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$first: function(_) {
      if (this.get$length(this) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    contains$1: function(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (J.$eq$(_this.elementAt$1(0, i), element))
          return true;
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return false;
    },
    join$1: function(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = H.S(_this.elementAt$1(0, 0));
        if ($length != _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = first;
        i = 1;
        for (; i < $length; ++i) {
          t1 = t1 + separator + H.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        t1 = "";
        for (; i < $length; ++i) {
          t1 += H.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    where$1: function(_, test) {
      return this.super$Iterable$where(0, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "ListIterable", 0)]}));
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "ListIterable", 0);
      return new H.MappedListIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    skip$1: function(_, count) {
      return H.SubListIterable$(this, count, null, H.getRuntimeTypeArgument(this, "ListIterable", 0));
    },
    toList$1$growable: function(_, growable) {
      var result, t2, i, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "ListIterable", 0);
      if (growable) {
        result = H.setRuntimeTypeInfo([], [t1]);
        C.JSArray_methods.set$length(result, _this.get$length(_this));
      } else {
        t2 = _this.get$length(_this);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = new Array(t2);
        t2.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t2, [t1]);
      }
      i = 0;
      while (true) {
        t1 = _this.get$length(_this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        C.JSArray_methods.$indexSet(result, i, _this.elementAt$1(0, i));
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.SubListIterable.prototype = {
    get$_endIndex: function() {
      var t2,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._endOrLength;
      if (t1 != null) {
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = t1 > $length;
      } else
        t2 = true;
      if (t2)
        return $length;
      return t1;
    },
    get$_startIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (typeof $length !== "number")
        return H.iae($length);
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var t2,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (typeof $length !== "number")
        return H.iae($length);
      if (t1 >= $length)
        return 0;
      t2 = this._endOrLength;
      if (t2 == null || t2 >= $length)
        return $length - t1;
      if (typeof t2 !== "number")
        return t2.$sub();
      return t2 - t1;
    },
    elementAt$1: function(_, index) {
      var realIndex, _this = this,
        t1 = _this.get$_startIndex();
      if (typeof t1 !== "number")
        return t1.$add();
      realIndex = t1 + index;
      if (index >= 0) {
        t1 = _this.get$_endIndex();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1: function(_, count) {
      var newStart, t1, _this = this;
      P.RangeError_checkNotNegative(count, "count");
      newStart = _this.__internal$_start + count;
      t1 = _this._endOrLength;
      if (t1 != null && newStart >= t1)
        return new H.EmptyIterable(_this.$ti);
      return H.SubListIterable$(_this.__internal$_iterable, newStart, t1, H.getTypeArgumentByIndex(_this, 0));
    },
    take$1: function(_, count) {
      var t1, t2, newEnd, _this = this;
      P.RangeError_checkNotNegative(count, "count");
      t1 = _this._endOrLength;
      t2 = _this.__internal$_start;
      newEnd = t2 + count;
      if (t1 == null)
        return H.SubListIterable$(_this.__internal$_iterable, t2, newEnd, H.getTypeArgumentByIndex(_this, 0));
      else {
        if (t1 < newEnd)
          return _this;
        return H.SubListIterable$(_this.__internal$_iterable, t2, newEnd, H.getTypeArgumentByIndex(_this, 0));
      }
    },
    toList$1$growable: function(_, growable) {
      var t3, $length, result, i, _this = this,
        start = _this.__internal$_start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        end0 = _this._endOrLength;
      if (end0 != null) {
        if (typeof end !== "number")
          return H.iae(end);
        t3 = end0 < end;
      } else
        t3 = false;
      if (t3)
        end = end0;
      if (typeof end !== "number")
        return end.$sub();
      $length = end - start;
      if ($length < 0)
        $length = 0;
      t3 = new Array($length);
      t3.fixed$length = Array;
      result = H.setRuntimeTypeInfo(t3, _this.$ti);
      for (i = 0; i < $length; ++i) {
        C.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        t3 = t2.get$length(t1);
        if (typeof t3 !== "number")
          return t3.$lt();
        if (t3 < end)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return result;
    }
  };
  H.ListIterator.prototype = {
    get$current: function(_) {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length != $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (typeof $length !== "number")
        return H.iae($length);
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator: function(_) {
      return new H.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti);
    },
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    get$first: function(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    }
  };
  H.MappedIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current(t1)));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current: function(_) {
      return this.__internal$_current;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.MappedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    },
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.WhereIterable.prototype = {
    get$iterator: function(_) {
      return new H.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti);
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return new H.MappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    }
  };
  H.WhereIterator.prototype = {
    moveNext$0: function() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (H.boolConversionCheck(t2.call$1(t1.get$current(t1))))
          return true;
      return false;
    },
    get$current: function(_) {
      var t1 = this._iterator;
      return t1.get$current(t1);
    }
  };
  H.SkipIterable.prototype = {
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(count, "count");
      return new H.SkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    get$iterator: function(_) {
      return new H.SkipIterator(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, this.$ti);
    }
  };
  H.EfficientLengthSkipIterable.prototype = {
    get$length: function(_) {
      var $length,
        t1 = J.get$length$asx(this.__internal$_iterable);
      if (typeof t1 !== "number")
        return t1.$sub();
      $length = t1 - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(count, "count");
      return new H.EfficientLengthSkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  H.SkipIterator.prototype = {
    moveNext$0: function() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function(_) {
      var t1 = this._iterator;
      return t1.get$current(t1);
    }
  };
  H.EmptyIterable.prototype = {
    get$iterator: function(_) {
      return C.C_EmptyIterator;
    },
    get$isEmpty: function(_) {
      return true;
    },
    get$length: function(_) {
      return 0;
    },
    get$first: function(_) {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    elementAt$1: function(_, index) {
      throw H.wrapException(P.RangeError$range(index, 0, 0, "index", null));
    },
    contains$1: function(_, element) {
      return false;
    },
    map$1$1: function(_, f, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $T, args: [H.getTypeArgumentByIndex(this, 0)]});
      return new H.EmptyIterable([$T]);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(count, "count");
      return this;
    },
    toList$1$growable: function(_, growable) {
      var t1 = new Array(0);
      t1.fixed$length = Array;
      t1 = H.setRuntimeTypeInfo(t1, this.$ti);
      return t1;
    }
  };
  H.EmptyIterator.prototype = {
    moveNext$0: function() {
      return false;
    },
    get$current: function(_) {
      return;
    },
    $isIterator: 1
  };
  H.FixedLengthListMixin.prototype = {};
  H.UnmodifiableListMixin.prototype = {
    $indexSet: function(_, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    sort$1: function(_, compare) {
      var t1 = H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    }
  };
  H.UnmodifiableListBase.prototype = {};
  H.ReversedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1),
        t3 = t2.get$length(t1);
      if (typeof t3 !== "number")
        return t3.$sub();
      return t2.elementAt$1(t1, t3 - 1 - index);
    }
  };
  H.Symbol.prototype = {
    get$hashCode: function(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 536870911 & 664597 * J.get$hashCode$(this.__internal$_name);
      this._hashCode = hash;
      return hash;
    },
    toString$0: function(_) {
      return 'Symbol("' + H.S(this.__internal$_name) + '")';
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.Symbol && this.__internal$_name == other.__internal$_name;
    },
    $isSymbol0: 1
  };
  H.__CastListBase__CastIterableBase_ListMixin.prototype = {};
  H.ConstantMapView.prototype = {};
  H.ConstantMap.prototype = {
    cast$2$0: function(_, RK, RV) {
      return P.Map_castFrom(this, H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1), RK, RV);
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $indexSet: function(_, key, val) {
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(val, H.getTypeArgumentByIndex(this, 1));
      return H.ConstantMap__throwUnmodifiable();
    },
    addAll$1: function(_, other) {
      H.assertSubtype(other, "$isMap", this.$ti, "$asMap");
      return H.ConstantMap__throwUnmodifiable();
    },
    map$2$1: function(_, transform, K2, V2) {
      var _this = this,
        result = P.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      _this.forEach$1(0, new H.ConstantMap_map_closure(_this, H.functionTypeCheck(transform, {func: 1, ret: [P.MapEntry, K2, V2], args: [H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1)]}), result));
      return result;
    },
    map$1: function($receiver, transform) {
      return this.map$2$1($receiver, transform, null, null);
    },
    $isMap: 1
  };
  H.ConstantMap_map_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this,
        entry = this.transform.call$2(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(t1, 1)));
      this.result.$indexSet(0, C.JSNull_methods.get$key(entry), entry.get$value(entry));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]};
    }
  };
  H.ConstantStringMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    containsKey$1: function(_, key) {
      if (typeof key !== "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(0, key))
        return;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return this._jsObject[H.stringTypeCheck(key)];
    },
    forEach$1: function(_, f) {
      var keys, t2, i, key, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 1);
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0), t1]});
      keys = _this.__js_helper$_keys;
      for (t2 = keys.length, i = 0; i < t2; ++i) {
        key = keys[i];
        f.call$2(key, H.assertSubtypeOfRuntimeType(_this._fetch$1(key), t1));
      }
    },
    get$keys: function(_) {
      return new H._ConstantMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
    }
  };
  H._ConstantMapKeyIterable.prototype = {
    get$iterator: function(_) {
      var t1 = this._map.__js_helper$_keys;
      return new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    get$length: function(_) {
      return this._map.__js_helper$_keys.length;
    }
  };
  H.JSInvocationMirror.prototype = {
    get$memberName: function() {
      var t1 = this._memberName;
      return t1;
    },
    get$positionalArguments: function() {
      var t1, argumentCount, list, index, _this = this;
      if (_this._kind === 1)
        return C.List_empty;
      t1 = _this._arguments;
      argumentCount = t1.length - _this._namedArgumentNames.length - _this._typeArgumentCount;
      if (argumentCount === 0)
        return C.List_empty;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (index >= t1.length)
          return H.ioore(t1, index);
        list.push(t1[index]);
      }
      return J.JSArray_markUnmodifiableList(list);
    },
    get$namedArguments: function() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, t3, map, i, t4, t5, _this = this;
      if (_this._kind !== 0)
        return C.Map_empty0;
      t1 = _this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = _this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount - _this._typeArgumentCount;
      if (namedArgumentCount === 0)
        return C.Map_empty0;
      t3 = P.Symbol0;
      map = new H.JsLinkedHashMap([t3, null]);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t4 = t1[i];
        t5 = namedArgumentsStartIndex + i;
        if (t5 < 0 || t5 >= t2.length)
          return H.ioore(t2, t5);
        map.$indexSet(0, new H.Symbol(t4), t2[t5]);
      }
      return new H.ConstantMapView(map, [t3, null]);
    },
    $isInvocation: 1
  };
  H.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2: function($name, argument) {
      var t1;
      H.stringTypeCheck($name);
      t1 = this._box_0;
      t1.names = t1.names + "$" + H.S($name);
      C.JSArray_methods.add$1(this.namedArgumentList, $name);
      C.JSArray_methods.add$1(this.$arguments, argument);
      ++t1.argumentCount;
    },
    $signature: 23
  };
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(_this._message);
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + H.S(_this._message) + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + H.S(_this._message) + ")";
    }
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this._message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  H.ExceptionAndStackTrace.prototype = {};
  H.unwrapException_saveStackTrace.prototype = {
    call$1: function(error) {
      if (!!J.getInterceptor$(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex;
      return error;
    },
    $signature: 2
  };
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      var $name = H.Primitives_objectTypeName(this).trim();
      return "Closure '" + $name + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.unminifyOrTag($name) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this._target === other._target && _this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      t1 = H.Primitives_objectHashCode(this._target);
      if (typeof receiverHashCode !== "number")
        return receiverHashCode.$xor();
      return (receiverHashCode ^ t1) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this._name) + "' of " + ("Instance of '" + H.S(H.Primitives_objectTypeName(receiver)) + "'");
    }
  };
  H.TypeErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    }
  };
  H.CastErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    }
  };
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    }
  };
  H._AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed: " + P.Error_safeToString(this.message);
    }
  };
  H.TypeImpl.prototype = {
    get$_typeName: function() {
      var t1 = this.__typeName;
      return t1 == null ? this.__typeName = H.runtimeTypeToString(this._rti) : t1;
    },
    toString$0: function(_) {
      return this.get$_typeName();
    },
    get$hashCode: function(_) {
      var t1 = this.__js_helper$_hashCode;
      return t1 == null ? this.__js_helper$_hashCode = C.JSString_methods.get$hashCode(this.get$_typeName()) : t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.TypeImpl && this.get$_typeName() === other.get$_typeName();
    },
    $isType: 1
  };
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this.__js_helper$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    get$keys: function(_) {
      return new H.LinkedHashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      var _this = this;
      return H.MappedIterable_MappedIterable(_this.get$keys(_this), new H.JsLinkedHashMap_values_closure(_this), H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    containsKey$1: function(_, key) {
      var strings, nums, _this = this;
      if (typeof key === "string") {
        strings = _this._strings;
        if (strings == null)
          return false;
        return _this._containsTableEntry$2(strings, key);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return false;
        return _this._containsTableEntry$2(nums, key);
      } else
        return _this.internalContainsKey$1(key);
    },
    internalContainsKey$1: function(key) {
      var _this = this,
        rest = _this._rest;
      if (rest == null)
        return false;
      return _this.internalFindBucketIndex$2(_this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key)), key) >= 0;
    },
    addAll$1: function(_, other) {
      J.forEach$1$ax(H.assertSubtype(other, "$isMap", this.$ti, "$asMap"), new H.JsLinkedHashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this;
      if (typeof key === "string") {
        strings = _this._strings;
        if (strings == null)
          return;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index, _this = this,
        rest = _this._rest;
      if (rest == null)
        return;
      bucket = _this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key));
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (typeof key === "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      rest = _this._rest;
      if (rest == null)
        rest = _this._rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this._newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2: function(_, key, ifAbsent) {
      var value, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getTypeArgumentByIndex(_this, 1)});
      if (_this.containsKey$1(0, key))
        return _this.$index(0, key);
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      var _this = this;
      if (typeof key === "string")
        return _this._removeHashTableEntry$2(_this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return _this._removeHashTableEntry$2(_this._nums, key);
      else
        return _this.internalRemove$1(key);
    },
    internalRemove$1: function(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this._rest;
      if (rest == null)
        return;
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      _this._unlinkCell$1(cell);
      if (bucket.length === 0)
        _this._deleteTableEntry$2(rest, hash);
      return cell.hashMapCellValue;
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1)]});
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this._newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = this._getTableCell$2(table, key);
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      this._deleteTableEntry$2(table, key);
      return cell.hashMapCellValue;
    },
    _modified$0: function() {
      this._modifications = this._modifications + 1 & 67108863;
    },
    _newLinkedCell$2: function(key, value) {
      var last, _this = this,
        cell = new H.LinkedHashMapCell(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1)));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        last = _this._last;
        cell._previous = last;
        _this._last = last._next = cell;
      }
      ++_this.__js_helper$_length;
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this.__js_helper$_length;
      _this._modified$0();
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    $isLinkedHashMap: 1
  };
  H.JsLinkedHashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this;
      return t1.$index(0, H.assertSubtypeOfRuntimeType(each, H.getTypeArgumentByIndex(t1, 0)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  H.JsLinkedHashMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      t1.$indexSet(0, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(t1, 1)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]};
    }
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this._map.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this._map.__js_helper$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map,
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti);
      t2._cell = t1._first;
      return t2;
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(0, element);
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    get$current: function(_) {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._cell;
        if (t1 == null) {
          _this.set$__js_helper$_current(null);
          return false;
        } else {
          _this.set$__js_helper$_current(t1.hashMapCellKey);
          _this._cell = _this._cell._next;
          return true;
        }
      }
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 2
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 58
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H.stringTypeCheck(tag));
    },
    $signature: 50
  };
  H.JSSyntaxRegExp.prototype = {
    toString$0: function(_) {
      return "RegExp/" + H.S(this.pattern) + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion: function() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = H.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    get$_nativeAnchoredVersion: function() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeAnchoredRegExp = H.JSSyntaxRegExp_makeNative(H.S(_this.pattern) + "|()", t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    firstMatch$1: function(string) {
      var m;
      if (typeof string !== "string")
        H.throwExpression(H.argumentErrorValue(string));
      m = this._nativeRegExp.exec(string);
      if (m == null)
        return;
      return new H._MatchImplementation(m);
    },
    allMatches$2: function(_, string, start) {
      if (start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return new H._AllMatchesIterable(this, string, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    _execGlobal$2: function(string, start) {
      var match,
        regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      return new H._MatchImplementation(match);
    },
    _execAnchored$2: function(string, start) {
      var match,
        regexp = this.get$_nativeAnchoredVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      if (0 >= match.length)
        return H.ioore(match, -1);
      if (match.pop() != null)
        return;
      return new H._MatchImplementation(match);
    },
    matchAsPrefix$2: function(_, string, start) {
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return this._execAnchored$2(string, start);
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  H._MatchImplementation.prototype = {
    get$end: function(_) {
      var t1 = this._match;
      return t1.index + t1[0].length;
    },
    $index: function(_, index) {
      var t1 = this._match;
      if (index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  H._AllMatchesIterable.prototype = {
    get$iterator: function(_) {
      return new H._AllMatchesIterator(this._re, this._string, this._start);
    },
    $asIterable: function() {
      return [P.RegExpMatch];
    }
  };
  H._AllMatchesIterator.prototype = {
    get$current: function(_) {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var t2, t3, match, nextIndex, _this = this,
        t1 = _this._string;
      if (t1 == null)
        return false;
      t2 = _this._nextIndex;
      if (t2 <= t1.length) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(t1, t2);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end(match);
          if (match._match.index === nextIndex) {
            if (t3._nativeRegExp.unicode) {
              t1 = _this._nextIndex;
              t2 = t1 + 1;
              t3 = _this._string;
              if (t2 < t3.length) {
                t1 = J.getInterceptor$s(t3).codeUnitAt$1(t3, t1);
                if (t1 >= 55296 && t1 <= 56319) {
                  t1 = C.JSString_methods.codeUnitAt$1(t3, t2);
                  t1 = t1 >= 56320 && t1 <= 57343;
                } else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this._string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1,
    $asIterator: function() {
      return [P.RegExpMatch];
    }
  };
  H.StringMatch.prototype = {
    get$end: function(_) {
      return this.start + this.pattern.length;
    },
    $index: function(_, g) {
      if (g !== 0)
        H.throwExpression(P.RangeError$value(g, null));
      return this.pattern;
    },
    $isMatch: 1
  };
  H._StringAllMatchesIterable.prototype = {
    get$iterator: function(_) {
      return new H._StringAllMatchesIterator(this._input, this._pattern, this.__js_helper$_index);
    },
    get$first: function(_) {
      var t1 = this._pattern,
        index = this._input.indexOf(t1, this.__js_helper$_index);
      if (index >= 0)
        return new H.StringMatch(index, t1);
      throw H.wrapException(H.IterableElementError_noElement());
    },
    $asIterable: function() {
      return [P.Match];
    }
  };
  H._StringAllMatchesIterator.prototype = {
    moveNext$0: function() {
      var index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = t2.length,
        t4 = _this._input,
        t5 = t4.length;
      if (t1 + t3 > t5) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = t4.indexOf(t2, t1);
      if (index < 0) {
        _this.__js_helper$_index = t5 + 1;
        _this.__js_helper$_current = null;
        return false;
      }
      end = index + t3;
      _this.__js_helper$_current = new H.StringMatch(index, t2);
      _this.__js_helper$_index = end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current: function(_) {
      return this.__js_helper$_current;
    },
    $isIterator: 1,
    $asIterator: function() {
      return [P.Match];
    }
  };
  H.NativeByteBuffer.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_ByteBuffer_RkP;
    },
    $isByteBuffer: 1
  };
  H.NativeTypedData.prototype = {
    _invalidPosition$3: function(receiver, position, $length, $name) {
      if (typeof position !== "number" || Math.floor(position) !== position)
        throw H.wrapException(P.ArgumentError$value(position, $name, "Invalid list position"));
      else
        throw H.wrapException(P.RangeError$range(position, 0, $length, $name, null));
    },
    _checkPosition$3: function(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isTypedData: 1
  };
  H.NativeByteData.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_ByteData_zNC;
    }
  };
  H.NativeTypedArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var count, sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (typeof end !== "number")
        return H.iae(end);
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
      count = end - start;
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
    }
  };
  H.NativeTypedArrayOfDouble.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.doubleTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asFixedLengthListMixin: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    }
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.intTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      H.assertSubtype(iterable, "$isIterable", [P.int], "$asIterable");
      if (!!J.getInterceptor$(iterable).$isNativeTypedArrayOfInt) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asFixedLengthListMixin: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  H.NativeFloat32List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Float32List_LB7;
    },
    sublist$2: function(receiver, start, end) {
      return new Float32Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    }
  };
  H.NativeFloat64List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Float64List_LB7;
    },
    sublist$2: function(receiver, start, end) {
      return new Float64Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    }
  };
  H.NativeInt16List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Int16List_uXf;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Int16Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    }
  };
  H.NativeInt32List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Int32List_O50;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Int32Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    }
  };
  H.NativeInt8List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Int8List_ekJ;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Int8Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    }
  };
  H.NativeUint16List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint16List_2bx;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint16Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isUint16List: 1
  };
  H.NativeUint32List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint32List_2bx;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isUint32List: 1
  };
  H.NativeUint8ClampedList.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint8ClampedList_Jik;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8ClampedArray(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    }
  };
  H.NativeUint8List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint8List_WLA;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 12
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 66
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    },
    _TimerImpl$periodic$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setInterval(H.convertDartClosureToJS(new P._TimerImpl$periodic_closure(this, milliseconds, Date.now(), callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("Periodic timer."));
    },
    $isTimer: 1
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      this.$this._tick = 1;
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._TimerImpl$periodic_closure.prototype = {
    call$0: function() {
      var duration, _this = this,
        t1 = _this.$this,
        tick = t1._tick + 1,
        t2 = _this.milliseconds;
      if (t2 > 0) {
        duration = Date.now() - _this.start;
        if (duration > (tick + 1) * t2)
          tick = C.JSInt_methods.$tdiv(duration, t2);
      }
      t1._tick = tick;
      _this.callback.call$1(t1);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._AsyncAwaitCompleter.prototype = {
    complete$1: function(_, value) {
      var t2, t3, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.futureOrCheck(value, {futureOr: 1, type: t1});
      t2 = !_this.isSync || H.checkSubtype(value, "$isFuture", _this.$ti, "$asFuture");
      t3 = _this._future;
      if (t2)
        t3._asyncComplete$1(value);
      else
        t3._completeWithValue$1(H.assertSubtypeOfRuntimeType(value, t1));
    },
    completeError$2: function(e, st) {
      var t1 = this._future;
      if (this.isSync)
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    },
    $isCompleter: 1
  };
  P._awaitOnObject_closure.prototype = {
    call$1: function(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 8
  };
  P._awaitOnObject_closure0.prototype = {
    call$2: function(error, stackTrace) {
      this.bodyFunction.call$2(1, new H.ExceptionAndStackTrace(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace")));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 49
  };
  P._wrapJsFunctionForAsync_closure.prototype = {
    call$2: function(errorCode, result) {
      this.$protected(H.intTypeCheck(errorCode), result);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 75
  };
  P.Future.prototype = {};
  P._Completer.prototype = {
    completeError$2: function(error, stackTrace) {
      var t1, replacement;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      if (error == null)
        error = new P.NullThrownError();
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        if (error == null)
          error = new P.NullThrownError();
        stackTrace = replacement.stackTrace;
      }
      t1._asyncCompleteError$2(error, stackTrace);
    },
    completeError$1: function(error) {
      return this.completeError$2(error, null);
    },
    $isCompleter: 1
  };
  P._AsyncCompleter.prototype = {
    complete$1: function(_, value) {
      var t1;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(this, 0)});
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncComplete$1(value);
    },
    complete$0: function($receiver) {
      return this.complete$1($receiver, null);
    }
  };
  P._FutureListener.prototype = {
    matchesErrorTest$1: function(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(H.functionTypeCheck(this.callback, {func: 1, ret: P.bool, args: [P.Object]}), asyncError.error, P.bool, P.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback = this.errorCallback,
        t1 = P.Object,
        t2 = {futureOr: 1, type: H.getTypeArgumentByIndex(this, 1)},
        t3 = this.result._zone;
      if (H.functionTypeTest(errorCallback, {func: 1, args: [P.Object, P.StackTrace]}))
        return H.futureOrCheck(t3.runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, null, t1, P.StackTrace), t2);
      else
        return H.futureOrCheck(t3.runUnary$2$2(H.functionTypeCheck(errorCallback, {func: 1, args: [P.Object]}), asyncError.error, null, t1), t2);
    }
  };
  P._Future.prototype = {
    then$1$2$onError: function(_, f, onError, $R) {
      var currentZone, result, t2,
        t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
      currentZone = $.Zone__current;
      if (currentZone !== C.C__RootZone) {
        f = currentZone.registerUnaryCallback$2$1(f, {futureOr: 1, type: $R}, t1);
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      result = new P._Future($.Zone__current, [$R]);
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(result, t2, f, onError, [t1, $R]));
      return result;
    },
    then$1$1: function($receiver, f, $R) {
      return this.then$1$2$onError($receiver, f, null, $R);
    },
    _thenAwait$1$2: function(f, onError, $E) {
      var result,
        t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $E}, args: [t1]});
      result = new P._Future($.Zone__current, [$E]);
      this._addListener$1(new P._FutureListener(result, (onError == null ? 1 : 3) | 16, f, onError, [t1, $E]));
      return result;
    },
    catchError$1: function(onError) {
      var t1 = $.Zone__current,
        result = new P._Future(t1, this.$ti);
      if (t1 !== C.C__RootZone)
        onError = P._registerErrorHandler(onError, t1);
      t1 = H.getTypeArgumentByIndex(this, 0);
      this._addListener$1(new P._FutureListener(result, 2, null, onError, [t1, t1]));
      return result;
    },
    whenComplete$1: function(action) {
      var t1, result;
      H.functionTypeCheck(action, {func: 1});
      t1 = $.Zone__current;
      result = new P._Future(t1, this.$ti);
      if (t1 !== C.C__RootZone)
        action = t1.registerCallback$1$1(action, null);
      t1 = H.getTypeArgumentByIndex(this, 0);
      this._addListener$1(new P._FutureListener(result, 8, action, null, [t1, t1]));
      return result;
    },
    _addListener$1: function(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 1) {
        listener._nextListener = H.interceptedTypeCheck(_this._resultOrListeners, "$is_FutureListener");
        _this._resultOrListeners = listener;
      } else {
        if (t1 === 2) {
          source = H.interceptedTypeCheck(_this._resultOrListeners, "$is_Future");
          t1 = source._state;
          if (t1 < 4) {
            source._addListener$1(listener);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        _this._zone.scheduleMicrotask$1(new P._Future__addListener_closure(_this, listener));
      }
    },
    _prependListeners$1: function(listeners) {
      var t1, existingListeners, cursor, cursor0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 1) {
        existingListeners = H.interceptedTypeCheck(_this._resultOrListeners, "$is_FutureListener");
        cursor = _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          for (; cursor0 = cursor._nextListener, cursor0 != null; cursor = cursor0)
            ;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (t1 === 2) {
          source = H.interceptedTypeCheck(_this._resultOrListeners, "$is_Future");
          t1 = source._state;
          if (t1 < 4) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        _this._zone.scheduleMicrotask$1(new P._Future__prependListeners_closure(_box_0, _this));
      }
    },
    _removeListeners$0: function() {
      var current = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t2, listeners, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.futureOrCheck(value, {futureOr: 1, type: t1});
      t2 = _this.$ti;
      if (H.checkSubtype(value, "$isFuture", t2, "$asFuture"))
        if (H.checkSubtype(value, "$is_Future", t2, null))
          P._Future__chainCoreFuture(value, _this);
        else
          P._Future__chainForeignFuture(value, _this);
      else {
        listeners = _this._removeListeners$0();
        H.assertSubtypeOfRuntimeType(value, t1);
        _this._state = 4;
        _this._resultOrListeners = value;
        P._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners, _this = this;
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 0));
      listeners = _this._removeListeners$0();
      _this._state = 4;
      _this._resultOrListeners = value;
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2: function(error, stackTrace) {
      var listeners, _this = this;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = new P.AsyncError(error, stackTrace);
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeError$1: function(error) {
      return this._completeError$2(error, null);
    },
    _asyncComplete$1: function(value) {
      var _this = this;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(_this, 0)});
      if (H.checkSubtype(value, "$isFuture", _this.$ti, "$asFuture")) {
        _this._chainFuture$1(value);
        return;
      }
      _this._state = 1;
      _this._zone.scheduleMicrotask$1(new P._Future__asyncComplete_closure(_this, value));
    },
    _chainFuture$1: function(value) {
      var _this = this,
        t1 = _this.$ti;
      H.assertSubtype(value, "$isFuture", t1, "$asFuture");
      if (H.checkSubtype(value, "$is_Future", t1, null)) {
        if (value._state === 8) {
          _this._state = 1;
          _this._zone.scheduleMicrotask$1(new P._Future__chainFuture_closure(_this, value));
        } else
          P._Future__chainCoreFuture(value, _this);
        return;
      }
      P._Future__chainForeignFuture(value, _this);
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      this._state = 1;
      this._zone.scheduleMicrotask$1(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var t1 = this.target;
      t1._state = 0;
      t1._complete$1(value);
    },
    $signature: 12
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      this.target._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    },
    "call*": "call$2",
    $defaultValues: function() {
      return [null];
    },
    $signature: 33
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.target._completeError$2(this.e, this.s);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._Future__asyncComplete_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._completeWithValue$1(H.assertSubtypeOfRuntimeType(this.value, H.getTypeArgumentByIndex(t1, 0)));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._Future__chainFuture_closure.prototype = {
    call$0: function() {
      P._Future__chainCoreFuture(this.value, this.$this);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._Future__asyncCompleteError_closure.prototype = {
    call$0: function() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this.listener;
        completeResult = t1.result._zone.run$1$1(H.functionTypeCheck(t1.callback, {func: 1}), null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (_this.hasError) {
          t1 = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError").error;
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        else
          t2.listenerValueOrError = new P.AsyncError(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (!!J.getInterceptor$(completeResult).$isFuture) {
        if (completeResult instanceof P._Future && completeResult._state >= 4) {
          if (completeResult._state === 8) {
            t1 = _this._box_0;
            t1.listenerValueOrError = H.interceptedTypeCheck(completeResult._resultOrListeners, "$isAsyncError");
            t1.listenerHasError = true;
          }
          return;
        }
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = J.then$1$1$x(completeResult, new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), null);
        t1.listenerHasError = false;
      }
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 47
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, t1, t2, t3, t4, exception, _this = this;
      try {
        t1 = _this.listener;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        t3 = H.assertSubtypeOfRuntimeType(_this.sourceResult, t2);
        t4 = H.getTypeArgumentByIndex(t1, 1);
        _this._box_0.listenerValueOrError = t1.result._zone.runUnary$2$2(H.functionTypeCheck(t1.callback, {func: 1, ret: {futureOr: 1, type: t4}, args: [t2]}), t3, {futureOr: 1, type: t4}, t2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this._box_0;
        t1.listenerValueOrError = new P.AsyncError(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, t2, exception, t3, t4, _this = this;
      try {
        asyncError = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        t1 = _this.listener;
        if (H.boolConversionCheck(t1.matchesErrorTest$1(asyncError)) && t1.errorCallback != null) {
          t2 = _this._box_0;
          t2.listenerValueOrError = t1.handleError$1(asyncError);
          t2.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        t2 = t1.error;
        t3 = e;
        t4 = _this._box_0;
        if (t2 == null ? t3 == null : t2 === t3)
          t4.listenerValueOrError = t1;
        else
          t4.listenerValueOrError = new P.AsyncError(e, s);
        t4.listenerHasError = true;
      }
    },
    $signature: 0
  };
  P._AsyncCallbackEntry.prototype = {};
  P.Stream.prototype = {
    map$1: function(_, convert) {
      var t1 = H.getRuntimeTypeArgument(this, "Stream", 0);
      return new P._MapStream(H.functionTypeCheck(convert, {func: 1, ret: null, args: [t1]}), this, [t1, null]);
    },
    get$length: function(_) {
      var t1 = {},
        future = new P._Future($.Zone__current, [P.int]);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1, this), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$first: function(_) {
      var t1 = {},
        future = new P._Future($.Zone__current, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      t1.subscription = null;
      t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
      return future;
    }
  };
  P.Stream_Stream$fromIterable_closure.prototype = {
    call$0: function() {
      var t1 = this.elements;
      return new P._IterablePendingEvents(new J.ArrayIterator(t1, 1, [H.getTypeArgumentByIndex(t1, 0)]), [this.T]);
    },
    $signature: function() {
      return {func: 1, ret: [P._IterablePendingEvents, this.T]};
    }
  };
  P.Stream_length_closure.prototype = {
    call$1: function(_) {
      H.assertSubtypeOfRuntimeType(_, H.getRuntimeTypeArgument(this.$this, "Stream", 0));
      ++this._box_0.count;
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(this.$this, "Stream", 0)]};
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this._box_0.count);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P.Stream_first_closure.prototype = {
    call$1: function(value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this.$this, "Stream", 0));
      P._cancelAndValue(this._box_0.subscription, this.future, value);
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(this.$this, "Stream", 0)]};
    }
  };
  P.Stream_first_closure0.prototype = {
    call$0: function() {
      var e, s, t1, exception, error, stackTrace, replacement;
      try {
        t1 = H.IterableElementError_noElement();
        throw H.wrapException(t1);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        error = e;
        stackTrace = s;
        replacement = $.Zone__current.errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          if (error == null)
            error = new P.NullThrownError();
          stackTrace = replacement.stackTrace;
        }
        this.future._completeError$2(error, stackTrace);
      }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P.StreamSubscription.prototype = {};
  P.StreamView.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      return this._stream.listen$4$cancelOnError$onDone$onError(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "StreamView", 0)]}), cancelOnError, H.functionTypeCheck(onDone, {func: 1, ret: -1}), onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  P.StreamTransformerBase.prototype = {};
  P._StreamController.prototype = {
    get$_pendingEvents: function() {
      var t1, _this = this;
      if ((_this._state & 8) === 0)
        return H.assertSubtype(_this._varData, "$is_PendingEvents", _this.$ti, "$as_PendingEvents");
      t1 = _this.$ti;
      return H.assertSubtype(H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", t1, "$as_StreamControllerAddStreamState").get$varData(), "$is_PendingEvents", t1, "$as_PendingEvents");
    },
    _ensurePendingEvents$0: function() {
      var t1, state, _this = this;
      if ((_this._state & 8) === 0) {
        t1 = _this._varData;
        if (t1 == null)
          t1 = _this._varData = new P._StreamImplEvents(_this.$ti);
        return H.assertSubtype(t1, "$is_StreamImplEvents", _this.$ti, "$as_StreamImplEvents");
      }
      t1 = _this.$ti;
      state = H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", t1, "$as_StreamControllerAddStreamState");
      state.get$varData();
      return H.assertSubtype(state.get$varData(), "$is_StreamImplEvents", t1, "$as_StreamImplEvents");
    },
    get$_subscription: function() {
      var t1, _this = this;
      if ((_this._state & 8) !== 0) {
        t1 = _this.$ti;
        return H.assertSubtype(H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", t1, "$as_StreamControllerAddStreamState").get$varData(), "$is_ControllerSubscription", t1, "$as_ControllerSubscription");
      }
      return H.assertSubtype(_this._varData, "$is_ControllerSubscription", _this.$ti, "$as_ControllerSubscription");
    },
    _badEventState$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add event after closing");
      return new P.StateError("Cannot add event while adding a stream");
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 == null)
        t1 = this._doneFuture = (this._state & 2) !== 0 ? $.$get$Future__nullFuture() : new P._Future($.Zone__current, [null]);
      return t1;
    },
    add$1: function(_, value) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 0));
      t1 = _this._state;
      if (t1 >= 4)
        throw H.wrapException(_this._badEventState$0());
      if ((t1 & 1) !== 0)
        _this._sendData$1(value);
      else if ((t1 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, _this.$ti));
    },
    addError$2: function(error, stackTrace) {
      var replacement, t1, _this = this;
      if (_this._state >= 4)
        throw H.wrapException(_this._badEventState$0());
      if (error == null)
        error = new P.NullThrownError();
      replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        if (error == null)
          error = new P.NullThrownError();
        stackTrace = replacement.stackTrace;
      }
      t1 = _this._state;
      if ((t1 & 1) !== 0)
        _this._sendError$2(error, stackTrace);
      else if ((t1 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, new P._DelayedError(error, stackTrace));
    },
    addError$1: function(error) {
      return this.addError$2(error, null);
    },
    close$0: function(_) {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 4) !== 0)
        return _this._ensureDoneFuture$0();
      if (t1 >= 4)
        throw H.wrapException(_this._badEventState$0());
      t1 = _this._state = t1 | 4;
      if ((t1 & 1) !== 0)
        _this._sendDone$0();
      else if ((t1 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
      return _this._ensureDoneFuture$0();
    },
    _subscribe$4: function(onData, onError, onDone, cancelOnError) {
      var t2, t3, t4, subscription, pendingEvents, addState, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      if ((_this._state & 3) !== 0)
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      t4 = _this.$ti;
      subscription = new P._ControllerSubscription(_this, t2, t3, t4);
      subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t1);
      pendingEvents = _this.get$_pendingEvents();
      t1 = _this._state |= 1;
      if ((t1 & 8) !== 0) {
        addState = H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", t4, "$as_StreamControllerAddStreamState");
        addState.set$varData(subscription);
        addState.resume$0(0);
      } else
        _this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(_this));
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      var result, _this = this,
        t1 = _this.$ti;
      H.assertSubtype(subscription, "$isStreamSubscription", t1, "$asStreamSubscription");
      result = null;
      if ((_this._state & 8) !== 0)
        result = C.JSNull_methods.cancel$0(H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", t1, "$as_StreamControllerAddStreamState"));
      _this._varData = null;
      _this._state = _this._state & 4294967286 | 2;
      t1 = new P._StreamController__recordCancel_complete(_this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    },
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  P._StreamController__subscribe_closure.prototype = {
    call$0: function() {
      P._runGuarded(this.$this.onListen);
    },
    $signature: 1
  };
  P._StreamController__recordCancel_complete.prototype = {
    call$0: function() {
      var t1 = this.$this._doneFuture;
      if (t1 != null && t1._state === 0)
        t1._asyncComplete$1(null);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._AsyncStreamControllerDispatch.prototype = {
    _sendData$1: function(data) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      H.assertSubtypeOfRuntimeType(data, t1);
      this.get$_subscription()._addPending$1(new P._DelayedData(data, [t1]));
    },
    _sendError$2: function(error, stackTrace) {
      this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace));
    },
    _sendDone$0: function() {
      this.get$_subscription()._addPending$1(C.C__DelayedDone);
    }
  };
  P._AsyncStreamController.prototype = {};
  P._ControllerStream.prototype = {
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      return this._controller._subscribe$4(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]}), onError, H.functionTypeCheck(onDone, {func: 1, ret: -1}), cancelOnError);
    },
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof P._ControllerStream && other._controller === this._controller;
    }
  };
  P._ControllerSubscription.prototype = {
    _onCancel$0: function() {
      return this._controller._recordCancel$1(this);
    },
    _onPause$0: function() {
      var t1 = this._controller,
        t2 = H.getTypeArgumentByIndex(t1, 0);
      H.assertSubtype(this, "$isStreamSubscription", [t2], "$asStreamSubscription");
      if ((t1._state & 8) !== 0)
        C.JSNull_methods.pause$0(H.assertSubtype(t1._varData, "$is_StreamControllerAddStreamState", [t2], "$as_StreamControllerAddStreamState"));
      P._runGuarded(t1.onPause);
    },
    _onResume$0: function() {
      var t1 = this._controller,
        t2 = H.getTypeArgumentByIndex(t1, 0);
      H.assertSubtype(this, "$isStreamSubscription", [t2], "$asStreamSubscription");
      if ((t1._state & 8) !== 0)
        C.JSNull_methods.resume$0(H.assertSubtype(t1._varData, "$is_StreamControllerAddStreamState", [t2], "$as_StreamControllerAddStreamState"));
      P._runGuarded(t1.onResume);
    }
  };
  P._StreamSinkWrapper.prototype = {};
  P._BufferingStreamSubscription.prototype = {
    _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
      var t2, handleError, handleDone, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "_BufferingStreamSubscription", 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      t2 = _this._zone;
      _this.set$_async$_onData(t2.registerUnaryCallback$2$1(onData, null, t1));
      handleError = onError == null ? P.async___nullErrorHandler$closure() : onError;
      if (H.functionTypeTest(handleError, {func: 1, ret: -1, args: [P.Object, P.StackTrace]}))
        _this._onError = t2.registerBinaryCallback$3$1(handleError, null, P.Object, P.StackTrace);
      else if (H.functionTypeTest(handleError, {func: 1, ret: -1, args: [P.Object]}))
        _this._onError = t2.registerUnaryCallback$2$1(handleError, null, P.Object);
      else
        H.throwExpression(P.ArgumentError$("handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace."));
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      handleDone = onDone == null ? P.async___nullDoneHandler$closure() : onDone;
      _this.set$_onDone(t2.registerCallback$1$1(handleDone, -1));
    },
    _setPendingEvents$1: function(pendingEvents) {
      var _this = this;
      H.assertSubtype(pendingEvents, "$is_PendingEvents", [H.getRuntimeTypeArgument(_this, "_BufferingStreamSubscription", 0)], "$as_PendingEvents");
      if (pendingEvents == null)
        return;
      _this.set$_pending(pendingEvents);
      if (!pendingEvents.get$isEmpty(pendingEvents)) {
        _this._state = (_this._state | 64) >>> 0;
        _this._pending.schedule$1(_this);
      }
    },
    pause$0: function(_) {
      var t2, t3, _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t2 = (t1 + 128 | 4) >>> 0;
      _this._state = t2;
      if (t1 < 128 && _this._pending != null) {
        t3 = _this._pending;
        if (t3._state === 1)
          t3._state = 3;
      }
      if ((t1 & 4) === 0 && (t2 & 32) === 0)
        _this._guardCallback$1(_this.get$_onPause());
    },
    resume$0: function(_) {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 = _this._state = t1 - 128;
        if (t1 < 128) {
          if ((t1 & 64) !== 0) {
            t1 = _this._pending;
            t1 = !t1.get$isEmpty(t1);
          } else
            t1 = false;
          if (t1)
            _this._pending.schedule$1(_this);
          else {
            t1 = (_this._state & 4294967291) >>> 0;
            _this._state = t1;
            if ((t1 & 32) === 0)
              _this._guardCallback$1(_this.get$_onResume());
          }
        }
      }
    },
    cancel$0: function(_) {
      var _this = this,
        t1 = (_this._state & 4294967279) >>> 0;
      _this._state = t1;
      if ((t1 & 8) === 0)
        _this._cancel$0();
      t1 = _this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    _cancel$0: function() {
      var t2, _this = this,
        t1 = _this._state = (_this._state | 8) >>> 0;
      if ((t1 & 64) !== 0) {
        t2 = _this._pending;
        if (t2._state === 1)
          t2._state = 3;
      }
      if ((t1 & 32) === 0)
        _this.set$_pending(null);
      _this._cancelFuture = _this._onCancel$0();
    },
    _add$1: function(_, data) {
      var t2, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "_BufferingStreamSubscription", 0);
      H.assertSubtypeOfRuntimeType(data, t1);
      t2 = _this._state;
      if ((t2 & 8) !== 0)
        return;
      if (t2 < 32)
        _this._sendData$1(data);
      else
        _this._addPending$1(new P._DelayedData(data, [t1]));
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace));
    },
    _close$0: function() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      _this._state = t1;
      if (t1 < 32)
        _this._sendDone$0();
      else
        _this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: function() {
    },
    _onResume$0: function() {
    },
    _onCancel$0: function() {
      return;
    },
    _addPending$1: function($event) {
      var _this = this,
        t1 = [H.getRuntimeTypeArgument(_this, "_BufferingStreamSubscription", 0)],
        pending = H.assertSubtype(_this._pending, "$is_StreamImplEvents", t1, "$as_StreamImplEvents");
      if (pending == null) {
        pending = new P._StreamImplEvents(t1);
        _this.set$_pending(pending);
      }
      pending.add$1(0, $event);
      t1 = _this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        _this._state = t1;
        if (t1 < 128)
          _this._pending.schedule$1(_this);
      }
    },
    _sendData$1: function(data) {
      var t2, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "_BufferingStreamSubscription", 0);
      H.assertSubtypeOfRuntimeType(data, t1);
      t2 = _this._state;
      _this._state = (t2 | 32) >>> 0;
      _this._zone.runUnaryGuarded$1$2(_this._async$_onData, data, t1);
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t2 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var t1, t2, _this = this;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      t1 = _this._state;
      t2 = new P._BufferingStreamSubscription__sendError_sendError(_this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        _this._state = (t1 | 16) >>> 0;
        _this._cancel$0();
        t1 = _this._cancelFuture;
        if (t1 != null && t1 !== $.$get$Future__nullFuture())
          t1.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        _this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      var t2, _this = this,
        t1 = new P._BufferingStreamSubscription__sendDone_sendDone(_this);
      _this._cancel$0();
      _this._state = (_this._state | 16) >>> 0;
      t2 = _this._cancelFuture;
      if (t2 != null && t2 !== $.$get$Future__nullFuture())
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1, _this = this;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = _this._state;
      _this._state = (t1 | 32) >>> 0;
      callback.call$0();
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, isInputPaused, _this = this;
      if ((_this._state & 64) !== 0) {
        t1 = _this._pending;
        t1 = t1.get$isEmpty(t1);
      } else
        t1 = false;
      if (t1) {
        t1 = _this._state = (_this._state & 4294967231) >>> 0;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t1 = _this._pending;
            t1 = t1 == null || t1.get$isEmpty(t1);
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          _this._state = (_this._state & 4294967291) >>> 0;
      }
      for (; true; wasInputPaused = isInputPaused) {
        t1 = _this._state;
        if ((t1 & 8) !== 0) {
          _this.set$_pending(null);
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        _this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          _this._onPause$0();
        else
          _this._onResume$0();
        _this._state = (_this._state & 4294967263) >>> 0;
      }
      t1 = _this._state;
      if ((t1 & 64) !== 0 && t1 < 128)
        _this._pending.schedule$1(_this);
    },
    set$_async$_onData: function(_onData) {
      this._async$_onData = H.functionTypeCheck(_onData, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0)]});
    },
    set$_onDone: function(_onDone) {
      this._onDone = H.functionTypeCheck(_onDone, {func: 1, ret: -1});
    },
    set$_pending: function(_pending) {
      this._pending = H.assertSubtype(_pending, "$is_PendingEvents", [H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0)], "$as_PendingEvents");
    },
    $isStreamSubscription: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  P._BufferingStreamSubscription__sendError_sendError.prototype = {
    call$0: function() {
      var onError, t3, t4,
        t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      onError = t1._onError;
      t2 = this.error;
      t3 = P.Object;
      t4 = t1._zone;
      if (H.functionTypeTest(onError, {func: 1, ret: -1, args: [P.Object, P.StackTrace]}))
        t4.runBinaryGuarded$2$3(onError, t2, this.stackTrace, t3, P.StackTrace);
      else
        t4.runUnaryGuarded$1$2(H.functionTypeCheck(t1._onError, {func: 1, ret: -1, args: [P.Object]}), t2, t3);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      return this._createSubscription$4(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]}), onError, H.functionTypeCheck(onDone, {func: 1, ret: -1}), true === cancelOnError);
    },
    listen$2$onDone: function(onData, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
    },
    listen$2$onError: function(onData, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return P._BufferingStreamSubscription$(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]}), onError, H.functionTypeCheck(onDone, {func: 1, ret: -1}), cancelOnError, t1);
    }
  };
  P._GeneratedStreamImpl.prototype = {
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      var _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      if (_this._isUsed)
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      _this._isUsed = true;
      t1 = P._BufferingStreamSubscription$(onData, onError, onDone, cancelOnError, t1);
      t1._setPendingEvents$1(_this._pending.call$0());
      return t1;
    }
  };
  P._IterablePendingEvents.prototype = {
    get$isEmpty: function(_) {
      return this._async$_iterator == null;
    },
    handleNext$1: function(dispatch) {
      var hasMore, e, s, t1, exception, _this = this;
      H.assertSubtype(dispatch, "$is_EventDispatch", _this.$ti, "$as_EventDispatch");
      t1 = _this._async$_iterator;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No events pending."));
      hasMore = null;
      try {
        hasMore = t1.moveNext$0();
        if (H.boolConversionCheck(hasMore)) {
          t1 = _this._async$_iterator;
          dispatch._sendData$1(t1.get$current(t1));
        } else {
          _this.set$_async$_iterator(null);
          dispatch._sendDone$0();
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (hasMore == null) {
          _this.set$_async$_iterator(C.C_EmptyIterator);
          dispatch._sendError$2(e, s);
        } else
          dispatch._sendError$2(e, s);
      }
    },
    set$_async$_iterator: function(_iterator) {
      this._async$_iterator = H.assertSubtype(_iterator, "$isIterator", this.$ti, "$asIterator");
    }
  };
  P._DelayedEvent.prototype = {
    set$next: function(_, next) {
      this.next = H.interceptedTypeCheck(next, "$is_DelayedEvent");
    },
    get$next: function(receiver) {
      return this.next;
    }
  };
  P._DelayedData.prototype = {
    perform$1: function(dispatch) {
      H.assertSubtype(dispatch, "$is_EventDispatch", this.$ti, "$as_EventDispatch")._sendData$1(this.value);
    }
  };
  P._DelayedError.prototype = {
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    },
    $as_DelayedEvent: function() {
    }
  };
  P._DelayedDone.prototype = {
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function(_) {
      return;
    },
    set$next: function(_, _0) {
      throw H.wrapException(P.StateError$("No events after a done."));
    },
    $is_DelayedEvent: 1,
    $as_DelayedEvent: function() {
    }
  };
  P._PendingEvents.prototype = {
    schedule$1: function(dispatch) {
      var t1, _this = this;
      H.assertSubtype(dispatch, "$is_EventDispatch", _this.$ti, "$as_EventDispatch");
      t1 = _this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        _this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(_this, dispatch));
      _this._state = 1;
    }
  };
  P._PendingEvents_schedule_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._StreamImplEvents.prototype = {
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var _this = this,
        t1 = _this.lastPendingEvent;
      if (t1 == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else {
        t1.set$next(0, $event);
        _this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1, _this = this;
      H.assertSubtype(dispatch, "$is_EventDispatch", _this.$ti, "$as_EventDispatch");
      $event = _this.firstPendingEvent;
      t1 = $event.get$next($event);
      _this.firstPendingEvent = t1;
      if (t1 == null)
        _this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    }
  };
  P._StreamIterator.prototype = {
    get$current: function(_) {
      var _this = this;
      if (_this._subscription != null && _this._isPaused)
        return H.assertSubtypeOfRuntimeType(_this._stateData, H.getTypeArgumentByIndex(_this, 0));
      return;
    },
    moveNext$0: function() {
      var future, _this = this,
        t1 = _this._subscription;
      if (t1 != null) {
        if (_this._isPaused) {
          future = new P._Future($.Zone__current, [P.bool]);
          _this._stateData = future;
          _this._isPaused = false;
          t1.resume$0(0);
          return future;
        }
        throw H.wrapException(P.StateError$("Already waiting for next."));
      }
      return _this._initializeOrDone$0();
    },
    _initializeOrDone$0: function() {
      var _this = this,
        stateData = _this._stateData;
      if (stateData != null) {
        _this._subscription = H.assertSubtype(stateData, "$isStream", _this.$ti, "$asStream").listen$4$cancelOnError$onDone$onError(_this.get$_async$_onData(), true, _this.get$_onDone(), _this.get$_onError());
        return _this._stateData = new P._Future($.Zone__current, [P.bool]);
      }
      return $.$get$Future__falseFuture();
    },
    cancel$0: function(_) {
      var _this = this,
        subscription = H.assertSubtype(_this._subscription, "$isStreamSubscription", _this.$ti, "$asStreamSubscription"),
        stateData = _this._stateData;
      _this._stateData = null;
      if (subscription != null) {
        _this._subscription = null;
        if (!_this._isPaused)
          H.assertSubtype(stateData, "$is_Future", [P.bool], "$as_Future")._asyncComplete$1(false);
        return subscription.cancel$0(0);
      }
      return $.$get$Future__nullFuture();
    },
    _async$_onData$1: function(data) {
      var moveNextFuture, t1, _this = this;
      H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(_this, 0));
      moveNextFuture = H.assertSubtype(_this._stateData, "$is_Future", [P.bool], "$as_Future");
      _this._stateData = data;
      _this._isPaused = true;
      moveNextFuture._complete$1(true);
      t1 = _this._subscription;
      if (t1 != null && _this._isPaused)
        t1.pause$0(0);
    },
    _onError$2: function(error, stackTrace) {
      var moveNextFuture;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      moveNextFuture = H.assertSubtype(this._stateData, "$is_Future", [P.bool], "$as_Future");
      this._stateData = this._subscription = null;
      moveNextFuture._completeError$2(error, stackTrace);
    },
    _onError$1: function(error) {
      return this._onError$2(error, null);
    },
    _onDone$0: function() {
      var moveNextFuture = H.assertSubtype(this._stateData, "$is_Future", [P.bool], "$as_Future");
      this._stateData = this._subscription = null;
      moveNextFuture._complete$1(false);
    }
  };
  P._cancelAndValue_closure.prototype = {
    call$0: function() {
      return this.future._complete$1(this.value);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._ForwardingStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t2, t3, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 1);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      cancelOnError = true === cancelOnError;
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      t3 = new P._ForwardingStreamSubscription(_this, t2, t3, _this.$ti);
      t3._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t1);
      t3.set$_subscription(_this._async$_source.listen$3$onDone$onError(t3.get$_handleData(), t3.get$_handleDone(), t3.get$_handleError()));
      return t3;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    $asStream: function($S, $T) {
      return [$T];
    }
  };
  P._ForwardingStreamSubscription.prototype = {
    _add$1: function(_, data) {
      H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(this, 1));
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_add(0, data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
    },
    _onPause$0: function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0(0);
    },
    _onResume$0: function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0(0);
    },
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this.set$_subscription(null);
        return t1.cancel$0(0);
      }
      return;
    },
    _handleData$1: function(data) {
      this._stream._handleData$2(H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(this, 0)), this);
    },
    _handleError$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      H.assertSubtype(this, "$is_EventSink", [H.getTypeArgumentByIndex(this._stream, 1)], "$as_EventSink")._addError$2(error, stackTrace);
    },
    _handleDone$0: function() {
      H.assertSubtype(this, "$is_EventSink", [H.getTypeArgumentByIndex(this._stream, 1)], "$as_EventSink")._close$0();
    },
    set$_subscription: function(_subscription) {
      this._subscription = H.assertSubtype(_subscription, "$isStreamSubscription", [H.getTypeArgumentByIndex(this, 0)], "$asStreamSubscription");
    },
    $asStreamSubscription: function($S, $T) {
      return [$T];
    },
    $as_EventSink: function($S, $T) {
      return [$T];
    },
    $as_EventDispatch: function($S, $T) {
      return [$T];
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    }
  };
  P._MapStream.prototype = {
    _handleData$2: function(inputEvent, sink) {
      var outputEvent, e, s, exception, error, stackTrace, replacement;
      H.assertSubtypeOfRuntimeType(inputEvent, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtype(sink, "$is_EventSink", [H.getTypeArgumentByIndex(this, 1)], "$as_EventSink");
      outputEvent = null;
      try {
        outputEvent = this._transform.call$1(inputEvent);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        error = e;
        stackTrace = s;
        replacement = $.Zone__current.errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          if (error == null)
            error = new P.NullThrownError();
          stackTrace = replacement.stackTrace;
        }
        sink._addError$2(error, stackTrace);
        return;
      }
      J._add$1$z(sink, outputEvent);
    }
  };
  P.Timer.prototype = {};
  P.AsyncError.prototype = {
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1
  };
  P._ZoneFunction.prototype = {};
  P.ZoneSpecification.prototype = {};
  P._ZoneSpecification.prototype = {$isZoneSpecification: 1};
  P.ZoneDelegate.prototype = {};
  P.Zone.prototype = {};
  P._ZoneDelegate.prototype = {
    handleUncaughtError$3: function(zone, error, stackTrace) {
      var implementation, implZone;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      implementation = this._delegationTarget.get$_handleUncaughtError();
      implZone = implementation.zone;
      return implementation.$function.call$5(implZone, P._parentDelegate(implZone), zone, error, stackTrace);
    },
    $isZoneDelegate: 1
  };
  P._Zone.prototype = {$isZone: 1};
  P._CustomZone.prototype = {
    get$_delegate: function() {
      var t1 = this._delegateCache;
      if (t1 != null)
        return t1;
      return this._delegateCache = new P._ZoneDelegate(this);
    },
    get$errorZone: function() {
      return this._handleUncaughtError.zone;
    },
    runGuarded$1: function(f) {
      var e, s, exception;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      try {
        this.run$1$1(f, -1);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      try {
        this.runUnary$2$2(f, arg, -1, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    runBinaryGuarded$2$3: function(f, arg1, arg2, T1, T2) {
      var e, s, exception;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      try {
        this.runBinary$3$3(f, arg1, arg2, -1, T1, T2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    bindCallback$1$1: function(f, $R) {
      return new P._CustomZone_bindCallback_closure(this, this.registerCallback$1$1(H.functionTypeCheck(f, {func: 1, ret: $R}), $R), $R);
    },
    bindUnaryCallback$2$1: function(f, $R, $T) {
      return new P._CustomZone_bindUnaryCallback_closure(this, this.registerUnaryCallback$2$1(f, $R, $T), $T, $R);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._CustomZone_bindCallbackGuarded_closure(this, this.registerCallback$1$1(H.functionTypeCheck(f, {func: 1, ret: -1}), -1));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._CustomZone_bindUnaryCallbackGuarded_closure(this, this.registerUnaryCallback$2$1(H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]}), -1, $T), $T);
    },
    $index: function(_, key) {
      var value,
        t1 = this._async$_map,
        result = t1.$index(0, key);
      if (result != null || t1.containsKey$1(0, key))
        return result;
      value = this.parent.$index(0, key);
      if (value != null)
        t1.$indexSet(0, key, value);
      return value;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      var implementation, t1, parentDelegate;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      implementation = this._handleUncaughtError;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$5(t1, parentDelegate, this, error, stackTrace);
    },
    fork$2$specification$zoneValues: function(specification, zoneValues) {
      var implementation = this._fork,
        t1 = implementation.zone,
        parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$5(t1, parentDelegate, this, specification, zoneValues);
    },
    run$1$1: function(f, $R) {
      var implementation, t1, parentDelegate;
      H.functionTypeCheck(f, {func: 1, ret: $R});
      implementation = this._run;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return H.functionTypeCheck(implementation.$function, {func: 1, bounds: [P.Object], ret: 0, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0}]}).call$1$4(t1, parentDelegate, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      var implementation, t1, parentDelegate;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      implementation = this._runUnary;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return H.functionTypeCheck(implementation.$function, {func: 1, bounds: [P.Object, P.Object], ret: 0, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1]}, 1]}).call$2$5(t1, parentDelegate, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      var implementation, t1, parentDelegate;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      implementation = this._runBinary;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return H.functionTypeCheck(implementation.$function, {func: 1, bounds: [P.Object, P.Object, P.Object], ret: 0, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1, 2]}, 1, 2]}).call$3$6(t1, parentDelegate, this, f, arg1, arg2, $R, T1, T2);
    },
    registerCallback$1$1: function(callback, $R) {
      var implementation, t1, parentDelegate;
      H.functionTypeCheck(callback, {func: 1, ret: $R});
      implementation = this._registerCallback;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return H.functionTypeCheck(implementation.$function, {func: 1, bounds: [P.Object], ret: {func: 1, ret: 0}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0}]}).call$1$4(t1, parentDelegate, this, callback, $R);
    },
    registerUnaryCallback$2$1: function(callback, $R, $T) {
      var implementation, t1, parentDelegate;
      H.functionTypeCheck(callback, {func: 1, ret: $R, args: [$T]});
      implementation = this._registerUnaryCallback;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return H.functionTypeCheck(implementation.$function, {func: 1, bounds: [P.Object, P.Object], ret: {func: 1, ret: 0, args: [1]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1]}]}).call$2$4(t1, parentDelegate, this, callback, $R, $T);
    },
    registerBinaryCallback$3$1: function(callback, $R, T1, T2) {
      var implementation, t1, parentDelegate;
      H.functionTypeCheck(callback, {func: 1, ret: $R, args: [T1, T2]});
      implementation = this._registerBinaryCallback;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return H.functionTypeCheck(implementation.$function, {func: 1, bounds: [P.Object, P.Object, P.Object], ret: {func: 1, ret: 0, args: [1, 2]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1, 2]}]}).call$3$4(t1, parentDelegate, this, callback, $R, T1, T2);
    },
    errorCallback$2: function(error, stackTrace) {
      var parentDelegate,
        implementation = this._errorCallback,
        implementationZone = implementation.zone;
      if (implementationZone === C.C__RootZone)
        return;
      parentDelegate = P._parentDelegate(implementationZone);
      return implementation.$function.call$5(implementationZone, parentDelegate, this, error, stackTrace);
    },
    scheduleMicrotask$1: function(f) {
      var implementation, t1, parentDelegate;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      implementation = this._scheduleMicrotask;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$4(t1, parentDelegate, this, f);
    },
    print$1: function(_, line) {
      var implementation = this._print,
        t1 = implementation.zone,
        parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$4(t1, parentDelegate, this, line);
    },
    set$_run: function(_run) {
      this._run = H.assertSubtype(_run, "$is_ZoneFunction", [P.Function], "$as_ZoneFunction");
    },
    set$_runUnary: function(_runUnary) {
      this._runUnary = H.assertSubtype(_runUnary, "$is_ZoneFunction", [P.Function], "$as_ZoneFunction");
    },
    set$_runBinary: function(_runBinary) {
      this._runBinary = H.assertSubtype(_runBinary, "$is_ZoneFunction", [P.Function], "$as_ZoneFunction");
    },
    set$_registerCallback: function(_registerCallback) {
      this._registerCallback = H.assertSubtype(_registerCallback, "$is_ZoneFunction", [P.Function], "$as_ZoneFunction");
    },
    set$_registerUnaryCallback: function(_registerUnaryCallback) {
      this._registerUnaryCallback = H.assertSubtype(_registerUnaryCallback, "$is_ZoneFunction", [P.Function], "$as_ZoneFunction");
    },
    set$_registerBinaryCallback: function(_registerBinaryCallback) {
      this._registerBinaryCallback = H.assertSubtype(_registerBinaryCallback, "$is_ZoneFunction", [P.Function], "$as_ZoneFunction");
    },
    set$_errorCallback: function(_errorCallback) {
      this._errorCallback = H.assertSubtype(_errorCallback, "$is_ZoneFunction", [{func: 1, ret: P.AsyncError, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Object, P.StackTrace]}], "$as_ZoneFunction");
    },
    set$_scheduleMicrotask: function(_scheduleMicrotask) {
      this._scheduleMicrotask = H.assertSubtype(_scheduleMicrotask, "$is_ZoneFunction", [{func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: -1}]}], "$as_ZoneFunction");
    },
    set$_createTimer: function(_createTimer) {
      this._createTimer = H.assertSubtype(_createTimer, "$is_ZoneFunction", [{func: 1, ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: 1, ret: -1}]}], "$as_ZoneFunction");
    },
    set$_createPeriodicTimer: function(_createPeriodicTimer) {
      this._createPeriodicTimer = H.assertSubtype(_createPeriodicTimer, "$is_ZoneFunction", [{func: 1, ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: 1, ret: -1, args: [P.Timer]}]}], "$as_ZoneFunction");
    },
    set$_print: function(_print) {
      this._print = H.assertSubtype(_print, "$is_ZoneFunction", [{func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, P.String]}], "$as_ZoneFunction");
    },
    set$_fork: function(_fork) {
      this._fork = H.assertSubtype(_fork, "$is_ZoneFunction", [{func: 1, ret: P.Zone, args: [P.Zone, P.ZoneDelegate, P.Zone, P.ZoneSpecification, [P.Map,,,]]}], "$as_ZoneFunction");
    },
    set$_handleUncaughtError: function(_handleUncaughtError) {
      this._handleUncaughtError = H.assertSubtype(_handleUncaughtError, "$is_ZoneFunction", [{func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Object, P.StackTrace]}], "$as_ZoneFunction");
    },
    get$_run: function() {
      return this._run;
    },
    get$_runUnary: function() {
      return this._runUnary;
    },
    get$_runBinary: function() {
      return this._runBinary;
    },
    get$_registerCallback: function() {
      return this._registerCallback;
    },
    get$_registerUnaryCallback: function() {
      return this._registerUnaryCallback;
    },
    get$_registerBinaryCallback: function() {
      return this._registerBinaryCallback;
    },
    get$_errorCallback: function() {
      return this._errorCallback;
    },
    get$_scheduleMicrotask: function() {
      return this._scheduleMicrotask;
    },
    get$_createTimer: function() {
      return this._createTimer;
    },
    get$_createPeriodicTimer: function() {
      return this._createPeriodicTimer;
    },
    get$_print: function() {
      return this._print;
    },
    get$_fork: function() {
      return this._fork;
    },
    get$_handleUncaughtError: function() {
      return this._handleUncaughtError;
    },
    get$parent: function(receiver) {
      return this.parent;
    },
    get$_async$_map: function() {
      return this._async$_map;
    }
  };
  P._CustomZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.registered, this.R);
    },
    $signature: function() {
      return {func: 1, ret: this.R};
    }
  };
  P._CustomZone_bindUnaryCallback_closure.prototype = {
    call$1: function(arg) {
      var _this = this,
        t1 = _this.T;
      return _this.$this.runUnary$2$2(_this.registered, H.assertSubtypeOfRuntimeType(arg, t1), _this.R, t1);
    },
    $signature: function() {
      return {func: 1, ret: this.R, args: [this.T]};
    }
  };
  P._CustomZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.registered);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._CustomZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.registered, H.assertSubtypeOfRuntimeType(arg, t1), t1);
    },
    $signature: function() {
      return {func: 1, ret: -1, args: [this.T]};
    }
  };
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      var error,
        t1 = this._box_0,
        t2 = t1.error;
      t1 = t2 == null ? t1.error = new P.NullThrownError() : t2;
      t2 = this.stackTrace;
      if (t2 == null)
        throw H.wrapException(t1);
      error = H.wrapException(t1);
      error.stack = t2.toString$0(0);
      throw error;
    },
    $signature: 1
  };
  P._RootZone.prototype = {
    get$_run: function() {
      return C._ZoneFunction__RootZone__rootRun;
    },
    get$_runUnary: function() {
      return C._ZoneFunction__RootZone__rootRunUnary;
    },
    get$_runBinary: function() {
      return C._ZoneFunction__RootZone__rootRunBinary;
    },
    get$_registerCallback: function() {
      return C._ZoneFunction__RootZone__rootRegisterCallback;
    },
    get$_registerUnaryCallback: function() {
      return C._ZoneFunction_Eeh;
    },
    get$_registerBinaryCallback: function() {
      return C._ZoneFunction_7G2;
    },
    get$_errorCallback: function() {
      return C._ZoneFunction__RootZone__rootErrorCallback;
    },
    get$_scheduleMicrotask: function() {
      return C._ZoneFunction__RootZone__rootScheduleMicrotask;
    },
    get$_createTimer: function() {
      return C._ZoneFunction__RootZone__rootCreateTimer;
    },
    get$_createPeriodicTimer: function() {
      return C._ZoneFunction_3bB;
    },
    get$_print: function() {
      return C._ZoneFunction__RootZone__rootPrint;
    },
    get$_fork: function() {
      return C._ZoneFunction__RootZone__rootFork;
    },
    get$_handleUncaughtError: function() {
      return C._ZoneFunction_NMc;
    },
    get$parent: function(_) {
      return;
    },
    get$_async$_map: function() {
      return $.$get$_RootZone__rootMap();
    },
    get$_delegate: function() {
      var t1 = $._RootZone__rootDelegate;
      if (t1 != null)
        return t1;
      return $._RootZone__rootDelegate = new P._ZoneDelegate(this);
    },
    get$errorZone: function() {
      return this;
    },
    runGuarded$1: function(f) {
      var e, s, exception, _null = null;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(_null, _null, this, f, -1);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception, _null = null;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(_null, _null, this, f, arg, -1, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    runBinaryGuarded$2$3: function(f, arg1, arg2, T1, T2) {
      var e, s, exception, _null = null;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$2(arg1, arg2);
          return;
        }
        P._rootRunBinary(_null, _null, this, f, arg1, arg2, -1, T1, T2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    bindCallback$1$1: function(f, $R) {
      return new P._RootZone_bindCallback_closure(this, H.functionTypeCheck(f, {func: 1, ret: $R}), $R);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1}));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._RootZone_bindUnaryCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]}), $T);
    },
    $index: function(_, key) {
      return;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      P._rootHandleUncaughtError(null, null, this, error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
    },
    fork$2$specification$zoneValues: function(specification, zoneValues) {
      return P._rootFork(null, null, this, specification, zoneValues);
    },
    run$1$1: function(f, $R) {
      H.functionTypeCheck(f, {func: 1, ret: $R});
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerCallback$1$1: function(f, $R) {
      return H.functionTypeCheck(f, {func: 1, ret: $R});
    },
    registerUnaryCallback$2$1: function(f, $R, $T) {
      return H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
    },
    registerBinaryCallback$3$1: function(f, $R, T1, T2) {
      return H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
    },
    errorCallback$2: function(error, stackTrace) {
      return;
    },
    scheduleMicrotask$1: function(f) {
      P._rootScheduleMicrotask(null, null, this, H.functionTypeCheck(f, {func: 1, ret: -1}));
    },
    print$1: function(_, line) {
      H.printString(line);
    }
  };
  P._RootZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature: function() {
      return {func: 1, ret: this.R};
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, H.assertSubtypeOfRuntimeType(arg, t1), t1);
    },
    $signature: function() {
      return {func: 1, ret: -1, args: [this.T]};
    }
  };
  P.runZoned_closure.prototype = {
    call$5: function($self, $parent, zone, error, stackTrace) {
      var e, s, t1, t2, t3, exception;
      try {
        t1 = this._box_0;
        t2 = -1;
        t3 = P.Object;
        if (t1.binaryOnError != null)
          $self.get$parent($self).runBinary$3$3(t1.binaryOnError, error, stackTrace, t2, t3, P.StackTrace);
        else
          $self.get$parent($self).runUnary$2$2(t1.unaryOnError, error, t2, t3);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = e;
        if (t1 == null ? error == null : t1 === error)
          $parent.handleUncaughtError$3(zone, error, stackTrace);
        else
          $parent.handleUncaughtError$3(zone, e, s);
      }
    },
    $signature: 42
  };
  P._HashMap.prototype = {
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$keys: function(_) {
      return new P._HashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
    },
    containsKey$1: function(_, key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key === "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, key), key) >= 0;
    },
    addAll$1: function(_, other) {
      J.forEach$1$ax(H.assertSubtype(other, "$isMap", this.$ti, "$asMap"), new P._HashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, t1, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        t1 = strings == null ? null : P._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (typeof key === "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        t1 = nums == null ? null : P._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(0, key);
    },
    _get$1: function(_, key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return;
      bucket = this._getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (typeof key === "string" && key !== "__proto__") {
        strings = _this._collection$_strings;
        _this._collection$_addHashTableEntry$3(strings == null ? _this._collection$_strings = P._HashMap__newHashTable() : strings, key, value);
      } else if (typeof key === "number" && (key & 1073741823) === key) {
        nums = _this._collection$_nums;
        _this._collection$_addHashTableEntry$3(nums == null ? _this._collection$_nums = P._HashMap__newHashTable() : nums, key, value);
      } else
        _this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._HashMap__newHashTable();
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        ++_this._collection$_length;
        _this._keys = null;
      } else {
        index = _this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++_this._collection$_length;
          _this._keys = null;
        }
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [t1, H.getTypeArgumentByIndex(_this, 1)]});
      keys = _this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(H.assertSubtypeOfRuntimeType(key, t1), _this.$index(0, key));
        if (keys !== _this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0: function() {
      var result, strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        t1 = _this._keys;
      if (t1 != null)
        return t1;
      result = new Array(_this._collection$_length);
      result.fixed$length = Array;
      strings = _this._collection$_strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._keys = result;
    },
    _collection$_addHashTableEntry$3: function(table, key, value) {
      var _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (table[key] == null) {
        ++_this._collection$_length;
        _this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    _getBucket$2: function(table, key) {
      return table[this._computeHashCode$1(key)];
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq$(bucket[i], key))
          return i;
      return -1;
    },
    $isHashMap: 1
  };
  P._HashMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      t1.$indexSet(0, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(t1, 1)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]};
    }
  };
  P._IdentityHashMap.prototype = {
    _computeHashCode$1: function(key) {
      return H.objectHashCode(key) & 1073741823;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  P._CustomHashMap.prototype = {
    $index: function(_, key) {
      if (!H.boolConversionCheck(this._validKey.call$1(key)))
        return;
      return this.super$_HashMap$_get(0, key);
    },
    $indexSet: function(_, key, value) {
      this.super$_HashMap$_set(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
    },
    containsKey$1: function(_, key) {
      if (!H.boolConversionCheck(this._validKey.call$1(key)))
        return false;
      return this.super$_HashMap$_containsKey(key);
    },
    _computeHashCode$1: function(key) {
      return this._hashCode.call$1(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0))) & 1073741823;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, t1, t2, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = H.getTypeArgumentByIndex(this, 0), t2 = this._equals, i = 0; i < $length; i += 2)
        if (H.boolConversionCheck(t2.call$2(bucket[i], H.assertSubtypeOfRuntimeType(key, t1))))
          return i;
      return -1;
    }
  };
  P._CustomHashMap_closure.prototype = {
    call$1: function(v) {
      return H.checkSubtypeOfRuntimeType(v, this.K);
    },
    $signature: 5
  };
  P._HashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this._collection$_map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._collection$_map;
      return new P._HashMapKeyIterator(t1, t1._computeKeys$0(), this.$ti);
    },
    contains$1: function(_, element) {
      return this._collection$_map.containsKey$1(0, element);
    }
  };
  P._HashMapKeyIterator.prototype = {
    get$current: function(_) {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        keys = _this._keys,
        offset = _this._offset,
        t1 = _this._collection$_map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(keys[offset]);
        _this._offset = offset + 1;
        return true;
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P._LinkedIdentityHashMap.prototype = {
    internalComputeHashCode$1: function(key) {
      return H.objectHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i].hashMapCellKey;
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  P._LinkedCustomHashMap.prototype = {
    $index: function(_, key) {
      if (!H.boolConversionCheck(this._validKey.call$1(key)))
        return;
      return this.super$JsLinkedHashMap$internalGet(key);
    },
    $indexSet: function(_, key, value) {
      this.super$JsLinkedHashMap$internalSet(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
    },
    containsKey$1: function(_, key) {
      if (!H.boolConversionCheck(this._validKey.call$1(key)))
        return false;
      return this.super$JsLinkedHashMap$internalContainsKey(key);
    },
    remove$1: function(_, key) {
      if (!H.boolConversionCheck(this._validKey.call$1(key)))
        return;
      return this.super$JsLinkedHashMap$internalRemove(key);
    },
    internalComputeHashCode$1: function(key) {
      return this._hashCode.call$1(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0))) & 1073741823;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, t1, t2, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = H.getTypeArgumentByIndex(this, 0), t2 = this._equals, i = 0; i < $length; ++i)
        if (H.boolConversionCheck(t2.call$2(H.assertSubtypeOfRuntimeType(bucket[i].hashMapCellKey, t1), H.assertSubtypeOfRuntimeType(key, t1))))
          return i;
      return -1;
    }
  };
  P._LinkedCustomHashMap_closure.prototype = {
    call$1: function(v) {
      return H.checkSubtypeOfRuntimeType(v, this.K);
    },
    $signature: 5
  };
  P._HashSet.prototype = {
    get$iterator: function(_) {
      return new P._HashSetIterator(this, this._computeElements$0(), this.$ti);
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        return strings == null ? false : strings[object] != null;
      } else if (typeof object === "number" && (object & 1073741823) === object) {
        nums = this._collection$_nums;
        return nums == null ? false : nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, object), object) >= 0;
    },
    add$1: function(_, element) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      if (typeof element === "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = P._HashSet__newHashTable() : strings, element);
      } else if (typeof element === "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = P._HashSet__newHashTable() : nums, element);
      } else
        return _this._collection$_add$1(0, element);
    },
    _collection$_add$1: function(_, element) {
      var rest, hash, bucket, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._HashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      ++_this._collection$_length;
      _this._elements = null;
      return true;
    },
    addAll$1: function(_, objects) {
      var t1;
      H.assertSubtype(objects, "$isIterable", this.$ti, "$asIterable");
      for (t1 = objects.get$iterator(objects); t1.moveNext$0();)
        this.add$1(0, t1.get$current(t1));
    },
    remove$1: function(_, object) {
      var _this = this;
      if (typeof object === "string" && object !== "__proto__")
        return _this._collection$_removeHashTableEntry$2(_this._collection$_strings, object);
      else if (typeof object === "number" && (object & 1073741823) === object)
        return _this._collection$_removeHashTableEntry$2(_this._collection$_nums, object);
      else
        return _this._remove$1(0, object);
    },
    _remove$1: function(_, object) {
      var bucket, index, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      bucket = _this._getBucket$2(rest, object);
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      --_this._collection$_length;
      _this._elements = null;
      bucket.splice(index, 1);
      return true;
    },
    _computeElements$0: function() {
      var result, strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        t1 = _this._elements;
      if (t1 != null)
        return t1;
      result = new Array(_this._collection$_length);
      result.fixed$length = Array;
      strings = _this._collection$_strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._elements = result;
    },
    _collection$_addHashTableEntry$2: function(table, element) {
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      if (table[element] != null)
        return false;
      table[element] = 0;
      ++this._collection$_length;
      this._elements = null;
      return true;
    },
    _collection$_removeHashTableEntry$2: function(table, element) {
      if (table != null && table[element] != null) {
        delete table[element];
        --this._collection$_length;
        this._elements = null;
        return true;
      } else
        return false;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _getBucket$2: function(table, element) {
      return table[this._computeHashCode$1(element)];
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i], element))
          return i;
      return -1;
    }
  };
  P._CustomHashSet.prototype = {
    _findBucketIndex$2: function(bucket, element) {
      var $length, t1, i, t2;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = H.getTypeArgumentByIndex(this, 0), i = 0; i < $length; ++i) {
        t2 = bucket[i];
        H.assertSubtypeOfRuntimeType(element, t1);
        if (H.boolConversionCheck(this._equality.call$2(t2, element)))
          return i;
      }
      return -1;
    },
    _computeHashCode$1: function(element) {
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      return this._hasher.call$1(element) & 1073741823;
    },
    add$1: function(_, object) {
      return this.super$_HashSet$_add(0, H.assertSubtypeOfRuntimeType(object, H.getTypeArgumentByIndex(this, 0)));
    },
    contains$1: function(_, object) {
      if (!H.boolConversionCheck(this._validKey.call$1(object)))
        return false;
      return this.super$_HashSet$_contains(object);
    },
    remove$1: function(_, object) {
      if (!H.boolConversionCheck(this._validKey.call$1(object)))
        return false;
      return this.super$_HashSet$_remove(0, object);
    }
  };
  P._CustomHashSet_closure.prototype = {
    call$1: function(x) {
      return H.checkSubtypeOfRuntimeType(x, this.E);
    },
    $signature: 5
  };
  P._HashSetIterator.prototype = {
    get$current: function(_) {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        elements = _this._elements,
        offset = _this._offset,
        t1 = _this._set;
      if (elements !== t1._elements)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(elements[offset]);
        _this._offset = offset + 1;
        return true;
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P._LinkedHashSet.prototype = {
    get$iterator: function(_) {
      var _this = this,
        t1 = new P._LinkedHashSetIterator(_this, _this._collection$_modifications, _this.$ti);
      t1._collection$_cell = _this._collection$_first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return H.interceptedTypeCheck(strings[object], "$is_LinkedHashSetCell") != null;
      } else if (typeof object === "number" && (object & 1073741823) === object) {
        nums = this._collection$_nums;
        if (nums == null)
          return false;
        return H.interceptedTypeCheck(nums[object], "$is_LinkedHashSetCell") != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, object), object) >= 0;
    },
    get$first: function(_) {
      var t1 = this._collection$_first;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return H.assertSubtypeOfRuntimeType(t1._element, H.getTypeArgumentByIndex(this, 0));
    },
    add$1: function(_, element) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      if (typeof element === "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = P._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element === "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = P._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._collection$_add$1(0, element);
    },
    _collection$_add$1: function(_, element) {
      var rest, hash, bucket, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      var t1 = this._remove$1(0, object);
      return t1;
    },
    _remove$1: function(_, object) {
      var bucket, index, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      bucket = _this._getBucket$2(rest, object);
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      _this._collection$_unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    _collection$_addHashTableEntry$2: function(table, element) {
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      if (H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell") != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _collection$_modified$0: function() {
      this._collection$_modifications = 1073741823 & this._collection$_modifications + 1;
    },
    _collection$_newLinkedCell$1: function(element) {
      var last, _this = this,
        cell = new P._LinkedHashSetCell(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0)));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else {
        last = _this._collection$_last;
        cell._collection$_previous = last;
        _this._collection$_last = last._collection$_next = cell;
      }
      ++_this._collection$_length;
      _this._collection$_modified$0();
      return cell;
    },
    _collection$_unlinkCell$1: function(cell) {
      var _this = this,
        previous = cell._collection$_previous,
        next = cell._collection$_next;
      if (previous == null)
        _this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        _this._collection$_last = previous;
      else
        next._collection$_previous = previous;
      --_this._collection$_length;
      _this._collection$_modified$0();
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _getBucket$2: function(table, element) {
      return table[this._computeHashCode$1(element)];
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    }
  };
  P._LinkedHashSetCell.prototype = {};
  P._LinkedHashSetIterator.prototype = {
    get$current: function(_) {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._collection$_cell;
        if (t1 == null) {
          _this.set$_collection$_current(null);
          return false;
        } else {
          _this.set$_collection$_current(H.assertSubtypeOfRuntimeType(t1._element, H.getTypeArgumentByIndex(_this, 0)));
          _this._collection$_cell = _this._collection$_cell._collection$_next;
          return true;
        }
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P.UnmodifiableListView.prototype = {
    cast$1$0: function(_, $R) {
      return new P.UnmodifiableListView(J.cast$1$0$ax(this._collection$_source, $R), [$R]);
    },
    get$length: function(_) {
      return J.get$length$asx(this._collection$_source);
    },
    $index: function(_, index) {
      return J.elementAt$1$ax(this._collection$_source, index);
    }
  };
  P.IterableMixin.prototype = {
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return H.MappedIterable_MappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    contains$1: function(_, element) {
      var t1, _this = this;
      for (t1 = H.getTypeArgumentByIndex(_this, 0), t1 = new P._SplayTreeKeyIterator(_this, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, t1]]), _this._modificationCount, _this._splayCount, [t1]), t1._findLeftMostDescendent$1(_this._root); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(t1), element))
          return true;
      return false;
    },
    get$length: function(_) {
      var count, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0),
        it = new P._SplayTreeKeyIterator(_this, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, t1]]), _this._modificationCount, _this._splayCount, [t1]);
      it._findLeftMostDescendent$1(_this._root);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      var _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      t1 = new P._SplayTreeKeyIterator(_this, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, t1]]), _this._modificationCount, _this._splayCount, [t1]);
      t1._findLeftMostDescendent$1(_this._root);
      return !t1.moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return this._root != null;
    },
    skip$1: function(_, count) {
      return H.SkipIterable_SkipIterable(this, count, H.getTypeArgumentByIndex(this, 0));
    },
    get$first: function(_) {
      var _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0),
        it = new P._SplayTreeKeyIterator(_this, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, t1]]), _this._modificationCount, _this._splayCount, [t1]);
      it._findLeftMostDescendent$1(_this._root);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current(it);
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element, _this = this;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = H.getTypeArgumentByIndex(_this, 0), t1 = new P._SplayTreeKeyIterator(_this, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, t1]]), _this._modificationCount, _this._splayCount, [t1]), t1._findLeftMostDescendent$1(_this._root), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, _this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P.IterableBase.prototype = {};
  P.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2: function(k, v) {
      this.result.$indexSet(0, H.assertSubtypeOfRuntimeType(k, this.K), H.assertSubtypeOfRuntimeType(v, this.V));
    },
    $signature: 6
  };
  P.ListBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  P.ListMixin.prototype = {
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first: function(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    contains$1: function(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (J.$eq$(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return new H.MappedListIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, count, null, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
    },
    toList$1$growable: function(receiver, growable) {
      var i, t1, _this = this,
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, _this.get$length(receiver));
      i = 0;
      while (true) {
        t1 = _this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        C.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    cast$1$0: function(receiver, $R) {
      return new H.CastList(receiver, [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0), $R]);
    },
    sort$1: function(receiver, compare) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      H.Sort_sort(receiver, compare == null ? P.collection_ListMixin__compareAny$closure() : compare, t1);
    },
    $add: function(receiver, other) {
      var result, t2, _this = this,
        t1 = [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)];
      H.assertSubtype(other, "$isList", t1, "$asList");
      result = H.setRuntimeTypeInfo([], t1);
      t1 = _this.get$length(receiver);
      t2 = other.get$length(other);
      if (typeof t1 !== "number")
        return t1.$add();
      C.JSArray_methods.set$length(result, C.JSInt_methods.$add(t1, t2));
      C.JSArray_methods.setRange$3(result, 0, _this.get$length(receiver), receiver);
      C.JSArray_methods.setRange$3(result, _this.get$length(receiver), result.length, other);
      return result;
    },
    sublist$2: function(receiver, start, end) {
      var $length, result, i,
        listLength = this.get$length(receiver);
      P.RangeError_checkValidRange(start, listLength, listLength);
      if (typeof listLength !== "number")
        return listLength.$sub();
      $length = listLength - start;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, $length);
      for (i = 0; i < $length; ++i)
        C.JSArray_methods.$indexSet(result, i, this.$index(receiver, start + i));
      return result;
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    fillRange$3: function(receiver, start, end, fill) {
      var i;
      H.assertSubtypeOfRuntimeType(fill, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, fill);
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, t2, i, _this = this,
        t1 = H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0);
      H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
      P.RangeError_checkValidRange(start, end, _this.get$length(receiver));
      if (typeof end !== "number")
        return end.$sub();
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      if (H.checkSubtype(iterable, "$isList", [t1], "$asList")) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      t2 = t1.get$length(otherList);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (otherStart + $length > t2)
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          _this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          _this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    },
    $signature: 6
  };
  P.MapMixin.prototype = {
    cast$2$0: function(receiver, RK, RV) {
      return P.Map_castFrom(receiver, H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 0), H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 1), RK, RV);
    },
    forEach$1: function(receiver, action) {
      var t1, key, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "MapMixin", 0), H.getRuntimeTypeArgumentIntercepted(_this, receiver, "MapMixin", 1)]});
      for (t1 = J.get$iterator$ax(_this.get$keys(receiver)); t1.moveNext$0();) {
        key = t1.get$current(t1);
        action.call$2(key, _this.$index(receiver, key));
      }
    },
    addAll$1: function(receiver, other) {
      var t1, t2, key;
      H.assertSubtype(other, "$isMap", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 0), H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 1)], "$asMap");
      for (t1 = J.getInterceptor$x(other), t2 = J.get$iterator$ax(t1.get$keys(other)); t2.moveNext$0();) {
        key = t2.get$current(t2);
        this.$indexSet(receiver, key, t1.$index(other, key));
      }
    },
    map$2$1: function(receiver, transform, K2, V2) {
      var result, t1, key, entry, _this = this;
      H.functionTypeCheck(transform, {func: 1, ret: [P.MapEntry, K2, V2], args: [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "MapMixin", 0), H.getRuntimeTypeArgumentIntercepted(_this, receiver, "MapMixin", 1)]});
      result = P.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      for (t1 = J.get$iterator$ax(_this.get$keys(receiver)); t1.moveNext$0();) {
        key = t1.get$current(t1);
        entry = transform.call$2(key, _this.$index(receiver, key));
        result.$indexSet(0, C.JSNull_methods.get$key(entry), entry.get$value(entry));
      }
      return result;
    },
    map$1: function($receiver, transform) {
      return this.map$2$1($receiver, transform, null, null);
    },
    containsKey$1: function(receiver, key) {
      return J.contains$1$asx(this.get$keys(receiver), key);
    },
    get$length: function(receiver) {
      return J.get$length$asx(this.get$keys(receiver));
    },
    get$isEmpty: function(receiver) {
      return J.get$isEmpty$asx(this.get$keys(receiver));
    },
    toString$0: function(receiver) {
      return P.MapBase_mapToString(receiver);
    },
    $isMap: 1
  };
  P._UnmodifiableMapMixin.prototype = {
    $indexSet: function(_, key, value) {
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(this, "_UnmodifiableMapMixin", 0));
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "_UnmodifiableMapMixin", 1));
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    addAll$1: function(_, other) {
      H.assertSubtype(other, "$isMap", [H.getRuntimeTypeArgument(this, "_UnmodifiableMapMixin", 0), H.getRuntimeTypeArgument(this, "_UnmodifiableMapMixin", 1)], "$asMap");
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    }
  };
  P.MapView.prototype = {
    cast$2$0: function(_, RK, RV) {
      return J.cast$2$0$ax(this._collection$_map, RK, RV);
    },
    $index: function(_, key) {
      return J.$index$asx(this._collection$_map, key);
    },
    $indexSet: function(_, key, value) {
      J.$indexSet$ax(this._collection$_map, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
    },
    addAll$1: function(_, other) {
      J.addAll$1$ax(this._collection$_map, H.assertSubtype(other, "$isMap", this.$ti, "$asMap"));
    },
    containsKey$1: function(_, key) {
      return J.containsKey$1$x(this._collection$_map, key);
    },
    forEach$1: function(_, action) {
      J.forEach$1$ax(this._collection$_map, H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]}));
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._collection$_map);
    },
    get$length: function(_) {
      return J.get$length$asx(this._collection$_map);
    },
    get$keys: function(_) {
      return J.get$keys$x(this._collection$_map);
    },
    toString$0: function(_) {
      return J.toString$0$(this._collection$_map);
    },
    map$2$1: function(_, transform, K2, V2) {
      return J.map$2$1$ax(this._collection$_map, H.functionTypeCheck(transform, {func: 1, ret: [P.MapEntry, K2, V2], args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]}), K2, V2);
    },
    map$1: function($receiver, transform) {
      return this.map$2$1($receiver, transform, null, null);
    },
    $isMap: 1
  };
  P.UnmodifiableMapView.prototype = {
    cast$2$0: function(_, RK, RV) {
      return new P.UnmodifiableMapView(J.cast$2$0$ax(this._collection$_map, RK, RV), [RK, RV]);
    }
  };
  P.ListQueue.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return new P._ListQueueIterator(_this, _this._tail, _this._modificationCount, _this._head, _this.$ti);
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    get$first: function(_) {
      var t2,
        t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      t2 = this._table;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      return t2[t1];
    },
    elementAt$1: function(_, index) {
      var t1, t2, t3, _this = this,
        $length = _this.get$length(_this);
      if (0 > index || index >= $length)
        H.throwExpression(P.IndexError$(index, _this, "index", null, $length));
      t1 = _this._table;
      t2 = t1.length;
      t3 = (_this._head + index & t2 - 1) >>> 0;
      if (t3 < 0 || t3 >= t2)
        return H.ioore(t1, t3);
      return t1[t3];
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    set$_table: function(_table) {
      this._table = H.assertSubtype(_table, "$isList", this.$ti, "$asList");
    }
  };
  P._ListQueueIterator.prototype = {
    get$current: function(_) {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t2, t3, _this = this,
        t1 = _this._queue;
      if (_this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = _this._collection$_position;
      if (t2 === _this._end) {
        _this.set$_collection$_current(null);
        return false;
      }
      t3 = t1._table;
      if (t2 >= t3.length)
        return H.ioore(t3, t2);
      _this.set$_collection$_current(t3[t2]);
      _this._collection$_position = (_this._collection$_position + 1 & t1._table.length - 1) >>> 0;
      return true;
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P.SetMixin.prototype = {
    get$isEmpty: function(_) {
      return this._count === 0;
    },
    get$isNotEmpty: function(_) {
      return this._count !== 0;
    },
    addAll$1: function(_, elements) {
      var t1;
      H.assertSubtype(elements, "$isIterable", [H.getTypeArgumentByIndex(this, 0)], "$asIterable");
      for (t1 = elements.get$iterator(elements); t1.moveNext$0();)
        this.add$1(0, t1.get$current(t1));
    },
    containsAll$1: function(other) {
      var t1, t2, o;
      for (t1 = H.assertSubtype(other, "$isIterable", [P.Object], "$asIterable")._set$_set, t1 = t1.get$iterator(t1), t2 = H.getTypeArgumentByIndex(this, 0); t1.moveNext$0();) {
        o = t1.get$current(t1);
        if (!(H.boolConversionCheck(this._validKey.call$1(o)) && this._splay$1(H.assertSubtypeOfRuntimeType(o, t2)) === 0))
          return false;
      }
      return true;
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return new H.EfficientLengthMappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, n, H.getTypeArgumentByIndex(this, 0));
    },
    get$first: function(_) {
      var _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0),
        it = new P._SplayTreeKeyIterator(_this, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, t1]]), _this._modificationCount, _this._splayCount, [t1]);
      it._findLeftMostDescendent$1(_this._root);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current(it);
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element, _this = this;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = H.getTypeArgumentByIndex(_this, 0), t1 = new P._SplayTreeKeyIterator(_this, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, t1]]), _this._modificationCount, _this._splayCount, [t1]), t1._findLeftMostDescendent$1(_this._root), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, _this, "index", null, elementIndex));
    }
  };
  P._SetBase.prototype = {
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty: function(_) {
      return this.get$length(this) !== 0;
    },
    addAll$1: function(_, elements) {
      var t1;
      H.assertSubtype(elements, "$isIterable", this.$ti, "$asIterable");
      for (t1 = elements.get$iterator(elements); t1.moveNext$0();)
        this.add$1(0, t1.get$current(t1));
    },
    containsAll$1: function(other) {
      var t1;
      for (t1 = H.assertSubtype(other, "$isIterable", [P.Object], "$asIterable")._set$_set, t1 = t1.get$iterator(t1); t1.moveNext$0();)
        if (!this.contains$1(0, t1.get$current(t1)))
          return false;
      return true;
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return new H.EfficientLengthMappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, n, H.getTypeArgumentByIndex(this, 0));
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current(it);
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  P._SplayTreeNode.prototype = {
    set$left: function(_, left) {
      this.left = H.assertSubtype(left, "$is_SplayTreeNode", this.$ti, "$as_SplayTreeNode");
    },
    set$right: function(_, right) {
      this.right = H.assertSubtype(right, "$is_SplayTreeNode", this.$ti, "$as_SplayTreeNode");
    }
  };
  P._SplayTree.prototype = {
    _splayMin$1: function(node) {
      var current, t2,
        t1 = H.getRuntimeTypeArgument(this, "_SplayTree", 1);
      H.assertSubtypeOfRuntimeType(node, t1);
      for (current = node; t2 = current.left, t2 != null; current = t2) {
        H.assertSubtypeOfRuntimeType(t2, t1);
        current.set$left(0, t2.right);
        t2.set$right(0, current);
      }
      return current;
    },
    _splayMax$1: function(node) {
      var current, t2,
        t1 = H.getRuntimeTypeArgument(this, "_SplayTree", 1);
      H.assertSubtypeOfRuntimeType(node, t1);
      for (current = node; t2 = current.right, t2 != null; current = t2) {
        H.assertSubtypeOfRuntimeType(t2, t1);
        current.set$right(0, t2.left);
        t2.set$left(0, current);
      }
      return current;
    },
    _splay$1: function(key) {
      var current, left, t1, t2, right, left0, comp, t3, t4, t5, tmp, current0, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(_this, "_SplayTree", 0));
      current = _this._root;
      if (current == null)
        return -1;
      left = _this._dummy;
      for (t1 = H.getRuntimeTypeArgument(_this, "_SplayTree", 1), t2 = H.getTypeArgumentByIndex(_this, 0), right = left, left0 = right, comp = null; true;) {
        t3 = H.assertSubtypeOfRuntimeType(current.key, t2);
        H.assertSubtypeOfRuntimeType(key, t2);
        t4 = _this._comparator;
        t3 = t4.call$2(t3, key);
        if (typeof t3 !== "number")
          return t3.$gt();
        if (t3 > 0) {
          t5 = current.left;
          if (t5 == null) {
            comp = t3;
            break;
          }
          t3 = t4.call$2(H.assertSubtypeOfRuntimeType(t5.key, t2), key);
          if (typeof t3 !== "number")
            return t3.$gt();
          if (t3 > 0) {
            tmp = current.left;
            current.set$left(0, tmp.right);
            tmp.set$right(0, current);
            H.assertSubtypeOfRuntimeType(tmp, t1);
            if (tmp.left == null) {
              comp = t3;
              current = tmp;
              break;
            }
            current = tmp;
          }
          right.set$left(0, current);
          current0 = H.assertSubtypeOfRuntimeType(current.left, t1);
          comp = t3;
          right = current;
          current = current0;
        } else {
          if (t3 < 0) {
            t5 = current.right;
            if (t5 == null) {
              comp = t3;
              break;
            }
            t3 = t4.call$2(H.assertSubtypeOfRuntimeType(t5.key, t2), key);
            if (typeof t3 !== "number")
              return t3.$lt();
            if (t3 < 0) {
              tmp = H.assertSubtypeOfRuntimeType(current.right, t1);
              current.set$right(0, tmp.left);
              tmp.set$left(0, current);
              if (tmp.right == null) {
                comp = t3;
                current = tmp;
                break;
              }
              current = tmp;
            }
            left0.set$right(0, current);
            current0 = H.assertSubtypeOfRuntimeType(current.right, t1);
          } else {
            comp = t3;
            break;
          }
          comp = t3;
          left0 = current;
          current = current0;
        }
      }
      left0.set$right(0, current.left);
      right.set$left(0, current.right);
      current.set$left(0, left.right);
      current.set$right(0, left.left);
      _this.set$_root(current);
      left.set$right(0, null);
      left.set$left(0, null);
      ++_this._splayCount;
      return comp;
    },
    _remove$1: function(_, key) {
      var result, t1, t2, right, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(_this, "_SplayTree", 0));
      if (_this._root == null)
        return;
      if (_this._splay$1(key) !== 0)
        return;
      result = _this._root;
      --_this._count;
      t1 = result.left;
      t2 = H.getRuntimeTypeArgument(_this, "_SplayTree", 1);
      if (t1 == null)
        _this.set$_root(H.assertSubtypeOfRuntimeType(result.right, t2));
      else {
        right = H.assertSubtypeOfRuntimeType(result.right, t2);
        _this.set$_root(_this._splayMax$1(H.assertSubtypeOfRuntimeType(t1, t2)));
        _this._root.set$right(0, right);
      }
      ++_this._modificationCount;
      return result;
    },
    _addNewRoot$2: function(node, comp) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(node, H.getRuntimeTypeArgument(_this, "_SplayTree", 1));
      ++_this._count;
      ++_this._modificationCount;
      t1 = _this._root;
      if (t1 == null) {
        _this.set$_root(node);
        return;
      }
      if (typeof comp !== "number")
        return comp.$lt();
      if (comp < 0) {
        node.set$left(0, t1);
        node.set$right(0, _this._root.right);
        _this._root.set$right(0, null);
      } else {
        node.set$right(0, t1);
        node.set$left(0, _this._root.left);
        _this._root.set$left(0, null);
      }
      _this.set$_root(node);
    },
    get$_collection$_first: function() {
      var _this = this,
        t1 = _this._root;
      if (t1 == null)
        return;
      _this.set$_root(_this._splayMin$1(t1));
      return _this._root;
    }
  };
  P._SplayTreeIterator.prototype = {
    get$current: function(_) {
      var t1 = this._currentNode;
      if (t1 == null)
        return;
      return H.assertSubtype(t1, "$is_SplayTreeNode", [H.getTypeArgumentByIndex(this, 0)], "$as_SplayTreeNode").key;
    },
    _findLeftMostDescendent$1: function(node) {
      var t1;
      H.assertSubtype(node, "$is_SplayTreeNode", [H.getRuntimeTypeArgument(this, "_SplayTreeIterator", 0)], "$as_SplayTreeNode");
      for (t1 = this._workList; node != null;) {
        C.JSArray_methods.add$1(t1, node);
        node = node.left;
      }
    },
    moveNext$0: function() {
      var t2, t3, _this = this,
        t1 = _this._tree;
      if (_this._modificationCount !== t1._modificationCount)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t2 = _this._workList;
      if (t2.length === 0) {
        _this.set$_currentNode(null);
        return false;
      }
      if (t1._splayCount !== _this._splayCount && _this._currentNode != null) {
        t3 = H.assertSubtype(_this._currentNode, "$is_SplayTreeNode", [H.getRuntimeTypeArgument(_this, "_SplayTreeIterator", 0)], "$as_SplayTreeNode");
        C.JSArray_methods.set$length(t2, 0);
        if (t3 == null)
          _this._findLeftMostDescendent$1(t1._root);
        else {
          t1._splay$1(t3.key);
          _this._findLeftMostDescendent$1(t1._root.right);
        }
      }
      if (0 >= t2.length)
        return H.ioore(t2, -1);
      _this.set$_currentNode(t2.pop());
      _this._findLeftMostDescendent$1(_this._currentNode.right);
      return true;
    },
    set$_currentNode: function(_currentNode) {
      this._currentNode = H.assertSubtype(_currentNode, "$is_SplayTreeNode", [H.getRuntimeTypeArgument(this, "_SplayTreeIterator", 0)], "$as_SplayTreeNode");
    },
    $isIterator: 1,
    $asIterator: function($K, $T) {
      return [$T];
    }
  };
  P._SplayTreeKeyIterator.prototype = {
    $as_SplayTreeIterator: function($K) {
      return [$K, $K];
    },
    $asIterator: null
  };
  P.SplayTreeSet.prototype = {
    get$iterator: function(_) {
      var _this = this,
        t1 = new P._SplayTreeKeyIterator(_this, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, H.getTypeArgumentByIndex(_this, 0)]]), _this._modificationCount, _this._splayCount, _this.$ti);
      t1._findLeftMostDescendent$1(_this._root);
      return t1;
    },
    get$length: function(_) {
      return this._count;
    },
    get$isEmpty: function(_) {
      return this._root == null;
    },
    get$isNotEmpty: function(_) {
      return this._root != null;
    },
    get$first: function(_) {
      if (this._count === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.get$_collection$_first().key;
    },
    contains$1: function(_, element) {
      return H.boolConversionCheck(this._validKey.call$1(element)) && this._splay$1(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0))) === 0;
    },
    add$1: function(_, element) {
      var compare, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      compare = _this._splay$1(element);
      if (compare === 0)
        return false;
      _this._addNewRoot$2(new P._SplayTreeNode(element, _this.$ti), compare);
      return true;
    },
    remove$1: function(_, object) {
      if (!H.boolConversionCheck(this._validKey.call$1(object)))
        return false;
      return this._remove$1(0, H.assertSubtypeOfRuntimeType(object, H.getTypeArgumentByIndex(this, 0))) != null;
    },
    addAll$1: function(_, elements) {
      var t2, element, compare,
        t1 = this.$ti;
      for (t2 = J.get$iterator$ax(H.assertSubtype(elements, "$isIterable", t1, "$asIterable")); t2.moveNext$0();) {
        element = t2.get$current(t2);
        compare = this._splay$1(element);
        if (compare !== 0)
          this._addNewRoot$2(new P._SplayTreeNode(element, t1), compare);
      }
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    set$_root: function(_root) {
      this._root = H.assertSubtype(_root, "$is_SplayTreeNode", this.$ti, "$as_SplayTreeNode");
    },
    $isEfficientLengthIterable: 1,
    $as_SplayTree: function($E) {
      return [$E, [P._SplayTreeNode, $E]];
    },
    $isIterable: 1,
    $isSet: 1
  };
  P.SplayTreeSet_closure.prototype = {
    call$1: function(v) {
      return H.checkSubtypeOfRuntimeType(v, this.E);
    },
    $signature: 5
  };
  P._ListBase_Object_ListMixin.prototype = {};
  P._SplayTreeSet__SplayTree_IterableMixin.prototype = {};
  P._SplayTreeSet__SplayTree_IterableMixin_SetMixin.prototype = {};
  P._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  P._JsonMap.prototype = {
    $index: function(_, key) {
      var result,
        t1 = this._processed;
      if (t1 == null)
        return this._data.$index(0, key);
      else if (typeof key !== "string")
        return;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        t1 = t1.get$length(t1);
      } else
        t1 = this._convert$_computeKeys$0().length;
      return t1;
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$keys: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        return t1.get$keys(t1);
      }
      return new P._JsonMapKeyIterable(this);
    },
    $indexSet: function(_, key, value) {
      var processed, original, _this = this;
      H.stringTypeCheck(key);
      if (_this._processed == null)
        _this._data.$indexSet(0, key, value);
      else if (_this.containsKey$1(0, key)) {
        processed = _this._processed;
        processed[key] = value;
        original = _this._original;
        if (original == null ? processed != null : original !== processed)
          original[key] = null;
      } else
        _this._upgrade$0().$indexSet(0, key, value);
    },
    addAll$1: function(_, other) {
      J.forEach$1$ax(H.assertSubtype(other, "$isMap", [P.String, null], "$asMap"), new P._JsonMap_addAll_closure(this));
    },
    containsKey$1: function(_, key) {
      if (this._processed == null)
        return this._data.containsKey$1(0, key);
      if (typeof key !== "string")
        return false;
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    forEach$1: function(_, f) {
      var keys, i, key, value, _this = this;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      if (_this._processed == null)
        return _this._data.forEach$1(0, f);
      keys = _this._convert$_computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = _this._processed[key];
        if (typeof value == "undefined") {
          value = P._convertJsonToDartLazy(_this._original[key]);
          _this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== _this._data)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    _convert$_computeKeys$0: function() {
      var keys = H.listTypeCheck(this._data);
      if (keys == null)
        keys = this._data = H.setRuntimeTypeInfo(Object.keys(this._original), [P.String]);
      return keys;
    },
    _upgrade$0: function() {
      var result, keys, i, t1, key, _this = this;
      if (_this._processed == null)
        return _this._data;
      result = P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
      keys = _this._convert$_computeKeys$0();
      for (i = 0; t1 = keys.length, i < t1; ++i) {
        key = keys[i];
        result.$indexSet(0, key, _this.$index(0, key));
      }
      if (t1 === 0)
        C.JSArray_methods.add$1(keys, null);
      else
        C.JSArray_methods.set$length(keys, 0);
      _this._original = _this._processed = null;
      return _this._data = result;
    },
    _process$1: function(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return;
      result = P._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $asMap: function() {
      return [P.String, null];
    }
  };
  P._JsonMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      this.$this.$indexSet(0, H.stringTypeCheck(key), value);
    },
    $signature: 23
  };
  P._JsonMapKeyIterable.prototype = {
    get$length: function(_) {
      var t1 = this._parent;
      return t1.get$length(t1);
    },
    elementAt$1: function(_, index) {
      var t1 = this._parent;
      if (t1._processed == null)
        t1 = t1.get$keys(t1).elementAt$1(0, index);
      else {
        t1 = t1._convert$_computeKeys$0();
        if (index < 0 || index >= t1.length)
          return H.ioore(t1, index);
        t1 = t1[index];
      }
      return t1;
    },
    get$iterator: function(_) {
      var t1 = this._parent;
      if (t1._processed == null) {
        t1 = t1.get$keys(t1);
        t1 = t1.get$iterator(t1);
      } else {
        t1 = t1._convert$_computeKeys$0();
        t1 = new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
      }
      return t1;
    },
    contains$1: function(_, key) {
      return this._parent.containsKey$1(0, key);
    },
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asListIterable: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    }
  };
  P.AsciiCodec.prototype = {
    get$name: function(_) {
      return "us-ascii";
    },
    encode$1: function(source) {
      return C.AsciiEncoder_127.convert$1(source);
    },
    get$encoder: function() {
      return C.AsciiEncoder_127;
    }
  };
  P._UnicodeSubsetEncoder.prototype = {
    convert$1: function(string) {
      var end, $length, result, t1, t2, i, codeUnit;
      H.stringTypeCheck(string);
      end = P.RangeError_checkValidRange(0, null, string.length);
      if (typeof end !== "number")
        return end.$sub();
      $length = end - 0;
      result = new Uint8Array($length);
      for (t1 = result.length, t2 = ~this._subsetMask, i = 0; i < $length; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(string, i);
        if ((codeUnit & t2) !== 0)
          throw H.wrapException(P.ArgumentError$value(string, "string", "Contains invalid characters."));
        if (i >= t1)
          return H.ioore(result, i);
        result[i] = codeUnit;
      }
      return result;
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P.AsciiEncoder.prototype = {};
  P.Base64Codec.prototype = {
    get$encoder: function() {
      return C.C_Base64Encoder;
    },
    normalize$3: function(_, source, start, end) {
      var inverseAlphabet, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, digit1, digit2, char0, value, t1, t2, endLength, $length,
        _s31_ = "Invalid base64 encoding length ";
      end = P.RangeError_checkValidRange(start, end, source.length);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      if (typeof end !== "number")
        return H.iae(end);
      i = start;
      sliceStart = i;
      buffer = null;
      firstPadding = -1;
      firstPaddingSourceIndex = -1;
      paddingCount = 0;
      for (; i < end; i = i0) {
        i0 = i + 1;
        char = C.JSString_methods._codeUnitAt$1(source, i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            digit1 = H.hexDigitValue(C.JSString_methods._codeUnitAt$1(source, i0));
            digit2 = H.hexDigitValue(C.JSString_methods._codeUnitAt$1(source, i0 + 1));
            char0 = digit1 * 16 + digit2 - (digit2 & 256);
            if (char0 === 37)
              char0 = -1;
            i0 = i1;
          } else
            char0 = -1;
        } else
          char0 = char;
        if (0 <= char0 && char0 <= 127) {
          if (char0 < 0 || char0 >= inverseAlphabet.length)
            return H.ioore(inverseAlphabet, char0);
          value = inverseAlphabet[char0];
          if (value >= 0) {
            char0 = C.JSString_methods.codeUnitAt$1("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", value);
            if (char0 === char)
              continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t1 = buffer == null ? null : buffer._contents.length;
                if (t1 == null)
                  t1 = 0;
                firstPadding = t1 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61)
                continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null)
              buffer = new P.StringBuffer("");
            buffer._contents += C.JSString_methods.substring$2(source, sliceStart, i);
            buffer._contents += H.Primitives_stringFromCharCode(char);
            sliceStart = i0;
            continue;
          }
        }
        throw H.wrapException(P.FormatException$("Invalid base64 data", source, i));
      }
      if (buffer != null) {
        t1 = buffer._contents += C.JSString_methods.substring$2(source, sliceStart, end);
        t2 = t1.length;
        if (firstPadding >= 0)
          P.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, t2);
        else {
          endLength = C.JSInt_methods.$mod(t2 - 1, 4) + 1;
          if (endLength === 1)
            throw H.wrapException(P.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            t1 += "=";
            buffer._contents = t1;
            ++endLength;
          }
        }
        t1 = buffer._contents;
        return C.JSString_methods.replaceRange$3(source, start, end, t1.charCodeAt(0) == 0 ? t1 : t1);
      }
      $length = end - start;
      if (firstPadding >= 0)
        P.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = C.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw H.wrapException(P.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = C.JSString_methods.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    },
    $asCodec: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P.Base64Encoder.prototype = {
    convert$1: function(input) {
      var t1;
      H.assertSubtype(input, "$isList", [P.int], "$asList");
      t1 = input.length;
      if (t1 === 0)
        return "";
      return P.String_String$fromCharCodes(new P._Base64Encoder("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").encode$4(input, 0, t1, true), 0, null);
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P._Base64Encoder.prototype = {
    encode$4: function(bytes, start, end, isLast) {
      var byteCount, fullChunks, bufferLength, output, _this = this;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      byteCount = (_this._convert$_state & 3) + (end - start);
      fullChunks = C.JSInt_methods._tdivFast$1(byteCount, 3);
      bufferLength = fullChunks * 4;
      if (byteCount - fullChunks * 3 > 0)
        bufferLength += 4;
      output = new Uint8Array(bufferLength);
      _this._convert$_state = P._Base64Encoder_encodeChunk(_this._alphabet, bytes, start, end, true, output, 0, _this._convert$_state);
      if (bufferLength > 0)
        return output;
      return;
    }
  };
  P.ByteConversionSink.prototype = {
    $asChunkedConversionSink: function() {
      return [[P.List, P.int]];
    }
  };
  P.ByteConversionSinkBase.prototype = {};
  P._ByteCallbackSink.prototype = {
    add$1: function(_, chunk) {
      var t1, t2, t3, t4, v, grown, _this = this;
      H.assertSubtype(chunk, "$isIterable", [P.int], "$asIterable");
      t1 = _this._buffer;
      t2 = _this._bufferIndex;
      t3 = J.getInterceptor$asx(chunk);
      t4 = t3.get$length(chunk);
      if (typeof t4 !== "number")
        return t4.$gt();
      if (t4 > t1.length - t2) {
        t1 = _this._buffer;
        t2 = t3.get$length(chunk);
        if (typeof t2 !== "number")
          return t2.$add();
        v = t2 + t1.length - 1;
        v |= C.JSInt_methods._shrOtherPositive$1(v, 1);
        v |= v >>> 2;
        v |= v >>> 4;
        v |= v >>> 8;
        grown = new Uint8Array((((v | v >>> 16) >>> 0) + 1) * 2);
        t1 = _this._buffer;
        C.NativeUint8List_methods.setRange$3(grown, 0, t1.length, t1);
        _this.set$_buffer(grown);
      }
      t1 = _this._buffer;
      t2 = _this._bufferIndex;
      t4 = t3.get$length(chunk);
      if (typeof t4 !== "number")
        return H.iae(t4);
      C.NativeUint8List_methods.setRange$3(t1, t2, t2 + t4, chunk);
      t4 = _this._bufferIndex;
      t3 = t3.get$length(chunk);
      if (typeof t3 !== "number")
        return H.iae(t3);
      _this._bufferIndex = t4 + t3;
    },
    close$0: function(_) {
      this._callback.call$1(C.NativeUint8List_methods.sublist$2(this._buffer, 0, this._bufferIndex));
    },
    set$_buffer: function(_buffer) {
      this._buffer = H.assertSubtype(_buffer, "$isList", [P.int], "$asList");
    }
  };
  P.ChunkedConversionSink.prototype = {};
  P.Codec.prototype = {
    encode$1: function(input) {
      H.assertSubtypeOfRuntimeType(input, H.getRuntimeTypeArgument(this, "Codec", 0));
      return this.get$encoder().convert$1(input);
    }
  };
  P.Converter.prototype = {};
  P.Encoding.prototype = {
    $asCodec: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P.JsonUnsupportedObjectError.prototype = {
    toString$0: function(_) {
      var safeString = P.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  P.JsonCyclicError.prototype = {
    toString$0: function(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  P.JsonCodec.prototype = {
    decode$2$reviver: function(_, source, reviver) {
      var t1 = P._parseJson(source, this.get$decoder()._reviver);
      return t1;
    },
    encode$2$toEncodable: function(value, toEncodable) {
      var t1 = P._JsonStringStringifier_stringify(value, this.get$encoder()._toEncodable, null);
      return t1;
    },
    get$encoder: function() {
      return C.JsonEncoder_null;
    },
    get$decoder: function() {
      return C.JsonDecoder_null;
    },
    $asCodec: function() {
      return [P.Object, P.String];
    }
  };
  P.JsonEncoder.prototype = {
    convert$1: function(object) {
      var t1,
        output = new P.StringBuffer(""),
        stringifier = new P._JsonStringStringifier(output, [], P.convert___defaultToEncodable$closure());
      stringifier.writeObject$1(object);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $asConverter: function() {
      return [P.Object, P.String];
    }
  };
  P.JsonDecoder.prototype = {
    convert$1: function(input) {
      return P._parseJson(H.stringTypeCheck(input), this._reviver);
    },
    $asConverter: function() {
      return [P.String, P.Object];
    }
  };
  P._JsonStringifier.prototype = {
    writeStringContent$1: function(s) {
      var t1, t2, offset, i, charCode, t3,
        $length = s.length;
      for (t1 = J.getInterceptor$s(s), t2 = this._sink, offset = 0, i = 0; i < $length; ++i) {
        charCode = t1._codeUnitAt$1(s, i);
        if (charCode > 92)
          continue;
        if (charCode < 32) {
          if (i > offset)
            t2._contents += C.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2._contents += H.Primitives_stringFromCharCode(92);
          switch (charCode) {
            case 8:
              t2._contents += H.Primitives_stringFromCharCode(98);
              break;
            case 9:
              t2._contents += H.Primitives_stringFromCharCode(116);
              break;
            case 10:
              t2._contents += H.Primitives_stringFromCharCode(110);
              break;
            case 12:
              t2._contents += H.Primitives_stringFromCharCode(102);
              break;
            case 13:
              t2._contents += H.Primitives_stringFromCharCode(114);
              break;
            default:
              t2._contents += H.Primitives_stringFromCharCode(117);
              t2._contents += H.Primitives_stringFromCharCode(48);
              t2._contents += H.Primitives_stringFromCharCode(48);
              t3 = charCode >>> 4 & 15;
              t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              t3 = charCode & 15;
              t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            t2._contents += C.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2._contents += H.Primitives_stringFromCharCode(92);
          t2._contents += H.Primitives_stringFromCharCode(charCode);
        }
      }
      if (offset === 0)
        t2._contents += H.S(s);
      else if (offset < $length)
        t2._contents += t1.substring$2(s, offset, $length);
    },
    _checkCycle$1: function(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(new P.JsonCyclicError(object, null));
      }
      C.JSArray_methods.add$1(t1, object);
    },
    writeObject$1: function(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = P.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw H.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw H.wrapException(t1);
      }
    },
    writeJsonValue$1: function(object) {
      var t1, success, _this = this;
      if (typeof object === "number") {
        if (!isFinite(object))
          return false;
        _this._sink._contents += C.JSNumber_methods.toString$0(object);
        return true;
      } else if (object === true) {
        _this._sink._contents += "true";
        return true;
      } else if (object === false) {
        _this._sink._contents += "false";
        return true;
      } else if (object == null) {
        _this._sink._contents += "null";
        return true;
      } else if (typeof object === "string") {
        t1 = _this._sink;
        t1._contents += '"';
        _this.writeStringContent$1(object);
        t1._contents += '"';
        return true;
      } else {
        t1 = J.getInterceptor$(object);
        if (!!t1.$isList) {
          _this._checkCycle$1(object);
          _this.writeList$1(object);
          t1 = _this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
          return true;
        } else if (!!t1.$isMap) {
          _this._checkCycle$1(object);
          success = _this.writeMap$1(object);
          t1 = _this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
          return success;
        } else
          return false;
      }
    },
    writeList$1: function(list) {
      var t2, i, t3,
        t1 = this._sink;
      t1._contents += "[";
      t2 = J.getInterceptor$asx(list);
      if (t2.get$isNotEmpty(list)) {
        this.writeObject$1(t2.$index(list, 0));
        i = 1;
        while (true) {
          t3 = t2.get$length(list);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          t1._contents += ",";
          this.writeObject$1(t2.$index(list, i));
          ++i;
        }
      }
      t1._contents += "]";
    },
    writeMap$1: function(map) {
      var t2, keyValueList, i, separator, t3, _this = this, _box_0 = {},
        t1 = J.getInterceptor$asx(map);
      if (t1.get$isEmpty(map)) {
        _this._sink._contents += "{}";
        return true;
      }
      t2 = t1.get$length(map);
      if (typeof t2 !== "number")
        return t2.$mul();
      t2 *= 2;
      keyValueList = new Array(t2);
      keyValueList.fixed$length = Array;
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      t1.forEach$1(map, new P._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      t1 = _this._sink;
      t1._contents += "{";
      for (separator = '"'; i < t2; i += 2, separator = ',"') {
        t1._contents += separator;
        _this.writeStringContent$1(H.stringTypeCheck(keyValueList[i]));
        t1._contents += '":';
        t3 = i + 1;
        if (t3 >= t2)
          return H.ioore(keyValueList, t3);
        _this.writeObject$1(keyValueList[t3]);
      }
      t1._contents += "}";
      return true;
    }
  };
  P._JsonStringifier_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      if (typeof key !== "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      C.JSArray_methods.$indexSet(t1, t2.i++, key);
      C.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 6
  };
  P._JsonStringStringifier.prototype = {
    get$_partialResult: function() {
      var t1 = this._sink._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  P.Latin1Codec.prototype = {
    get$name: function(_) {
      return "iso-8859-1";
    },
    encode$1: function(source) {
      return C.Latin1Encoder_255.convert$1(source);
    },
    get$encoder: function() {
      return C.Latin1Encoder_255;
    }
  };
  P.Latin1Encoder.prototype = {};
  P.Utf8Codec.prototype = {
    get$name: function(_) {
      return "utf-8";
    },
    get$encoder: function() {
      return C.C_Utf8Encoder;
    }
  };
  P.Utf8Encoder.prototype = {
    convert$1: function(string) {
      var end, $length, t1, encoder;
      H.stringTypeCheck(string);
      end = P.RangeError_checkValidRange(0, null, string.length);
      if (typeof end !== "number")
        return end.$sub();
      $length = end - 0;
      if ($length === 0)
        return new Uint8Array(0);
      t1 = new Uint8Array($length * 3);
      encoder = new P._Utf8Encoder(t1);
      if (encoder._fillBuffer$3(string, 0, end) !== end)
        encoder._writeSurrogate$2(C.JSString_methods.codeUnitAt$1(string, end - 1), 0);
      return C.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P._Utf8Encoder.prototype = {
    _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
      var rune, _this = this,
        t1 = _this._buffer,
        t2 = _this._bufferIndex,
        t3 = t2 + 1,
        t4 = t1.length;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        _this._bufferIndex = t3;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 240 | rune >>> 18;
        t2 = _this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune >>> 12 & 63;
        t3 = _this._bufferIndex = t2 + 1;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | rune >>> 6 & 63;
        _this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune & 63;
        return true;
      } else {
        _this._bufferIndex = t3;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 224 | leadingSurrogate >>> 12;
        t2 = _this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | leadingSurrogate >>> 6 & 63;
        _this._bufferIndex = t2 + 1;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | leadingSurrogate & 63;
        return false;
      }
    },
    _fillBuffer$3: function(str, start, end) {
      var t1, t2, stringIndex, codeUnit, t3, stringIndex0, t4, _this = this;
      if (start !== end && (C.JSString_methods.codeUnitAt$1(str, end - 1) & 64512) === 55296)
        --end;
      for (t1 = _this._buffer, t2 = t1.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        codeUnit = C.JSString_methods._codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t3 = _this._bufferIndex;
          if (t3 >= t2)
            break;
          _this._bufferIndex = t3 + 1;
          t1[t3] = codeUnit;
        } else if ((codeUnit & 64512) === 55296) {
          if (_this._bufferIndex + 3 >= t2)
            break;
          stringIndex0 = stringIndex + 1;
          if (_this._writeSurrogate$2(codeUnit, C.JSString_methods._codeUnitAt$1(str, stringIndex0)))
            stringIndex = stringIndex0;
        } else if (codeUnit <= 2047) {
          t3 = _this._bufferIndex;
          t4 = t3 + 1;
          if (t4 >= t2)
            break;
          _this._bufferIndex = t4;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          t1[t3] = 192 | codeUnit >>> 6;
          _this._bufferIndex = t4 + 1;
          t1[t4] = 128 | codeUnit & 63;
        } else {
          t3 = _this._bufferIndex;
          if (t3 + 2 >= t2)
            break;
          t4 = _this._bufferIndex = t3 + 1;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          t1[t3] = 224 | codeUnit >>> 12;
          t3 = _this._bufferIndex = t4 + 1;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 128 | codeUnit >>> 6 & 63;
          _this._bufferIndex = t3 + 1;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          t1[t3] = 128 | codeUnit & 63;
        }
      }
      return stringIndex;
    }
  };
  P.Utf8Decoder.prototype = {
    convert$1: function(codeUnits) {
      var result, end, oneBytes, firstPart, buffer, start, isFirstCharacter, decoder, t1;
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      result = P.Utf8Decoder__convertIntercepted(false, codeUnits, 0, null);
      if (result != null)
        return result;
      end = P.RangeError_checkValidRange(0, null, J.get$length$asx(codeUnits));
      oneBytes = P._scanOneByteCharacters(codeUnits, 0, end);
      if (oneBytes > 0) {
        firstPart = P.String_String$fromCharCodes(codeUnits, 0, oneBytes);
        if (oneBytes === end)
          return firstPart;
        buffer = new P.StringBuffer(firstPart);
        start = oneBytes;
        isFirstCharacter = false;
      } else {
        start = 0;
        buffer = null;
        isFirstCharacter = true;
      }
      if (buffer == null)
        buffer = new P.StringBuffer("");
      decoder = new P._Utf8Decoder(false, buffer);
      decoder._isFirstCharacter = isFirstCharacter;
      decoder.convert$3(codeUnits, start, end);
      if (decoder._expectedUnits > 0) {
        H.throwExpression(P.FormatException$("Unfinished UTF-8 octet sequence", codeUnits, end));
        buffer._contents += H.Primitives_stringFromCharCode(65533);
        decoder._extraUnits = decoder._expectedUnits = decoder._convert$_value = 0;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P._Utf8Decoder.prototype = {
    convert$3: function(codeUnits, startIndex, endIndex) {
      var value, expectedUnits, extraUnits, t1, t2, i, unit, t3, oneBytes, i0, i1, t4, _this = this,
        _s21_ = "Bad UTF-8 encoding 0x";
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      value = _this._convert$_value;
      expectedUnits = _this._expectedUnits;
      extraUnits = _this._extraUnits;
      _this._extraUnits = _this._expectedUnits = _this._convert$_value = 0;
      $label0$0:
        for (t1 = J.getInterceptor$asx(codeUnits), t2 = _this._stringSink, i = startIndex; true; i = i1) {
          $label1$1:
            if (expectedUnits > 0) {
              do {
                if (i === endIndex)
                  break $label0$0;
                unit = t1.$index(codeUnits, i);
                if (typeof unit !== "number")
                  return unit.$and();
                if ((unit & 192) !== 128) {
                  t3 = P.FormatException$(_s21_ + C.JSInt_methods.toRadixString$1(unit, 16), codeUnits, i);
                  throw H.wrapException(t3);
                } else {
                  value = (value << 6 | unit & 63) >>> 0;
                  --expectedUnits;
                  ++i;
                }
              } while (expectedUnits > 0);
              t3 = extraUnits - 1;
              if (t3 < 0 || t3 >= 4)
                return H.ioore(C.List_127_2047_65535_1114111, t3);
              if (value <= C.List_127_2047_65535_1114111[t3]) {
                t3 = P.FormatException$("Overlong encoding of 0x" + C.JSInt_methods.toRadixString$1(value, 16), codeUnits, i - extraUnits - 1);
                throw H.wrapException(t3);
              }
              if (value > 1114111) {
                t3 = P.FormatException$("Character outside valid Unicode range: 0x" + C.JSInt_methods.toRadixString$1(value, 16), codeUnits, i - extraUnits - 1);
                throw H.wrapException(t3);
              }
              if (!_this._isFirstCharacter || value !== 65279)
                t2._contents += H.Primitives_stringFromCharCode(value);
              _this._isFirstCharacter = false;
            }
          if (typeof endIndex !== "number")
            return H.iae(endIndex);
          t3 = i < endIndex;
          for (; t3;) {
            oneBytes = P._scanOneByteCharacters(codeUnits, i, endIndex);
            if (oneBytes > 0) {
              _this._isFirstCharacter = false;
              i0 = i + oneBytes;
              t2._contents += P.String_String$fromCharCodes(codeUnits, i, i0);
              if (i0 === endIndex)
                break;
            } else
              i0 = i;
            i1 = i0 + 1;
            unit = t1.$index(codeUnits, i0);
            if (typeof unit !== "number")
              return unit.$lt();
            if (unit < 0) {
              t4 = P.FormatException$("Negative UTF-8 code unit: -0x" + C.JSInt_methods.toRadixString$1(-unit, 16), codeUnits, i1 - 1);
              throw H.wrapException(t4);
            } else {
              if ((unit & 224) === 192) {
                value = unit & 31;
                expectedUnits = 1;
                extraUnits = 1;
                continue $label0$0;
              }
              if ((unit & 240) === 224) {
                value = unit & 15;
                expectedUnits = 2;
                extraUnits = 2;
                continue $label0$0;
              }
              if ((unit & 248) === 240 && unit < 245) {
                value = unit & 7;
                expectedUnits = 3;
                extraUnits = 3;
                continue $label0$0;
              }
              t4 = P.FormatException$(_s21_ + C.JSInt_methods.toRadixString$1(unit, 16), codeUnits, i1 - 1);
              throw H.wrapException(t4);
            }
          }
          break $label0$0;
        }
      if (expectedUnits > 0) {
        _this._convert$_value = value;
        _this._expectedUnits = expectedUnits;
        _this._extraUnits = extraUnits;
      }
    }
  };
  P._symbolMapToStringMap_closure.prototype = {
    call$2: function(key, value) {
      this.result.$indexSet(0, H.interceptedTypeCheck(key, "$isSymbol0").__internal$_name, value);
    },
    $signature: 18
  };
  P.NoSuchMethodError_toString_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2, t3;
      H.interceptedTypeCheck(key, "$isSymbol0");
      t1 = this.sb;
      t2 = this._box_0;
      t1._contents += t2.comma;
      t3 = t1._contents += H.S(key.__internal$_name);
      t1._contents = t3 + ": ";
      t1._contents += P.Error_safeToString(value);
      t2.comma = ", ";
    },
    $signature: 18
  };
  P._BigIntImpl.prototype = {
    get$_isZero: function() {
      return this._used === 0;
    },
    $negate: function(_) {
      var t2, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return _this;
      t2 = !_this._isNegative;
      t3 = _this._digits;
      t1 = P._BigIntImpl__normalize(t1, t3);
      return new P._BigIntImpl(t1 === 0 ? false : t2, t3, t1);
    },
    _dlShift$1: function(n) {
      var resultUsed, digits, resultDigits, i, t1, t2, t3, t4,
        used = this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + n;
      digits = this._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (i = used - 1, t1 = digits.length, t2 = resultDigits.length; i >= 0; --i) {
        t3 = i + n;
        if (i >= t1)
          return H.ioore(digits, i);
        t4 = digits[i];
        if (t3 >= t2)
          return H.ioore(resultDigits, t3);
        resultDigits[t3] = t4;
      }
      t1 = this._isNegative;
      t2 = P._BigIntImpl__normalize(resultUsed, resultDigits);
      return new P._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    _drShift$1: function(n) {
      var resultUsed, digits, resultDigits, t1, t2, i, t3, t4, result, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used - n;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = digits.length, t2 = resultDigits.length, i = n; i < used; ++i) {
        t3 = i - n;
        if (i < 0 || i >= t1)
          return H.ioore(digits, i);
        t4 = digits[i];
        if (t3 >= t2)
          return H.ioore(resultDigits, t3);
        resultDigits[t3] = t4;
      }
      t2 = _this._isNegative;
      t3 = P._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new P._BigIntImpl(t3 === 0 ? false : t2, resultDigits, t3);
      if (t2)
        for (i = 0; i < n; ++i) {
          if (i >= t1)
            return H.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      return result;
    },
    $shl: function(_, shiftAmount) {
      var digitShift, resultUsed, resultDigits, t2, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return _this;
      digitShift = shiftAmount / 16 | 0;
      if (C.JSInt_methods.$mod(shiftAmount, 16) === 0)
        return _this._dlShift$1(digitShift);
      resultUsed = t1 + digitShift + 1;
      resultDigits = new Uint16Array(resultUsed);
      P._BigIntImpl__lsh(_this._digits, t1, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      t2 = P._BigIntImpl__normalize(resultUsed, resultDigits);
      return new P._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    $shr: function(_, shiftAmount) {
      var t1, digitShift, bitShift, resultUsed, digits, resultDigits, t2, result, i, _this = this;
      if (typeof shiftAmount !== "number")
        return shiftAmount.$lt();
      if (shiftAmount < 0)
        throw H.wrapException(P.ArgumentError$("shift-amount must be posititve " + shiftAmount));
      t1 = _this._used;
      if (t1 === 0)
        return _this;
      digitShift = C.JSInt_methods._tdivFast$1(shiftAmount, 16);
      bitShift = C.JSInt_methods.$mod(shiftAmount, 16);
      if (bitShift === 0)
        return _this._drShift$1(digitShift);
      resultUsed = t1 - digitShift;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      P._BigIntImpl__rsh(digits, t1, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      t2 = P._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new P._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
      if (t1) {
        t1 = digits.length;
        if (digitShift < 0 || digitShift >= t1)
          return H.ioore(digits, digitShift);
        if ((digits[digitShift] & C.JSInt_methods.$shl(1, bitShift) - 1) !== 0)
          return result.$sub(0, $.$get$_BigIntImpl_one());
        for (i = 0; i < digitShift; ++i) {
          if (i >= t1)
            return H.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      }
      return result;
    },
    _absCompare$1: function(bigInt) {
      return P._BigIntImpl__compareDigits(this._digits, this._used, bigInt._digits, bigInt._used);
    },
    compareTo$1: function(_, bigInt) {
      var t1, result;
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      t1 = this._isNegative;
      if (t1 === bigInt._isNegative) {
        result = this._absCompare$1(bigInt);
        return t1 ? 0 - result : result;
      }
      return t1 ? -1 : 1;
    },
    _absAddSetSign$2: function(other, isNegative) {
      var resultUsed, resultDigits, t1, _this = this,
        used = _this._used,
        otherUsed = other._used;
      if (used < otherUsed)
        return other._absAddSetSign$2(_this, isNegative);
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultUsed = used + 1;
      resultDigits = new Uint16Array(resultUsed);
      P._BigIntImpl__absAdd(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = P._BigIntImpl__normalize(resultUsed, resultDigits);
      return new P._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absSubSetSign$2: function(other, isNegative) {
      var otherUsed, resultDigits, t1, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      otherUsed = other._used;
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultDigits = new Uint16Array(used);
      P._BigIntImpl__absSub(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = P._BigIntImpl__normalize(used, resultDigits);
      return new P._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absAndSetSign$2: function(other, isNegative) {
      var digits, otherDigits, resultDigits, t1, t2, t3, i, t4, t5,
        resultUsed = this._used,
        resultUsed0 = other._used;
      resultUsed = resultUsed < resultUsed0 ? resultUsed : resultUsed0;
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.length, i = 0; i < resultUsed; ++i) {
        if (i >= t1)
          return H.ioore(digits, i);
        t4 = digits[i];
        if (i >= t2)
          return H.ioore(otherDigits, i);
        t5 = otherDigits[i];
        if (i >= t3)
          return H.ioore(resultDigits, i);
        resultDigits[i] = t4 & t5;
      }
      t1 = P._BigIntImpl__normalize(resultUsed, resultDigits);
      return new P._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absAndNotSetSign$2: function(other, isNegative) {
      var t1, t2, t3, i, t4, t5,
        resultUsed = this._used,
        digits = this._digits,
        otherDigits = other._digits,
        resultDigits = new Uint16Array(resultUsed),
        m = other._used;
      if (resultUsed < m)
        m = resultUsed;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.length, i = 0; i < m; ++i) {
        if (i >= t1)
          return H.ioore(digits, i);
        t4 = digits[i];
        if (i >= t2)
          return H.ioore(otherDigits, i);
        t5 = otherDigits[i];
        if (i >= t3)
          return H.ioore(resultDigits, i);
        resultDigits[i] = t4 & ~t5;
      }
      for (i = m; i < resultUsed; ++i) {
        if (i < 0 || i >= t1)
          return H.ioore(digits, i);
        t2 = digits[i];
        if (i >= t3)
          return H.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      t1 = P._BigIntImpl__normalize(resultUsed, resultDigits);
      return new P._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absOrSetSign$2: function(other, isNegative) {
      var m, l, t1, t2, t3, i, t4, t5, lDigits,
        used = this._used,
        otherUsed = other._used,
        resultUsed = used > otherUsed ? used : otherUsed,
        digits = this._digits,
        otherDigits = other._digits,
        resultDigits = new Uint16Array(resultUsed);
      if (used < otherUsed) {
        m = used;
        l = other;
      } else {
        m = otherUsed;
        l = this;
      }
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.length, i = 0; i < m; ++i) {
        if (i >= t1)
          return H.ioore(digits, i);
        t4 = digits[i];
        if (i >= t2)
          return H.ioore(otherDigits, i);
        t5 = otherDigits[i];
        if (i >= t3)
          return H.ioore(resultDigits, i);
        resultDigits[i] = t4 | t5;
      }
      lDigits = l._digits;
      for (t1 = lDigits.length, i = m; i < resultUsed; ++i) {
        if (i < 0 || i >= t1)
          return H.ioore(lDigits, i);
        t2 = lDigits[i];
        if (i >= t3)
          return H.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      t1 = P._BigIntImpl__normalize(resultUsed, resultDigits);
      return new P._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    $and: function(_, bigInt) {
      var n, p, _this = this;
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      if (_this._used === 0 || bigInt.get$_isZero())
        return $.$get$_BigIntImpl_zero();
      if (_this._isNegative) {
        n = _this;
        p = bigInt;
      } else {
        n = bigInt;
        p = _this;
      }
      return p._absAndNotSetSign$2(n._absSubSetSign$2($.$get$_BigIntImpl_one(), false), false);
    },
    $or: function(_, bigInt) {
      var t1, n, p, _this = this;
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      if (_this._used === 0)
        return bigInt;
      if (bigInt._used === 0)
        return _this;
      t1 = _this._isNegative;
      if (t1 === bigInt._isNegative) {
        if (t1) {
          t1 = $.$get$_BigIntImpl_one();
          return _this._absSubSetSign$2(t1, true)._absAndSetSign$2(bigInt._absSubSetSign$2(t1, true), true)._absAddSetSign$2(t1, true);
        }
        return _this._absOrSetSign$2(bigInt, false);
      }
      if (t1) {
        n = _this;
        p = bigInt;
      } else {
        n = bigInt;
        p = _this;
      }
      t1 = $.$get$_BigIntImpl_one();
      return n._absSubSetSign$2(t1, true)._absAndNotSetSign$2(p, true)._absAddSetSign$2(t1, true);
    },
    $add: function(_, bigInt) {
      var isNegative, _this = this;
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      if (_this._used === 0)
        return bigInt;
      if (bigInt._used === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative === bigInt._isNegative)
        return _this._absAddSetSign$2(bigInt, isNegative);
      if (_this._absCompare$1(bigInt) >= 0)
        return _this._absSubSetSign$2(bigInt, isNegative);
      return bigInt._absSubSetSign$2(_this, !isNegative);
    },
    $sub: function(_, bigInt) {
      var isNegative, _this = this;
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      if (_this._used === 0)
        return bigInt.$negate(0);
      if (bigInt._used === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative !== bigInt._isNegative)
        return _this._absAddSetSign$2(bigInt, isNegative);
      if (_this._absCompare$1(bigInt) >= 0)
        return _this._absSubSetSign$2(bigInt, isNegative);
      return bigInt._absSubSetSign$2(_this, !isNegative);
    },
    $mul: function(_, bigInt) {
      var used, otherUsed, resultUsed, digits, otherDigits, resultDigits, t1, i, t2;
      H.interceptedTypeCheck(bigInt, "$isBigInt");
      used = this._used;
      otherUsed = bigInt._used;
      if (used === 0 || otherUsed === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + otherUsed;
      digits = this._digits;
      otherDigits = bigInt._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = otherDigits.length, i = 0; i < otherUsed;) {
        if (i >= t1)
          return H.ioore(otherDigits, i);
        P._BigIntImpl__mulAdd(otherDigits[i], digits, 0, resultDigits, i, used);
        ++i;
      }
      t1 = this._isNegative !== bigInt._isNegative;
      t2 = P._BigIntImpl__normalize(resultUsed, resultDigits);
      return new P._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    _div$1: function(bigInt) {
      var t1, t2, lastQuo_used, quo_digits, quo;
      if (this._used < bigInt._used)
        return $.$get$_BigIntImpl_zero();
      this._divRem$1(bigInt);
      t1 = $._BigIntImpl__lastQuoRemUsed;
      t2 = $._BigIntImpl__lastRemUsed;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      lastQuo_used = t1 - t2;
      quo_digits = P._BigIntImpl__cloneDigits($._BigIntImpl__lastQuoRemDigits, t2, t1, lastQuo_used);
      t1 = P._BigIntImpl__normalize(lastQuo_used, quo_digits);
      quo = new P._BigIntImpl(false, quo_digits, t1);
      return this._isNegative !== bigInt._isNegative && t1 > 0 ? quo.$negate(0) : quo;
    },
    _rem$1: function(bigInt) {
      var t1, t2, remDigits, rem, _this = this;
      if (_this._used < bigInt._used)
        return _this;
      _this._divRem$1(bigInt);
      t1 = $._BigIntImpl__lastQuoRemDigits;
      t2 = $._BigIntImpl__lastRemUsed;
      remDigits = P._BigIntImpl__cloneDigits(t1, 0, t2, t2);
      t2 = P._BigIntImpl__normalize($._BigIntImpl__lastRemUsed, remDigits);
      rem = new P._BigIntImpl(false, remDigits, t2);
      t1 = $._BigIntImpl__lastRem_nsh;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        rem = rem.$shr(0, t1);
      return _this._isNegative && rem._used > 0 ? rem.$negate(0) : rem;
    },
    _divRem$1: function(other) {
      var yDigits, yUsed, t1, nsh, yDigits0, yUsed0, resultDigits, resultUsed0, topDigitDivisor, j, tmpDigits, tmpUsed, resultUsed1, nyDigits, i, estimatedQuotientDigit, _this = this,
        resultUsed = _this._used;
      if (resultUsed === $._BigIntImpl__lastDividendUsed && other._used === $._BigIntImpl__lastDivisorUsed && _this._digits === $._BigIntImpl__lastDividendDigits && other._digits === $._BigIntImpl__lastDivisorDigits)
        return;
      yDigits = other._digits;
      yUsed = other._used;
      t1 = yUsed - 1;
      if (t1 < 0 || t1 >= yDigits.length)
        return H.ioore(yDigits, t1);
      nsh = 16 - C.JSInt_methods.get$bitLength(yDigits[t1]);
      if (nsh > 0) {
        yDigits0 = new Uint16Array(yUsed + 5);
        yUsed0 = P._BigIntImpl__lShiftDigits(yDigits, yUsed, nsh, yDigits0);
        resultDigits = new Uint16Array(resultUsed + 5);
        resultUsed0 = P._BigIntImpl__lShiftDigits(_this._digits, resultUsed, nsh, resultDigits);
      } else {
        resultDigits = P._BigIntImpl__cloneDigits(_this._digits, 0, resultUsed, resultUsed + 2);
        yUsed0 = yUsed;
        yDigits0 = yDigits;
        resultUsed0 = resultUsed;
      }
      t1 = yUsed0 - 1;
      if (t1 < 0 || t1 >= yDigits0.length)
        return H.ioore(yDigits0, t1);
      topDigitDivisor = yDigits0[t1];
      j = resultUsed0 - yUsed0;
      tmpDigits = new Uint16Array(resultUsed0);
      tmpUsed = P._BigIntImpl__dlShiftDigits(yDigits0, yUsed0, j, tmpDigits);
      resultUsed1 = resultUsed0 + 1;
      t1 = resultDigits.length;
      if (P._BigIntImpl__compareDigits(resultDigits, resultUsed0, tmpDigits, tmpUsed) >= 0) {
        if (resultUsed0 < 0 || resultUsed0 >= t1)
          return H.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 1;
        P._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
      } else {
        if (resultUsed0 < 0 || resultUsed0 >= t1)
          return H.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 0;
      }
      nyDigits = new Uint16Array(yUsed0 + 2);
      if (yUsed0 < 0 || yUsed0 >= nyDigits.length)
        return H.ioore(nyDigits, yUsed0);
      nyDigits[yUsed0] = 1;
      P._BigIntImpl__absSub(nyDigits, yUsed0 + 1, yDigits0, yUsed0, nyDigits);
      i = resultUsed0 - 1;
      for (; j > 0;) {
        estimatedQuotientDigit = P._BigIntImpl__estimateQuotientDigit(topDigitDivisor, resultDigits, i);
        --j;
        P._BigIntImpl__mulAdd(estimatedQuotientDigit, nyDigits, 0, resultDigits, j, yUsed0);
        if (i < 0 || i >= t1)
          return H.ioore(resultDigits, i);
        if (resultDigits[i] < estimatedQuotientDigit) {
          tmpUsed = P._BigIntImpl__dlShiftDigits(nyDigits, yUsed0, j, tmpDigits);
          P._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
          for (; --estimatedQuotientDigit, resultDigits[i] < estimatedQuotientDigit;)
            P._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
        }
        --i;
      }
      $._BigIntImpl__lastDividendDigits = _this._digits;
      $._BigIntImpl__lastDividendUsed = resultUsed;
      $._BigIntImpl__lastDivisorDigits = yDigits;
      $._BigIntImpl__lastDivisorUsed = yUsed;
      $._BigIntImpl__lastQuoRemDigits = resultDigits;
      $._BigIntImpl__lastQuoRemUsed = resultUsed1;
      $._BigIntImpl__lastRemUsed = yUsed0;
      $._BigIntImpl__lastRem_nsh = nsh;
    },
    get$hashCode: function(_) {
      var hash, t2, t3, i,
        combine = new P._BigIntImpl_hashCode_combine(),
        t1 = this._used;
      if (t1 === 0)
        return 6707;
      hash = this._isNegative ? 83585 : 429689;
      for (t2 = this._digits, t3 = t2.length, i = 0; i < t1; ++i) {
        if (i >= t3)
          return H.ioore(t2, i);
        hash = combine.call$2(hash, t2[i]);
      }
      return new P._BigIntImpl_hashCode_finish().call$1(hash);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P._BigIntImpl && this.compareTo$1(0, other) === 0;
    },
    $div: function(_, other) {
      H.interceptedTypeCheck(other, "$isBigInt");
      return C.JSNumber_methods.$div(this.toDouble$0(0), other.toDouble$0(0));
    },
    $lt: function(_, other) {
      return this.compareTo$1(0, H.interceptedTypeCheck(other, "$isBigInt")) < 0;
    },
    $gt: function(_, other) {
      return this.compareTo$1(0, H.interceptedTypeCheck(other, "$isBigInt")) > 0;
    },
    $ge: function(_, other) {
      return this.compareTo$1(0, H.interceptedTypeCheck(other, "$isBigInt")) >= 0;
    },
    toDouble$0: function(_) {
      var resultBits, t2, t3, $length, biasedExponent, t4, readBits, i, roundUp, _this = this, _box_0 = {},
        t1 = _this._used;
      if (t1 === 0)
        return 0;
      resultBits = new Uint8Array(8);
      --t1;
      t2 = _this._digits;
      t3 = t2.length;
      if (t1 < 0 || t1 >= t3)
        return H.ioore(t2, t1);
      $length = 16 * t1 + C.JSInt_methods.get$bitLength(t2[t1]);
      if ($length > 1024)
        return _this._isNegative ? -1 / 0 : 1 / 0;
      if (_this._isNegative) {
        if (7 >= resultBits.length)
          return H.ioore(resultBits, 7);
        resultBits[7] = 128;
      }
      biasedExponent = $length - 53 + 1075;
      t4 = resultBits.length;
      if (6 >= t4)
        return H.ioore(resultBits, 6);
      resultBits[6] = (biasedExponent & 15) << 4;
      if (7 >= t4)
        return H.ioore(resultBits, 7);
      resultBits[7] = (resultBits[7] | C.JSInt_methods._shrOtherPositive$1(biasedExponent, 4)) >>> 0;
      _box_0.cachedBitsLength = _box_0.cachedBits = 0;
      _box_0.digitIndex = t1;
      readBits = new P._BigIntImpl_toDouble_readBits(_box_0, _this);
      t1 = readBits.call$1(5);
      if (typeof t1 !== "number")
        return t1.$and();
      resultBits[6] = (resultBits[6] | t1 & 15) >>> 0;
      for (i = 5; i >= 0; --i)
        C.NativeUint8List_methods.$indexSet(resultBits, i, readBits.call$1(8));
      roundUp = new P._BigIntImpl_toDouble_roundUp(resultBits);
      if (J.$eq$(readBits.call$1(1), 1))
        if ((resultBits[0] & 1) === 1)
          roundUp.call$0();
        else if (_box_0.cachedBits !== 0)
          roundUp.call$0();
        else
          for (i = _box_0.digitIndex, t1 = i >= 0; t1; --i) {
            if (i < 0 || i >= t3)
              return H.ioore(t2, i);
            if (t2[i] !== 0) {
              roundUp.call$0();
              break;
            }
          }
      t1 = resultBits.buffer;
      t1.toString;
      H._checkViewArguments(t1, 0, null);
      t1 = new DataView(t1, 0);
      return t1.getFloat64(0, true);
    },
    toString$0: function(_) {
      var decimalDigitChunks, rest, other, t2, digits4, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return "0";
      if (t1 === 1) {
        if (_this._isNegative) {
          t1 = _this._digits;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          return C.JSInt_methods.toString$0(-t1[0]);
        }
        t1 = _this._digits;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        return C.JSInt_methods.toString$0(t1[0]);
      }
      decimalDigitChunks = H.setRuntimeTypeInfo([], [P.String]);
      t1 = _this._isNegative;
      rest = t1 ? _this.$negate(0) : _this;
      for (; rest._used > 1;) {
        other = $.$get$_BigIntImpl__bigInt10000();
        t2 = other._used === 0;
        if (t2)
          H.throwExpression(C.C_IntegerDivisionByZeroException);
        digits4 = J.toString$0$(rest._rem$1(other));
        C.JSArray_methods.add$1(decimalDigitChunks, digits4);
        t3 = digits4.length;
        if (t3 === 1)
          C.JSArray_methods.add$1(decimalDigitChunks, "000");
        if (t3 === 2)
          C.JSArray_methods.add$1(decimalDigitChunks, "00");
        if (t3 === 3)
          C.JSArray_methods.add$1(decimalDigitChunks, "0");
        if (t2)
          H.throwExpression(C.C_IntegerDivisionByZeroException);
        rest = rest._div$1(other);
      }
      t2 = rest._digits;
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      C.JSArray_methods.add$1(decimalDigitChunks, C.JSInt_methods.toString$0(t2[0]));
      if (t1)
        C.JSArray_methods.add$1(decimalDigitChunks, "-");
      return new H.ReversedListIterable(decimalDigitChunks, [H.getTypeArgumentByIndex(decimalDigitChunks, 0)]).join$0(0);
    },
    $isBigInt: 1,
    $isComparable: 1,
    $asComparable: function() {
      return [P.BigInt];
    }
  };
  P._BigIntImpl_hashCode_combine.prototype = {
    call$2: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    $signature: 19
  };
  P._BigIntImpl_hashCode_finish.prototype = {
    call$1: function(hash) {
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    $signature: 20
  };
  P._BigIntImpl_toDouble_readBits.prototype = {
    call$1: function(n) {
      var t1, t2, t3, t4, t5, nextDigit, nextDigitLength, result;
      for (t1 = this._box_0, t2 = this.$this, t3 = t2._used - 1, t2 = t2._digits, t4 = t2.length; t5 = t1.cachedBitsLength, t5 < n;) {
        t5 = t1.digitIndex;
        if (t5 < 0) {
          t1.digitIndex = t5 - 1;
          nextDigit = 0;
          nextDigitLength = 16;
        } else {
          if (t5 >= t4)
            return H.ioore(t2, t5);
          nextDigit = t2[t5];
          nextDigitLength = t5 === t3 ? C.JSInt_methods.get$bitLength(nextDigit) : 16;
          --t1.digitIndex;
        }
        t1.cachedBits = C.JSInt_methods.$shl(t1.cachedBits, nextDigitLength) + nextDigit;
        t1.cachedBitsLength += nextDigitLength;
      }
      t2 = t1.cachedBits;
      t5 -= n;
      result = C.JSInt_methods.$shr(t2, t5);
      t1.cachedBits = t2 - C.JSInt_methods.$shl(result, t5);
      t1.cachedBitsLength = t5;
      return result;
    },
    $signature: 20
  };
  P._BigIntImpl_toDouble_roundUp.prototype = {
    call$0: function() {
      var t1, carry, i, sum;
      for (t1 = this.resultBits, carry = 1, i = 0; i < 8; ++i) {
        if (carry === 0)
          break;
        sum = t1[i] + carry;
        t1[i] = sum & 255;
        carry = sum >>> 8;
      }
    },
    $signature: 0
  };
  P.BigInt.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.BigInt];
    }
  };
  P.bool.prototype = {};
  P.DateTime.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.DateTime && this._value === other._value && this.isUtc === other.isUtc;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._value, H.interceptedTypeCheck(other, "$isDateTime")._value);
    },
    DateTime$_withValue$2$isUtc: function(_value, isUtc) {
      var t2,
        t1 = this._value;
      if (Math.abs(t1) <= 864e13)
        t2 = false;
      else
        t2 = true;
      if (t2)
        throw H.wrapException(P.ArgumentError$("DateTime is outside valid range: " + t1));
    },
    get$hashCode: function(_) {
      var t1 = this._value;
      return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0: function(_) {
      var _this = this,
        y = P.DateTime__fourDigits(H.Primitives_getYear(_this)),
        m = P.DateTime__twoDigits(H.Primitives_getMonth(_this)),
        d = P.DateTime__twoDigits(H.Primitives_getDay(_this)),
        h = P.DateTime__twoDigits(H.Primitives_getHours(_this)),
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(_this)),
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(_this)),
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(_this));
      if (_this.isUtc)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.DateTime];
    }
  };
  P.double.prototype = {};
  P.Duration.prototype = {
    $add: function(_, other) {
      return new P.Duration(C.JSInt_methods.$add(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration));
    },
    $sub: function(_, other) {
      return new P.Duration(C.JSInt_methods.$sub(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration));
    },
    $lt: function(_, other) {
      return C.JSInt_methods.$lt(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
    },
    $gt: function(_, other) {
      return C.JSInt_methods.$gt(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
    },
    $ge: function(_, other) {
      return C.JSInt_methods.$ge(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.Duration && this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return C.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
    },
    toString$0: function(_) {
      var twoDigitMinutes, twoDigitSeconds, sixDigitUs,
        t1 = new P.Duration_toString_twoDigits(),
        t2 = this._duration;
      if (t2 < 0)
        return "-" + new P.Duration(0 - t2).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 60000000) % 60);
      twoDigitSeconds = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 1000000) % 60);
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(t2 % 1000000);
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.Duration];
    }
  };
  P.Duration_toString_sixDigits.prototype = {
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    },
    $signature: 14
  };
  P.Duration_toString_twoDigits.prototype = {
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    $signature: 14
  };
  P.Error.prototype = {};
  P.AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed";
    }
  };
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var message, prefix, explanation, errorValue, _this = this,
        t1 = _this.name,
        nameString = t1 != null ? " (" + t1 + ")" : "";
      t1 = _this.message;
      message = t1 == null ? "" : ": " + H.S(t1);
      prefix = _this.get$_errorName() + nameString + message;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation, t2,
        t1 = this.start;
      if (t1 == null) {
        t1 = this.end;
        explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
      } else {
        t2 = this.end;
        if (t2 == null)
          explanation = ": Not greater than or equal to " + H.S(t1);
        else if (t2 > t1)
          explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
        else
          explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
      }
      return explanation;
    }
  };
  P.IndexError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var t1,
        invalidValue = H.intTypeCheck(this.invalidValue);
      if (typeof invalidValue !== "number")
        return invalidValue.$lt();
      if (invalidValue < 0)
        return ": index must not be negative";
      t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + H.S(t1);
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.NoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t1, t2, _i, t3, t4, argument, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = new P.StringBuffer("");
      _box_0.comma = "";
      for (t1 = _this._core$_arguments, t2 = t1.length, _i = 0, t3 = "", t4 = ""; _i < t2; ++_i, t4 = ", ") {
        argument = t1[_i];
        sb._contents = t3 + t4;
        t3 = sb._contents += P.Error_safeToString(argument);
        _box_0.comma = ", ";
      }
      _this._namedArguments.forEach$1(0, new P.NoSuchMethodError_toString_closure(_box_0, sb));
      receiverText = P.Error_safeToString(_this._core$_receiver);
      actualParameters = sb.toString$0(0);
      t1 = "NoSuchMethodError: method not found: '" + H.S(_this._core$_memberName.__internal$_name) + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
      return t1;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
    }
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + this.message;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + P.Error_safeToString(t1) + ".";
    }
  };
  P.OutOfMemoryError.prototype = {
    toString$0: function(_) {
      return "Out of Memory";
    },
    $isError: 1
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var t1 = this.variableName;
      return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + t1 + "' during its initialization";
    }
  };
  P._Exception.prototype = {
    toString$0: function(_) {
      return "Exception: " + this.message;
    },
    $isException: 1
  };
  P.FormatException.prototype = {
    toString$0: function(_) {
      var source, lineNum, lineStart, previousCharWasCR, i, char, lineEnd, end, start, prefix, postfix, slice,
        t1 = this.message,
        report = "" !== t1 ? "FormatException: " + t1 : "FormatException",
        offset = this.offset,
        objectSource = this.source;
      if (typeof objectSource === "string") {
        if (offset != null)
          t1 = offset < 0 || offset > objectSource.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          source = objectSource.length > 78 ? C.JSString_methods.substring$2(objectSource, 0, 75) + "..." : objectSource;
          return report + "\n" + source;
        }
        for (lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          char = C.JSString_methods._codeUnitAt$1(objectSource, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = objectSource.length;
        for (i = offset; i < lineEnd; ++i) {
          char = C.JSString_methods.codeUnitAt$1(objectSource, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = C.JSString_methods.substring$2(objectSource, start, end);
        return report + prefix + slice + postfix + "\n" + C.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
    },
    $isException: 1,
    get$message: function(receiver) {
      return this.message;
    },
    get$source: function(receiver) {
      return this.source;
    },
    get$offset: function(receiver) {
      return this.offset;
    }
  };
  P.IntegerDivisionByZeroException.prototype = {
    toString$0: function(_) {
      return "IntegerDivisionByZeroException";
    },
    $isException: 1
  };
  P.Function.prototype = {};
  P.int.prototype = {};
  P.Iterable.prototype = {
    cast$1$0: function(_, $R) {
      return H.CastIterable_CastIterable(this, H.getRuntimeTypeArgument(this, "Iterable", 0), $R);
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return H.MappedIterable_MappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    where$1: function(_, test) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return new H.WhereIterable(this, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), [t1]);
    },
    contains$1: function(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(t1), element))
          return true;
      return false;
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "Iterable", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    skip$1: function(_, count) {
      return H.SkipIterable_SkipIterable(this, count, H.getRuntimeTypeArgument(this, "Iterable", 0));
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current(it);
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P.Iterator.prototype = {};
  P.List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1};
  P.Map.prototype = {};
  P.MapEntry.prototype = {};
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.num.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  };
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return "Instance of '" + H.S(H.Primitives_objectTypeName(this)) + "'";
    },
    noSuchMethod$1: function(_, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    get$runtimeType: function(_) {
      return H.getRuntimeType(this);
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P.Match.prototype = {};
  P.RegExp.prototype = {$isPattern: 1};
  P.RegExpMatch.prototype = {$isMatch: 1};
  P.Set.prototype = {};
  P.StackTrace.prototype = {};
  P.String.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1
  };
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return this._contents.length;
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  P.Symbol0.prototype = {};
  P.Type.prototype = {};
  P.Uri.prototype = {};
  P.Uri__parseIPv4Address_error.prototype = {
    call$2: function(msg, position) {
      throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + msg, this.host, position));
    },
    $signature: 34
  };
  P.Uri_parseIPv6Address_error.prototype = {
    call$2: function(msg, position) {
      throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + msg, this.host, position));
    },
    call$1: function(msg) {
      return this.call$2(msg, null);
    },
    $signature: 48
  };
  P.Uri_parseIPv6Address_parseHex.prototype = {
    call$2: function(start, end) {
      var value;
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = P.int_parse(C.JSString_methods.substring$2(this.host, start, end), null, 16);
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $signature: 19
  };
  P._Uri.prototype = {
    get$userInfo: function() {
      return this._userInfo;
    },
    get$host: function(_) {
      var t1 = this._host;
      if (t1 == null)
        return "";
      if (C.JSString_methods.startsWith$1(t1, "["))
        return C.JSString_methods.substring$2(t1, 1, t1.length - 1);
      return t1;
    },
    get$port: function(_) {
      var t1 = this._port;
      if (t1 == null)
        return P._Uri__defaultPort(this.scheme);
      return t1;
    },
    get$query: function(_) {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment: function() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    get$pathSegments: function() {
      var pathToSplit, t1, t2, t3,
        result = this._pathSegments;
      if (result != null)
        return result;
      pathToSplit = this.path;
      if (pathToSplit.length !== 0 && C.JSString_methods._codeUnitAt$1(pathToSplit, 0) === 47)
        pathToSplit = C.JSString_methods.substring$1(pathToSplit, 1);
      if (pathToSplit === "")
        result = C.List_empty1;
      else {
        t1 = P.String;
        t2 = H.setRuntimeTypeInfo(pathToSplit.split("/"), [t1]);
        t3 = H.getTypeArgumentByIndex(t2, 0);
        result = P.List_List$unmodifiable(new H.MappedListIterable(t2, H.functionTypeCheck(P.core_Uri_decodeComponent$closure(), {func: 1, ret: null, args: [t3]}), [t3, null]), t1);
      }
      this.set$_pathSegments(result);
      return result;
    },
    _mergePaths$2: function(base, reference) {
      var backCount, refStart, baseEnd, newEnd, delta, t1;
      for (backCount = 0, refStart = 0; C.JSString_methods.startsWith$2(reference, "../", refStart);) {
        refStart += 3;
        ++backCount;
      }
      baseEnd = C.JSString_methods.lastIndexOf$1(base, "/");
      while (true) {
        if (!(baseEnd > 0 && backCount > 0))
          break;
        newEnd = C.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
        if (newEnd < 0)
          break;
        delta = baseEnd - newEnd;
        t1 = delta !== 2;
        if (!t1 || delta === 3)
          if (C.JSString_methods.codeUnitAt$1(base, newEnd + 1) === 46)
            t1 = !t1 || C.JSString_methods.codeUnitAt$1(base, newEnd + 2) === 46;
          else
            t1 = false;
        else
          t1 = false;
        if (t1)
          break;
        --backCount;
        baseEnd = newEnd;
      }
      return C.JSString_methods.replaceRange$3(base, baseEnd + 1, null, C.JSString_methods.substring$1(reference, refStart - 3 * backCount));
    },
    resolve$1: function(reference) {
      return this.resolveUri$1(P.Uri_parse(reference));
    },
    resolveUri$1: function(reference) {
      var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, t1, mergedPath, t2, _this = this, _null = null;
      if (reference.get$scheme().length !== 0) {
        targetScheme = reference.get$scheme();
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host(reference);
          targetPort = reference.get$hasPort() ? reference.get$port(reference) : _null;
        } else {
          targetPort = _null;
          targetHost = targetPort;
          targetUserInfo = "";
        }
        targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
        targetQuery = reference.get$hasQuery() ? reference.get$query(reference) : _null;
      } else {
        targetScheme = _this.scheme;
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host(reference);
          targetPort = P._Uri__makePort(reference.get$hasPort() ? reference.get$port(reference) : _null, targetScheme);
          targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
          targetQuery = reference.get$hasQuery() ? reference.get$query(reference) : _null;
        } else {
          targetUserInfo = _this._userInfo;
          targetHost = _this._host;
          targetPort = _this._port;
          if (reference.get$path(reference) === "") {
            targetPath = _this.path;
            targetQuery = reference.get$hasQuery() ? reference.get$query(reference) : _this._query;
          } else {
            if (reference.get$hasAbsolutePath())
              targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
            else {
              t1 = _this.path;
              if (t1.length === 0)
                if (targetHost == null)
                  targetPath = targetScheme.length === 0 ? reference.get$path(reference) : P._Uri__removeDotSegments(reference.get$path(reference));
                else
                  targetPath = P._Uri__removeDotSegments("/" + reference.get$path(reference));
              else {
                mergedPath = _this._mergePaths$2(t1, reference.get$path(reference));
                t2 = targetScheme.length === 0;
                if (!t2 || targetHost != null || C.JSString_methods.startsWith$1(t1, "/"))
                  targetPath = P._Uri__removeDotSegments(mergedPath);
                else
                  targetPath = P._Uri__normalizeRelativePath(mergedPath, !t2 || targetHost != null);
              }
            }
            targetQuery = reference.get$hasQuery() ? reference.get$query(reference) : _null;
          }
        }
      }
      return new P._Uri(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, reference.get$hasFragment() ? reference.get$fragment() : _null);
    },
    get$hasAuthority: function() {
      return this._host != null;
    },
    get$hasPort: function() {
      return this._port != null;
    },
    get$hasQuery: function() {
      return this._query != null;
    },
    get$hasFragment: function() {
      return this._fragment != null;
    },
    get$hasAbsolutePath: function() {
      return C.JSString_methods.startsWith$1(this.path, "/");
    },
    toFilePath$0: function() {
      var windows, pathSegments, _this = this,
        t1 = _this.scheme;
      if (t1 !== "" && t1 !== "file")
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a " + H.S(t1) + " URI"));
      t1 = _this._query;
      if ((t1 == null ? "" : t1) !== "")
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a query component"));
      t1 = _this._fragment;
      if ((t1 == null ? "" : t1) !== "")
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a fragment component"));
      windows = $.$get$_Uri__isWindowsCached();
      if (H.boolConversionCheck(windows))
        t1 = P._Uri__toWindowsFilePath(_this);
      else {
        if (_this._host != null && _this.get$host(_this) !== "")
          H.throwExpression(P.UnsupportedError$("Cannot extract a non-Windows file path from a file URI with an authority"));
        pathSegments = _this.get$pathSegments();
        P._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
        t1 = P.StringBuffer__writeAll(C.JSString_methods.startsWith$1(_this.path, "/") ? "/" : "", pathSegments, "/");
        t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return t1;
    },
    toString$0: function(_) {
      var t2, t3, t4, _this = this,
        t1 = _this._text;
      if (t1 == null) {
        t1 = _this.scheme;
        t2 = t1.length !== 0 ? H.S(t1) + ":" : "";
        t3 = _this._host;
        t4 = t3 == null;
        if (!t4 || t1 === "file") {
          t1 = t2 + "//";
          t2 = _this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + H.S(t2) + "@";
          if (!t4)
            t1 += t3;
          t2 = _this._port;
          if (t2 != null)
            t1 = t1 + ":" + H.S(t2);
        } else
          t1 = t2;
        t1 += _this.path;
        t2 = _this._query;
        if (t2 != null)
          t1 = t1 + "?" + t2;
        t2 = _this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + t2;
        t1 = _this._text = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return t1;
    },
    $eq: function(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!!J.getInterceptor$(other).$isUri)
        if (_this.scheme == other.get$scheme())
          if (_this._host != null === other.get$hasAuthority())
            if (_this._userInfo == other.get$userInfo())
              if (_this.get$host(_this) == other.get$host(other))
                if (_this.get$port(_this) == other.get$port(other))
                  if (_this.path === other.get$path(other)) {
                    t1 = _this._query;
                    t2 = t1 == null;
                    if (!t2 === other.get$hasQuery()) {
                      if (t2)
                        t1 = "";
                      if (t1 === other.get$query(other)) {
                        t1 = _this._fragment;
                        t2 = t1 == null;
                        if (!t2 === other.get$hasFragment()) {
                          if (t2)
                            t1 = "";
                          t1 = t1 === other.get$fragment();
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = C.JSString_methods.get$hashCode(this.toString$0(0)) : t1;
    },
    set$_pathSegments: function(_pathSegments) {
      this._pathSegments = H.assertSubtype(_pathSegments, "$isList", [P.String], "$asList");
    },
    $isUri: 1,
    get$scheme: function() {
      return this.scheme;
    },
    get$path: function(receiver) {
      return this.path;
    }
  };
  P._Uri__Uri$notSimple_closure.prototype = {
    call$1: function(_) {
      throw H.wrapException(P.FormatException$("Invalid port", this.uri, this.portStart + 1));
    },
    $signature: 21
  };
  P._Uri__checkNonWindowsPathReservedCharacters_closure.prototype = {
    call$1: function(segment) {
      var _s23_ = "Illegal path character ";
      H.stringTypeCheck(segment);
      if (J.contains$1$asx(segment, "/"))
        if (this.argumentError)
          throw H.wrapException(P.ArgumentError$(_s23_ + segment));
        else
          throw H.wrapException(P.UnsupportedError$(_s23_ + segment));
    },
    $signature: 21
  };
  P._Uri__makePath_closure.prototype = {
    call$1: function(s) {
      return P._Uri__uriEncode(C.List_qg40, s, C.C_Utf8Codec, false);
    },
    $signature: 9
  };
  P.UriData.prototype = {
    get$uri: function() {
      var t2, queryIndex, end, query, _this = this, _null = null,
        t1 = _this._uriCache;
      if (t1 != null)
        return t1;
      t1 = _this._separatorIndices;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = _this._text;
      t1 = t1[0] + 1;
      queryIndex = C.JSString_methods.indexOf$2(t2, "?", t1);
      end = t2.length;
      if (queryIndex >= 0) {
        query = P._Uri__normalizeOrSubstring(t2, queryIndex + 1, end, C.List_CVk, false);
        end = queryIndex;
      } else
        query = _null;
      return _this._uriCache = new P._DataUri("data", _null, _null, _null, P._Uri__normalizeOrSubstring(t2, t1, end, C.List_qg4, false), query, _null);
    },
    toString$0: function(_) {
      var t2,
        t1 = this._separatorIndices;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = this._text;
      return t1[0] === -1 ? "data:" + t2 : t2;
    }
  };
  P._createTables_closure.prototype = {
    call$1: function(_) {
      return new Uint8Array(96);
    },
    $signature: 56
  };
  P._createTables_build.prototype = {
    call$2: function(state, defaultTransition) {
      var t1 = this.tables;
      if (state >= t1.length)
        return H.ioore(t1, state);
      t1 = t1[state];
      J.fillRange$3$x(t1, 0, 96, defaultTransition);
      return t1;
    },
    $signature: 60
  };
  P._createTables_setChars.prototype = {
    call$3: function(target, chars, transition) {
      var t1, t2, i, t3;
      for (t1 = chars.length, t2 = target.length, i = 0; i < t1; ++i) {
        t3 = C.JSString_methods._codeUnitAt$1(chars, i) ^ 96;
        if (t3 >= t2)
          return H.ioore(target, t3);
        target[t3] = transition;
      }
    },
    $signature: 22
  };
  P._createTables_setRange.prototype = {
    call$3: function(target, range, transition) {
      var i, n, t1, t2;
      for (i = C.JSString_methods._codeUnitAt$1(range, 0), n = C.JSString_methods._codeUnitAt$1(range, 1), t1 = target.length; i <= n; ++i) {
        t2 = (i ^ 96) >>> 0;
        if (t2 >= t1)
          return H.ioore(target, t2);
        target[t2] = transition;
      }
    },
    $signature: 22
  };
  P._SimpleUri.prototype = {
    get$hasAuthority: function() {
      return this._hostStart > 0;
    },
    get$hasPort: function() {
      var t1, t2;
      if (this._hostStart > 0) {
        t1 = this._portStart;
        if (typeof t1 !== "number")
          return t1.$add();
        t2 = this._pathStart;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 + 1 < t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    get$hasQuery: function() {
      var t1 = this._queryStart;
      if (typeof t1 !== "number")
        return t1.$lt();
      return t1 < this._fragmentStart;
    },
    get$hasFragment: function() {
      return this._fragmentStart < this._uri.length;
    },
    get$_isFile: function() {
      return this._schemeEnd === 4 && C.JSString_methods.startsWith$1(this._uri, "file");
    },
    get$_isHttp: function() {
      return this._schemeEnd === 4 && C.JSString_methods.startsWith$1(this._uri, "http");
    },
    get$_isHttps: function() {
      return this._schemeEnd === 5 && C.JSString_methods.startsWith$1(this._uri, "https");
    },
    get$hasAbsolutePath: function() {
      return C.JSString_methods.startsWith$2(this._uri, "/", this._pathStart);
    },
    get$scheme: function() {
      var t2, _this = this,
        _s7_ = "package",
        t1 = _this._schemeEnd;
      if (t1 <= 0)
        return "";
      t2 = _this._schemeCache;
      if (t2 != null)
        return t2;
      if (_this.get$_isHttp())
        t1 = _this._schemeCache = "http";
      else if (_this.get$_isHttps()) {
        _this._schemeCache = "https";
        t1 = "https";
      } else if (_this.get$_isFile()) {
        _this._schemeCache = "file";
        t1 = "file";
      } else if (t1 === 7 && C.JSString_methods.startsWith$1(_this._uri, _s7_)) {
        _this._schemeCache = _s7_;
        t1 = _s7_;
      } else {
        t1 = C.JSString_methods.substring$2(_this._uri, 0, t1);
        _this._schemeCache = t1;
      }
      return t1;
    },
    get$userInfo: function() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd + 3;
      return t1 > t2 ? C.JSString_methods.substring$2(this._uri, t2, t1 - 1) : "";
    },
    get$host: function(_) {
      var t1 = this._hostStart;
      return t1 > 0 ? C.JSString_methods.substring$2(this._uri, t1, this._portStart) : "";
    },
    get$port: function(_) {
      var t1, _this = this;
      if (_this.get$hasPort()) {
        t1 = _this._portStart;
        if (typeof t1 !== "number")
          return t1.$add();
        return P.int_parse(C.JSString_methods.substring$2(_this._uri, t1 + 1, _this._pathStart), null, null);
      }
      if (_this.get$_isHttp())
        return 80;
      if (_this.get$_isHttps())
        return 443;
      return 0;
    },
    get$path: function(_) {
      return C.JSString_methods.substring$2(this._uri, this._pathStart, this._queryStart);
    },
    get$query: function(_) {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      if (typeof t1 !== "number")
        return t1.$lt();
      return t1 < t2 ? C.JSString_methods.substring$2(this._uri, t1 + 1, t2) : "";
    },
    get$fragment: function() {
      var t1 = this._fragmentStart,
        t2 = this._uri;
      return t1 < t2.length ? C.JSString_methods.substring$1(t2, t1 + 1) : "";
    },
    get$pathSegments: function() {
      var t2, parts, i,
        start = this._pathStart,
        end = this._queryStart,
        t1 = this._uri;
      if (C.JSString_methods.startsWith$2(t1, "/", start)) {
        if (typeof start !== "number")
          return start.$add();
        ++start;
      }
      if (start == end)
        return C.List_empty1;
      t2 = P.String;
      parts = H.setRuntimeTypeInfo([], [t2]);
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        if (C.JSString_methods.codeUnitAt$1(t1, i) === 47) {
          C.JSArray_methods.add$1(parts, C.JSString_methods.substring$2(t1, start, i));
          start = i + 1;
        }
        ++i;
      }
      C.JSArray_methods.add$1(parts, C.JSString_methods.substring$2(t1, start, end));
      return P.List_List$unmodifiable(parts, t2);
    },
    _isPort$1: function(port) {
      var portDigitStart,
        t1 = this._portStart;
      if (typeof t1 !== "number")
        return t1.$add();
      portDigitStart = t1 + 1;
      return portDigitStart + port.length === this._pathStart && C.JSString_methods.startsWith$2(this._uri, port, portDigitStart);
    },
    removeFragment$0: function() {
      var _this = this,
        t1 = _this._fragmentStart,
        t2 = _this._uri;
      if (t1 >= t2.length)
        return _this;
      return new P._SimpleUri(C.JSString_methods.substring$2(t2, 0, t1), _this._schemeEnd, _this._hostStart, _this._portStart, _this._pathStart, _this._queryStart, t1, _this._schemeCache);
    },
    resolve$1: function(reference) {
      return this.resolveUri$1(P.Uri_parse(reference));
    },
    resolveUri$1: function(reference) {
      if (reference instanceof P._SimpleUri)
        return this._simpleMerge$2(this, reference);
      return this._toNonSimple$0().resolveUri$1(reference);
    },
    _simpleMerge$2: function(base, ref) {
      var t2, t3, isSimple, delta, newUri, t4, t5, refStart, baseStart, baseEnd, baseUri, baseStart0, backCount, refStart0, insert,
        t1 = ref._schemeEnd;
      if (t1 > 0)
        return ref;
      t2 = ref._hostStart;
      if (t2 > 0) {
        t3 = base._schemeEnd;
        if (t3 <= 0)
          return ref;
        if (base.get$_isFile())
          isSimple = ref._pathStart != ref._queryStart;
        else if (base.get$_isHttp())
          isSimple = !ref._isPort$1("80");
        else
          isSimple = !base.get$_isHttps() || !ref._isPort$1("443");
        if (isSimple) {
          delta = t3 + 1;
          newUri = C.JSString_methods.substring$2(base._uri, 0, delta) + C.JSString_methods.substring$1(ref._uri, t1 + 1);
          t1 = ref._portStart;
          if (typeof t1 !== "number")
            return t1.$add();
          t4 = ref._pathStart;
          if (typeof t4 !== "number")
            return t4.$add();
          t5 = ref._queryStart;
          if (typeof t5 !== "number")
            return t5.$add();
          return new P._SimpleUri(newUri, t3, t2 + delta, t1 + delta, t4 + delta, t5 + delta, ref._fragmentStart + delta, base._schemeCache);
        } else
          return this._toNonSimple$0().resolveUri$1(ref);
      }
      refStart = ref._pathStart;
      t1 = ref._queryStart;
      if (refStart == t1) {
        t2 = ref._fragmentStart;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (t1 < t2) {
          t3 = base._queryStart;
          if (typeof t3 !== "number")
            return t3.$sub();
          delta = t3 - t1;
          return new P._SimpleUri(C.JSString_methods.substring$2(base._uri, 0, t3) + C.JSString_methods.substring$1(ref._uri, t1), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, t1 + delta, t2 + delta, base._schemeCache);
        }
        t1 = ref._uri;
        if (t2 < t1.length) {
          t3 = base._fragmentStart;
          return new P._SimpleUri(C.JSString_methods.substring$2(base._uri, 0, t3) + C.JSString_methods.substring$1(t1, t2), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, base._queryStart, t2 + (t3 - t2), base._schemeCache);
        }
        return base.removeFragment$0();
      }
      t2 = ref._uri;
      if (C.JSString_methods.startsWith$2(t2, "/", refStart)) {
        t3 = base._pathStart;
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof refStart !== "number")
          return H.iae(refStart);
        delta = t3 - refStart;
        newUri = C.JSString_methods.substring$2(base._uri, 0, t3) + C.JSString_methods.substring$1(t2, refStart);
        if (typeof t1 !== "number")
          return t1.$add();
        return new P._SimpleUri(newUri, base._schemeEnd, base._hostStart, base._portStart, t3, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseStart = base._pathStart;
      baseEnd = base._queryStart;
      if (baseStart == baseEnd && base._hostStart > 0) {
        for (; C.JSString_methods.startsWith$2(t2, "../", refStart);) {
          if (typeof refStart !== "number")
            return refStart.$add();
          refStart += 3;
        }
        if (typeof baseStart !== "number")
          return baseStart.$sub();
        if (typeof refStart !== "number")
          return H.iae(refStart);
        delta = baseStart - refStart + 1;
        newUri = C.JSString_methods.substring$2(base._uri, 0, baseStart) + "/" + C.JSString_methods.substring$1(t2, refStart);
        if (typeof t1 !== "number")
          return t1.$add();
        return new P._SimpleUri(newUri, base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseUri = base._uri;
      for (baseStart0 = baseStart; C.JSString_methods.startsWith$2(baseUri, "../", baseStart0);) {
        if (typeof baseStart0 !== "number")
          return baseStart0.$add();
        baseStart0 += 3;
      }
      backCount = 0;
      while (true) {
        if (typeof refStart !== "number")
          return refStart.$add();
        refStart0 = refStart + 3;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(refStart0 <= t1 && C.JSString_methods.startsWith$2(t2, "../", refStart)))
          break;
        ++backCount;
        refStart = refStart0;
      }
      insert = "";
      while (true) {
        if (typeof baseEnd !== "number")
          return baseEnd.$gt();
        if (typeof baseStart0 !== "number")
          return H.iae(baseStart0);
        if (!(baseEnd > baseStart0))
          break;
        --baseEnd;
        if (C.JSString_methods.codeUnitAt$1(baseUri, baseEnd) === 47) {
          if (backCount === 0) {
            insert = "/";
            break;
          }
          --backCount;
          insert = "/";
        }
      }
      if (baseEnd === baseStart0 && base._schemeEnd <= 0 && !C.JSString_methods.startsWith$2(baseUri, "/", baseStart)) {
        refStart -= backCount * 3;
        insert = "";
      }
      delta = baseEnd - refStart + insert.length;
      return new P._SimpleUri(C.JSString_methods.substring$2(baseUri, 0, baseEnd) + insert + C.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
    },
    toFilePath$0: function() {
      var t1, t2, windows, t3, _this = this;
      if (_this._schemeEnd >= 0 && !_this.get$_isFile())
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a " + H.S(_this.get$scheme()) + " URI"));
      t1 = _this._queryStart;
      t2 = _this._uri;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < t2.length) {
        if (t1 < _this._fragmentStart)
          throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a query component"));
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a fragment component"));
      }
      windows = $.$get$_Uri__isWindowsCached();
      if (H.boolConversionCheck(windows))
        t1 = P._Uri__toWindowsFilePath(_this);
      else {
        t3 = _this._portStart;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (_this._hostStart < t3)
          H.throwExpression(P.UnsupportedError$("Cannot extract a non-Windows file path from a file URI with an authority"));
        t1 = C.JSString_methods.substring$2(t2, _this._pathStart, t1);
      }
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = C.JSString_methods.get$hashCode(this._uri) : t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return !!J.getInterceptor$(other).$isUri && this._uri === other.toString$0(0);
    },
    _toNonSimple$0: function() {
      var _this = this, _null = null,
        t1 = _this.get$scheme(),
        t2 = _this.get$userInfo(),
        t3 = _this._hostStart > 0 ? _this.get$host(_this) : _null,
        t4 = _this.get$hasPort() ? _this.get$port(_this) : _null,
        t5 = _this._uri,
        t6 = _this._queryStart,
        t7 = C.JSString_methods.substring$2(t5, _this._pathStart, t6),
        t8 = _this._fragmentStart;
      if (typeof t6 !== "number")
        return t6.$lt();
      t6 = t6 < t8 ? _this.get$query(_this) : _null;
      return new P._Uri(t1, t2, t3, t4, t7, t6, t8 < t5.length ? _this.get$fragment() : _null);
    },
    toString$0: function(_) {
      return this._uri;
    },
    $isUri: 1
  };
  P._DataUri.prototype = {};
  W.HtmlElement.prototype = {};
  W.AccessibleNodeList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.AnchorElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.AreaElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.Blob.prototype = {$isBlob: 1};
  W.CharacterData.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssNumericValue.prototype = {$isCssNumericValue: 1};
  W.CssPerspective.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssRule.prototype = {$isCssRule: 1};
  W.CssStyleDeclaration.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssStyleDeclarationBase.prototype = {};
  W.CssStyleValue.prototype = {};
  W.CssTransformComponent.prototype = {};
  W.CssTransformValue.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssUnparsedValue.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.DataTransferItemList.prototype = {
    $index: function(receiver, index) {
      return receiver[index];
    },
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Document.prototype = {$isDocument: 1};
  W.DomException.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.DomRectList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtype(value, "$isRectangle", [P.num], "$asRectangle");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [[P.Rectangle, P.num]];
    },
    $asListMixin: function() {
      return [[P.Rectangle, P.num]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Rectangle, P.num]];
    },
    $asImmutableListMixin: function() {
      return [[P.Rectangle, P.num]];
    }
  };
  W.DomRectReadOnly.prototype = {
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(this.get$width(receiver)) + " x " + H.S(this.get$height(receiver));
    },
    $eq: function(receiver, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor$(other);
      if (!t1.$isRectangle)
        return false;
      return receiver.left === other.left && receiver.top === other.top && this.get$width(receiver) === t1.get$width(other) && this.get$height(receiver) === t1.get$height(other);
    },
    get$hashCode: function(receiver) {
      return W._JenkinsSmiHash_hash4(C.JSNumber_methods.get$hashCode(receiver.left), C.JSNumber_methods.get$hashCode(receiver.top), C.JSNumber_methods.get$hashCode(this.get$width(receiver)), C.JSNumber_methods.get$hashCode(this.get$height(receiver)));
    },
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    },
    $isRectangle: 1,
    $asRectangle: function() {
      return [P.num];
    }
  };
  W.DomStringList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.stringTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [P.String];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [P.String];
    },
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $asImmutableListMixin: function() {
      return [P.String];
    }
  };
  W.DomTokenList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Element.prototype = {
    toString$0: function(receiver) {
      return receiver.localName;
    }
  };
  W.Event.prototype = {$isEvent: 1};
  W.EventSource.prototype = {$isEventSource: 1};
  W.EventTarget.prototype = {
    addEventListener$3: function(receiver, type, listener, useCapture) {
      H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, useCapture);
    },
    addEventListener$2: function($receiver, type, listener) {
      return this.addEventListener$3($receiver, type, listener, null);
    },
    _addEventListener$3: function(receiver, type, listener, options) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), options);
    },
    _removeEventListener$3: function(receiver, type, listener, options) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), false);
    },
    $isEventTarget: 1
  };
  W.File.prototype = {$isFile: 1};
  W.FileList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isFile");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.File];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.File];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.File];
    },
    $asListMixin: function() {
      return [W.File];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.File];
    },
    $isList: 1,
    $asList: function() {
      return [W.File];
    },
    $asImmutableListMixin: function() {
      return [W.File];
    }
  };
  W.FileReader.prototype = {
    get$result: function(receiver) {
      var res = receiver.result;
      if (!!J.getInterceptor$(res).$isByteBuffer)
        return H.NativeUint8List_NativeUint8List$view(res, 0, null);
      return res;
    }
  };
  W.FileWriter.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.FormElement.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Gamepad.prototype = {$isGamepad: 1};
  W.History.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.HtmlCollection.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Node];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.HttpRequest.prototype = {
    get$responseHeaders: function(receiver) {
      var headersList, _i, header, t2, splitIdx, key, value,
        t1 = P.String,
        headers = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1),
        headersString = receiver.getAllResponseHeaders();
      if (headersString == null)
        return headers;
      headersList = headersString.split("\r\n");
      for (t1 = headersList.length, _i = 0; _i < t1; ++_i) {
        header = headersList[_i];
        t2 = J.getInterceptor$asx(header);
        if (t2.get$length(header) === 0)
          continue;
        splitIdx = t2.indexOf$1(header, ": ");
        if (splitIdx === -1)
          continue;
        key = t2.substring$2(header, 0, splitIdx).toLowerCase();
        value = t2.substring$1(header, splitIdx + 2);
        if (headers.containsKey$1(0, key))
          headers.$indexSet(0, key, H.S(headers.$index(0, key)) + ", " + value);
        else
          headers.$indexSet(0, key, value);
      }
      return headers;
    },
    open$5$async$password$user: function(receiver, method, url, async, password, user) {
      return receiver.open(method, url, true, user, password);
    },
    open$3$async: function($receiver, method, url, async) {
      return $receiver.open(method, url, async);
    },
    send$1: function(receiver, body_OR_data) {
      return receiver.send(body_OR_data);
    },
    setRequestHeader$2: function(receiver, $name, value) {
      return receiver.setRequestHeader(H.stringTypeCheck($name), H.stringTypeCheck(value));
    },
    $isHttpRequest: 1
  };
  W.HttpRequest_request_closure.prototype = {
    call$1: function(e) {
      var t1, t2, accepted, unknownRedirect, t3;
      H.interceptedTypeCheck(e, "$isProgressEvent");
      t1 = this.xhr;
      t2 = t1.status;
      if (typeof t2 !== "number")
        return t2.$ge();
      accepted = t2 >= 200 && t2 < 300;
      unknownRedirect = t2 > 307 && t2 < 400;
      t2 = accepted || t2 === 0 || t2 === 304 || unknownRedirect;
      t3 = this.completer;
      if (t2)
        t3.complete$1(0, t1);
      else
        t3.completeError$1(e);
    },
    $signature: 7
  };
  W.HttpRequestEventTarget.prototype = {};
  W.ImageData.prototype = {$isImageData: 1};
  W.KeyboardEvent.prototype = {$isKeyboardEvent: 1};
  W.Location.prototype = {
    get$origin: function(receiver) {
      if ("origin" in receiver)
        return receiver.origin;
      return H.S(receiver.protocol) + "//" + H.S(receiver.host);
    },
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.MediaList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.MessageEvent.prototype = {$isMessageEvent: 1};
  W.MidiInputMap.prototype = {
    addAll$1: function(receiver, other) {
      H.assertSubtype(other, "$isMap", [P.String, null], "$asMap");
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    containsKey$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key))) != null;
    },
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.MidiInputMap_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    $indexSet: function(receiver, key, value) {
      H.stringTypeCheck(key);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W.MidiInputMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 10
  };
  W.MidiOutputMap.prototype = {
    addAll$1: function(receiver, other) {
      H.assertSubtype(other, "$isMap", [P.String, null], "$asMap");
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    containsKey$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key))) != null;
    },
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.MidiOutputMap_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    $indexSet: function(receiver, key, value) {
      H.stringTypeCheck(key);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W.MidiOutputMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 10
  };
  W.MimeType.prototype = {$isMimeType: 1};
  W.MimeTypeArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isMimeType");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.MimeType];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.MimeType];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.MimeType];
    },
    $asListMixin: function() {
      return [W.MimeType];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.MimeType];
    },
    $isList: 1,
    $asList: function() {
      return [W.MimeType];
    },
    $asImmutableListMixin: function() {
      return [W.MimeType];
    }
  };
  W.Node.prototype = {
    toString$0: function(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    },
    $isNode: 1
  };
  W.NodeList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Node];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.Plugin.prototype = {$isPlugin: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.PluginArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isPlugin");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Plugin];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Plugin];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Plugin];
    },
    $asListMixin: function() {
      return [W.Plugin];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Plugin];
    },
    $isList: 1,
    $asList: function() {
      return [W.Plugin];
    },
    $asImmutableListMixin: function() {
      return [W.Plugin];
    }
  };
  W.ProgressEvent.prototype = {$isProgressEvent: 1};
  W.RtcStatsReport.prototype = {
    addAll$1: function(receiver, other) {
      H.assertSubtype(other, "$isMap", [P.String, null], "$asMap");
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    containsKey$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key))) != null;
    },
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.RtcStatsReport_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    $indexSet: function(receiver, key, value) {
      H.stringTypeCheck(key);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W.RtcStatsReport_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 10
  };
  W.SelectElement.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.SourceBuffer.prototype = {$isSourceBuffer: 1};
  W.SourceBufferList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isSourceBuffer");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.SourceBuffer];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SourceBuffer];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SourceBuffer];
    },
    $asListMixin: function() {
      return [W.SourceBuffer];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SourceBuffer];
    },
    $isList: 1,
    $asList: function() {
      return [W.SourceBuffer];
    },
    $asImmutableListMixin: function() {
      return [W.SourceBuffer];
    }
  };
  W.SpeechGrammar.prototype = {$isSpeechGrammar: 1};
  W.SpeechGrammarList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isSpeechGrammar");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.SpeechGrammar];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechGrammar];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SpeechGrammar];
    },
    $asListMixin: function() {
      return [W.SpeechGrammar];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechGrammar];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechGrammar];
    },
    $asImmutableListMixin: function() {
      return [W.SpeechGrammar];
    }
  };
  W.SpeechRecognitionResult.prototype = {$isSpeechRecognitionResult: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Storage.prototype = {
    addAll$1: function(receiver, other) {
      var t1 = P.String;
      J.forEach$1$ax(H.assertSubtype(other, "$isMap", [t1, t1], "$asMap"), new W.Storage_addAll_closure(receiver));
    },
    containsKey$1: function(receiver, key) {
      return receiver.getItem(H.stringTypeCheck(key)) != null;
    },
    $index: function(receiver, key) {
      return receiver.getItem(H.stringTypeCheck(key));
    },
    $indexSet: function(receiver, key, value) {
      receiver.setItem(H.stringTypeCheck(key), H.stringTypeCheck(value));
    },
    forEach$1: function(receiver, f) {
      var i, key;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String, P.String]});
      for (i = 0; true; ++i) {
        key = receiver.key(i);
        if (key == null)
          return;
        f.call$2(key, receiver.getItem(key));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.Storage_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    get$isEmpty: function(receiver) {
      return receiver.key(0) == null;
    },
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W.Storage_addAll_closure.prototype = {
    call$2: function(k, v) {
      this.$this.setItem(H.stringTypeCheck(k), H.stringTypeCheck(v));
    },
    $signature: 24
  };
  W.Storage_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 16
  };
  W.StyleSheet.prototype = {$isStyleSheet: 1};
  W.TextTrack.prototype = {$isTextTrack: 1};
  W.TextTrackCue.prototype = {$isTextTrackCue: 1};
  W.TextTrackCueList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isTextTrackCue");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.TextTrackCue];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrackCue];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.TextTrackCue];
    },
    $asListMixin: function() {
      return [W.TextTrackCue];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrackCue];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrackCue];
    },
    $asImmutableListMixin: function() {
      return [W.TextTrackCue];
    }
  };
  W.TextTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isTextTrack");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.TextTrack];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrack];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.TextTrack];
    },
    $asListMixin: function() {
      return [W.TextTrack];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrack];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrack];
    },
    $asImmutableListMixin: function() {
      return [W.TextTrack];
    }
  };
  W.TimeRanges.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Touch.prototype = {$isTouch: 1};
  W.TouchList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isTouch");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Touch];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Touch];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Touch];
    },
    $asListMixin: function() {
      return [W.Touch];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Touch];
    },
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    },
    $asImmutableListMixin: function() {
      return [W.Touch];
    }
  };
  W.TrackDefaultList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.UIEvent.prototype = {};
  W.Url.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.VideoTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Window.prototype = {$isWindow: 1};
  W.WorkerGlobalScope.prototype = {$isWorkerGlobalScope: 1};
  W._CssRuleList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isCssRule");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.CssRule];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.CssRule];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.CssRule];
    },
    $asListMixin: function() {
      return [W.CssRule];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.CssRule];
    },
    $isList: 1,
    $asList: function() {
      return [W.CssRule];
    },
    $asImmutableListMixin: function() {
      return [W.CssRule];
    }
  };
  W._DomRect.prototype = {
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor$(other);
      if (!t1.$isRectangle)
        return false;
      return receiver.left === other.left && receiver.top === other.top && receiver.width === t1.get$width(other) && receiver.height === t1.get$height(other);
    },
    get$hashCode: function(receiver) {
      return W._JenkinsSmiHash_hash4(C.JSNumber_methods.get$hashCode(receiver.left), C.JSNumber_methods.get$hashCode(receiver.top), C.JSNumber_methods.get$hashCode(receiver.width), C.JSNumber_methods.get$hashCode(receiver.height));
    },
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    }
  };
  W._GamepadList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isGamepad");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Gamepad];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Gamepad];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Gamepad];
    },
    $asListMixin: function() {
      return [W.Gamepad];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Gamepad];
    },
    $isList: 1,
    $asList: function() {
      return [W.Gamepad];
    },
    $asImmutableListMixin: function() {
      return [W.Gamepad];
    }
  };
  W._NamedNodeMap.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Node];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W._SpeechRecognitionResultList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isSpeechRecognitionResult");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SpeechRecognitionResult];
    },
    $asListMixin: function() {
      return [W.SpeechRecognitionResult];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $asImmutableListMixin: function() {
      return [W.SpeechRecognitionResult];
    }
  };
  W._StyleSheetList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isStyleSheet");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.StyleSheet];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.StyleSheet];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.StyleSheet];
    },
    $asListMixin: function() {
      return [W.StyleSheet];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.StyleSheet];
    },
    $isList: 1,
    $asList: function() {
      return [W.StyleSheet];
    },
    $asImmutableListMixin: function() {
      return [W.StyleSheet];
    }
  };
  W._EventStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      return W._EventStreamSubscription$(this._html$_target, this._eventType, onData, false, t1);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  W._EventStreamSubscription.prototype = {
    cancel$0: function(_) {
      var _this = this;
      if (_this._html$_target == null)
        return;
      _this._unlisten$0();
      _this._html$_target = null;
      _this.set$_onData(null);
      return;
    },
    pause$0: function(_) {
      if (this._html$_target == null)
        return;
      ++this._pauseCount;
      this._unlisten$0();
    },
    resume$0: function(_) {
      var _this = this;
      if (_this._html$_target == null || _this._pauseCount <= 0)
        return;
      --_this._pauseCount;
      _this._tryResume$0();
    },
    _tryResume$0: function() {
      var _this = this,
        t1 = _this._onData;
      if (t1 != null && _this._pauseCount <= 0)
        J.addEventListener$3$x(_this._html$_target, _this._eventType, t1, false);
    },
    _unlisten$0: function() {
      var t3,
        t1 = this._onData,
        t2 = t1 != null;
      if (t2) {
        t3 = this._html$_target;
        t3.toString;
        H.functionTypeCheck(t1, {func: 1, args: [W.Event]});
        if (t2)
          J._removeEventListener$3$x(t3, this._eventType, t1, false);
      }
    },
    set$_onData: function(_onData) {
      this._onData = H.functionTypeCheck(_onData, {func: 1, args: [W.Event]});
    }
  };
  W._EventStreamSubscription_closure.prototype = {
    call$1: function(e) {
      return this.onData.call$1(H.interceptedTypeCheck(e, "$isEvent"));
    },
    $signature: 35
  };
  W.ImmutableListMixin.prototype = {
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0)]);
    },
    sort$1: function(receiver, compare) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      throw H.wrapException(P.UnsupportedError$("Cannot sort immutable List."));
    }
  };
  W.FixedSizeListIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        nextPosition = _this._position + 1,
        t1 = _this._length;
      if (nextPosition < t1) {
        _this.set$_current(J.$index$asx(_this._array, nextPosition));
        _this._position = nextPosition;
        return true;
      }
      _this.set$_current(null);
      _this._position = t1;
      return false;
    },
    get$current: function(_) {
      return this._current;
    },
    set$_current: function(_current) {
      this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase.prototype = {};
  W._DomRectList_Interceptor_ListMixin.prototype = {};
  W._DomRectList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._DomStringList_Interceptor_ListMixin.prototype = {};
  W._DomStringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._FileList_Interceptor_ListMixin.prototype = {};
  W._FileList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._HtmlCollection_Interceptor_ListMixin.prototype = {};
  W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._MidiInputMap_Interceptor_MapMixin.prototype = {};
  W._MidiOutputMap_Interceptor_MapMixin.prototype = {};
  W._MimeTypeArray_Interceptor_ListMixin.prototype = {};
  W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._NodeList_Interceptor_ListMixin.prototype = {};
  W._NodeList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._PluginArray_Interceptor_ListMixin.prototype = {};
  W._PluginArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._RtcStatsReport_Interceptor_MapMixin.prototype = {};
  W._SourceBufferList_EventTarget_ListMixin.prototype = {};
  W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  W._SpeechGrammarList_Interceptor_ListMixin.prototype = {};
  W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._Storage_Interceptor_MapMixin.prototype = {};
  W._TextTrackCueList_Interceptor_ListMixin.prototype = {};
  W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._TextTrackList_EventTarget_ListMixin.prototype = {};
  W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  W._TouchList_Interceptor_ListMixin.prototype = {};
  W._TouchList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__CssRuleList_Interceptor_ListMixin.prototype = {};
  W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__GamepadList_Interceptor_ListMixin.prototype = {};
  W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__NamedNodeMap_Interceptor_ListMixin.prototype = {};
  W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__SpeechRecognitionResultList_Interceptor_ListMixin.prototype = {};
  W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__StyleSheetList_Interceptor_ListMixin.prototype = {};
  W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._AcceptStructuredClone.prototype = {
    findSlot$1: function(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      C.JSArray_methods.add$1(t1, value);
      C.JSArray_methods.add$1(this.copies, null);
      return $length;
    },
    walk$1: function(e) {
      var millisSinceEpoch, t1, proto, slot, copy, l, t2, $length, i, _this = this, _box_0 = {};
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      if (e instanceof Date) {
        millisSinceEpoch = e.getTime();
        t1 = new P.DateTime(millisSinceEpoch, true);
        t1.DateTime$_withValue$2$isUtc(millisSinceEpoch, true);
        return t1;
      }
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (typeof Promise != "undefined" && e instanceof Promise)
        return P.convertNativePromiseToDartFuture(e);
      proto = Object.getPrototypeOf(e);
      if (proto === Object.prototype || proto === null) {
        slot = _this.findSlot$1(e);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = _box_0.copy = t1[slot];
        if (copy != null)
          return copy;
        copy = P.LinkedHashMap__makeEmpty();
        _box_0.copy = copy;
        C.JSArray_methods.$indexSet(t1, slot, copy);
        _this.forEachJsField$2(e, new P._AcceptStructuredClone_walk_closure(_box_0, _this));
        return _box_0.copy;
      }
      if (e instanceof Array) {
        l = e;
        slot = _this.findSlot$1(l);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = t1[slot];
        if (copy != null)
          return copy;
        t2 = J.getInterceptor$asx(l);
        $length = t2.get$length(l);
        copy = _this.mustCopy ? new Array($length) : l;
        C.JSArray_methods.$indexSet(t1, slot, copy);
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = J.getInterceptor$ax(copy);
        i = 0;
        for (; i < $length; ++i)
          t1.$indexSet(copy, i, _this.walk$1(t2.$index(l, i)));
        return copy;
      }
      return e;
    },
    convertNativeToDart_AcceptStructuredClone$2$mustCopy: function(object, mustCopy) {
      this.mustCopy = true;
      return this.walk$1(object);
    }
  };
  P._AcceptStructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this._box_0.copy,
        t2 = this.$this.walk$1(value);
      J.$indexSet$ax(t1, key, t2);
      return t2;
    },
    $signature: 36
  };
  P.convertDartToNative_Dictionary_closure.prototype = {
    call$2: function(key, value) {
      this.object[key] = value;
    },
    $signature: 6
  };
  P._AcceptStructuredCloneDart2Js.prototype = {
    forEachJsField$2: function(object, action) {
      var t1, t2, _i, key;
      H.functionTypeCheck(action, {func: 1, args: [,,]});
      for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        action.call$2(key, object[key]);
      }
    }
  };
  P.convertNativePromiseToDartFuture_closure.prototype = {
    call$1: function(result) {
      return this.completer.complete$1(0, result);
    },
    $signature: 8
  };
  P.convertNativePromiseToDartFuture_closure0.prototype = {
    call$1: function(result) {
      return this.completer.completeError$1(result);
    },
    $signature: 8
  };
  P.KeyRange.prototype = {$isKeyRange: 1};
  P.JsObject.prototype = {
    $index: function(_, property) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      return P._convertToDart(this._js$_jsObject[property]);
    },
    $indexSet: function(_, property, value) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      this._js$_jsObject[property] = P._convertToJS(value);
    },
    get$hashCode: function(_) {
      return 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.JsObject && this._js$_jsObject === other._js$_jsObject;
    },
    toString$0: function(_) {
      var t1, exception;
      try {
        t1 = String(this._js$_jsObject);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        t1 = this.super$Object$toString(0);
        return t1;
      }
    },
    callMethod$2: function(method, args) {
      var t2,
        t1 = this._js$_jsObject;
      if (args == null)
        t2 = null;
      else {
        t2 = H.getTypeArgumentByIndex(args, 0);
        t2 = P.List_List$from(new H.MappedListIterable(args, H.functionTypeCheck(P.js___convertToJS$closure(), {func: 1, ret: null, args: [t2]}), [t2, null]), true, null);
      }
      return P._convertToDart(t1[method].apply(t1, t2));
    },
    callMethod$1: function(method) {
      return this.callMethod$2(method, null);
    }
  };
  P.JsFunction.prototype = {};
  P.JsArray.prototype = {
    _checkIndex$1: function(index) {
      var _this = this,
        t1 = index < 0 || index >= _this.get$length(_this);
      if (t1)
        throw H.wrapException(P.RangeError$range(index, 0, _this.get$length(_this), null, null));
    },
    $index: function(_, index) {
      if (typeof index === "number" && index === C.JSInt_methods.toInt$0(index))
        this._checkIndex$1(H.intTypeCheck(index));
      return H.assertSubtypeOfRuntimeType(this.super$JsObject$$index(0, index), H.getTypeArgumentByIndex(this, 0));
    },
    $indexSet: function(_, index, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index))
        this._checkIndex$1(H.intTypeCheck(index));
      this.super$JsObject$$indexSet(0, index, value);
    },
    get$length: function(_) {
      var len = this._js$_jsObject.length;
      if (typeof len === "number" && len >>> 0 === len)
        return len;
      throw H.wrapException(P.StateError$("Bad JsArray length"));
    },
    sort$1: function(_, compare) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      this.callMethod$2("sort", compare == null ? [] : [compare]);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P._convertToJS_closure.prototype = {
    call$1: function(o) {
      var jsFunction;
      H.interceptedTypeCheck(o, "$isFunction");
      jsFunction = function(_call, f, captureThis) {
        return function() {
          return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
        };
      }(P._callDartFunction, o, false);
      P._defineProperty(jsFunction, $.$get$DART_CLOSURE_PROPERTY_NAME(), o);
      return jsFunction;
    },
    $signature: 2
  };
  P._convertToJS_closure0.prototype = {
    call$1: function(o) {
      return new this.ctor(o);
    },
    $signature: 2
  };
  P._wrapToDart_closure.prototype = {
    call$1: function(o) {
      return new P.JsFunction(o);
    },
    $signature: 37
  };
  P._wrapToDart_closure0.prototype = {
    call$1: function(o) {
      return new P.JsArray(o, [null]);
    },
    $signature: 38
  };
  P._wrapToDart_closure1.prototype = {
    call$1: function(o) {
      return new P.JsObject(o);
    },
    $signature: 39
  };
  P._JsArray_JsObject_ListMixin.prototype = {};
  P._JSRandom.prototype = {
    nextDouble$0: function() {
      return Math.random();
    }
  };
  P._RectangleBase.prototype = {};
  P.Rectangle.prototype = {};
  P.Length.prototype = {$isLength: 1};
  P.LengthList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isLength");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Length];
    },
    $asListMixin: function() {
      return [P.Length];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Length];
    },
    $isList: 1,
    $asList: function() {
      return [P.Length];
    },
    $asImmutableListMixin: function() {
      return [P.Length];
    }
  };
  P.Number.prototype = {$isNumber: 1};
  P.NumberList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNumber");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Number];
    },
    $asListMixin: function() {
      return [P.Number];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Number];
    },
    $isList: 1,
    $asList: function() {
      return [P.Number];
    },
    $asImmutableListMixin: function() {
      return [P.Number];
    }
  };
  P.PointList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.StringList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.stringTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $asImmutableListMixin: function() {
      return [P.String];
    }
  };
  P.Transform.prototype = {$isTransform: 1};
  P.TransformList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isTransform");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Transform];
    },
    $asListMixin: function() {
      return [P.Transform];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Transform];
    },
    $isList: 1,
    $asList: function() {
      return [P.Transform];
    },
    $asImmutableListMixin: function() {
      return [P.Transform];
    }
  };
  P._LengthList_Interceptor_ListMixin.prototype = {};
  P._LengthList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._NumberList_Interceptor_ListMixin.prototype = {};
  P._NumberList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._StringList_Interceptor_ListMixin.prototype = {};
  P._StringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._TransformList_Interceptor_ListMixin.prototype = {};
  P._TransformList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P.ByteBuffer.prototype = {};
  P.ByteData.prototype = {$isTypedData: 1};
  P.Int8List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1
  };
  P.Uint8List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1
  };
  P.Uint8ClampedList.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1
  };
  P.Int16List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1
  };
  P.Uint16List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1
  };
  P.Int32List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1
  };
  P.Uint32List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1
  };
  P.Float32List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    },
    $isTypedData: 1
  };
  P.Float64List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    },
    $isTypedData: 1
  };
  P.AudioBuffer.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.AudioParamMap.prototype = {
    addAll$1: function(receiver, other) {
      H.assertSubtype(other, "$isMap", [P.String, null], "$asMap");
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    containsKey$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key))) != null;
    },
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new P.AudioParamMap_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    $indexSet: function(receiver, key, value) {
      H.stringTypeCheck(key);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  P.AudioParamMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 10
  };
  P.AudioTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.BaseAudioContext.prototype = {};
  P.OfflineAudioContext.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P._AudioParamMap_Interceptor_MapMixin.prototype = {};
  P.SqlResultSetRowList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return P.convertNativeToDart_Dictionary(receiver.item(index));
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isMap");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Map,,,]];
    },
    $asListMixin: function() {
      return [[P.Map,,,]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Map,,,]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Map,,,]];
    },
    $asImmutableListMixin: function() {
      return [[P.Map,,,]];
    }
  };
  P._SqlResultSetRowList_Interceptor_ListMixin.prototype = {};
  P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  M.BuildStatus.prototype = {};
  M.DefaultBuildResult.prototype = {};
  M._$BuildStatusSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      return H.interceptedTypeCheck(object, "$isBuildStatus").name;
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      return M._$valueOf(H.stringTypeCast(serialized));
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [M.BuildStatus];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [M.BuildStatus];
    },
    get$types: function() {
      return C.List_Type_BuildStatus_qBS;
    },
    get$wireName: function() {
      return "BuildStatus";
    }
  };
  M._$DefaultBuildResultSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      var result, t1;
      H.interceptedTypeCheck(object, "$isDefaultBuildResult");
      result = H.setRuntimeTypeInfo(["status", serializers.serialize$2$specifiedType(object.status, C.FullType_GJj), "target", serializers.serialize$2$specifiedType(object.target, C.FullType_aZ8)], [P.Object]);
      t1 = object.buildId;
      if (t1 != null) {
        C.JSArray_methods.add$1(result, "buildId");
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(t1, C.FullType_aZ8));
      }
      t1 = object.error;
      if (t1 != null) {
        C.JSArray_methods.add$1(result, "error");
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(t1, C.FullType_aZ8));
      }
      t1 = object.isCached;
      if (t1 != null) {
        C.JSArray_methods.add$1(result, "isCached");
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(t1, C.FullType_6bM));
      }
      return result;
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var key, value, t1, _$result, t2,
        _s18_ = "DefaultBuildResult",
        result = new M.DefaultBuildResultBuilder(),
        iterator = J.get$iterator$ax(H.assertSubtype(serialized, "$isIterable", [P.Object], "$asIterable"));
      for (; iterator.moveNext$0();) {
        key = H.stringTypeCast(iterator.get$current(iterator));
        iterator.moveNext$0();
        value = iterator.get$current(iterator);
        switch (key) {
          case "status":
            t1 = H.interceptedTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_GJj), "$isBuildStatus");
            result.get$_build_status$_$this()._status = t1;
            break;
          case "target":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_build_status$_$this()._build_status$_target = t1;
            break;
          case "buildId":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_build_status$_$this()._buildId = t1;
            break;
          case "error":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_build_status$_$this()._error = t1;
            break;
          case "isCached":
            t1 = H.boolTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_6bM));
            result.get$_build_status$_$this()._isCached = t1;
            break;
        }
      }
      _$result = result._build_status$_$v;
      if (_$result == null) {
        t1 = result.get$_build_status$_$this()._status;
        t2 = result.get$_build_status$_$this()._build_status$_target;
        _$result = new M._$DefaultBuildResult(t1, t2, result.get$_build_status$_$this()._buildId, result.get$_build_status$_$this()._error, result.get$_build_status$_$this()._isCached);
        if (t1 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s18_, "status"));
        if (t2 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s18_, "target"));
      }
      return result._build_status$_$v = _$result;
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [M.DefaultBuildResult];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [M.DefaultBuildResult];
    },
    get$types: function() {
      return C.List_j8H;
    },
    get$wireName: function() {
      return "DefaultBuildResult";
    }
  };
  M._$DefaultBuildResult.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      return other instanceof M.DefaultBuildResult && _this.status == other.status && _this.target == other.target && _this.buildId == other.buildId && _this.error == other.error && _this.isCached == other.isCached;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Y.$jf(Y.$jc(Y.$jc(Y.$jc(Y.$jc(Y.$jc(0, J.get$hashCode$(_this.status)), J.get$hashCode$(_this.target)), J.get$hashCode$(_this.buildId)), J.get$hashCode$(_this.error)), J.get$hashCode$(_this.isCached)));
    },
    toString$0: function(_) {
      var _this = this,
        t1 = $.$get$newBuiltValueToStringHelper().call$1("DefaultBuildResult"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "status", _this.status);
      t2.add$2(t1, "target", _this.target);
      t2.add$2(t1, "buildId", _this.buildId);
      t2.add$2(t1, "error", _this.error);
      t2.add$2(t1, "isCached", _this.isCached);
      return t2.toString$0(t1);
    }
  };
  M.DefaultBuildResultBuilder.prototype = {
    get$_build_status$_$this: function() {
      var _this = this,
        t1 = _this._build_status$_$v;
      if (t1 != null) {
        _this._status = t1.status;
        _this._build_status$_target = t1.target;
        _this._buildId = t1.buildId;
        _this._error = t1.error;
        _this._isCached = t1.isCached;
        _this._build_status$_$v = null;
      }
      return _this;
    }
  };
  S.BuiltList.prototype = {
    toBuilder$0: function() {
      return S.ListBuilder_ListBuilder(this, H.getTypeArgumentByIndex(this, 0));
    },
    get$hashCode: function(_) {
      var t1 = this._list$_hashCode;
      return t1 == null ? this._list$_hashCode = X.hashObjects(this._list) : t1;
    },
    $eq: function(_, other) {
      var t1, t2, i, t3, t4, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (!(other instanceof S.BuiltList))
        return false;
      t1 = other._list;
      t2 = _this._list;
      if (t1.length !== t2.length)
        return false;
      if (other.get$hashCode(other) != _this.get$hashCode(_this))
        return false;
      for (i = 0; t3 = t2.length, i !== t3; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t4 = t1[i];
        if (i >= t3)
          return H.ioore(t2, i);
        if (!J.$eq$(t4, t2[i]))
          return false;
      }
      return true;
    },
    toString$0: function(_) {
      return J.toString$0$(this._list);
    },
    $index: function(_, index) {
      var t1 = this._list;
      if (index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $add: function(_, other) {
      var t1 = this.$ti,
        t2 = this._list;
      t2 = (t2 && C.JSArray_methods).$add(t2, H.assertSubtype(other, "$isBuiltList", t1, "$asBuiltList")._list);
      t1 = new S._BuiltList(t2, t1);
      t1.BuiltList$_$1(t2, H.getTypeArgumentByIndex(this, 0));
      return t1;
    },
    get$length: function(_) {
      return this._list.length;
    },
    get$iterator: function(_) {
      var t1 = this._list;
      return new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    map$1$1: function(_, f, $T) {
      var t1, t2;
      H.functionTypeCheck(f, {func: 1, ret: $T, args: [H.getTypeArgumentByIndex(this, 0)]});
      t1 = this._list;
      t1.toString;
      t2 = H.getTypeArgumentByIndex(t1, 0);
      return new H.MappedListIterable(t1, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t2]}), [t2, $T]);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    contains$1: function(_, element) {
      var t1 = this._list;
      return (t1 && C.JSArray_methods).contains$1(t1, element);
    },
    get$isEmpty: function(_) {
      return this._list.length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._list.length !== 0;
    },
    skip$1: function(_, n) {
      var t1 = this._list;
      t1.toString;
      return H.SubListIterable$(t1, n, null, H.getTypeArgumentByIndex(t1, 0));
    },
    get$first: function(_) {
      var t1 = this._list;
      return (t1 && C.JSArray_methods).get$first(t1);
    },
    elementAt$1: function(_, index) {
      var t1 = this._list;
      if (index < 0 || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    BuiltList$_$1: function(_list, $E) {
      if (new H.TypeImpl($E).$eq(0, C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit element type required, for example "new BuiltList<int>"'));
    },
    $isIterable: 1
  };
  S._BuiltList.prototype = {
    _BuiltList$copyAndCheckTypes$1: function(iterable, $E) {
      var t1, t2, _i, element;
      for (t1 = this._list, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        element = t1[_i];
        if (!H.checkSubtypeOfRuntimeType(element, $E))
          throw H.wrapException(P.ArgumentError$("iterable contained invalid element: " + H.S(element)));
      }
    }
  };
  S.ListBuilder.prototype = {
    build$0: function() {
      var t1, t2, t3, _this = this;
      if (_this._listOwner == null) {
        t1 = _this._list;
        t2 = _this.$ti;
        t3 = new S._BuiltList(t1, t2);
        t3.BuiltList$_$1(t1, H.getTypeArgumentByIndex(_this, 0));
        H.assertSubtype(t3, "$is_BuiltList", t2, "$as_BuiltList");
        _this.set$_list(t1);
        _this.set$_listOwner(t3);
      }
      return _this._listOwner;
    },
    replace$1: function(_, iterable) {
      var _this = this,
        t1 = _this.$ti;
      if (H.checkSubtype(iterable, "$is_BuiltList", t1, null)) {
        H.assertSubtype(iterable, "$is_BuiltList", t1, "$as_BuiltList");
        _this.set$_list(iterable._list);
        _this.set$_listOwner(iterable);
      } else {
        _this.set$_list(H.assertSubtype(P.List_List$from(iterable, true, H.getTypeArgumentByIndex(_this, 0)), "$isList", t1, "$asList"));
        _this.set$_listOwner(null);
      }
    },
    $index: function(_, index) {
      var t1 = this._list;
      if (index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    get$length: function(_) {
      return this._list.length;
    },
    map$1: function(_, f) {
      var t2, t3, result, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(f, {func: 1, ret: t1, args: [t1]});
      t2 = _this._list;
      t2.toString;
      t3 = H.getTypeArgumentByIndex(t2, 0);
      result = new H.MappedListIterable(t2, H.functionTypeCheck(f, {func: 1, ret: t1, args: [t3]}), [t3, t1]).toList$1$growable(0, true);
      _this._list$_checkElements$1(result);
      _this.set$_list(H.assertSubtype(result, "$isList", _this.$ti, "$asList"));
      _this.set$_listOwner(null);
    },
    _list$_checkElements$1: function(elements) {
      var t1, t2, _i;
      H.assertSubtype(elements, "$isIterable", this.$ti, "$asIterable");
      for (t1 = elements.length, t2 = H.getTypeArgumentByIndex(this, 0), _i = 0; _i < t1; ++_i)
        if (H.assertSubtypeOfRuntimeType(elements[_i], t2) == null)
          H.throwExpression(P.ArgumentError$("null element"));
    },
    set$_list: function(_list) {
      this._list = H.assertSubtype(_list, "$isList", this.$ti, "$asList");
    },
    set$_listOwner: function(_listOwner) {
      this._listOwner = H.assertSubtype(_listOwner, "$is_BuiltList", this.$ti, "$as_BuiltList");
    }
  };
  M.BuiltListMultimap.prototype = {
    get$hashCode: function(_) {
      var t2, t3, _this = this,
        t1 = _this._list_multimap$_hashCode;
      if (t1 == null) {
        t1 = _this._list_multimap$_map;
        t1 = t1.get$keys(t1);
        t2 = P.int;
        t3 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
        t2 = H.MappedIterable_MappedIterable(t1, H.functionTypeCheck(new M.BuiltListMultimap_hashCode_closure(_this), {func: 1, ret: t2, args: [t3]}), t3, t2);
        t2 = P.List_List$from(t2, false, H.getRuntimeTypeArgument(t2, "Iterable", 0));
        C.JSArray_methods.sort$0(t2);
        t2 = _this._list_multimap$_hashCode = X.hashObjects(t2);
        t1 = t2;
      }
      return t1;
    },
    $eq: function(_, other) {
      var t1, t2, t3, t4, t5, key, result, t6, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (!(other instanceof M.BuiltListMultimap))
        return false;
      t1 = other._list_multimap$_map;
      t2 = _this._list_multimap$_map;
      if (t1.get$length(t1) !== t2.get$length(t2))
        return false;
      if (other.get$hashCode(other) != _this.get$hashCode(_this))
        return false;
      for (t3 = _this.get$keys(_this), t3 = t3.get$iterator(t3), t4 = other._emptyList, t5 = _this._emptyList; t3.moveNext$0();) {
        key = t3.get$current(t3);
        result = t1.$index(0, key);
        t6 = result == null ? t4 : result;
        result = t2.$index(0, key);
        if (!t6.$eq(0, result == null ? t5 : result))
          return false;
      }
      return true;
    },
    toString$0: function(_) {
      return J.toString$0$(this._list_multimap$_map);
    },
    $index: function(_, key) {
      var result = this._list_multimap$_map.$index(0, key);
      return result == null ? this._emptyList : result;
    },
    get$keys: function(_) {
      var t1, _this = this;
      if (_this._list_multimap$_keys == null) {
        t1 = _this._list_multimap$_map;
        _this.set$_list_multimap$_keys(t1.get$keys(t1));
      }
      return _this._list_multimap$_keys;
    },
    get$length: function(_) {
      var t1 = this._list_multimap$_map;
      return t1.get$length(t1);
    },
    BuiltListMultimap$_$1: function(_map, $K, $V) {
      if (new H.TypeImpl($K).$eq(0, C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit key type required, for example "new BuiltListMultimap<int, int>"'));
      if (new H.TypeImpl($V).$eq(0, C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit value type required, for example "new BuiltListMultimap<int, int>"'));
    },
    set$_list_multimap$_keys: function(_keys) {
      this._list_multimap$_keys = H.assertSubtype(_keys, "$isIterable", [H.getTypeArgumentByIndex(this, 0)], "$asIterable");
    }
  };
  M.BuiltListMultimap_BuiltListMultimap_closure.prototype = {
    call$1: function(k) {
      return this.multimap.$index(0, k);
    },
    $signature: 2
  };
  M.BuiltListMultimap_hashCode_closure.prototype = {
    call$1: function(key) {
      var t2,
        t1 = this.$this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0));
      t2 = J.get$hashCode$(key);
      t1 = J.get$hashCode$(t1._list_multimap$_map.$index(0, key));
      return X._finish(X._combine(X._combine(0, J.get$hashCode$(t2)), J.get$hashCode$(t1)));
    },
    $signature: function() {
      return {func: 1, ret: P.int, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
    }
  };
  M._BuiltListMultimap.prototype = {
    _BuiltListMultimap$copyAndCheck$2: function(keys, lookup, $K, $V) {
      var t1, t2, key;
      for (t1 = J.get$iterator$ax(keys), t2 = this._list_multimap$_map; t1.moveNext$0();) {
        key = t1.get$current(t1);
        if (H.checkSubtypeOfRuntimeType(key, $K))
          t2.$indexSet(0, key, S.BuiltList_BuiltList$from(H.listSuperNativeTypeCheck(lookup.call$1(key), "$isIterable"), $V));
        else
          throw H.wrapException(P.ArgumentError$("map contained invalid key: " + H.S(key)));
      }
    }
  };
  M.ListMultimapBuilder.prototype = {
    build$0: function() {
      var t1, key, t2, t3, t4, t5, builtList, _this = this;
      if (_this._list_multimap$_builtMapOwner == null) {
        for (t1 = _this._list_multimap$_builderMap, t1 = t1.get$keys(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          key = t1.get$current(t1);
          t2 = _this._list_multimap$_builderMap.$index(0, key);
          if (t2._listOwner == null) {
            t3 = t2._list;
            t4 = H.getTypeArgumentByIndex(t2, 0);
            t5 = [t4];
            if (new H.TypeImpl(t4).$eq(0, C.Type_dynamic_0Rz))
              H.throwExpression(P.UnsupportedError$('explicit element type required, for example "new BuiltList<int>"'));
            t4 = H.assertSubtype(new S._BuiltList(t3, t5), "$is_BuiltList", t5, "$as_BuiltList");
            t2.set$_list(t3);
            t2.set$_listOwner(t4);
          }
          builtList = t2._listOwner;
          t2 = builtList._list.length;
          t3 = _this._list_multimap$_builtMap;
          if (t2 === 0)
            t3.remove$1(0, key);
          else
            t3.$indexSet(0, key, builtList);
        }
        t1 = _this._list_multimap$_builtMap;
        t2 = H.getTypeArgumentByIndex(_this, 1);
        t3 = new M._BuiltListMultimap(t1, S.BuiltList_BuiltList$from(C.List_empty, t2), _this.$ti);
        t3.BuiltListMultimap$_$1(t1, H.getTypeArgumentByIndex(_this, 0), t2);
        _this.set$_list_multimap$_builtMapOwner(t3);
      }
      return _this._list_multimap$_builtMapOwner;
    },
    replace$1: function(_, multimap) {
      var _this = this,
        t1 = _this.$ti;
      if (H.checkSubtype(multimap, "$is_BuiltListMultimap", t1, null)) {
        H.assertSubtype(multimap, "$is_BuiltListMultimap", t1, "$as_BuiltListMultimap");
        _this.set$_list_multimap$_builtMapOwner(multimap);
        _this.set$_list_multimap$_builtMap(multimap._list_multimap$_map);
        _this.set$_list_multimap$_builderMap(new H.JsLinkedHashMap([H.getTypeArgumentByIndex(_this, 0), [S.ListBuilder, H.getTypeArgumentByIndex(_this, 1)]]));
      } else
        _this._list_multimap$_setWithCopyAndCheck$2(multimap.get$keys(multimap), new M.ListMultimapBuilder_replace_closure(multimap));
    },
    $index: function(_, key) {
      var _this = this;
      _this._makeWriteableCopy$0();
      return H.checkSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0)) ? _this._list_multimap$_getValuesBuilder$1(key) : S.ListBuilder_ListBuilder(C.List_empty, H.getTypeArgumentByIndex(_this, 1));
    },
    _list_multimap$_getValuesBuilder$1: function(key) {
      var result, builtValues, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      result = _this._list_multimap$_builderMap.$index(0, key);
      if (result == null) {
        builtValues = _this._list_multimap$_builtMap.$index(0, key);
        result = builtValues == null ? S.ListBuilder_ListBuilder(C.List_empty, H.getTypeArgumentByIndex(_this, 1)) : S.ListBuilder_ListBuilder(builtValues, H.getTypeArgumentByIndex(builtValues, 0));
        _this._list_multimap$_builderMap.$indexSet(0, key, result);
      }
      return result;
    },
    _makeWriteableCopy$0: function() {
      var _this = this;
      if (_this._list_multimap$_builtMapOwner != null) {
        _this.set$_list_multimap$_builtMap(P.LinkedHashMap_LinkedHashMap$from(_this._list_multimap$_builtMap, H.getTypeArgumentByIndex(_this, 0), [S.BuiltList, H.getTypeArgumentByIndex(_this, 1)]));
        _this.set$_list_multimap$_builtMapOwner(null);
      }
    },
    _list_multimap$_setWithCopyAndCheck$2: function(keys, lookup) {
      var t1, t2, t3, t4, key, t5, value, t6, t7, t8, _this = this;
      _this.set$_list_multimap$_builtMapOwner(null);
      t1 = H.getTypeArgumentByIndex(_this, 0);
      t2 = H.getTypeArgumentByIndex(_this, 1);
      t3 = [S.BuiltList, t2];
      _this.set$_list_multimap$_builtMap(new H.JsLinkedHashMap([t1, t3]));
      _this.set$_list_multimap$_builderMap(new H.JsLinkedHashMap([t1, [S.ListBuilder, t2]]));
      for (t4 = J.get$iterator$ax(keys); t4.moveNext$0();) {
        key = t4.get$current(t4);
        if (H.checkSubtypeOfRuntimeType(key, t1))
          for (t5 = J.get$iterator$ax(H.listSuperNativeTypeCheck(lookup.call$1(key), "$isIterable")); t5.moveNext$0();) {
            value = t5.get$current(t5);
            if (H.checkSubtypeOfRuntimeType(value, t2)) {
              H.assertSubtypeOfRuntimeType(key, t1);
              H.assertSubtypeOfRuntimeType(value, t2);
              if (_this._list_multimap$_builtMapOwner != null) {
                _this.set$_list_multimap$_builtMap(P.LinkedHashMap_LinkedHashMap$from(_this._list_multimap$_builtMap, t1, t3));
                _this.set$_list_multimap$_builtMapOwner(null);
              }
              if (key == null)
                H.throwExpression(P.ArgumentError$("null key"));
              t6 = value == null;
              if (t6)
                H.throwExpression(P.ArgumentError$("null value"));
              t7 = _this._list_multimap$_getValuesBuilder$1(key);
              t8 = H.getTypeArgumentByIndex(t7, 0);
              H.assertSubtypeOfRuntimeType(value, t8);
              if (t6)
                H.throwExpression(P.ArgumentError$("null element"));
              if (t7._listOwner != null) {
                t7.set$_list(H.assertSubtype(P.List_List$from(t7._list, true, t8), "$isList", [t8], "$asList"));
                t7.set$_listOwner(null);
              }
              t6 = t7._list;
              (t6 && C.JSArray_methods).add$1(t6, value);
            } else
              throw H.wrapException(P.ArgumentError$("map contained invalid value: " + H.S(value) + ", for key " + H.S(key)));
          }
        else
          throw H.wrapException(P.ArgumentError$("map contained invalid key: " + H.S(key)));
      }
    },
    set$_list_multimap$_builtMap: function(_builtMap) {
      this._list_multimap$_builtMap = H.assertSubtype(_builtMap, "$isMap", [H.getTypeArgumentByIndex(this, 0), [S.BuiltList, H.getTypeArgumentByIndex(this, 1)]], "$asMap");
    },
    set$_list_multimap$_builtMapOwner: function(_builtMapOwner) {
      this._list_multimap$_builtMapOwner = H.assertSubtype(_builtMapOwner, "$is_BuiltListMultimap", this.$ti, "$as_BuiltListMultimap");
    },
    set$_list_multimap$_builderMap: function(_builderMap) {
      this._list_multimap$_builderMap = H.assertSubtype(_builderMap, "$isMap", [H.getTypeArgumentByIndex(this, 0), [S.ListBuilder, H.getTypeArgumentByIndex(this, 1)]], "$asMap");
    }
  };
  M.ListMultimapBuilder_replace_closure.prototype = {
    call$1: function(k) {
      return this.multimap.$index(0, k);
    },
    $signature: 2
  };
  A.BuiltMap.prototype = {
    toBuilder$0: function() {
      var t1 = this.$ti;
      H.assertSubtype(this, "$is_BuiltMap", t1, "$as_BuiltMap");
      return new A.MapBuilder(this._mapFactory, this._map$_map, this, t1);
    },
    get$hashCode: function(_) {
      var _this = this,
        t1 = _this._map$_hashCode;
      if (t1 == null) {
        t1 = J.map$1$1$ax(J.get$keys$x(_this._map$_map), new A.BuiltMap_hashCode_closure(_this), P.int).toList$1$growable(0, false);
        C.JSArray_methods.sort$0(t1);
        t1 = _this._map$_hashCode = X.hashObjects(t1);
      }
      return t1;
    },
    $eq: function(_, other) {
      var t1, t2, t3, t4, t5, key, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (!(other instanceof A.BuiltMap))
        return false;
      t1 = other._map$_map;
      t2 = J.getInterceptor$asx(t1);
      t3 = _this._map$_map;
      t4 = J.getInterceptor$asx(t3);
      if (t2.get$length(t1) != t4.get$length(t3))
        return false;
      if (other.get$hashCode(other) != _this.get$hashCode(_this))
        return false;
      for (t5 = J.get$iterator$ax(_this.get$keys(_this)); t5.moveNext$0();) {
        key = t5.get$current(t5);
        if (!J.$eq$(t2.$index(t1, key), t4.$index(t3, key)))
          return false;
      }
      return true;
    },
    toString$0: function(_) {
      return J.toString$0$(this._map$_map);
    },
    $index: function(_, key) {
      return J.$index$asx(this._map$_map, key);
    },
    get$keys: function(_) {
      var _this = this;
      if (_this._map$_keys == null)
        _this.set$_map$_keys(J.get$keys$x(_this._map$_map));
      return _this._map$_keys;
    },
    get$length: function(_) {
      return J.get$length$asx(this._map$_map);
    },
    map$1: function(_, f) {
      var _null = null,
        t1 = J.map$2$1$ax(this._map$_map, H.functionTypeCheck(f, {func: 1, ret: [P.MapEntry,,,], args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]}), null, null),
        t2 = new A._BuiltMap(_null, t1, [null, null]);
      t2.BuiltMap$_$2(_null, t1, _null, _null);
      return t2;
    },
    BuiltMap$_$2: function(_mapFactory, _map, $K, $V) {
      if (new H.TypeImpl($K).$eq(0, C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit key type required, for example "new BuiltMap<int, int>"'));
      if (new H.TypeImpl($V).$eq(0, C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit value type required, for example "new BuiltMap<int, int>"'));
    },
    set$_map$_keys: function(_keys) {
      this._map$_keys = H.assertSubtype(_keys, "$isIterable", [H.getTypeArgumentByIndex(this, 0)], "$asIterable");
    }
  };
  A.BuiltMap_BuiltMap_closure.prototype = {
    call$1: function(k) {
      return this.map.$index(0, k);
    },
    $signature: 2
  };
  A.BuiltMap_hashCode_closure.prototype = {
    call$1: function(key) {
      var t2,
        t1 = this.$this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0));
      t2 = J.get$hashCode$(key);
      t1 = J.get$hashCode$(J.$index$asx(t1._map$_map, key));
      return X._finish(X._combine(X._combine(0, J.get$hashCode$(t2)), J.get$hashCode$(t1)));
    },
    $signature: function() {
      return {func: 1, ret: P.int, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
    }
  };
  A._BuiltMap.prototype = {
    _BuiltMap$copyAndCheckTypes$2: function(keys, lookup, $K, $V) {
      var t1, t2, t3, key, value;
      for (t1 = J.get$iterator$ax(keys), t2 = this._map$_map, t3 = J.getInterceptor$ax(t2); t1.moveNext$0();) {
        key = t1.get$current(t1);
        if (H.checkSubtypeOfRuntimeType(key, $K)) {
          value = lookup.call$1(key);
          if (H.checkSubtypeOfRuntimeType(value, $V))
            t3.$indexSet(t2, key, value);
          else
            throw H.wrapException(P.ArgumentError$("map contained invalid value: " + H.S(value)));
        } else
          throw H.wrapException(P.ArgumentError$("map contained invalid key: " + H.S(key)));
      }
    }
  };
  A.MapBuilder.prototype = {
    build$0: function() {
      var t1, t2, t3, _this = this;
      if (_this._mapOwner == null) {
        t1 = _this._mapFactory;
        t2 = _this._map$_map;
        t3 = new A._BuiltMap(t1, t2, _this.$ti);
        t3.BuiltMap$_$2(t1, t2, H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
        _this.set$_mapOwner(t3);
      }
      return _this._mapOwner;
    },
    replace$1: function(_, map) {
      var replacement, _this = this,
        t1 = _this.$ti;
      if (H.checkSubtype(map, "$is_BuiltMap", t1, null))
        map.get$_mapFactory();
      replacement = _this._createMap$0();
      map.forEach$1(0, new A.MapBuilder_replace_closure(_this, replacement));
      H.assertSubtype(replacement, "$isMap", t1, "$asMap");
      _this.set$_mapOwner(null);
      _this.set$_map$_map(replacement);
    },
    $index: function(_, key) {
      return J.$index$asx(this._map$_map, key);
    },
    $indexSet: function(_, key, value) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (key == null)
        H.throwExpression(P.ArgumentError$("null key"));
      if (value == null)
        H.throwExpression(P.ArgumentError$("null value"));
      if (_this._mapOwner != null) {
        t1 = _this._createMap$0();
        J.addAll$1$ax(t1, _this._map$_map);
        _this.set$_map$_map(t1);
        _this.set$_mapOwner(null);
      }
      J.$indexSet$ax(_this._map$_map, key, value);
    },
    get$length: function(_) {
      return J.get$length$asx(this._map$_map);
    },
    get$_safeMap: function() {
      var t1, _this = this;
      if (_this._mapOwner != null) {
        t1 = _this._createMap$0();
        J.addAll$1$ax(t1, _this._map$_map);
        _this.set$_map$_map(t1);
        _this.set$_mapOwner(null);
      }
      return _this._map$_map;
    },
    _createMap$0: function() {
      var t1 = new H.JsLinkedHashMap(this.$ti);
      return t1;
    },
    set$_map$_map: function(_map) {
      this._map$_map = H.assertSubtype(_map, "$isMap", this.$ti, "$asMap");
    },
    set$_mapOwner: function(_mapOwner) {
      this._mapOwner = H.assertSubtype(_mapOwner, "$is_BuiltMap", this.$ti, "$as_BuiltMap");
    }
  };
  A.MapBuilder_replace_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      J.$indexSet$ax(this.replacement, H.subtypeOfRuntimeTypeCast(key, H.getTypeArgumentByIndex(t1, 0)), H.subtypeOfRuntimeTypeCast(value, H.getTypeArgumentByIndex(t1, 1)));
    },
    $signature: 40
  };
  L.BuiltSet.prototype = {
    get$hashCode: function(_) {
      var _this = this,
        t1 = _this._set$_hashCode;
      if (t1 == null) {
        t1 = _this._set$_set.map$1$1(0, new L.BuiltSet_hashCode_closure(_this), P.int);
        t1 = P.List_List$from(t1, false, H.getRuntimeTypeArgument(t1, "Iterable", 0));
        C.JSArray_methods.sort$0(t1);
        t1 = _this._set$_hashCode = X.hashObjects(t1);
      }
      return t1;
    },
    $eq: function(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (!(other instanceof L.BuiltSet))
        return false;
      t1 = other._set$_set;
      t2 = _this._set$_set;
      if (t1.get$length(t1) != t2.get$length(t2))
        return false;
      if (other.get$hashCode(other) != _this.get$hashCode(_this))
        return false;
      return t2.containsAll$1(H.assertSubtype(other, "$isIterable", [P.Object], "$asIterable"));
    },
    toString$0: function(_) {
      return J.toString$0$(this._set$_set);
    },
    get$length: function(_) {
      var t1 = this._set$_set;
      return t1.get$length(t1);
    },
    get$iterator: function(_) {
      var t1 = this._set$_set;
      return t1.get$iterator(t1);
    },
    map$1$1: function(_, f, $T) {
      return this._set$_set.map$1$1(0, H.functionTypeCheck(f, {func: 1, ret: $T, args: [H.getTypeArgumentByIndex(this, 0)]}), $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    contains$1: function(_, element) {
      return this._set$_set.contains$1(0, element);
    },
    get$isEmpty: function(_) {
      var t1 = this._set$_set;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty: function(_) {
      var t1 = this._set$_set;
      return t1.get$isNotEmpty(t1);
    },
    skip$1: function(_, n) {
      return this._set$_set.skip$1(0, n);
    },
    get$first: function(_) {
      var t1 = this._set$_set;
      return t1.get$first(t1);
    },
    elementAt$1: function(_, index) {
      return this._set$_set.elementAt$1(0, index);
    },
    BuiltSet$_$2: function(_setFactory, _set, $E) {
      if (new H.TypeImpl($E).$eq(0, C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit element type required, for example "new BuiltSet<int>"'));
    },
    $isIterable: 1
  };
  L.BuiltSet_hashCode_closure.prototype = {
    call$1: function(e) {
      return J.get$hashCode$(H.assertSubtypeOfRuntimeType(e, H.getTypeArgumentByIndex(this.$this, 0)));
    },
    $signature: function() {
      return {func: 1, ret: P.int, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
    }
  };
  L._BuiltSet.prototype = {
    _BuiltSet$copyAndCheckTypes$1: function(iterable, $E) {
      var t1, t2, _i, element;
      for (t1 = iterable.length, t2 = this._set$_set, _i = 0; _i < iterable.length; iterable.length === t1 || (0, H.throwConcurrentModificationError)(iterable), ++_i) {
        element = iterable[_i];
        if (H.checkSubtypeOfRuntimeType(element, $E))
          t2.add$1(0, element);
        else
          throw H.wrapException(P.ArgumentError$("iterable contained invalid element: " + H.S(element)));
      }
    }
  };
  L.SetBuilder.prototype = {
    build$0: function() {
      var t1, t2, t3, _this = this;
      if (_this._setOwner == null) {
        t1 = _this._setFactory;
        t2 = _this._set$_set;
        t3 = new L._BuiltSet(t1, t2, _this.$ti);
        t3.BuiltSet$_$2(t1, t2, H.getTypeArgumentByIndex(_this, 0));
        _this.set$_setOwner(t3);
      }
      return _this._setOwner;
    },
    replace$1: function(_, iterable) {
      var set, t2, t3, element, _this = this,
        t1 = _this.$ti;
      if (H.checkSubtype(iterable, "$is_BuiltSet", t1, null))
        iterable.get$_setFactory();
      set = _this._createSet$0();
      for (t2 = J.get$iterator$ax(iterable), t3 = H.getTypeArgumentByIndex(_this, 0); t2.moveNext$0();) {
        element = t2.get$current(t2);
        if (H.checkSubtypeOfRuntimeType(element, t3))
          set.add$1(0, element);
        else
          throw H.wrapException(P.ArgumentError$("iterable contained invalid element: " + H.S(element)));
      }
      H.assertSubtype(set, "$isSet", t1, "$asSet");
      _this.set$_setOwner(null);
      _this.set$_set$_set(set);
    },
    get$length: function(_) {
      var t1 = this._set$_set;
      return t1.get$length(t1);
    },
    map$1: function(_, f) {
      var result, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(f, {func: 1, ret: t1, args: [t1]});
      result = _this._createSet$0();
      result.addAll$1(0, _this._set$_set.map$1$1(0, f, t1));
      _this._checkElements$1(result);
      H.assertSubtype(result, "$isSet", _this.$ti, "$asSet");
      _this.set$_setOwner(null);
      _this.set$_set$_set(result);
    },
    get$_safeSet: function() {
      var t1, _this = this;
      if (_this._setOwner != null) {
        t1 = _this._createSet$0();
        t1.addAll$1(0, _this._set$_set);
        _this.set$_set$_set(t1);
        _this.set$_setOwner(null);
      }
      return _this._set$_set;
    },
    _createSet$0: function() {
      var t1 = P.LinkedHashSet_LinkedHashSet(H.getTypeArgumentByIndex(this, 0));
      return t1;
    },
    _checkElements$1: function(elements) {
      var t1, t2;
      H.assertSubtype(elements, "$isIterable", this.$ti, "$asIterable");
      for (t1 = elements.get$iterator(elements), t2 = H.getTypeArgumentByIndex(this, 0); t1.moveNext$0();)
        if (H.assertSubtypeOfRuntimeType(t1.get$current(t1), t2) == null)
          H.throwExpression(P.ArgumentError$("null element"));
    },
    set$_set$_set: function(_set) {
      this._set$_set = H.assertSubtype(_set, "$isSet", this.$ti, "$asSet");
    },
    set$_setOwner: function(_setOwner) {
      this._setOwner = H.assertSubtype(_setOwner, "$is_BuiltSet", this.$ti, "$as_BuiltSet");
    }
  };
  E.BuiltSetMultimap.prototype = {
    get$hashCode: function(_) {
      var t2, t3, _this = this,
        t1 = _this._set_multimap$_hashCode;
      if (t1 == null) {
        t1 = _this._set_multimap$_map;
        t1 = t1.get$keys(t1);
        t2 = P.int;
        t3 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
        t2 = H.MappedIterable_MappedIterable(t1, H.functionTypeCheck(new E.BuiltSetMultimap_hashCode_closure(_this), {func: 1, ret: t2, args: [t3]}), t3, t2);
        t2 = P.List_List$from(t2, false, H.getRuntimeTypeArgument(t2, "Iterable", 0));
        C.JSArray_methods.sort$0(t2);
        t2 = _this._set_multimap$_hashCode = X.hashObjects(t2);
        t1 = t2;
      }
      return t1;
    },
    $eq: function(_, other) {
      var t1, t2, t3, t4, t5, key, result, t6, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (!(other instanceof E.BuiltSetMultimap))
        return false;
      t1 = other._set_multimap$_map;
      t2 = _this._set_multimap$_map;
      if (t1.get$length(t1) !== t2.get$length(t2))
        return false;
      if (other.get$hashCode(other) != _this.get$hashCode(_this))
        return false;
      for (t3 = _this.get$keys(_this), t3 = t3.get$iterator(t3), t4 = other._emptySet, t5 = _this._emptySet; t3.moveNext$0();) {
        key = t3.get$current(t3);
        result = t1.$index(0, key);
        t6 = result == null ? t4 : result;
        result = t2.$index(0, key);
        if (!t6.$eq(0, result == null ? t5 : result))
          return false;
      }
      return true;
    },
    toString$0: function(_) {
      return J.toString$0$(this._set_multimap$_map);
    },
    $index: function(_, key) {
      var result = this._set_multimap$_map.$index(0, key);
      return result == null ? this._emptySet : result;
    },
    get$keys: function(_) {
      var t1, _this = this;
      if (_this._set_multimap$_keys == null) {
        t1 = _this._set_multimap$_map;
        _this.set$_set_multimap$_keys(t1.get$keys(t1));
      }
      return _this._set_multimap$_keys;
    },
    get$length: function(_) {
      var t1 = this._set_multimap$_map;
      return t1.get$length(t1);
    },
    BuiltSetMultimap$_$1: function(_map, $K, $V) {
      if (new H.TypeImpl($K).$eq(0, C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit key type required, for example "new BuiltSetMultimap<int, int>"'));
      if (new H.TypeImpl($V).$eq(0, C.Type_dynamic_0Rz))
        throw H.wrapException(P.UnsupportedError$('explicit value type required, for example "new BuiltSetMultimap<int, int>"'));
    },
    set$_set_multimap$_keys: function(_keys) {
      this._set_multimap$_keys = H.assertSubtype(_keys, "$isIterable", [H.getTypeArgumentByIndex(this, 0)], "$asIterable");
    }
  };
  E.BuiltSetMultimap_hashCode_closure.prototype = {
    call$1: function(key) {
      var t2,
        t1 = this.$this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0));
      t2 = J.get$hashCode$(key);
      t1 = J.get$hashCode$(t1._set_multimap$_map.$index(0, key));
      return X._finish(X._combine(X._combine(0, J.get$hashCode$(t2)), J.get$hashCode$(t1)));
    },
    $signature: function() {
      return {func: 1, ret: P.int, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
    }
  };
  E._BuiltSetMultimap.prototype = {};
  E.SetMultimapBuilder.prototype = {
    build$0: function() {
      var t1, key, t2, t3, t4, t5, builtSet, _this = this;
      if (_this._builtMapOwner == null) {
        for (t1 = _this._builderMap, t1 = t1.get$keys(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          key = t1.get$current(t1);
          t2 = _this._builderMap.$index(0, key);
          if (t2._setOwner == null) {
            t3 = t2._setFactory;
            t4 = t2._set$_set;
            t5 = H.getTypeArgumentByIndex(t2, 0);
            if (new H.TypeImpl(t5).$eq(0, C.Type_dynamic_0Rz))
              H.throwExpression(P.UnsupportedError$('explicit element type required, for example "new BuiltSet<int>"'));
            t2.set$_setOwner(new L._BuiltSet(t3, t4, [t5]));
          }
          builtSet = t2._setOwner;
          t2 = builtSet._set$_set;
          t2 = t2.get$isEmpty(t2);
          t3 = _this._builtMap;
          if (t2)
            t3.remove$1(0, key);
          else
            t3.$indexSet(0, key, builtSet);
        }
        t1 = _this._builtMap;
        t2 = H.getTypeArgumentByIndex(_this, 1);
        t3 = new E._BuiltSetMultimap(t1, L.BuiltSet_BuiltSet$from(C.List_empty, t2), _this.$ti);
        t3.BuiltSetMultimap$_$1(t1, H.getTypeArgumentByIndex(_this, 0), t2);
        _this.set$_builtMapOwner(t3);
      }
      return _this._builtMapOwner;
    },
    replace$1: function(_, multimap) {
      var _this = this,
        t1 = _this.$ti;
      if (H.checkSubtype(multimap, "$is_BuiltSetMultimap", t1, null)) {
        H.assertSubtype(multimap, "$is_BuiltSetMultimap", t1, "$as_BuiltSetMultimap");
        _this.set$_builtMapOwner(multimap);
        _this.set$_builtMap(multimap._set_multimap$_map);
        _this.set$_builderMap(new H.JsLinkedHashMap([H.getTypeArgumentByIndex(_this, 0), [L.SetBuilder, H.getTypeArgumentByIndex(_this, 1)]]));
      } else
        _this._setWithCopyAndCheck$2(multimap.get$keys(multimap), new E.SetMultimapBuilder_replace_closure(multimap));
    },
    _getValuesBuilder$1: function(key) {
      var result, builtValues, t1, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      result = _this._builderMap.$index(0, key);
      if (result == null) {
        builtValues = _this._builtMap.$index(0, key);
        if (builtValues == null)
          result = L.SetBuilder_SetBuilder(H.getTypeArgumentByIndex(_this, 1));
        else {
          t1 = H.getTypeArgumentByIndex(builtValues, 0);
          H.assertSubtype(builtValues, "$is_BuiltSet", [t1], "$as_BuiltSet");
          result = new L.SetBuilder(builtValues._setFactory, builtValues._set$_set, builtValues, [t1]);
        }
        _this._builderMap.$indexSet(0, key, result);
      }
      return result;
    },
    _setWithCopyAndCheck$2: function(keys, lookup) {
      var t1, t2, t3, t4, key, t5, value, t6, t7, _this = this;
      _this.set$_builtMapOwner(null);
      t1 = H.getTypeArgumentByIndex(_this, 0);
      t2 = H.getTypeArgumentByIndex(_this, 1);
      t3 = [L.BuiltSet, t2];
      _this.set$_builtMap(new H.JsLinkedHashMap([t1, t3]));
      _this.set$_builderMap(new H.JsLinkedHashMap([t1, [L.SetBuilder, t2]]));
      for (t4 = J.get$iterator$ax(keys); t4.moveNext$0();) {
        key = t4.get$current(t4);
        if (H.checkSubtypeOfRuntimeType(key, t1))
          for (t5 = J.get$iterator$ax(H.listSuperNativeTypeCheck(lookup.call$1(key), "$isIterable")); t5.moveNext$0();) {
            value = t5.get$current(t5);
            if (H.checkSubtypeOfRuntimeType(value, t2)) {
              H.assertSubtypeOfRuntimeType(key, t1);
              H.assertSubtypeOfRuntimeType(value, t2);
              if (_this._builtMapOwner != null) {
                _this.set$_builtMap(P.LinkedHashMap_LinkedHashMap$from(_this._builtMap, t1, t3));
                _this.set$_builtMapOwner(null);
              }
              if (key == null)
                H.throwExpression(P.ArgumentError$("invalid key: " + H.S(key)));
              t6 = value == null;
              if (t6)
                H.throwExpression(P.ArgumentError$("invalid value: " + H.S(value)));
              t7 = _this._getValuesBuilder$1(key);
              H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(t7, 0));
              if (t6)
                H.throwExpression(P.ArgumentError$("null element"));
              t7.get$_safeSet().add$1(0, value);
            } else
              throw H.wrapException(P.ArgumentError$("map contained invalid value: " + H.S(value) + ", for key " + H.S(key)));
          }
        else
          throw H.wrapException(P.ArgumentError$("map contained invalid key: " + H.S(key)));
      }
    },
    set$_builtMap: function(_builtMap) {
      this._builtMap = H.assertSubtype(_builtMap, "$isMap", [H.getTypeArgumentByIndex(this, 0), [L.BuiltSet, H.getTypeArgumentByIndex(this, 1)]], "$asMap");
    },
    set$_builtMapOwner: function(_builtMapOwner) {
      this._builtMapOwner = H.assertSubtype(_builtMapOwner, "$is_BuiltSetMultimap", this.$ti, "$as_BuiltSetMultimap");
    },
    set$_builderMap: function(_builderMap) {
      this._builderMap = H.assertSubtype(_builderMap, "$isMap", [H.getTypeArgumentByIndex(this, 0), [L.SetBuilder, H.getTypeArgumentByIndex(this, 1)]], "$asMap");
    }
  };
  E.SetMultimapBuilder_replace_closure.prototype = {
    call$1: function(k) {
      return this.multimap.$index(0, k);
    },
    $signature: 2
  };
  Y.EnumClass.prototype = {
    toString$0: function(_) {
      return this.name;
    }
  };
  Y.closure.prototype = {
    call$1: function(className) {
      var t1 = new P.StringBuffer("");
      t1._contents = className;
      t1._contents = className + " {\n";
      $._indentingBuiltValueToStringHelperIndent = $._indentingBuiltValueToStringHelperIndent + 2;
      return new Y.IndentingBuiltValueToStringHelper(t1);
    },
    $signature: 41
  };
  Y.IndentingBuiltValueToStringHelper.prototype = {
    add$2: function(_, field, value) {
      var t1, t2;
      if (value != null) {
        t1 = this._result;
        t2 = t1._contents += C.JSString_methods.$mul(" ", $._indentingBuiltValueToStringHelperIndent);
        t2 += field;
        t1._contents = t2;
        t1._contents = t2 + "=";
        t2 = t1._contents += H.S(value);
        t1._contents = t2 + ",\n";
      }
    },
    toString$0: function(_) {
      var t2, stringResult,
        t1 = $._indentingBuiltValueToStringHelperIndent - 2;
      $._indentingBuiltValueToStringHelperIndent = t1;
      t2 = this._result;
      t1 = t2._contents += C.JSString_methods.$mul(" ", t1);
      t2._contents = t1 + "}";
      stringResult = J.toString$0$(this._result);
      this._result = null;
      return stringResult;
    }
  };
  Y.BuiltValueNullFieldError.prototype = {
    toString$0: function(_) {
      var t1 = this.field;
      return 'Tried to construct class "' + this.type + '" with null field "' + t1 + '". This is forbidden; to allow it, mark "' + t1 + '" with @nullable.';
    }
  };
  A.JsonObject.prototype = {
    toString$0: function(_) {
      return J.toString$0$(this.get$value(this));
    }
  };
  A.BoolJsonObject.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!(other instanceof A.BoolJsonObject))
        return false;
      return this.value === other.value;
    },
    get$hashCode: function(_) {
      return C.JSBool_methods.get$hashCode(this.value);
    },
    get$value: function(receiver) {
      return this.value;
    }
  };
  A.ListJsonObject.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!(other instanceof A.ListJsonObject))
        return false;
      return C.C_DeepCollectionEquality.equals$2(this.value, other.value);
    },
    get$hashCode: function(_) {
      return C.C_DeepCollectionEquality.hash$1(0, this.value);
    },
    get$value: function(receiver) {
      return this.value;
    }
  };
  A.MapJsonObject.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!(other instanceof A.MapJsonObject))
        return false;
      return C.C_DeepCollectionEquality.equals$2(this.value, other.value);
    },
    get$hashCode: function(_) {
      return C.C_DeepCollectionEquality.hash$1(0, this.value);
    },
    get$value: function(receiver) {
      return this.value;
    }
  };
  A.NumJsonObject.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!(other instanceof A.NumJsonObject))
        return false;
      return this.value === other.value;
    },
    get$hashCode: function(_) {
      return C.JSNumber_methods.get$hashCode(this.value);
    },
    get$value: function(receiver) {
      return this.value;
    }
  };
  A.StringJsonObject.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!(other instanceof A.StringJsonObject))
        return false;
      return this.value === other.value;
    },
    get$hashCode: function(_) {
      return C.JSString_methods.get$hashCode(this.value);
    },
    get$value: function(receiver) {
      return this.value;
    }
  };
  U.Serializers_Serializers_closure.prototype = {
    call$0: function() {
      return S.ListBuilder_ListBuilder(C.List_empty, P.Object);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 31
  };
  U.Serializers_Serializers_closure0.prototype = {
    call$0: function() {
      var t1 = P.Object;
      return M.ListMultimapBuilder_ListMultimapBuilder(t1, t1);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 43
  };
  U.Serializers_Serializers_closure1.prototype = {
    call$0: function() {
      var t1 = P.Object;
      return A.MapBuilder_MapBuilder(t1, t1);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 44
  };
  U.Serializers_Serializers_closure2.prototype = {
    call$0: function() {
      return L.SetBuilder_SetBuilder(P.Object);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 45
  };
  U.Serializers_Serializers_closure3.prototype = {
    call$0: function() {
      var t1 = P.Object;
      return E.SetMultimapBuilder_SetMultimapBuilder(t1, t1);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 46
  };
  U.SerializerPlugin.prototype = {};
  U.FullType.prototype = {
    $eq: function(_, other) {
      var t1, t2, t3, t4, i, t5;
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!(other instanceof U.FullType))
        return false;
      if (!J.$eq$(this.root, other.root))
        return false;
      t1 = this.parameters;
      t2 = t1.length;
      t3 = other.parameters;
      t4 = t3.length;
      if (t2 !== t4)
        return false;
      for (i = 0; i !== t2; ++i) {
        if (i >= t2)
          return H.ioore(t1, i);
        t5 = t1[i];
        if (i >= t4)
          return H.ioore(t3, i);
        if (!t5.$eq(0, t3[i]))
          return false;
      }
      return true;
    },
    get$hashCode: function(_) {
      var t1 = X.hashObjects(this.parameters);
      return X._finish(X._combine(X._combine(0, J.get$hashCode$(this.root)), C.JSInt_methods.get$hashCode(t1)));
    },
    toString$0: function(_) {
      var t2,
        t1 = this.root;
      if (t1 == null)
        t1 = "unspecified";
      else {
        t2 = this.parameters;
        t1 = t2.length === 0 ? U.FullType__getRawName(t1) : U.FullType__getRawName(t1) + "<" + C.JSArray_methods.join$1(t2, ", ") + ">";
      }
      return t1;
    }
  };
  U.Serializer.prototype = {};
  U.DeserializationError.prototype = {
    toString$0: function(_) {
      return "Deserializing '" + this.json + "' to '" + this.type.toString$0(0) + "' failed due to: " + this.error.toString$0(0);
    }
  };
  O.BigIntSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, bigInt, specifiedType) {
      return J.toString$0$(H.interceptedTypeCheck(bigInt, "$isBigInt"));
    },
    serialize$2: function(serializers, bigInt) {
      return this.serialize$3$specifiedType(serializers, bigInt, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var result;
      H.stringTypeCast(serialized);
      result = P._BigIntImpl__tryParse(serialized, null);
      if (result == null)
        H.throwExpression(P.FormatException$("Could not parse BigInt", serialized, null));
      return result;
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.BigInt];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.BigInt];
    },
    get$types: function(receiver) {
      return this.types;
    },
    get$wireName: function() {
      return "BigInt";
    }
  };
  R.BoolSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, boolean, specifiedType) {
      return H.boolTypeCheck(boolean);
    },
    serialize$2: function(serializers, boolean) {
      return this.serialize$3$specifiedType(serializers, boolean, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      return H.boolTypeCast(serialized);
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.bool];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.bool];
    },
    get$types: function(receiver) {
      return this.types;
    },
    get$wireName: function() {
      return "bool";
    }
  };
  Y.BuiltJsonSerializers.prototype = {
    serialize$2$specifiedType: function(object, specifiedType) {
      var t1, t2, t3, transformedObject, result;
      for (t1 = this._plugins._list, t2 = [H.getTypeArgumentByIndex(t1, 0)], t3 = new J.ArrayIterator(t1, t1.length, t2), transformedObject = object; t3.moveNext$0();)
        transformedObject = t3.__interceptors$_current.beforeSerialize$2(transformedObject, specifiedType);
      result = this._serialize$2(transformedObject, specifiedType);
      for (t1 = new J.ArrayIterator(t1, t1.length, t2); t1.moveNext$0();)
        result = t1.__interceptors$_current.afterSerialize$2(result, specifiedType);
      return result;
    },
    serialize$1: function(object) {
      return this.serialize$2$specifiedType(object, C.FullType_null_List_empty);
    },
    _serialize$2: function(object, specifiedType) {
      var serializer, result, _this = this,
        _s62_ = "serializer must be StructuredSerializer or PrimitiveSerializer",
        t1 = specifiedType.root;
      if (t1 == null) {
        t1 = J.getInterceptor$(object);
        serializer = _this.serializerForType$1(t1.get$runtimeType(object));
        if (serializer == null)
          throw H.wrapException(P.StateError$("No serializer for '" + t1.get$runtimeType(object).toString$0(0) + "'."));
        if (!!serializer.$isStructuredSerializer) {
          result = H.setRuntimeTypeInfo([serializer.get$wireName()], [P.Object]);
          C.JSArray_methods.addAll$1(result, serializer.serialize$2(_this, object));
          return result;
        } else if (!!serializer.$isPrimitiveSerializer)
          return H.setRuntimeTypeInfo([serializer.get$wireName(), serializer.serialize$2(_this, object)], [P.Object]);
        else
          throw H.wrapException(P.StateError$(_s62_));
      } else {
        serializer = _this.serializerForType$1(t1);
        if (serializer == null)
          return _this.serialize$1(object);
        if (!!serializer.$isStructuredSerializer)
          return J.toList$0$ax(serializer.serialize$3$specifiedType(_this, object, specifiedType));
        else if (!!serializer.$isPrimitiveSerializer)
          return serializer.serialize$3$specifiedType(_this, object, specifiedType);
        else
          throw H.wrapException(P.StateError$(_s62_));
      }
    },
    deserialize$2$specifiedType: function(object, specifiedType) {
      var t1, t2, t3, transformedObject, result;
      for (t1 = this._plugins._list, t2 = [H.getTypeArgumentByIndex(t1, 0)], t3 = new J.ArrayIterator(t1, t1.length, t2), transformedObject = object; t3.moveNext$0();)
        transformedObject = t3.__interceptors$_current.beforeDeserialize$2(transformedObject, specifiedType);
      result = this._deserialize$3(object, transformedObject, specifiedType);
      for (t1 = new J.ArrayIterator(t1, t1.length, t2); t1.moveNext$0();)
        result = t1.__interceptors$_current.afterDeserialize$2(result, specifiedType);
      return result;
    },
    deserialize$1: function(object) {
      return this.deserialize$2$specifiedType(object, C.FullType_null_List_empty);
    },
    _deserialize$3: function(objectBeforePlugins, object, specifiedType) {
      var serializer, error, error0, serializer0, error1, error2, wireName, exception, t2, _this = this,
        _s19_ = "No serializer for '",
        _s62_ = "serializer must be StructuredSerializer or PrimitiveSerializer",
        t1 = specifiedType.root;
      if (t1 == null) {
        H.listTypeCast(object);
        t1 = J.getInterceptor$ax(object);
        wireName = H.stringTypeCast(t1.get$first(object));
        serializer = J.$index$asx(_this._wireNameToSerializer._map$_map, wireName);
        if (serializer == null)
          throw H.wrapException(P.StateError$(_s19_ + H.S(wireName) + "'."));
        if (!!J.getInterceptor$(serializer).$isStructuredSerializer)
          try {
            t1 = serializer.deserialize$2(_this, t1.sublist$1(object, 1));
            return t1;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            if (!!J.getInterceptor$(t1).$isError) {
              error = t1;
              throw H.wrapException(U.DeserializationError_DeserializationError(object, specifiedType, error));
            } else
              throw exception;
          }
        else if (!!J.getInterceptor$(serializer).$isPrimitiveSerializer)
          try {
            t1 = serializer.deserialize$2(_this, t1.$index(object, 1));
            return t1;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            if (!!J.getInterceptor$(t1).$isError) {
              error0 = t1;
              throw H.wrapException(U.DeserializationError_DeserializationError(object, specifiedType, error0));
            } else
              throw exception;
          }
        else
          throw H.wrapException(P.StateError$(_s62_));
      } else {
        serializer0 = _this.serializerForType$1(t1);
        if (serializer0 == null) {
          t2 = J.getInterceptor$(object);
          if (!!t2.$isList) {
            t2 = t2.get$first(object);
            t2 = typeof t2 === "string";
          } else
            t2 = false;
          if (t2)
            return _this.deserialize$1(objectBeforePlugins);
          else
            throw H.wrapException(P.StateError$(_s19_ + t1.toString$0(0) + "'."));
        }
        if (!!J.getInterceptor$(serializer0).$isStructuredSerializer)
          try {
            t1 = serializer0.deserialize$3$specifiedType(_this, H.listSuperNativeTypeCast(object, "$isIterable"), specifiedType);
            return t1;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            if (!!J.getInterceptor$(t1).$isError) {
              error1 = t1;
              throw H.wrapException(U.DeserializationError_DeserializationError(object, specifiedType, error1));
            } else
              throw exception;
          }
        else if (!!J.getInterceptor$(serializer0).$isPrimitiveSerializer)
          try {
            t1 = serializer0.deserialize$3$specifiedType(_this, object, specifiedType);
            return t1;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            if (!!J.getInterceptor$(t1).$isError) {
              error2 = t1;
              throw H.wrapException(U.DeserializationError_DeserializationError(object, specifiedType, error2));
            } else
              throw exception;
          }
        else
          throw H.wrapException(P.StateError$(_s62_));
      }
    },
    serializerForType$1: function(type) {
      var t1 = J.$index$asx(this._typeToSerializer._map$_map, type);
      if (t1 == null) {
        t1 = Y._getRawName(type);
        t1 = J.$index$asx(this._typeNameToSerializer._map$_map, t1);
      }
      return t1;
    },
    newBuilder$1: function(fullType) {
      var builderFactory = J.$index$asx(this.builderFactories._map$_map, fullType);
      if (builderFactory == null)
        this._throwMissingBuilderFactory$1(fullType);
      return builderFactory.call$0();
    },
    _throwMissingBuilderFactory$1: function(fullType) {
      throw H.wrapException(P.StateError$("No builder factory for " + fullType.toString$0(0) + ". Fix by adding one, see SerializersBuilder.addBuilderFactory."));
    },
    $isSerializers: 1
  };
  Y.BuiltJsonSerializersBuilder.prototype = {
    add$1: function(_, serializer) {
      var t2, t3, t4, t5, t6, $name, genericsStart,
        t1 = J.getInterceptor$(serializer);
      if (!t1.$isStructuredSerializer && !t1.$isPrimitiveSerializer)
        throw H.wrapException(P.ArgumentError$("serializer must be StructuredSerializer or PrimitiveSerializer"));
      this._wireNameToSerializer.$indexSet(0, serializer.get$wireName(), serializer);
      for (t1 = J.get$iterator$ax(serializer.get$types(serializer)), t2 = this._typeNameToSerializer, t3 = this._typeToSerializer, t4 = H.getTypeArgumentByIndex(t3, 0), t5 = H.getTypeArgumentByIndex(t3, 1); t1.moveNext$0();) {
        t6 = t1.get$current(t1);
        H.assertSubtypeOfRuntimeType(t6, t4);
        H.assertSubtypeOfRuntimeType(serializer, t5);
        if (t6 == null)
          H.throwExpression(P.ArgumentError$("null key"));
        J.$indexSet$ax(t3.get$_safeMap(), t6, serializer);
        $name = J.toString$0$(t6);
        genericsStart = J.getInterceptor$s($name).indexOf$1($name, "<");
        t6 = genericsStart === -1 ? $name : C.JSString_methods.substring$2($name, 0, genericsStart);
        H.assertSubtypeOfRuntimeType(t6, H.getTypeArgumentByIndex(t2, 0));
        H.assertSubtypeOfRuntimeType(serializer, H.getTypeArgumentByIndex(t2, 1));
        J.$indexSet$ax(t2.get$_safeMap(), t6, serializer);
      }
    },
    build$0: function() {
      var _this = this;
      return new Y.BuiltJsonSerializers(_this._typeToSerializer.build$0(), _this._wireNameToSerializer.build$0(), _this._typeNameToSerializer.build$0(), _this._builderFactories.build$0(), _this._plugins.build$0());
    }
  };
  R.BuiltListMultimapSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, builtListMultimap, specifiedType) {
      var t1, t2, t3, keyType, valueType, result, t4, key, result0, t5, t6, t7;
      H.interceptedTypeCheck(builtListMultimap, "$isBuiltListMultimap");
      if (!(specifiedType.root == null || specifiedType.parameters.length === 0))
        if (!J.containsKey$1$x(serializers.builderFactories._map$_map, specifiedType))
          serializers._throwMissingBuilderFactory$1(specifiedType);
      t1 = specifiedType.parameters;
      t2 = t1.length;
      t3 = t2 === 0;
      if (t3)
        keyType = C.FullType_null_List_empty;
      else {
        if (0 >= t2)
          return H.ioore(t1, 0);
        keyType = t1[0];
      }
      if (t3)
        valueType = C.FullType_null_List_empty;
      else {
        if (1 >= t2)
          return H.ioore(t1, 1);
        valueType = t1[1];
      }
      t1 = P.Object;
      result = H.setRuntimeTypeInfo([], [t1]);
      for (t2 = builtListMultimap.get$keys(builtListMultimap), t2 = t2.get$iterator(t2), t3 = builtListMultimap._list_multimap$_map, t4 = builtListMultimap._emptyList; t2.moveNext$0();) {
        key = t2.get$current(t2);
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(key, keyType));
        result0 = t3.$index(0, key);
        t5 = result0 == null ? t4 : result0;
        t6 = H.functionTypeCheck(new R.BuiltListMultimapSerializer_serialize_closure(serializers, valueType), {func: 1, ret: t1, args: [H.getTypeArgumentByIndex(t5, 0)]});
        t5 = t5._list;
        t5.toString;
        t7 = H.getTypeArgumentByIndex(t5, 0);
        C.JSArray_methods.add$1(result, new H.MappedListIterable(t5, H.functionTypeCheck(t6, {func: 1, ret: t1, args: [t7]}), [t7, t1]).toList$0(0));
      }
      return result;
    },
    serialize$2: function(serializers, builtListMultimap) {
      return this.serialize$3$specifiedType(serializers, builtListMultimap, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var isUnderspecified, t1, t2, t3, keyType, valueType, result, t4, i, key, t5, value, t6, t7, t8;
      H.listSuperNativeTypeCheck(serialized, "$isIterable");
      isUnderspecified = specifiedType.root == null || specifiedType.parameters.length === 0;
      t1 = specifiedType.parameters;
      t2 = t1.length;
      t3 = t2 === 0;
      if (t3)
        keyType = C.FullType_null_List_empty;
      else {
        if (0 >= t2)
          return H.ioore(t1, 0);
        keyType = t1[0];
      }
      if (t3)
        valueType = C.FullType_null_List_empty;
      else {
        if (1 >= t2)
          return H.ioore(t1, 1);
        valueType = t1[1];
      }
      if (isUnderspecified) {
        t1 = P.Object;
        result = M.ListMultimapBuilder_ListMultimapBuilder(t1, t1);
      } else
        result = H.interceptedTypeCast(serializers.newBuilder$1(specifiedType), "$isListMultimapBuilder");
      t1 = J.getInterceptor$asx(serialized);
      t2 = t1.get$length(serialized);
      if (typeof t2 !== "number")
        return t2.$mod();
      if (C.JSInt_methods.$mod(t2, 2) === 1)
        throw H.wrapException(P.ArgumentError$("odd length"));
      for (t2 = H.getTypeArgumentByIndex(result, 1), t3 = H.getTypeArgumentByIndex(result, 0), t4 = [S.BuiltList, t2], i = 0; i !== t1.get$length(serialized); i += 2) {
        key = serializers.deserialize$2$specifiedType(t1.elementAt$1(serialized, i), keyType);
        for (t5 = J.get$iterator$ax(H.listSuperNativeTypeCheck(J.map$1$ax(t1.elementAt$1(serialized, i + 1), new R.BuiltListMultimapSerializer_deserialize_closure(serializers, valueType)), "$isIterable")); t5.moveNext$0();) {
          value = t5.get$current(t5);
          result.toString;
          H.assertSubtypeOfRuntimeType(key, t3);
          H.assertSubtypeOfRuntimeType(value, t2);
          if (result._list_multimap$_builtMapOwner != null) {
            result.set$_list_multimap$_builtMap(P.LinkedHashMap_LinkedHashMap$from(result._list_multimap$_builtMap, t3, t4));
            result.set$_list_multimap$_builtMapOwner(null);
          }
          if (key == null)
            H.throwExpression(P.ArgumentError$("null key"));
          t6 = value == null;
          if (t6)
            H.throwExpression(P.ArgumentError$("null value"));
          t7 = result._list_multimap$_getValuesBuilder$1(key);
          t8 = H.getTypeArgumentByIndex(t7, 0);
          H.assertSubtypeOfRuntimeType(value, t8);
          if (t6)
            H.throwExpression(P.ArgumentError$("null element"));
          if (t7._listOwner != null) {
            t7.set$_list(H.assertSubtype(P.List_List$from(t7._list, true, t8), "$isList", [t8], "$asList"));
            t7.set$_listOwner(null);
          }
          t6 = t7._list;
          (t6 && C.JSArray_methods).add$1(t6, value);
        }
      }
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [[M.BuiltListMultimap,,,]];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [[M.BuiltListMultimap,,,]];
    },
    get$types: function(receiver) {
      return this.types;
    },
    get$wireName: function() {
      return "listMultimap";
    }
  };
  R.BuiltListMultimapSerializer_serialize_closure.prototype = {
    call$1: function(value) {
      return this.serializers.serialize$2$specifiedType(value, this.valueType);
    },
    $signature: 3
  };
  R.BuiltListMultimapSerializer_deserialize_closure.prototype = {
    call$1: function(value) {
      return this.serializers.deserialize$2$specifiedType(value, this.valueType);
    },
    $signature: 3
  };
  K.BuiltListSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, builtList, specifiedType) {
      var t1, t2, elementType, t3;
      H.interceptedTypeCheck(builtList, "$isBuiltList");
      if (!(specifiedType.root == null || specifiedType.parameters.length === 0))
        if (!J.containsKey$1$x(serializers.builderFactories._map$_map, specifiedType))
          serializers._throwMissingBuilderFactory$1(specifiedType);
      t1 = specifiedType.parameters;
      t2 = t1.length;
      if (t2 === 0)
        elementType = C.FullType_null_List_empty;
      else {
        if (0 >= t2)
          return H.ioore(t1, 0);
        elementType = t1[0];
      }
      builtList.toString;
      t1 = H.functionTypeCheck(new K.BuiltListSerializer_serialize_closure(serializers, elementType), {func: 1, ret: null, args: [H.getTypeArgumentByIndex(builtList, 0)]});
      t2 = builtList._list;
      t2.toString;
      t3 = H.getTypeArgumentByIndex(t2, 0);
      return new H.MappedListIterable(t2, H.functionTypeCheck(t1, {func: 1, ret: null, args: [t3]}), [t3, null]);
    },
    serialize$2: function(serializers, builtList) {
      return this.serialize$3$specifiedType(serializers, builtList, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var isUnderspecified, t1, t2, elementType, result;
      H.listSuperNativeTypeCheck(serialized, "$isIterable");
      isUnderspecified = specifiedType.root == null || specifiedType.parameters.length === 0;
      t1 = specifiedType.parameters;
      t2 = t1.length;
      if (t2 === 0)
        elementType = C.FullType_null_List_empty;
      else {
        if (0 >= t2)
          return H.ioore(t1, 0);
        elementType = t1[0];
      }
      result = isUnderspecified ? S.ListBuilder_ListBuilder(C.List_empty, P.Object) : H.interceptedTypeCast(serializers.newBuilder$1(specifiedType), "$isListBuilder");
      result.replace$1(0, J.map$1$1$ax(serialized, new K.BuiltListSerializer_deserialize_closure(serializers, elementType), null));
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [[S.BuiltList,,]];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [[S.BuiltList,,]];
    },
    get$types: function(receiver) {
      return this.types;
    },
    get$wireName: function() {
      return "list";
    }
  };
  K.BuiltListSerializer_serialize_closure.prototype = {
    call$1: function(item) {
      return this.serializers.serialize$2$specifiedType(item, this.elementType);
    },
    $signature: 3
  };
  K.BuiltListSerializer_deserialize_closure.prototype = {
    call$1: function(item) {
      return this.serializers.deserialize$2$specifiedType(item, this.elementType);
    },
    $signature: 3
  };
  K.BuiltMapSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, builtMap, specifiedType) {
      var t1, t2, t3, keyType, valueType, result, key;
      H.interceptedTypeCheck(builtMap, "$isBuiltMap");
      if (!(specifiedType.root == null || specifiedType.parameters.length === 0))
        if (!J.containsKey$1$x(serializers.builderFactories._map$_map, specifiedType))
          serializers._throwMissingBuilderFactory$1(specifiedType);
      t1 = specifiedType.parameters;
      t2 = t1.length;
      t3 = t2 === 0;
      if (t3)
        keyType = C.FullType_null_List_empty;
      else {
        if (0 >= t2)
          return H.ioore(t1, 0);
        keyType = t1[0];
      }
      if (t3)
        valueType = C.FullType_null_List_empty;
      else {
        if (1 >= t2)
          return H.ioore(t1, 1);
        valueType = t1[1];
      }
      result = H.setRuntimeTypeInfo([], [P.Object]);
      for (t1 = J.get$iterator$ax(builtMap.get$keys(builtMap)), t2 = builtMap._map$_map, t3 = J.getInterceptor$asx(t2); t1.moveNext$0();) {
        key = t1.get$current(t1);
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(key, keyType));
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(t3.$index(t2, key), valueType));
      }
      return result;
    },
    serialize$2: function(serializers, builtMap) {
      return this.serialize$3$specifiedType(serializers, builtMap, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var isUnderspecified, t1, t2, t3, keyType, valueType, result, i, key, value;
      H.listSuperNativeTypeCheck(serialized, "$isIterable");
      isUnderspecified = specifiedType.root == null || specifiedType.parameters.length === 0;
      t1 = specifiedType.parameters;
      t2 = t1.length;
      t3 = t2 === 0;
      if (t3)
        keyType = C.FullType_null_List_empty;
      else {
        if (0 >= t2)
          return H.ioore(t1, 0);
        keyType = t1[0];
      }
      if (t3)
        valueType = C.FullType_null_List_empty;
      else {
        if (1 >= t2)
          return H.ioore(t1, 1);
        valueType = t1[1];
      }
      if (isUnderspecified) {
        t1 = P.Object;
        result = A.MapBuilder_MapBuilder(t1, t1);
      } else
        result = H.interceptedTypeCast(serializers.newBuilder$1(specifiedType), "$isMapBuilder");
      t1 = J.getInterceptor$asx(serialized);
      t2 = t1.get$length(serialized);
      if (typeof t2 !== "number")
        return t2.$mod();
      if (C.JSInt_methods.$mod(t2, 2) === 1)
        throw H.wrapException(P.ArgumentError$("odd length"));
      for (t2 = H.getTypeArgumentByIndex(result, 1), t3 = H.getTypeArgumentByIndex(result, 0), i = 0; i !== t1.get$length(serialized); i += 2) {
        key = serializers.deserialize$2$specifiedType(t1.elementAt$1(serialized, i), keyType);
        value = serializers.deserialize$2$specifiedType(t1.elementAt$1(serialized, i + 1), valueType);
        result.toString;
        H.assertSubtypeOfRuntimeType(key, t3);
        H.assertSubtypeOfRuntimeType(value, t2);
        if (key == null)
          H.throwExpression(P.ArgumentError$("null key"));
        if (value == null)
          H.throwExpression(P.ArgumentError$("null value"));
        J.$indexSet$ax(result.get$_safeMap(), key, value);
      }
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [[A.BuiltMap,,,]];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [[A.BuiltMap,,,]];
    },
    get$types: function(receiver) {
      return this.types;
    },
    get$wireName: function() {
      return "map";
    }
  };
  R.BuiltSetMultimapSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, builtSetMultimap, specifiedType) {
      var t1, t2, t3, keyType, valueType, result, t4, key, result0, t5;
      H.interceptedTypeCheck(builtSetMultimap, "$isBuiltSetMultimap");
      if (!(specifiedType.root == null || specifiedType.parameters.length === 0))
        if (!J.containsKey$1$x(serializers.builderFactories._map$_map, specifiedType))
          serializers._throwMissingBuilderFactory$1(specifiedType);
      t1 = specifiedType.parameters;
      t2 = t1.length;
      t3 = t2 === 0;
      if (t3)
        keyType = C.FullType_null_List_empty;
      else {
        if (0 >= t2)
          return H.ioore(t1, 0);
        keyType = t1[0];
      }
      if (t3)
        valueType = C.FullType_null_List_empty;
      else {
        if (1 >= t2)
          return H.ioore(t1, 1);
        valueType = t1[1];
      }
      t1 = P.Object;
      result = H.setRuntimeTypeInfo([], [t1]);
      for (t2 = builtSetMultimap.get$keys(builtSetMultimap), t2 = t2.get$iterator(t2), t3 = builtSetMultimap._set_multimap$_map, t4 = builtSetMultimap._emptySet; t2.moveNext$0();) {
        key = t2.get$current(t2);
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(key, keyType));
        result0 = t3.$index(0, key);
        t5 = result0 == null ? t4 : result0;
        t5 = t5._set$_set.map$1$1(0, H.functionTypeCheck(new R.BuiltSetMultimapSerializer_serialize_closure(serializers, valueType), {func: 1, ret: t1, args: [H.getTypeArgumentByIndex(t5, 0)]}), t1);
        C.JSArray_methods.add$1(result, P.List_List$from(t5, true, H.getRuntimeTypeArgument(t5, "Iterable", 0)));
      }
      return result;
    },
    serialize$2: function(serializers, builtSetMultimap) {
      return this.serialize$3$specifiedType(serializers, builtSetMultimap, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var isUnderspecified, t1, t2, t3, keyType, valueType, result, t4, i, key, t5, value, t6, t7;
      H.listSuperNativeTypeCheck(serialized, "$isIterable");
      isUnderspecified = specifiedType.root == null || specifiedType.parameters.length === 0;
      t1 = specifiedType.parameters;
      t2 = t1.length;
      t3 = t2 === 0;
      if (t3)
        keyType = C.FullType_null_List_empty;
      else {
        if (0 >= t2)
          return H.ioore(t1, 0);
        keyType = t1[0];
      }
      if (t3)
        valueType = C.FullType_null_List_empty;
      else {
        if (1 >= t2)
          return H.ioore(t1, 1);
        valueType = t1[1];
      }
      if (isUnderspecified) {
        t1 = P.Object;
        result = E.SetMultimapBuilder_SetMultimapBuilder(t1, t1);
      } else
        result = H.interceptedTypeCast(serializers.newBuilder$1(specifiedType), "$isSetMultimapBuilder");
      t1 = J.getInterceptor$asx(serialized);
      t2 = t1.get$length(serialized);
      if (typeof t2 !== "number")
        return t2.$mod();
      if (C.JSInt_methods.$mod(t2, 2) === 1)
        throw H.wrapException(P.ArgumentError$("odd length"));
      for (t2 = H.getTypeArgumentByIndex(result, 1), t3 = H.getTypeArgumentByIndex(result, 0), t4 = [L.BuiltSet, t2], i = 0; i !== t1.get$length(serialized); i += 2) {
        key = serializers.deserialize$2$specifiedType(t1.elementAt$1(serialized, i), keyType);
        for (t5 = J.get$iterator$ax(H.listSuperNativeTypeCheck(J.map$1$ax(t1.elementAt$1(serialized, i + 1), new R.BuiltSetMultimapSerializer_deserialize_closure(serializers, valueType)), "$isIterable")); t5.moveNext$0();) {
          value = t5.get$current(t5);
          result.toString;
          H.assertSubtypeOfRuntimeType(key, t3);
          H.assertSubtypeOfRuntimeType(value, t2);
          if (result._builtMapOwner != null) {
            result.set$_builtMap(P.LinkedHashMap_LinkedHashMap$from(result._builtMap, t3, t4));
            result.set$_builtMapOwner(null);
          }
          if (key == null)
            H.throwExpression(P.ArgumentError$("invalid key: " + H.S(key)));
          t6 = value == null;
          if (t6)
            H.throwExpression(P.ArgumentError$("invalid value: " + H.S(value)));
          t7 = result._getValuesBuilder$1(key);
          H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(t7, 0));
          if (t6)
            H.throwExpression(P.ArgumentError$("null element"));
          t7.get$_safeSet().add$1(0, value);
        }
      }
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [[E.BuiltSetMultimap,,,]];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [[E.BuiltSetMultimap,,,]];
    },
    get$types: function(receiver) {
      return this.types;
    },
    get$wireName: function() {
      return "setMultimap";
    }
  };
  R.BuiltSetMultimapSerializer_serialize_closure.prototype = {
    call$1: function(value) {
      return this.serializers.serialize$2$specifiedType(value, this.valueType);
    },
    $signature: 3
  };
  R.BuiltSetMultimapSerializer_deserialize_closure.prototype = {
    call$1: function(value) {
      return this.serializers.deserialize$2$specifiedType(value, this.valueType);
    },
    $signature: 3
  };
  O.BuiltSetSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, builtSet, specifiedType) {
      var t1, t2, elementType;
      H.interceptedTypeCheck(builtSet, "$isBuiltSet");
      if (!(specifiedType.root == null || specifiedType.parameters.length === 0))
        if (!J.containsKey$1$x(serializers.builderFactories._map$_map, specifiedType))
          serializers._throwMissingBuilderFactory$1(specifiedType);
      t1 = specifiedType.parameters;
      t2 = t1.length;
      if (t2 === 0)
        elementType = C.FullType_null_List_empty;
      else {
        if (0 >= t2)
          return H.ioore(t1, 0);
        elementType = t1[0];
      }
      builtSet.toString;
      t1 = H.functionTypeCheck(new O.BuiltSetSerializer_serialize_closure(serializers, elementType), {func: 1, ret: null, args: [H.getTypeArgumentByIndex(builtSet, 0)]});
      return builtSet._set$_set.map$1$1(0, t1, null);
    },
    serialize$2: function(serializers, builtSet) {
      return this.serialize$3$specifiedType(serializers, builtSet, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var isUnderspecified, t1, t2, elementType, result;
      H.listSuperNativeTypeCheck(serialized, "$isIterable");
      isUnderspecified = specifiedType.root == null || specifiedType.parameters.length === 0;
      t1 = specifiedType.parameters;
      t2 = t1.length;
      if (t2 === 0)
        elementType = C.FullType_null_List_empty;
      else {
        if (0 >= t2)
          return H.ioore(t1, 0);
        elementType = t1[0];
      }
      result = isUnderspecified ? L.SetBuilder_SetBuilder(P.Object) : H.interceptedTypeCast(serializers.newBuilder$1(specifiedType), "$isSetBuilder");
      result.replace$1(0, J.map$1$1$ax(serialized, new O.BuiltSetSerializer_deserialize_closure(serializers, elementType), null));
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [[L.BuiltSet,,]];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [[L.BuiltSet,,]];
    },
    get$types: function(receiver) {
      return this.types;
    },
    get$wireName: function() {
      return "set";
    }
  };
  O.BuiltSetSerializer_serialize_closure.prototype = {
    call$1: function(item) {
      return this.serializers.serialize$2$specifiedType(item, this.elementType);
    },
    $signature: 3
  };
  O.BuiltSetSerializer_deserialize_closure.prototype = {
    call$1: function(item) {
      return this.serializers.deserialize$2$specifiedType(item, this.elementType);
    },
    $signature: 3
  };
  Z.DateTimeSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, dateTime, specifiedType) {
      H.interceptedTypeCheck(dateTime, "$isDateTime");
      if (!dateTime.isUtc)
        throw H.wrapException(P.ArgumentError$value(dateTime, "dateTime", "Must be in utc for serialization."));
      return 1000 * dateTime._value;
    },
    serialize$2: function(serializers, dateTime) {
      return this.serialize$3$specifiedType(serializers, dateTime, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var t1, t2;
      H.intTypeCast(serialized);
      if (typeof serialized !== "number")
        return serialized.$div();
      t1 = C.JSDouble_methods.round$0(serialized / 1000);
      if (Math.abs(t1) <= 864e13)
        t2 = false;
      else
        t2 = true;
      if (t2)
        H.throwExpression(P.ArgumentError$("DateTime is outside valid range: " + t1));
      return new P.DateTime(t1, true);
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.DateTime];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.DateTime];
    },
    get$types: function(receiver) {
      return this.types;
    },
    get$wireName: function() {
      return "DateTime";
    }
  };
  D.DoubleSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, aDouble, specifiedType) {
      H.doubleTypeCheck(aDouble);
      aDouble.toString;
      if (isNaN(aDouble))
        return "NaN";
      else if (aDouble == 1 / 0 || aDouble == -1 / 0)
        return J.get$isNegative$n(aDouble) ? "-INF" : "INF";
      else
        return aDouble;
    },
    serialize$2: function(serializers, aDouble) {
      return this.serialize$3$specifiedType(serializers, aDouble, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var t1 = J.getInterceptor$(serialized);
      if (t1.$eq(serialized, "NaN"))
        return 0 / 0;
      else if (t1.$eq(serialized, "-INF"))
        return -1 / 0;
      else if (t1.$eq(serialized, "INF"))
        return 1 / 0;
      else {
        H.numTypeCast(serialized);
        serialized.toString;
        return serialized;
      }
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.double];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.double];
    },
    get$types: function(receiver) {
      return this.types;
    },
    get$wireName: function() {
      return "double";
    }
  };
  K.DurationSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, duration, specifiedType) {
      return H.interceptedTypeCheck(duration, "$isDuration")._duration;
    },
    serialize$2: function(serializers, duration) {
      return this.serialize$3$specifiedType(serializers, duration, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      H.intTypeCast(serialized);
      if (typeof serialized !== "number")
        return H.iae(serialized);
      return new P.Duration(serialized);
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.Duration];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.Duration];
    },
    get$types: function(receiver) {
      return this.types;
    },
    get$wireName: function() {
      return "Duration";
    }
  };
  Q.Int64Serializer.prototype = {
    serialize$3$specifiedType: function(serializers, int64, specifiedType) {
      return J.toString$0$(H.interceptedTypeCheck(int64, "$isInt64"));
    },
    serialize$2: function(serializers, int64) {
      return this.serialize$3$specifiedType(serializers, int64, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      return V.Int64__parseRadix(H.stringTypeCast(serialized), 10);
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [V.Int64];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [V.Int64];
    },
    get$types: function(receiver) {
      return this.types;
    },
    get$wireName: function() {
      return "Int64";
    }
  };
  B.IntSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, integer, specifiedType) {
      return H.intTypeCheck(integer);
    },
    serialize$2: function(serializers, integer) {
      return this.serialize$3$specifiedType(serializers, integer, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      return H.intTypeCast(serialized);
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.int];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.int];
    },
    get$types: function(receiver) {
      return this.types;
    },
    get$wireName: function() {
      return "int";
    }
  };
  O.JsonObjectSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, jsonObject, specifiedType) {
      H.interceptedTypeCheck(jsonObject, "$isJsonObject");
      return jsonObject.get$value(jsonObject);
    },
    serialize$2: function(serializers, jsonObject) {
      return this.serialize$3$specifiedType(serializers, jsonObject, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      return A.JsonObject_JsonObject(serialized);
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [A.JsonObject];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [A.JsonObject];
    },
    get$types: function(receiver) {
      return this.types;
    },
    get$wireName: function() {
      return "JsonObject";
    }
  };
  K.NumSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, number, specifiedType) {
      H.numTypeCheck(number);
      number.toString;
      if (isNaN(number))
        return "NaN";
      else if (number == 1 / 0 || number == -1 / 0)
        return J.get$isNegative$n(number) ? "-INF" : "INF";
      else
        return number;
    },
    serialize$2: function(serializers, number) {
      return this.serialize$3$specifiedType(serializers, number, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var t1 = J.getInterceptor$(serialized);
      if (t1.$eq(serialized, "NaN"))
        return 0 / 0;
      else if (t1.$eq(serialized, "-INF"))
        return -1 / 0;
      else if (t1.$eq(serialized, "INF"))
        return 1 / 0;
      else {
        H.numTypeCast(serialized);
        serialized.toString;
        return serialized;
      }
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.num];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.num];
    },
    get$types: function(receiver) {
      return this.types;
    },
    get$wireName: function() {
      return "num";
    }
  };
  K.RegExpSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, value, specifiedType) {
      return H.interceptedTypeCheck(value, "$isRegExp").pattern;
    },
    serialize$2: function(serializers, value) {
      return this.serialize$3$specifiedType(serializers, value, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      return P.RegExp_RegExp(H.stringTypeCast(serialized), true);
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.RegExp];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.RegExp];
    },
    get$types: function(receiver) {
      return this.types;
    },
    get$wireName: function() {
      return "RegExp";
    }
  };
  M.StringSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, string, specifiedType) {
      return H.stringTypeCheck(string);
    },
    serialize$2: function(serializers, string) {
      return this.serialize$3$specifiedType(serializers, string, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      return H.stringTypeCast(serialized);
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.String];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.String];
    },
    get$types: function(receiver) {
      return this.types;
    },
    get$wireName: function() {
      return "String";
    }
  };
  O.UriSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, uri, specifiedType) {
      return J.toString$0$(H.interceptedTypeCheck(uri, "$isUri"));
    },
    serialize$2: function(serializers, uri) {
      return this.serialize$3$specifiedType(serializers, uri, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      return P.Uri_parse(H.stringTypeCast(serialized));
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [P.Uri];
    },
    $isPrimitiveSerializer: 1,
    $asPrimitiveSerializer: function() {
      return [P.Uri];
    },
    get$types: function(receiver) {
      return this.types;
    },
    get$wireName: function() {
      return "Uri";
    }
  };
  M.CanonicalizedMap.prototype = {
    $index: function(_, key) {
      var pair, _this = this;
      if (!_this._isValidKey$1(key))
        return;
      pair = _this._base.$index(0, _this._canonicalize.call$1(H.subtypeOfRuntimeTypeCast(key, H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 1))));
      return pair == null ? null : pair.last;
    },
    $indexSet: function(_, key, value) {
      var t2, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 1);
      H.assertSubtypeOfRuntimeType(key, t1);
      t2 = H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 2);
      H.assertSubtypeOfRuntimeType(value, t2);
      if (!_this._isValidKey$1(key))
        return;
      _this._base.$indexSet(0, _this._canonicalize.call$1(key), new B.Pair(key, value, [t1, t2]));
    },
    addAll$1: function(_, other) {
      J.forEach$1$ax(H.assertSubtype(other, "$isMap", [H.getRuntimeTypeArgument(this, "CanonicalizedMap", 1), H.getRuntimeTypeArgument(this, "CanonicalizedMap", 2)], "$asMap"), new M.CanonicalizedMap_addAll_closure(this));
    },
    cast$2$0: function(_, K2, V2) {
      var t1 = this._base;
      return t1.cast$2$0(t1, K2, V2);
    },
    containsKey$1: function(_, key) {
      var _this = this;
      if (!_this._isValidKey$1(key))
        return false;
      return _this._base.containsKey$1(0, _this._canonicalize.call$1(H.subtypeOfRuntimeTypeCast(key, H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 1))));
    },
    forEach$1: function(_, f) {
      var _this = this;
      _this._base.forEach$1(0, new M.CanonicalizedMap_forEach_closure(_this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 1), H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 2)]})));
    },
    get$isEmpty: function(_) {
      var t1 = this._base;
      return t1.get$isEmpty(t1);
    },
    get$keys: function(_) {
      var t2, t3,
        t1 = this._base;
      t1 = t1.get$values(t1);
      t2 = H.getRuntimeTypeArgument(this, "CanonicalizedMap", 1);
      t3 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
      return H.MappedIterable_MappedIterable(t1, H.functionTypeCheck(new M.CanonicalizedMap_keys_closure(this), {func: 1, ret: t2, args: [t3]}), t3, t2);
    },
    get$length: function(_) {
      var t1 = this._base;
      return t1.get$length(t1);
    },
    map$2$1: function(_, transform, K2, V2) {
      var _this = this,
        t1 = _this._base;
      return t1.map$2$1(t1, new M.CanonicalizedMap_map_closure(_this, H.functionTypeCheck(transform, {func: 1, ret: [P.MapEntry, K2, V2], args: [H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 1), H.getRuntimeTypeArgument(_this, "CanonicalizedMap", 2)]}), K2, V2), K2, V2);
    },
    map$1: function($receiver, transform) {
      return this.map$2$1($receiver, transform, null, null);
    },
    toString$0: function(_) {
      var result, _this = this, t1 = {};
      if (M._isToStringVisiting0(_this))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($._toStringVisiting0, _this);
        result._contents += "{";
        t1.first = true;
        _this.forEach$1(0, new M.CanonicalizedMap_toString_closure(t1, _this, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting0.length)
          return H.ioore($._toStringVisiting0, -1);
        $._toStringVisiting0.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isValidKey$1: function(key) {
      var t1;
      if (key == null || H.checkSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(this, "CanonicalizedMap", 1)))
        t1 = H.boolConversionCheck(this._isValidKeyFn.call$1(key));
      else
        t1 = false;
      return t1;
    },
    $isMap: 1,
    $asMap: function($C, $K, $V) {
      return [$K, $V];
    }
  };
  M.CanonicalizedMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 1));
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 2));
      t1.$indexSet(0, key, value);
      return value;
    },
    $signature: function() {
      var t1 = this.$this,
        t2 = H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 2);
      return {func: 1, ret: t2, args: [H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 1), t2]};
    }
  };
  M.CanonicalizedMap_forEach_closure.prototype = {
    call$2: function(key, pair) {
      var t1 = this.$this;
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 0));
      H.assertSubtype(pair, "$isPair", [H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 2)], "$asPair");
      return this.f.call$2(pair.first, pair.last);
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 0), [B.Pair, H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 2)]]};
    }
  };
  M.CanonicalizedMap_keys_closure.prototype = {
    call$1: function(pair) {
      var t1 = this.$this;
      return H.assertSubtype(pair, "$isPair", [H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 2)], "$asPair").first;
    },
    $signature: function() {
      var t1 = this.$this,
        t2 = H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 1);
      return {func: 1, ret: t2, args: [[B.Pair, t2, H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 2)]]};
    }
  };
  M.CanonicalizedMap_map_closure.prototype = {
    call$2: function(_, pair) {
      var t1 = this.$this;
      H.assertSubtypeOfRuntimeType(_, H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 0));
      H.assertSubtype(pair, "$isPair", [H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 2)], "$asPair");
      return this.transform.call$2(pair.first, pair.last);
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: [P.MapEntry, this.K2, this.V2], args: [H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 0), [B.Pair, H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 2)]]};
    }
  };
  M.CanonicalizedMap_toString_closure.prototype = {
    call$2: function(k, v) {
      var _this = this,
        t1 = _this.$this;
      H.assertSubtypeOfRuntimeType(k, H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 1));
      H.assertSubtypeOfRuntimeType(v, H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 2));
      t1 = _this._box_0;
      if (!t1.first)
        _this.result._contents += ", ";
      t1.first = false;
      _this.result._contents += H.S(k) + ": " + H.S(v);
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 1), H.getRuntimeTypeArgument(t1, "CanonicalizedMap", 2)]};
    }
  };
  M._isToStringVisiting_closure.prototype = {
    call$1: function(e) {
      return this.o === e;
    },
    $signature: 5
  };
  U.DefaultEquality.prototype = {$isEquality: 1};
  U.IterableEquality.prototype = {
    equals$2: function(elements1, elements2) {
      var it1, it2, hasNext,
        t1 = this.$ti;
      H.assertSubtype(elements1, "$isIterable", t1, "$asIterable");
      H.assertSubtype(elements2, "$isIterable", t1, "$asIterable");
      if (elements1 === elements2)
        return true;
      it1 = J.get$iterator$ax(elements1);
      it2 = J.get$iterator$ax(elements2);
      for (t1 = this._elementEquality; true;) {
        hasNext = it1.moveNext$0();
        if (hasNext !== it2.moveNext$0())
          return false;
        if (!hasNext)
          return true;
        if (!t1.equals$2(it1.get$current(it1), it2.get$current(it2)))
          return false;
      }
    },
    hash$1: function(_, elements) {
      var t1, t2, hash, c;
      H.assertSubtype(elements, "$isIterable", this.$ti, "$asIterable");
      for (t1 = J.get$iterator$ax(elements), t2 = this._elementEquality, hash = 0; t1.moveNext$0();) {
        c = t2.hash$1(0, t1.get$current(t1));
        if (typeof c !== "number")
          return H.iae(c);
        hash = hash + c & 2147483647;
        hash = hash + (hash << 10 >>> 0) & 2147483647;
        hash ^= hash >>> 6;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    $isEquality: 1,
    $asEquality: function($E) {
      return [[P.Iterable, $E]];
    }
  };
  U.ListEquality.prototype = {
    equals$2: function(list1, list2) {
      var $length, t2, t3, i,
        t1 = this.$ti;
      H.assertSubtype(list1, "$isList", t1, "$asList");
      H.assertSubtype(list2, "$isList", t1, "$asList");
      if (list1 === list2)
        return true;
      t1 = J.getInterceptor$asx(list1);
      $length = t1.get$length(list1);
      t2 = J.getInterceptor$asx(list2);
      if ($length != t2.get$length(list2))
        return false;
      if (typeof $length !== "number")
        return H.iae($length);
      t3 = this._elementEquality;
      i = 0;
      for (; i < $length; ++i)
        if (!t3.equals$2(t1.$index(list1, i), t2.$index(list2, i)))
          return false;
      return true;
    },
    hash$1: function(_, list) {
      var t1, t2, hash, i, t3, c;
      H.assertSubtype(list, "$isList", this.$ti, "$asList");
      t1 = J.getInterceptor$asx(list);
      t2 = this._elementEquality;
      hash = 0;
      i = 0;
      while (true) {
        t3 = t1.get$length(list);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        c = t2.hash$1(0, t1.$index(list, i));
        if (typeof c !== "number")
          return H.iae(c);
        hash = hash + c & 2147483647;
        hash = hash + (hash << 10 >>> 0) & 2147483647;
        hash ^= hash >>> 6;
        ++i;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    $isEquality: 1,
    $asEquality: function($E) {
      return [[P.List, $E]];
    }
  };
  U._UnorderedEquality.prototype = {
    equals$2: function(elements1, elements2) {
      var counts, $length, e, count,
        t1 = H.getRuntimeTypeArgument(this, "_UnorderedEquality", 1);
      H.assertSubtypeOfRuntimeType(elements1, t1);
      H.assertSubtypeOfRuntimeType(elements2, t1);
      if (elements1 === elements2)
        return true;
      t1 = this._elementEquality;
      counts = P.HashMap_HashMap(t1.get$equals(), t1.get$hash(t1), t1.get$isValidKey(), H.getRuntimeTypeArgument(this, "_UnorderedEquality", 0), P.int);
      for (t1 = J.get$iterator$ax(elements1), $length = 0; t1.moveNext$0();) {
        e = t1.get$current(t1);
        count = counts.$index(0, e);
        counts.$indexSet(0, e, (count == null ? 0 : count) + 1);
        ++$length;
      }
      for (t1 = J.get$iterator$ax(elements2); t1.moveNext$0();) {
        e = t1.get$current(t1);
        count = counts.$index(0, e);
        if (count == null || count === 0)
          return false;
        if (typeof count !== "number")
          return count.$sub();
        counts.$indexSet(0, e, count - 1);
        --$length;
      }
      return $length === 0;
    },
    hash$1: function(_, elements) {
      var t1, t2, hash, c;
      H.assertSubtypeOfRuntimeType(elements, H.getRuntimeTypeArgument(this, "_UnorderedEquality", 1));
      for (t1 = J.get$iterator$ax(elements), t2 = this._elementEquality, hash = 0; t1.moveNext$0();) {
        c = t2.hash$1(0, t1.get$current(t1));
        if (typeof c !== "number")
          return H.iae(c);
        hash = hash + c & 2147483647;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    $isEquality: 1,
    $asEquality: function($E, $T) {
      return [$T];
    }
  };
  U.SetEquality.prototype = {
    $asEquality: function($E) {
      return [[P.Set, $E]];
    },
    $as_UnorderedEquality: function($E) {
      return [$E, [P.Set, $E]];
    }
  };
  U._MapEntry.prototype = {
    get$hashCode: function(_) {
      var t1 = this.equality,
        t2 = t1._keyEquality.hash$1(0, this.key);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1 = t1._valueEquality.hash$1(0, this.value);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 3 * t2 + 7 * t1 & 2147483647;
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other instanceof U._MapEntry) {
        t1 = this.equality;
        t1 = t1._keyEquality.equals$2(this.key, other.key) && t1._valueEquality.equals$2(this.value, other.value);
      } else
        t1 = false;
      return t1;
    }
  };
  U.MapEquality.prototype = {
    equals$2: function(map1, map2) {
      var t2, equalElementCounts, t3, key, entry, count,
        t1 = this.$ti;
      H.assertSubtype(map1, "$isMap", t1, "$asMap");
      H.assertSubtype(map2, "$isMap", t1, "$asMap");
      if (map1 === map2)
        return true;
      t1 = J.getInterceptor$asx(map1);
      t2 = J.getInterceptor$asx(map2);
      if (t1.get$length(map1) != t2.get$length(map2))
        return false;
      equalElementCounts = P.HashMap_HashMap(null, null, null, U._MapEntry, P.int);
      for (t3 = J.get$iterator$ax(t1.get$keys(map1)); t3.moveNext$0();) {
        key = t3.get$current(t3);
        entry = new U._MapEntry(this, key, t1.$index(map1, key));
        count = equalElementCounts.$index(0, entry);
        equalElementCounts.$indexSet(0, entry, (count == null ? 0 : count) + 1);
      }
      for (t1 = J.get$iterator$ax(t2.get$keys(map2)); t1.moveNext$0();) {
        key = t1.get$current(t1);
        entry = new U._MapEntry(this, key, t2.$index(map2, key));
        count = equalElementCounts.$index(0, entry);
        if (count == null || count === 0)
          return false;
        if (typeof count !== "number")
          return count.$sub();
        equalElementCounts.$indexSet(0, entry, count - 1);
      }
      return true;
    },
    hash$1: function(_, map) {
      var t1, t2, t3, t4, hash, key, keyHash, valueHash;
      H.assertSubtype(map, "$isMap", this.$ti, "$asMap");
      for (t1 = J.getInterceptor$x(map), t2 = J.get$iterator$ax(t1.get$keys(map)), t3 = this._keyEquality, t4 = this._valueEquality, hash = 0; t2.moveNext$0();) {
        key = t2.get$current(t2);
        keyHash = t3.hash$1(0, key);
        valueHash = t4.hash$1(0, t1.$index(map, key));
        if (typeof keyHash !== "number")
          return H.iae(keyHash);
        if (typeof valueHash !== "number")
          return H.iae(valueHash);
        hash = hash + 3 * keyHash + 7 * valueHash & 2147483647;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    $isEquality: 1,
    $asEquality: function($K, $V) {
      return [[P.Map, $K, $V]];
    }
  };
  U.DeepCollectionEquality.prototype = {
    equals$2: function(e1, e2) {
      var _this = this,
        t1 = J.getInterceptor$(e1);
      if (!!t1.$isSet)
        return !!J.getInterceptor$(e2).$isSet && new U.SetEquality(_this, [null]).equals$2(e1, e2);
      if (!!t1.$isMap)
        return !!J.getInterceptor$(e2).$isMap && new U.MapEquality(_this, _this, [null, null]).equals$2(e1, e2);
      if (!!t1.$isList)
        return !!J.getInterceptor$(e2).$isList && new U.ListEquality(_this, [null]).equals$2(e1, e2);
      if (!!t1.$isIterable)
        return !!J.getInterceptor$(e2).$isIterable && H.boolConversionCheck(new U.IterableEquality(_this, [null]).equals$2(e1, e2));
      return t1.$eq(e1, e2);
    },
    hash$1: function(_, o) {
      var _this = this,
        t1 = J.getInterceptor$(o);
      if (!!t1.$isSet)
        return new U.SetEquality(_this, [null]).hash$1(0, o);
      if (!!t1.$isMap)
        return new U.MapEquality(_this, _this, [null, null]).hash$1(0, o);
      if (!!t1.$isList)
        return new U.ListEquality(_this, [null]).hash$1(0, o);
      if (!!t1.$isIterable)
        return new U.IterableEquality(_this, [null]).hash$1(0, o);
      return t1.get$hashCode(o);
    },
    isValidKey$1: function(o) {
      !J.getInterceptor$(o).$isIterable;
      return true;
    },
    $isEquality: 1,
    $asEquality: function() {
    }
  };
  B.Pair.prototype = {};
  N.HexCodec.prototype = {
    get$encoder: function() {
      return C.C_HexEncoder;
    },
    $asCodec: function() {
      return [[P.List, P.int], P.String];
    }
  };
  R.HexEncoder.prototype = {
    convert$1: function(bytes) {
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      return R._convert(bytes, 0, bytes.length);
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  E.ConnectRequest.prototype = {};
  E._$ConnectRequestSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      H.interceptedTypeCheck(object, "$isConnectRequest");
      return H.setRuntimeTypeInfo(["appId", serializers.serialize$2$specifiedType(object.appId, C.FullType_aZ8), "instanceId", serializers.serialize$2$specifiedType(object.instanceId, C.FullType_aZ8)], [P.Object]);
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var key, value, t1,
        result = new E.ConnectRequestBuilder(),
        iterator = J.get$iterator$ax(H.assertSubtype(serialized, "$isIterable", [P.Object], "$asIterable"));
      for (; iterator.moveNext$0();) {
        key = H.stringTypeCast(iterator.get$current(iterator));
        iterator.moveNext$0();
        value = iterator.get$current(iterator);
        switch (key) {
          case "appId":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_$this()._appId = t1;
            break;
          case "instanceId":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_$this()._instanceId = t1;
            break;
        }
      }
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [E.ConnectRequest];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [E.ConnectRequest];
    },
    get$types: function() {
      return C.List_ssp;
    },
    get$wireName: function() {
      return "ConnectRequest";
    }
  };
  E._$ConnectRequest.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      return other instanceof E.ConnectRequest && this.appId == other.appId && this.instanceId == other.instanceId;
    },
    get$hashCode: function(_) {
      return Y.$jf(Y.$jc(Y.$jc(0, J.get$hashCode$(this.appId)), J.get$hashCode$(this.instanceId)));
    },
    toString$0: function(_) {
      var t1 = $.$get$newBuiltValueToStringHelper().call$1("ConnectRequest"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "appId", this.appId);
      t2.add$2(t1, "instanceId", this.instanceId);
      return t2.toString$0(t1);
    }
  };
  E.ConnectRequestBuilder.prototype = {
    get$_$this: function() {
      var _this = this,
        t1 = _this._$v;
      if (t1 != null) {
        _this._appId = t1.appId;
        _this._instanceId = t1.instanceId;
        _this._$v = null;
      }
      return _this;
    },
    build$0: function() {
      var t1, t2, _this = this,
        _s14_ = "ConnectRequest",
        _$result = _this._$v;
      if (_$result == null) {
        t1 = _this.get$_$this()._appId;
        t2 = _this.get$_$this()._instanceId;
        _$result = new E._$ConnectRequest(t1, t2);
        if (t1 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s14_, "appId"));
        if (t2 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s14_, "instanceId"));
      }
      return _this._$v = _$result;
    }
  };
  M.DevToolsRequest.prototype = {};
  M.DevToolsResponse.prototype = {};
  M._$DevToolsRequestSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      var result, t1;
      H.interceptedTypeCheck(object, "$isDevToolsRequest");
      result = H.setRuntimeTypeInfo(["appId", serializers.serialize$2$specifiedType(object.appId, C.FullType_aZ8), "instanceId", serializers.serialize$2$specifiedType(object.instanceId, C.FullType_aZ8)], [P.Object]);
      t1 = object.tabUrl;
      if (t1 != null) {
        C.JSArray_methods.add$1(result, "tabUrl");
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(t1, C.FullType_aZ8));
      }
      return result;
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var key, value, t1,
        result = new M.DevToolsRequestBuilder(),
        iterator = J.get$iterator$ax(H.assertSubtype(serialized, "$isIterable", [P.Object], "$asIterable"));
      for (; iterator.moveNext$0();) {
        key = H.stringTypeCast(iterator.get$current(iterator));
        iterator.moveNext$0();
        value = iterator.get$current(iterator);
        switch (key) {
          case "appId":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_devtools_request$_$this()._devtools_request$_appId = t1;
            break;
          case "instanceId":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_devtools_request$_$this()._devtools_request$_instanceId = t1;
            break;
          case "tabUrl":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_devtools_request$_$this()._tabUrl = t1;
            break;
        }
      }
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [M.DevToolsRequest];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [M.DevToolsRequest];
    },
    get$types: function() {
      return C.List_BCG;
    },
    get$wireName: function() {
      return "DevToolsRequest";
    }
  };
  M._$DevToolsResponseSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      var result, t1;
      H.interceptedTypeCheck(object, "$isDevToolsResponse");
      result = H.setRuntimeTypeInfo(["success", serializers.serialize$2$specifiedType(object.success, C.FullType_6bM)], [P.Object]);
      t1 = object.error;
      if (t1 != null) {
        C.JSArray_methods.add$1(result, "error");
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(t1, C.FullType_aZ8));
      }
      return result;
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var key, value, t1, _$result,
        result = new M.DevToolsResponseBuilder(),
        iterator = J.get$iterator$ax(H.assertSubtype(serialized, "$isIterable", [P.Object], "$asIterable"));
      for (; iterator.moveNext$0();) {
        key = H.stringTypeCast(iterator.get$current(iterator));
        iterator.moveNext$0();
        value = iterator.get$current(iterator);
        switch (key) {
          case "success":
            t1 = H.boolTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_6bM));
            result.get$_devtools_request$_$this()._success = t1;
            break;
          case "error":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_devtools_request$_$this()._devtools_request$_error = t1;
            break;
        }
      }
      _$result = result._devtools_request$_$v;
      if (_$result == null) {
        t1 = result.get$_devtools_request$_$this()._success;
        _$result = new M._$DevToolsResponse(t1, result.get$_devtools_request$_$this()._devtools_request$_error);
        if (t1 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$("DevToolsResponse", "success"));
      }
      return result._devtools_request$_$v = _$result;
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [M.DevToolsResponse];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [M.DevToolsResponse];
    },
    get$types: function() {
      return C.List_41A;
    },
    get$wireName: function() {
      return "DevToolsResponse";
    }
  };
  M._$DevToolsRequest.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      return other instanceof M.DevToolsRequest && _this.appId == other.appId && _this.instanceId == other.instanceId && _this.tabUrl == other.tabUrl;
    },
    get$hashCode: function(_) {
      return Y.$jf(Y.$jc(Y.$jc(Y.$jc(0, J.get$hashCode$(this.appId)), J.get$hashCode$(this.instanceId)), J.get$hashCode$(this.tabUrl)));
    },
    toString$0: function(_) {
      var t1 = $.$get$newBuiltValueToStringHelper().call$1("DevToolsRequest"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "appId", this.appId);
      t2.add$2(t1, "instanceId", this.instanceId);
      t2.add$2(t1, "tabUrl", this.tabUrl);
      return t2.toString$0(t1);
    }
  };
  M.DevToolsRequestBuilder.prototype = {
    get$_devtools_request$_$this: function() {
      var _this = this,
        t1 = _this._devtools_request$_$v;
      if (t1 != null) {
        _this._devtools_request$_appId = t1.appId;
        _this._devtools_request$_instanceId = t1.instanceId;
        _this._tabUrl = t1.tabUrl;
        _this._devtools_request$_$v = null;
      }
      return _this;
    },
    build$0: function() {
      var t1, t2, _this = this,
        _s15_ = "DevToolsRequest",
        _$result = _this._devtools_request$_$v;
      if (_$result == null) {
        t1 = _this.get$_devtools_request$_$this()._devtools_request$_appId;
        t2 = _this.get$_devtools_request$_$this()._devtools_request$_instanceId;
        _$result = new M._$DevToolsRequest(t1, t2, _this.get$_devtools_request$_$this()._tabUrl);
        if (t1 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s15_, "appId"));
        if (t2 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s15_, "instanceId"));
      }
      return _this._devtools_request$_$v = _$result;
    }
  };
  M._$DevToolsResponse.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      return other instanceof M.DevToolsResponse && this.success == other.success && this.error == other.error;
    },
    get$hashCode: function(_) {
      return Y.$jf(Y.$jc(Y.$jc(0, J.get$hashCode$(this.success)), J.get$hashCode$(this.error)));
    },
    toString$0: function(_) {
      var t1 = $.$get$newBuiltValueToStringHelper().call$1("DevToolsResponse"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "success", this.success);
      t2.add$2(t1, "error", this.error);
      return t2.toString$0(t1);
    }
  };
  M.DevToolsResponseBuilder.prototype = {
    get$_devtools_request$_$this: function() {
      var _this = this,
        t1 = _this._devtools_request$_$v;
      if (t1 != null) {
        _this._success = t1.success;
        _this._devtools_request$_error = t1.error;
        _this._devtools_request$_$v = null;
      }
      return _this;
    }
  };
  X.ErrorResponse.prototype = {};
  X._$ErrorResponseSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      H.interceptedTypeCheck(object, "$isErrorResponse");
      return H.setRuntimeTypeInfo(["error", serializers.serialize$2$specifiedType(object.error, C.FullType_aZ8), "stackTrace", serializers.serialize$2$specifiedType(object.stackTrace, C.FullType_aZ8)], [P.Object]);
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var key, value, t1, _$result, t2,
        _s13_ = "ErrorResponse",
        result = new X.ErrorResponseBuilder(),
        iterator = J.get$iterator$ax(H.assertSubtype(serialized, "$isIterable", [P.Object], "$asIterable"));
      for (; iterator.moveNext$0();) {
        key = H.stringTypeCast(iterator.get$current(iterator));
        iterator.moveNext$0();
        value = iterator.get$current(iterator);
        switch (key) {
          case "error":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_error_response$_$this()._error_response$_error = t1;
            break;
          case "stackTrace":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_error_response$_$this()._stackTrace = t1;
            break;
        }
      }
      _$result = result._error_response$_$v;
      if (_$result == null) {
        t1 = result.get$_error_response$_$this()._error_response$_error;
        t2 = result.get$_error_response$_$this()._stackTrace;
        _$result = new X._$ErrorResponse(t1, t2);
        if (t1 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s13_, "error"));
        if (t2 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s13_, "stackTrace"));
      }
      return result._error_response$_$v = _$result;
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [X.ErrorResponse];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [X.ErrorResponse];
    },
    get$types: function() {
      return C.List_gQA;
    },
    get$wireName: function() {
      return "ErrorResponse";
    }
  };
  X._$ErrorResponse.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      return other instanceof X.ErrorResponse && this.error == other.error && this.stackTrace == other.stackTrace;
    },
    get$hashCode: function(_) {
      return Y.$jf(Y.$jc(Y.$jc(0, J.get$hashCode$(this.error)), J.get$hashCode$(this.stackTrace)));
    },
    toString$0: function(_) {
      var t1 = $.$get$newBuiltValueToStringHelper().call$1("ErrorResponse"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "error", this.error);
      t2.add$2(t1, "stackTrace", this.stackTrace);
      return t2.toString$0(t1);
    }
  };
  X.ErrorResponseBuilder.prototype = {
    get$_error_response$_$this: function() {
      var _this = this,
        t1 = _this._error_response$_$v;
      if (t1 != null) {
        _this._error_response$_error = t1.error;
        _this._stackTrace = t1.stackTrace;
        _this._error_response$_$v = null;
      }
      return _this;
    }
  };
  S.ExtensionRequest.prototype = {};
  S.ExtensionResponse.prototype = {};
  S.ExtensionEvent.prototype = {};
  S._$ExtensionRequestSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      var result, t1;
      H.interceptedTypeCheck(object, "$isExtensionRequest");
      result = H.setRuntimeTypeInfo(["id", serializers.serialize$2$specifiedType(object.id, C.FullType_kaS), "command", serializers.serialize$2$specifiedType(object.command, C.FullType_aZ8)], [P.Object]);
      t1 = object.commandParams;
      if (t1 != null) {
        C.JSArray_methods.add$1(result, "commandParams");
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(t1, C.FullType_aZ8));
      }
      return result;
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var key, value, t1, _$result, t2,
        _s16_ = "ExtensionRequest",
        result = new S.ExtensionRequestBuilder(),
        iterator = J.get$iterator$ax(H.assertSubtype(serialized, "$isIterable", [P.Object], "$asIterable"));
      for (; iterator.moveNext$0();) {
        key = H.stringTypeCast(iterator.get$current(iterator));
        iterator.moveNext$0();
        value = iterator.get$current(iterator);
        switch (key) {
          case "id":
            t1 = H.intTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_kaS));
            result.get$_extension_request$_$this()._id = t1;
            break;
          case "command":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_extension_request$_$this()._command = t1;
            break;
          case "commandParams":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_extension_request$_$this()._commandParams = t1;
            break;
        }
      }
      _$result = result._extension_request$_$v;
      if (_$result == null) {
        t1 = result.get$_extension_request$_$this()._id;
        t2 = result.get$_extension_request$_$this()._command;
        _$result = new S._$ExtensionRequest(t1, t2, result.get$_extension_request$_$this()._commandParams);
        if (t1 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s16_, "id"));
        if (t2 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s16_, "command"));
      }
      return result._extension_request$_$v = _$result;
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [S.ExtensionRequest];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [S.ExtensionRequest];
    },
    get$types: function() {
      return C.List_evd;
    },
    get$wireName: function() {
      return "ExtensionRequest";
    }
  };
  S._$ExtensionResponseSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      var result, t1;
      H.interceptedTypeCheck(object, "$isExtensionResponse");
      result = H.setRuntimeTypeInfo(["id", serializers.serialize$2$specifiedType(object.id, C.FullType_kaS), "success", serializers.serialize$2$specifiedType(object.success, C.FullType_6bM), "result", serializers.serialize$2$specifiedType(object.result, C.FullType_aZ8)], [P.Object]);
      t1 = object.error;
      if (t1 != null) {
        C.JSArray_methods.add$1(result, "error");
        C.JSArray_methods.add$1(result, serializers.serialize$2$specifiedType(t1, C.FullType_aZ8));
      }
      return result;
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var key, value, t1, _$result, t2, t3,
        _s17_ = "ExtensionResponse",
        result = new S.ExtensionResponseBuilder(),
        iterator = J.get$iterator$ax(H.assertSubtype(serialized, "$isIterable", [P.Object], "$asIterable"));
      for (; iterator.moveNext$0();) {
        key = H.stringTypeCast(iterator.get$current(iterator));
        iterator.moveNext$0();
        value = iterator.get$current(iterator);
        switch (key) {
          case "id":
            t1 = H.intTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_kaS));
            result.get$_extension_request$_$this()._id = t1;
            break;
          case "success":
            t1 = H.boolTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_6bM));
            result.get$_extension_request$_$this()._extension_request$_success = t1;
            break;
          case "result":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_extension_request$_$this()._extension_request$_result = t1;
            break;
          case "error":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_extension_request$_$this()._extension_request$_error = t1;
            break;
        }
      }
      _$result = result._extension_request$_$v;
      if (_$result == null) {
        t1 = result.get$_extension_request$_$this()._id;
        t2 = result.get$_extension_request$_$this()._extension_request$_success;
        t3 = result.get$_extension_request$_$this()._extension_request$_result;
        _$result = new S._$ExtensionResponse(t1, t2, t3, result.get$_extension_request$_$this()._extension_request$_error);
        if (t1 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s17_, "id"));
        if (t2 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s17_, "success"));
        if (t3 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s17_, "result"));
      }
      return result._extension_request$_$v = _$result;
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [S.ExtensionResponse];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [S.ExtensionResponse];
    },
    get$types: function() {
      return C.List_tQ0;
    },
    get$wireName: function() {
      return "ExtensionResponse";
    }
  };
  S._$ExtensionEventSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      H.interceptedTypeCheck(object, "$isExtensionEvent");
      return H.setRuntimeTypeInfo(["params", serializers.serialize$2$specifiedType(object.params, C.FullType_aZ8), "method", serializers.serialize$2$specifiedType(object.method, C.FullType_aZ8)], [P.Object]);
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var key, value, t1, _$result, t2,
        _s14_ = "ExtensionEvent",
        result = new S.ExtensionEventBuilder(),
        iterator = J.get$iterator$ax(H.assertSubtype(serialized, "$isIterable", [P.Object], "$asIterable"));
      for (; iterator.moveNext$0();) {
        key = H.stringTypeCast(iterator.get$current(iterator));
        iterator.moveNext$0();
        value = iterator.get$current(iterator);
        switch (key) {
          case "params":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_extension_request$_$this()._params = t1;
            break;
          case "method":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_extension_request$_$this()._extension_request$_method = t1;
            break;
        }
      }
      _$result = result._extension_request$_$v;
      if (_$result == null) {
        t1 = result.get$_extension_request$_$this()._params;
        t2 = result.get$_extension_request$_$this()._extension_request$_method;
        _$result = new S._$ExtensionEvent(t1, t2);
        if (t1 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s14_, "params"));
        if (t2 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s14_, "method"));
      }
      return result._extension_request$_$v = _$result;
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [S.ExtensionEvent];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [S.ExtensionEvent];
    },
    get$types: function() {
      return C.List_pnF;
    },
    get$wireName: function() {
      return "ExtensionEvent";
    }
  };
  S._$ExtensionRequest.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      return other instanceof S.ExtensionRequest && _this.id == other.id && _this.command == other.command && _this.commandParams == other.commandParams;
    },
    get$hashCode: function(_) {
      return Y.$jf(Y.$jc(Y.$jc(Y.$jc(0, J.get$hashCode$(this.id)), J.get$hashCode$(this.command)), J.get$hashCode$(this.commandParams)));
    },
    toString$0: function(_) {
      var t1 = $.$get$newBuiltValueToStringHelper().call$1("ExtensionRequest"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "id", this.id);
      t2.add$2(t1, "command", this.command);
      t2.add$2(t1, "commandParams", this.commandParams);
      return t2.toString$0(t1);
    }
  };
  S.ExtensionRequestBuilder.prototype = {
    get$_extension_request$_$this: function() {
      var _this = this,
        t1 = _this._extension_request$_$v;
      if (t1 != null) {
        _this._id = t1.id;
        _this._command = t1.command;
        _this._commandParams = t1.commandParams;
        _this._extension_request$_$v = null;
      }
      return _this;
    }
  };
  S._$ExtensionResponse.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      return other instanceof S.ExtensionResponse && _this.id == other.id && _this.success == other.success && _this.result == other.result && _this.error == other.error;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Y.$jf(Y.$jc(Y.$jc(Y.$jc(Y.$jc(0, J.get$hashCode$(_this.id)), J.get$hashCode$(_this.success)), J.get$hashCode$(_this.result)), J.get$hashCode$(_this.error)));
    },
    toString$0: function(_) {
      var _this = this,
        t1 = $.$get$newBuiltValueToStringHelper().call$1("ExtensionResponse"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "id", _this.id);
      t2.add$2(t1, "success", _this.success);
      t2.add$2(t1, "result", _this.result);
      t2.add$2(t1, "error", _this.error);
      return t2.toString$0(t1);
    }
  };
  S.ExtensionResponseBuilder.prototype = {
    get$_extension_request$_$this: function() {
      var _this = this,
        t1 = _this._extension_request$_$v;
      if (t1 != null) {
        _this._id = t1.id;
        _this._extension_request$_success = t1.success;
        _this._extension_request$_result = t1.result;
        _this._extension_request$_error = t1.error;
        _this._extension_request$_$v = null;
      }
      return _this;
    }
  };
  S._$ExtensionEvent.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      return other instanceof S.ExtensionEvent && this.params == other.params && this.method == other.method;
    },
    get$hashCode: function(_) {
      return Y.$jf(Y.$jc(Y.$jc(0, J.get$hashCode$(this.params)), J.get$hashCode$(this.method)));
    },
    toString$0: function(_) {
      var t1 = $.$get$newBuiltValueToStringHelper().call$1("ExtensionEvent"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "params", this.params);
      t2.add$2(t1, "method", this.method);
      return t2.toString$0(t1);
    }
  };
  S.ExtensionEventBuilder.prototype = {
    get$_extension_request$_$this: function() {
      var _this = this,
        t1 = _this._extension_request$_$v;
      if (t1 != null) {
        _this._params = t1.params;
        _this._extension_request$_method = t1.method;
        _this._extension_request$_$v = null;
      }
      return _this;
    }
  };
  M.IsolateExit.prototype = {};
  M.IsolateStart.prototype = {};
  M._$IsolateExitSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      H.interceptedTypeCheck(object, "$isIsolateExit");
      return H.setRuntimeTypeInfo(["appId", serializers.serialize$2$specifiedType(object.appId, C.FullType_aZ8), "instanceId", serializers.serialize$2$specifiedType(object.instanceId, C.FullType_aZ8)], [P.Object]);
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var key, value, t1,
        result = new M.IsolateExitBuilder(),
        iterator = J.get$iterator$ax(H.assertSubtype(serialized, "$isIterable", [P.Object], "$asIterable"));
      for (; iterator.moveNext$0();) {
        key = H.stringTypeCast(iterator.get$current(iterator));
        iterator.moveNext$0();
        value = iterator.get$current(iterator);
        switch (key) {
          case "appId":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_isolate_events$_$this()._isolate_events$_appId = t1;
            break;
          case "instanceId":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_isolate_events$_$this()._isolate_events$_instanceId = t1;
            break;
        }
      }
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [M.IsolateExit];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [M.IsolateExit];
    },
    get$types: function() {
      return C.List_LT1;
    },
    get$wireName: function() {
      return "IsolateExit";
    }
  };
  M._$IsolateStartSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      H.interceptedTypeCheck(object, "$isIsolateStart");
      return H.setRuntimeTypeInfo(["appId", serializers.serialize$2$specifiedType(object.appId, C.FullType_aZ8), "instanceId", serializers.serialize$2$specifiedType(object.instanceId, C.FullType_aZ8)], [P.Object]);
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var key, value, t1,
        result = new M.IsolateStartBuilder(),
        iterator = J.get$iterator$ax(H.assertSubtype(serialized, "$isIterable", [P.Object], "$asIterable"));
      for (; iterator.moveNext$0();) {
        key = H.stringTypeCast(iterator.get$current(iterator));
        iterator.moveNext$0();
        value = iterator.get$current(iterator);
        switch (key) {
          case "appId":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_isolate_events$_$this()._isolate_events$_appId = t1;
            break;
          case "instanceId":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_isolate_events$_$this()._isolate_events$_instanceId = t1;
            break;
        }
      }
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [M.IsolateStart];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [M.IsolateStart];
    },
    get$types: function() {
      return C.List_6TA;
    },
    get$wireName: function() {
      return "IsolateStart";
    }
  };
  M._$IsolateExit.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      return other instanceof M.IsolateExit && this.appId == other.appId && this.instanceId == other.instanceId;
    },
    get$hashCode: function(_) {
      return Y.$jf(Y.$jc(Y.$jc(0, J.get$hashCode$(this.appId)), J.get$hashCode$(this.instanceId)));
    },
    toString$0: function(_) {
      var t1 = $.$get$newBuiltValueToStringHelper().call$1("IsolateExit"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "appId", this.appId);
      t2.add$2(t1, "instanceId", this.instanceId);
      return t2.toString$0(t1);
    }
  };
  M.IsolateExitBuilder.prototype = {
    get$_isolate_events$_$this: function() {
      var _this = this,
        t1 = _this._isolate_events$_$v;
      if (t1 != null) {
        _this._isolate_events$_appId = t1.appId;
        _this._isolate_events$_instanceId = t1.instanceId;
        _this._isolate_events$_$v = null;
      }
      return _this;
    },
    build$0: function() {
      var t1, t2, _this = this,
        _s11_ = "IsolateExit",
        _$result = _this._isolate_events$_$v;
      if (_$result == null) {
        t1 = _this.get$_isolate_events$_$this()._isolate_events$_appId;
        t2 = _this.get$_isolate_events$_$this()._isolate_events$_instanceId;
        _$result = new M._$IsolateExit(t1, t2);
        if (t1 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s11_, "appId"));
        if (t2 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s11_, "instanceId"));
      }
      return _this._isolate_events$_$v = _$result;
    }
  };
  M._$IsolateStart.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      return other instanceof M.IsolateStart && this.appId == other.appId && this.instanceId == other.instanceId;
    },
    get$hashCode: function(_) {
      return Y.$jf(Y.$jc(Y.$jc(0, J.get$hashCode$(this.appId)), J.get$hashCode$(this.instanceId)));
    },
    toString$0: function(_) {
      var t1 = $.$get$newBuiltValueToStringHelper().call$1("IsolateStart"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "appId", this.appId);
      t2.add$2(t1, "instanceId", this.instanceId);
      return t2.toString$0(t1);
    }
  };
  M.IsolateStartBuilder.prototype = {
    get$_isolate_events$_$this: function() {
      var _this = this,
        t1 = _this._isolate_events$_$v;
      if (t1 != null) {
        _this._isolate_events$_appId = t1.appId;
        _this._isolate_events$_instanceId = t1.instanceId;
        _this._isolate_events$_$v = null;
      }
      return _this;
    },
    build$0: function() {
      var t1, t2, _this = this,
        _s12_ = "IsolateStart",
        _$result = _this._isolate_events$_$v;
      if (_$result == null) {
        t1 = _this.get$_isolate_events$_$this()._isolate_events$_appId;
        t2 = _this.get$_isolate_events$_$this()._isolate_events$_instanceId;
        _$result = new M._$IsolateStart(t1, t2);
        if (t1 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s12_, "appId"));
        if (t2 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s12_, "instanceId"));
      }
      return _this._isolate_events$_$v = _$result;
    }
  };
  A.RunRequest.prototype = {};
  A.RunResponse.prototype = {};
  A._$RunRequestSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      H.interceptedTypeCheck(object, "$isRunRequest");
      return H.setRuntimeTypeInfo([], [P.Object]);
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      H.assertSubtype(serialized, "$isIterable", [P.Object], "$asIterable");
      return new A._$RunRequest();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [A.RunRequest];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [A.RunRequest];
    },
    get$types: function() {
      return C.List_wsa;
    },
    get$wireName: function() {
      return "RunRequest";
    }
  };
  A._$RunResponseSerializer.prototype = {
    serialize$3$specifiedType: function(serializers, object, specifiedType) {
      H.interceptedTypeCheck(object, "$isRunResponse");
      return H.setRuntimeTypeInfo(["appId", serializers.serialize$2$specifiedType(object.appId, C.FullType_aZ8), "instanceId", serializers.serialize$2$specifiedType(object.instanceId, C.FullType_aZ8)], [P.Object]);
    },
    serialize$2: function(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, C.FullType_null_List_empty);
    },
    deserialize$3$specifiedType: function(serializers, serialized, specifiedType) {
      var key, value, t1,
        result = new A.RunResponseBuilder(),
        iterator = J.get$iterator$ax(H.assertSubtype(serialized, "$isIterable", [P.Object], "$asIterable"));
      for (; iterator.moveNext$0();) {
        key = H.stringTypeCast(iterator.get$current(iterator));
        iterator.moveNext$0();
        value = iterator.get$current(iterator);
        switch (key) {
          case "appId":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_run_request$_$this()._run_request$_appId = t1;
            break;
          case "instanceId":
            t1 = H.stringTypeCast(serializers.deserialize$2$specifiedType(value, C.FullType_aZ8));
            result.get$_run_request$_$this()._run_request$_instanceId = t1;
            break;
        }
      }
      return result.build$0();
    },
    deserialize$2: function(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, C.FullType_null_List_empty);
    },
    $isSerializer: 1,
    $asSerializer: function() {
      return [A.RunResponse];
    },
    $isStructuredSerializer: 1,
    $asStructuredSerializer: function() {
      return [A.RunResponse];
    },
    get$types: function() {
      return C.List_69t;
    },
    get$wireName: function() {
      return "RunResponse";
    }
  };
  A._$RunRequest.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      return other instanceof A.RunRequest;
    },
    get$hashCode: function(_) {
      return 248087772;
    },
    toString$0: function(_) {
      return J.toString$0$($.$get$newBuiltValueToStringHelper().call$1("RunRequest"));
    }
  };
  A.RunRequestBuilder.prototype = {};
  A._$RunResponse.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      return other instanceof A.RunResponse && this.appId == other.appId && this.instanceId == other.instanceId;
    },
    get$hashCode: function(_) {
      return Y.$jf(Y.$jc(Y.$jc(0, J.get$hashCode$(this.appId)), J.get$hashCode$(this.instanceId)));
    },
    toString$0: function(_) {
      var t1 = $.$get$newBuiltValueToStringHelper().call$1("RunResponse"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "appId", this.appId);
      t2.add$2(t1, "instanceId", this.instanceId);
      return t2.toString$0(t1);
    }
  };
  A.RunResponseBuilder.prototype = {
    get$_run_request$_$this: function() {
      var _this = this,
        t1 = _this._run_request$_$v;
      if (t1 != null) {
        _this._run_request$_appId = t1.appId;
        _this._run_request$_instanceId = t1.instanceId;
        _this._run_request$_$v = null;
      }
      return _this;
    },
    build$0: function() {
      var t1, t2, _this = this,
        _s11_ = "RunResponse",
        _$result = _this._run_request$_$v;
      if (_$result == null) {
        t1 = _this.get$_run_request$_$this()._run_request$_appId;
        t2 = _this.get$_run_request$_$this()._run_request$_instanceId;
        _$result = new A._$RunResponse(t1, t2);
        if (t1 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s11_, "appId"));
        if (t2 == null)
          H.throwExpression(Y.BuiltValueNullFieldError$(_s11_, "instanceId"));
      }
      return _this._run_request$_$v = _$result;
    }
  };
  V.Int64.prototype = {
    $add: function(_, other) {
      var o = V.Int64__promote(other),
        sum0 = this._l + o._l,
        sum1 = this._m + o._m + (sum0 >>> 22);
      return new V.Int64(4194303 & sum0, 4194303 & sum1, 1048575 & this._h + o._h + (sum1 >>> 22));
    },
    $sub: function(_, other) {
      var o = V.Int64__promote(other);
      return V.Int64__sub(this._l, this._m, this._h, o._l, o._m, o._h);
    },
    $and: function(_, other) {
      var o = V.Int64__promote(other);
      return new V.Int64(4194303 & this._l & o._l, 4194303 & this._m & o._m, 1048575 & this._h & o._h);
    },
    $or: function(_, other) {
      var o = V.Int64__promote(other);
      return new V.Int64(4194303 & (this._l | o._l), 4194303 & (this._m | o._m), 1048575 & (this._h | o._h));
    },
    $shl: function(_, n) {
      var t1, res0, t2, t3, res1, res2, _this = this;
      if (n >= 64)
        return C.Int64_0_0_0;
      if (n < 22) {
        t1 = _this._l;
        res0 = C.JSInt_methods._shlPositive$1(t1, n);
        t2 = _this._m;
        t3 = 22 - n;
        res1 = C.JSInt_methods._shlPositive$1(t2, n) | C.JSInt_methods._shrReceiverPositive$1(t1, t3);
        res2 = C.JSInt_methods._shlPositive$1(_this._h, n) | C.JSInt_methods._shrReceiverPositive$1(t2, t3);
      } else {
        t1 = _this._l;
        if (n < 44) {
          t2 = n - 22;
          res1 = C.JSInt_methods.$shl(t1, t2);
          res2 = C.JSInt_methods.$shl(_this._m, t2) | C.JSInt_methods._shrReceiverPositive$1(t1, 44 - n);
        } else {
          res2 = C.JSInt_methods.$shl(t1, n - 44);
          res1 = 0;
        }
        res0 = 0;
      }
      return new V.Int64(4194303 & res0, 4194303 & res1, 1048575 & res2);
    },
    $shr: function(_, n) {
      var a2, negative, res2, t1, t2, res1, res0, _this = this, _4194303 = 4194303, _1048575 = 1048575;
      if (n >= 64)
        return (_this._h & 524288) !== 0 ? C.Int64_4194303_4194303_1048575 : C.Int64_0_0_0;
      a2 = _this._h;
      negative = (a2 & 524288) !== 0;
      if (negative && true)
        a2 += 3145728;
      if (n < 22) {
        res2 = V.Int64__shiftRight(a2, n);
        if (negative)
          res2 |= 1048575 & ~C.JSInt_methods._shrBothPositive$1(_1048575, n);
        t1 = _this._m;
        t2 = 22 - n;
        res1 = V.Int64__shiftRight(t1, n) | C.JSInt_methods.$shl(a2, t2);
        res0 = V.Int64__shiftRight(_this._l, n) | C.JSInt_methods.$shl(t1, t2);
      } else if (n < 44) {
        res2 = negative ? _1048575 : 0;
        t1 = n - 22;
        res1 = V.Int64__shiftRight(a2, t1);
        if (negative)
          res1 |= 4194303 & ~C.JSInt_methods._shrReceiverPositive$1(_4194303, t1);
        res0 = V.Int64__shiftRight(_this._m, t1) | C.JSInt_methods.$shl(a2, 44 - n);
      } else {
        res2 = negative ? _1048575 : 0;
        res1 = negative ? _4194303 : 0;
        t1 = n - 44;
        res0 = V.Int64__shiftRight(a2, t1);
        if (negative)
          res0 |= 4194303 & ~C.JSInt_methods._shrReceiverPositive$1(_4194303, t1);
      }
      return new V.Int64(4194303 & res0, 4194303 & res1, 1048575 & res2);
    },
    $eq: function(_, other) {
      var o, _this = this;
      if (other == null)
        return false;
      if (other instanceof V.Int64)
        o = other;
      else if (typeof other === "number" && Math.floor(other) === other) {
        if (_this._h === 0 && _this._m === 0)
          return _this._l === other;
        if ((4194303 & other) === other)
          return false;
        o = V.Int64_Int64(other);
      } else
        o = null;
      if (o != null)
        return _this._l === o._l && _this._m === o._m && _this._h === o._h;
      return false;
    },
    compareTo$1: function(_, other) {
      return this._compareTo$1(other);
    },
    _compareTo$1: function(other) {
      var o = V.Int64__promote(other),
        t1 = this._h,
        signa = t1 >>> 19,
        t2 = o._h;
      if (signa !== t2 >>> 19)
        return signa === 0 ? 1 : -1;
      if (t1 > t2)
        return 1;
      else if (t1 < t2)
        return -1;
      t1 = this._m;
      t2 = o._m;
      if (t1 > t2)
        return 1;
      else if (t1 < t2)
        return -1;
      t1 = this._l;
      t2 = o._l;
      if (t1 > t2)
        return 1;
      else if (t1 < t2)
        return -1;
      return 0;
    },
    $lt: function(_, other) {
      return this._compareTo$1(other) < 0;
    },
    $gt: function(_, other) {
      return this._compareTo$1(other) > 0;
    },
    $ge: function(_, other) {
      return this._compareTo$1(other) >= 0;
    },
    get$hashCode: function(_) {
      var t1 = this._m;
      return (((t1 & 1023) << 22 | this._l) ^ (this._h << 12 | t1 >>> 10 & 4095)) >>> 0;
    },
    toString$0: function(_) {
      var d00, d10, sign,
        d0 = this._l,
        d1 = this._m,
        d2 = this._h;
      if ((d2 & 524288) !== 0) {
        d0 = 0 - d0;
        d00 = d0 & 4194303;
        d1 = 0 - d1 - (C.JSInt_methods._shrOtherPositive$1(d0, 22) & 1);
        d10 = d1 & 4194303;
        d2 = 0 - d2 - (C.JSInt_methods._shrOtherPositive$1(d1, 22) & 1) & 1048575;
        d1 = d10;
        d0 = d00;
        sign = "-";
      } else
        sign = "";
      return V.Int64__toRadixStringUnsigned(10, d0, d1, d2, sign);
    },
    $isComparable: 1,
    $asComparable: function() {
    }
  };
  L.stronglyConnectedComponents_strongConnect.prototype = {
    call$1: function(node) {
      var t2, t3, t4, t5, t6, t7, t8, newTable, split, next, t9, component, result, _this = this,
        t1 = _this.T;
      H.assertSubtypeOfRuntimeType(node, t1);
      t2 = _this.indexes;
      t3 = _this._box_0;
      t2.$indexSet(0, node, t3.index);
      t4 = _this.lowLinks;
      t4.$indexSet(0, node, t3.index);
      ++t3.index;
      t5 = _this.lastVisited;
      t6 = H.getTypeArgumentByIndex(t5, 0);
      H.assertSubtypeOfRuntimeType(node, t6);
      C.JSArray_methods.$indexSet(t5._table, t5._tail, node);
      t7 = t5._tail;
      t8 = t5._table.length;
      t7 = (t7 + 1 & t8 - 1) >>> 0;
      t5._tail = t7;
      if (t5._head === t7) {
        t7 = new Array(t8 * 2);
        t7.fixed$length = Array;
        newTable = H.setRuntimeTypeInfo(t7, [t6]);
        t6 = t5._table;
        t7 = t5._head;
        split = t6.length - t7;
        C.JSArray_methods.setRange$4(newTable, 0, split, t6, t7);
        C.JSArray_methods.setRange$4(newTable, split, split + t5._head, t5._table, 0);
        t5._head = 0;
        t5._tail = t5._table.length;
        t5.set$_table(newTable);
      }
      ++t5._modificationCount;
      t6 = _this.onStack;
      t6.add$1(0, node);
      t7 = _this.edges.call$1(node);
      t7 = J.get$iterator$ax(t7 == null ? C.List_empty0 : t7);
      for (; t7.moveNext$0();) {
        next = t7.get$current(t7);
        if (!t2.containsKey$1(0, next)) {
          _this.call$1(next);
          t8 = t4.$index(0, node);
          t9 = t4.$index(0, next);
          t4.$indexSet(0, node, Math.min(H.checkNum(t8), H.checkNum(t9)));
        } else if (t6.contains$1(0, next)) {
          t8 = t4.$index(0, node);
          t9 = t2.$index(0, next);
          t4.$indexSet(0, node, Math.min(H.checkNum(t8), H.checkNum(t9)));
        }
      }
      if (J.$eq$(t4.$index(0, node), t2.$index(0, node))) {
        component = H.setRuntimeTypeInfo([], [t1]);
        do {
          t1 = t5._head;
          t2 = t5._tail;
          if (t1 === t2)
            H.throwExpression(H.IterableElementError_noElement());
          ++t5._modificationCount;
          t1 = t5._table;
          t4 = t1.length;
          t2 = t5._tail = (t2 - 1 & t4 - 1) >>> 0;
          if (t2 < 0 || t2 >= t4)
            return H.ioore(t1, t2);
          result = t1[t2];
          C.JSArray_methods.$indexSet(t1, t2, null);
          t6.remove$1(0, result);
          C.JSArray_methods.add$1(component, result);
        } while (!H.boolConversionCheck(t3.equals.call$2(result, node)));
        C.JSArray_methods.add$1(_this.result, component);
      }
    },
    $signature: function() {
      return {func: 1, ret: -1, args: [this.T]};
    }
  };
  E.BaseClient.prototype = {
    _sendUnstreamed$5: function(method, url, headers, body, encoding) {
      return this._sendUnstreamed$body$BaseClient(method, url, headers, body, encoding);
    },
    _sendUnstreamed$body$BaseClient: function(method, url, headers, body, encoding) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(U.Response),
        $async$returnValue, $async$self = this, t1, request, $async$temp1;
      var $async$_sendUnstreamed$5 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              url = P.Uri_parse(url);
              t1 = P.String;
              request = new O.Request(C.C_Utf8Codec, new Uint8Array(0), method, url, P.LinkedHashMap_LinkedHashMap(new G.BaseRequest_closure(), new G.BaseRequest_closure0(), t1, t1));
              request.set$body(0, body);
              $async$temp1 = U;
              $async$goto = 3;
              return P._asyncAwait($async$self.send$1(0, request), $async$_sendUnstreamed$5);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.Response_fromStream($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_sendUnstreamed$5, $async$completer);
    }
  };
  G.BaseRequest.prototype = {
    finalize$0: function() {
      if (this._finalized)
        throw H.wrapException(P.StateError$("Can't finalize a finalized Request."));
      this._finalized = true;
      return;
    },
    toString$0: function(_) {
      return this.method + " " + H.S(this.url);
    }
  };
  G.BaseRequest_closure.prototype = {
    call$2: function(key1, key2) {
      H.stringTypeCheck(key1);
      H.stringTypeCheck(key2);
      return key1.toLowerCase() === key2.toLowerCase();
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 51
  };
  G.BaseRequest_closure0.prototype = {
    call$1: function(key) {
      return C.JSString_methods.get$hashCode(H.stringTypeCheck(key).toLowerCase());
    },
    $signature: 52
  };
  T.BaseResponse.prototype = {
    BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request: function(statusCode, contentLength, headers, isRedirect, persistentConnection, reasonPhrase, request) {
      var t1 = this.statusCode;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < 100)
        throw H.wrapException(P.ArgumentError$("Invalid status code " + t1 + "."));
    }
  };
  O.BrowserClient.prototype = {
    send$1: function(_, request) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(X.StreamedResponse),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, xhr, completer, t1, bytes, t2, t3, t4;
      var $async$send$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              request.super$BaseRequest$finalize();
              t1 = [P.List, P.int];
              $async$goto = 3;
              return P._asyncAwait(new Z.ByteStream(P.Stream_Stream$fromIterable(H.setRuntimeTypeInfo([request._bodyBytes], [t1]), t1)).toBytes$0(), $async$send$1);
            case 3:
              // returning from await.
              bytes = $async$result;
              xhr = new XMLHttpRequest();
              t1 = $async$self._xhrs;
              t1.add$1(0, xhr);
              t2 = J.toString$0$(request.url);
              t3 = H.interceptedTypeCheck(xhr, "$isHttpRequest");
              (t3 && C.HttpRequest_methods).open$5$async$password$user(t3, request.method, t2, true, null, null);
              xhr.responseType = "blob";
              xhr.withCredentials = $async$self.withCredentials;
              request.headers.forEach$1(0, J.get$setRequestHeader$x(xhr));
              t2 = X.StreamedResponse;
              completer = new P._AsyncCompleter(new P._Future($.Zone__current, [t2]), [t2]);
              t2 = [W.ProgressEvent];
              t3 = new W._EventStream(H.interceptedTypeCheck(xhr, "$isEventTarget"), "load", false, t2);
              t4 = -1;
              t3.get$first(t3).then$1$1(0, new O.BrowserClient_send_closure(xhr, completer, request), t4);
              t2 = new W._EventStream(H.interceptedTypeCheck(xhr, "$isEventTarget"), "error", false, t2);
              t2.get$first(t2).then$1$1(0, new O.BrowserClient_send_closure0(completer, request), t4);
              J.send$1$x(xhr, bytes);
              $async$handler = 4;
              $async$goto = 7;
              return P._asyncAwait(completer.future, $async$send$1);
            case 7:
              // returning from await.
              t2 = $async$result;
              $async$returnValue = t2;
              $async$next = [1];
              // goto finally
              $async$goto = 5;
              break;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              t1.remove$1(0, xhr);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$send$1, $async$completer);
    },
    close$0: function(_) {
      var t1;
      for (t1 = this._xhrs, t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H.getTypeArgumentByIndex(t1, 0)); t1.moveNext$0();)
        t1._collection$_current.abort();
    }
  };
  O.BrowserClient_send_closure.prototype = {
    call$1: function(_) {
      var t1, blob, reader, t2, t3, t4, t5, t6;
      H.interceptedTypeCheck(_, "$isProgressEvent");
      t1 = this.xhr;
      blob = W._convertNativeToDart_XHR_Response(t1.response) == null ? W.Blob_Blob([]) : W._convertNativeToDart_XHR_Response(t1.response);
      reader = new FileReader();
      t2 = [W.ProgressEvent];
      t3 = new W._EventStream(reader, "load", false, t2);
      t4 = this.completer;
      t5 = this.request;
      t6 = P.Null;
      t3.get$first(t3).then$1$1(0, new O.BrowserClient_send__closure(reader, t4, t1, t5), t6);
      t2 = new W._EventStream(reader, "error", false, t2);
      t2.get$first(t2).then$1$1(0, new O.BrowserClient_send__closure0(t4, t5), t6);
      reader.readAsArrayBuffer(H.interceptedTypeCheck(blob, "$isBlob"));
    },
    $signature: 7
  };
  O.BrowserClient_send__closure.prototype = {
    call$1: function(_) {
      var body, t1, t2, t3, t4, t5, t6, _this = this;
      H.interceptedTypeCheck(_, "$isProgressEvent");
      body = H.interceptedTypeCast(C.FileReader_methods.get$result(_this.reader), "$isUint8List");
      t1 = [P.List, P.int];
      t1 = P.Stream_Stream$fromIterable(H.setRuntimeTypeInfo([body], [t1]), t1);
      t2 = _this.xhr;
      t3 = t2.status;
      t4 = body.length;
      t5 = _this.request;
      t6 = C.HttpRequest_methods.get$responseHeaders(t2);
      t2 = t2.statusText;
      t1 = new X.StreamedResponse(B.toByteStream(new Z.ByteStream(t1)), t5, t3, t2, t4, t6, false, true);
      t1.BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(t3, t4, t6, false, true, t2, t5);
      _this.completer.complete$1(0, t1);
    },
    $signature: 7
  };
  O.BrowserClient_send__closure0.prototype = {
    call$1: function(error) {
      this.completer.completeError$2(new E.ClientException(J.toString$0$(H.interceptedTypeCheck(error, "$isProgressEvent"))), P.StackTrace_current());
    },
    $signature: 7
  };
  O.BrowserClient_send_closure0.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isProgressEvent");
      this.completer.completeError$2(new E.ClientException("XMLHttpRequest error."), P.StackTrace_current());
    },
    $signature: 7
  };
  Z.ByteStream.prototype = {
    toBytes$0: function() {
      var t1 = P.Uint8List,
        t2 = new P._Future($.Zone__current, [t1]),
        completer = new P._AsyncCompleter(t2, [t1]),
        sink = new P._ByteCallbackSink(new Z.ByteStream_toBytes_closure(completer), new Uint8Array(1024));
      this.listen$4$cancelOnError$onDone$onError(sink.get$add(sink), true, sink.get$close(sink), completer.get$completeError());
      return t2;
    },
    $asStream: function() {
      return [[P.List, P.int]];
    },
    $asStreamView: function() {
      return [[P.List, P.int]];
    }
  };
  Z.ByteStream_toBytes_closure.prototype = {
    call$1: function(bytes) {
      return this.completer.complete$1(0, new Uint8Array(H._ensureNativeList(H.assertSubtype(bytes, "$isList", [P.int], "$asList"))));
    },
    $signature: 53
  };
  E.ClientException.prototype = {
    toString$0: function(_) {
      return this.message;
    },
    $isException: 1
  };
  O.Request.prototype = {
    get$encoding: function(_) {
      var _this = this;
      if (_this.get$_contentType() == null || !J.containsKey$1$x(_this.get$_contentType().parameters._collection$_map, "charset"))
        return _this._defaultEncoding;
      return B.requiredEncodingForCharset(J.$index$asx(_this.get$_contentType().parameters._collection$_map, "charset"));
    },
    set$body: function(_, value) {
      var contentType, t2, _this = this,
        _s12_ = "content-type",
        t1 = H.assertSubtype(_this.get$encoding(_this).encode$1(value), "$isList", [P.int], "$asList");
      _this._checkFinalized$0();
      _this._bodyBytes = B.toUint8List(t1);
      contentType = _this.get$_contentType();
      if (contentType == null) {
        t1 = _this.get$encoding(_this);
        t2 = P.String;
        _this.headers.$indexSet(0, _s12_, R.MediaType$("text", "plain", P.LinkedHashMap_LinkedHashMap$_literal(["charset", t1.get$name(t1)], t2, t2)).toString$0(0));
      } else if (!J.containsKey$1$x(contentType.parameters._collection$_map, "charset")) {
        t1 = _this.get$encoding(_this);
        t2 = P.String;
        _this.headers.$indexSet(0, _s12_, contentType.change$1$parameters(P.LinkedHashMap_LinkedHashMap$_literal(["charset", t1.get$name(t1)], t2, t2)).toString$0(0));
      }
    },
    get$_contentType: function() {
      var contentType = this.headers.$index(0, "content-type");
      if (contentType == null)
        return;
      return R.MediaType_MediaType$parse(contentType);
    },
    _checkFinalized$0: function() {
      if (!this._finalized)
        return;
      throw H.wrapException(P.StateError$("Can't modify a finalized Request."));
    }
  };
  U.Response.prototype = {};
  U.Response_fromStream_closure.prototype = {
    call$1: function(body) {
      var t1, t2, t3, t4, t5, t6;
      H.interceptedTypeCheck(body, "$isUint8List");
      t1 = this.response;
      t2 = t1.statusCode;
      t3 = t1.request;
      t4 = t1.headers;
      t1 = t1.reasonPhrase;
      B.toUint8List(body);
      t5 = body.length;
      t6 = new U.Response(t3, t2, t1, t5, t4, false, true);
      t6.BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(t2, t5, t4, false, true, t1, t3);
      return t6;
    },
    $signature: 54
  };
  X.StreamedResponse.prototype = {};
  Z.CaseInsensitiveMap.prototype = {
    $asMap: function($V) {
      return [P.String, $V];
    },
    $asCanonicalizedMap: function($V) {
      return [P.String, P.String, $V];
    }
  };
  Z.CaseInsensitiveMap$from_closure.prototype = {
    call$1: function(key) {
      return H.stringTypeCheck(key).toLowerCase();
    },
    $signature: 9
  };
  Z.CaseInsensitiveMap$from_closure0.prototype = {
    call$1: function(key) {
      return key != null;
    },
    $signature: 27
  };
  R.MediaType.prototype = {
    change$1$parameters: function(parameters) {
      var parameters0,
        t1 = P.String;
      H.assertSubtype(parameters, "$isMap", [t1, t1], "$asMap");
      parameters0 = P.LinkedHashMap_LinkedHashMap$from(this.parameters, t1, t1);
      parameters0.addAll$1(0, parameters);
      return R.MediaType$(this.type, this.subtype, parameters0);
    },
    toString$0: function(_) {
      var buffer = new P.StringBuffer(""),
        t1 = this.type;
      buffer._contents = t1;
      t1 += "/";
      buffer._contents = t1;
      buffer._contents = t1 + this.subtype;
      t1 = this.parameters;
      J.forEach$1$ax(t1._collection$_map, H.functionTypeCheck(new R.MediaType_toString_closure(buffer), {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]}));
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  R.MediaType_MediaType$parse_closure.prototype = {
    call$0: function() {
      var t3, type, subtype, t4, parameters, t5, success, attribute, value,
        t1 = this.mediaType,
        scanner = new X.StringScanner(null, t1),
        t2 = $.$get$whitespace();
      scanner.scan$1(t2);
      t3 = $.$get$token();
      scanner.expect$1(t3);
      type = scanner.get$lastMatch().$index(0, 0);
      scanner.expect$1("/");
      scanner.expect$1(t3);
      subtype = scanner.get$lastMatch().$index(0, 0);
      scanner.scan$1(t2);
      t4 = P.String;
      parameters = P.LinkedHashMap_LinkedHashMap$_empty(t4, t4);
      while (true) {
        t4 = scanner._lastMatch = C.JSString_methods.matchAsPrefix$2(";", t1, scanner._string_scanner$_position);
        t5 = scanner._lastMatchPosition = scanner._string_scanner$_position;
        success = t4 != null;
        t4 = success ? scanner._lastMatchPosition = scanner._string_scanner$_position = t4.get$end(t4) : t5;
        if (!success)
          break;
        t4 = scanner._lastMatch = t2.matchAsPrefix$2(0, t1, t4);
        scanner._lastMatchPosition = scanner._string_scanner$_position;
        if (t4 != null)
          scanner._lastMatchPosition = scanner._string_scanner$_position = t4.get$end(t4);
        scanner.expect$1(t3);
        if (scanner._string_scanner$_position !== scanner._lastMatchPosition)
          scanner._lastMatch = null;
        attribute = scanner._lastMatch.$index(0, 0);
        scanner.expect$1("=");
        t4 = scanner._lastMatch = t3.matchAsPrefix$2(0, t1, scanner._string_scanner$_position);
        t5 = scanner._lastMatchPosition = scanner._string_scanner$_position;
        success = t4 != null;
        if (success) {
          t4 = scanner._lastMatchPosition = scanner._string_scanner$_position = t4.get$end(t4);
          t5 = t4;
        } else
          t4 = t5;
        if (success) {
          if (t4 !== t5)
            scanner._lastMatch = null;
          value = scanner._lastMatch.$index(0, 0);
        } else
          value = N.expectQuotedString(scanner);
        t4 = scanner._lastMatch = t2.matchAsPrefix$2(0, t1, scanner._string_scanner$_position);
        scanner._lastMatchPosition = scanner._string_scanner$_position;
        if (t4 != null)
          scanner._lastMatchPosition = scanner._string_scanner$_position = t4.get$end(t4);
        parameters.$indexSet(0, attribute, value);
      }
      scanner.expectDone$0();
      return R.MediaType$(type, subtype, parameters);
    },
    $signature: 55
  };
  R.MediaType_toString_closure.prototype = {
    call$2: function(attribute, value) {
      var t1, t2;
      H.stringTypeCheck(attribute);
      H.stringTypeCheck(value);
      t1 = this.buffer;
      t1._contents += "; " + H.S(attribute) + "=";
      t2 = $.$get$nonToken()._nativeRegExp;
      if (typeof value !== "string")
        H.throwExpression(H.argumentErrorValue(value));
      if (t2.test(value)) {
        t1._contents += '"';
        t2 = $.$get$_escapedChar();
        value.toString;
        t2 = t1._contents += J.splitMapJoin$2$onMatch$s(value, t2, H.functionTypeCheck(new R.MediaType_toString__closure(), {func: 1, ret: P.String, args: [P.Match]}));
        t1._contents = t2 + '"';
      } else
        t1._contents += H.S(value);
    },
    $signature: 24
  };
  R.MediaType_toString__closure.prototype = {
    call$1: function(match) {
      return C.JSString_methods.$add("\\", match.$index(0, 0));
    },
    $signature: 28
  };
  N.expectQuotedString_closure.prototype = {
    call$1: function(match) {
      return match.$index(0, 1);
    },
    $signature: 28
  };
  N.Logger.prototype = {
    get$fullName: function() {
      var t1 = this.parent,
        t2 = t1 == null || t1.name === "",
        t3 = this.name;
      return t2 ? t3 : t1.get$fullName() + "." + t3;
    },
    get$level: function(_) {
      return C.Level_INFO_800;
    },
    log$4: function(logLevel, message, error, stackTrace) {
      var t1 = logLevel.value;
      if (t1 >= this.get$level(this).value) {
        if (t1 >= 2000) {
          P.StackTrace_current();
          logLevel.toString$0(0);
        }
        t1 = this.get$fullName();
        Date.now();
        $.LogRecord__nextNumber = $.LogRecord__nextNumber + 1;
        $.$get$Logger_root()._publish$1(new N.LogRecord(logLevel, message, t1));
      }
    },
    _publish$1: function(record) {
    }
  };
  N.Logger_Logger_closure.prototype = {
    call$0: function() {
      var dot, $parent, t1,
        thisName = this.name;
      if (C.JSString_methods.startsWith$1(thisName, "."))
        H.throwExpression(P.ArgumentError$("name shouldn't start with a '.'"));
      dot = C.JSString_methods.lastIndexOf$1(thisName, ".");
      if (dot === -1)
        $parent = thisName !== "" ? N.Logger_Logger("") : null;
      else {
        $parent = N.Logger_Logger(C.JSString_methods.substring$2(thisName, 0, dot));
        thisName = C.JSString_methods.substring$1(thisName, dot + 1);
      }
      t1 = new N.Logger(thisName, $parent, new H.JsLinkedHashMap([P.String, N.Logger]));
      if ($parent != null)
        $parent._children.$indexSet(0, thisName, t1);
      return t1;
    },
    $signature: 57
  };
  N.Level.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof N.Level && this.value === other.value;
    },
    $gt: function(_, other) {
      return C.JSInt_methods.$gt(this.value, H.interceptedTypeCheck(other, "$isLevel").value);
    },
    $ge: function(_, other) {
      return this.value >= H.interceptedTypeCheck(other, "$isLevel").value;
    },
    compareTo$1: function(_, other) {
      return this.value - H.interceptedTypeCheck(other, "$isLevel").value;
    },
    get$hashCode: function(_) {
      return this.value;
    },
    toString$0: function(_) {
      return this.name;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [N.Level];
    }
  };
  N.LogRecord.prototype = {
    toString$0: function(_) {
      return "[" + this.level.name + "] " + this.loggerName + ": " + H.S(this.message);
    }
  };
  M.Context.prototype = {
    absolute$1: function(_, part1) {
      var t1, _null = null;
      M._validateArgList("absolute", H.setRuntimeTypeInfo([part1, null, null, null, null, null, null], [P.String]));
      t1 = this.style;
      t1 = t1.rootLength$1(part1) > 0 && !t1.isRootRelative$1(part1);
      if (t1)
        return part1;
      t1 = this._context$_current;
      return this.join$8(0, t1 != null ? t1 : D.current(), part1, _null, _null, _null, _null, _null, _null);
    },
    join$8: function(_, part1, part2, part3, part4, part5, part6, part7, part8) {
      var t1,
        parts = H.setRuntimeTypeInfo([part1, part2, part3, part4, part5, part6, part7, part8], [P.String]);
      M._validateArgList("join", parts);
      t1 = H.getTypeArgumentByIndex(parts, 0);
      return this.joinAll$1(new H.WhereIterable(parts, H.functionTypeCheck(new M.Context_join_closure(), {func: 1, ret: P.bool, args: [t1]}), [t1]));
    },
    joinAll$1: function(parts) {
      var t1, t2, t3, needsSeparator, isAbsoluteAndNotRootRelative, t4, t5, parsed, path, t6;
      for (t1 = H.assertSubtype(parts, "$isIterable", [P.String], "$asIterable").where$1(0, new M.Context_joinAll_closure()), t2 = J.get$iterator$ax(t1.__internal$_iterable), t1 = new H.WhereIterator(t2, t1._f, [H.getTypeArgumentByIndex(t1, 0)]), t3 = this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false, t4 = ""; t1.moveNext$0();) {
        t5 = t2.get$current(t2);
        if (t3.isRootRelative$1(t5) && isAbsoluteAndNotRootRelative) {
          parsed = X.ParsedPath_ParsedPath$parse(t5, t3);
          path = t4.charCodeAt(0) == 0 ? t4 : t4;
          t4 = C.JSString_methods.substring$2(path, 0, t3.rootLength$2$withDrive(path, true));
          parsed.root = t4;
          if (t3.needsSeparator$1(t4))
            C.JSArray_methods.$indexSet(parsed.separators, 0, t3.get$separator());
          t4 = parsed.toString$0(0);
        } else if (t3.rootLength$1(t5) > 0) {
          isAbsoluteAndNotRootRelative = !t3.isRootRelative$1(t5);
          t4 = H.S(t5);
        } else {
          t6 = t5.length;
          if (t6 !== 0) {
            if (0 >= t6)
              return H.ioore(t5, 0);
            t6 = t3.containsSeparator$1(t5[0]);
          } else
            t6 = false;
          if (!t6)
            if (needsSeparator)
              t4 += t3.get$separator();
          t4 += H.S(t5);
        }
        needsSeparator = t3.needsSeparator$1(t5);
      }
      return t4.charCodeAt(0) == 0 ? t4 : t4;
    },
    split$1: function(_, path) {
      var parsed = X.ParsedPath_ParsedPath$parse(path, this.style),
        t1 = parsed.parts,
        t2 = H.getTypeArgumentByIndex(t1, 0);
      parsed.set$parts(P.List_List$from(new H.WhereIterable(t1, H.functionTypeCheck(new M.Context_split_closure(), {func: 1, ret: P.bool, args: [t2]}), [t2]), true, t2));
      t1 = parsed.root;
      if (t1 != null)
        C.JSArray_methods.insert$2(parsed.parts, 0, t1);
      return parsed.parts;
    },
    normalize$1: function(_, path) {
      var parsed;
      if (!this._needsNormalization$1(path))
        return path;
      parsed = X.ParsedPath_ParsedPath$parse(path, this.style);
      parsed.normalize$0(0);
      return parsed.toString$0(0);
    },
    _needsNormalization$1: function(path) {
      var i, start, previous, t2, t3, previousPrevious, codeUnit, t4,
        t1 = this.style,
        root = t1.rootLength$1(path);
      if (root !== 0) {
        if (t1 === $.$get$Style_windows())
          for (i = 0; i < root; ++i)
            if (C.JSString_methods._codeUnitAt$1(path, i) === 47)
              return true;
        start = root;
        previous = 47;
      } else {
        start = 0;
        previous = null;
      }
      for (t2 = new H.CodeUnits(path).__internal$_string, t3 = t2.length, i = start, previousPrevious = null; i < t3; ++i, previousPrevious = previous, previous = codeUnit) {
        codeUnit = C.JSString_methods.codeUnitAt$1(t2, i);
        if (t1.isSeparator$1(codeUnit)) {
          if (t1 === $.$get$Style_windows() && codeUnit === 47)
            return true;
          if (previous != null && t1.isSeparator$1(previous))
            return true;
          if (previous === 46)
            t4 = previousPrevious == null || previousPrevious === 46 || t1.isSeparator$1(previousPrevious);
          else
            t4 = false;
          if (t4)
            return true;
        }
      }
      if (previous == null)
        return true;
      if (t1.isSeparator$1(previous))
        return true;
      if (previous === 46)
        t1 = previousPrevious == null || t1.isSeparator$1(previousPrevious) || previousPrevious === 46;
      else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    relative$1: function(path) {
      var from, fromParsed, pathParsed, t3, t4, t5, _this = this,
        _s26_ = 'Unable to find a path to "',
        t1 = _this.style,
        t2 = t1.rootLength$1(path);
      if (t2 <= 0)
        return _this.normalize$1(0, path);
      t2 = _this._context$_current;
      from = t2 != null ? t2 : D.current();
      if (t1.rootLength$1(from) <= 0 && t1.rootLength$1(path) > 0)
        return _this.normalize$1(0, path);
      if (t1.rootLength$1(path) <= 0 || t1.isRootRelative$1(path))
        path = _this.absolute$1(0, path);
      if (t1.rootLength$1(path) <= 0 && t1.rootLength$1(from) > 0)
        throw H.wrapException(X.PathException$(_s26_ + path + '" from "' + H.S(from) + '".'));
      fromParsed = X.ParsedPath_ParsedPath$parse(from, t1);
      fromParsed.normalize$0(0);
      pathParsed = X.ParsedPath_ParsedPath$parse(path, t1);
      pathParsed.normalize$0(0);
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return H.ioore(t2, 0);
        t2 = J.$eq$(t2[0], ".");
      } else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      t2 = fromParsed.root;
      t3 = pathParsed.root;
      if (t2 != t3)
        t2 = t2 == null || t3 == null || !t1.pathsEqual$2(t2, t3);
      else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      while (true) {
        t2 = fromParsed.parts;
        t3 = t2.length;
        if (t3 !== 0) {
          t4 = pathParsed.parts;
          t5 = t4.length;
          if (t5 !== 0) {
            if (0 >= t3)
              return H.ioore(t2, 0);
            t2 = t2[0];
            if (0 >= t5)
              return H.ioore(t4, 0);
            t4 = t1.pathsEqual$2(t2, t4[0]);
            t2 = t4;
          } else
            t2 = false;
        } else
          t2 = false;
        if (!t2)
          break;
        C.JSArray_methods.removeAt$1(fromParsed.parts, 0);
        C.JSArray_methods.removeAt$1(fromParsed.separators, 1);
        C.JSArray_methods.removeAt$1(pathParsed.parts, 0);
        C.JSArray_methods.removeAt$1(pathParsed.separators, 1);
      }
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return H.ioore(t2, 0);
        t2 = J.$eq$(t2[0], "..");
      } else
        t2 = false;
      if (t2)
        throw H.wrapException(X.PathException$(_s26_ + path + '" from "' + H.S(from) + '".'));
      t2 = P.String;
      C.JSArray_methods.insertAll$2(pathParsed.parts, 0, P.List_List$filled(fromParsed.parts.length, "..", t2));
      C.JSArray_methods.$indexSet(pathParsed.separators, 0, "");
      C.JSArray_methods.insertAll$2(pathParsed.separators, 1, P.List_List$filled(fromParsed.parts.length, t1.get$separator(), t2));
      t1 = pathParsed.parts;
      t2 = t1.length;
      if (t2 === 0)
        return ".";
      if (t2 > 1 && J.$eq$(C.JSArray_methods.get$last(t1), ".")) {
        C.JSArray_methods.removeLast$0(pathParsed.parts);
        t1 = pathParsed.separators;
        C.JSArray_methods.removeLast$0(t1);
        C.JSArray_methods.removeLast$0(t1);
        C.JSArray_methods.add$1(t1, "");
      }
      pathParsed.root = "";
      pathParsed.removeTrailingSeparators$0();
      return pathParsed.toString$0(0);
    },
    prettyUri$1: function(uri) {
      var path, rel, _this = this,
        typedUri = M._parseUri(uri);
      if (typedUri.get$scheme() === "file" && _this.style == $.$get$Style_url())
        return typedUri.toString$0(0);
      else if (typedUri.get$scheme() !== "file" && typedUri.get$scheme() !== "" && _this.style != $.$get$Style_url())
        return typedUri.toString$0(0);
      path = _this.normalize$1(0, _this.style.pathFromUri$1(M._parseUri(typedUri)));
      rel = _this.relative$1(path);
      return _this.split$1(0, rel).length > _this.split$1(0, path).length ? path : rel;
    }
  };
  M.Context_join_closure.prototype = {
    call$1: function(part) {
      return H.stringTypeCheck(part) != null;
    },
    $signature: 15
  };
  M.Context_joinAll_closure.prototype = {
    call$1: function(part) {
      return H.stringTypeCheck(part) !== "";
    },
    $signature: 15
  };
  M.Context_split_closure.prototype = {
    call$1: function(part) {
      return H.stringTypeCheck(part).length !== 0;
    },
    $signature: 15
  };
  M._validateArgList_closure.prototype = {
    call$1: function(arg) {
      H.stringTypeCheck(arg);
      return arg == null ? "null" : '"' + arg + '"';
    },
    $signature: 9
  };
  B.InternalStyle.prototype = {
    getRoot$1: function(path) {
      var t1,
        $length = this.rootLength$1(path);
      if ($length > 0)
        return J.substring$2$s(path, 0, $length);
      if (this.isRootRelative$1(path)) {
        if (0 >= path.length)
          return H.ioore(path, 0);
        t1 = path[0];
      } else
        t1 = null;
      return t1;
    },
    pathsEqual$2: function(path1, path2) {
      return path1 == path2;
    }
  };
  X.ParsedPath.prototype = {
    removeTrailingSeparators$0: function() {
      var t1, t2, _this = this;
      while (true) {
        t1 = _this.parts;
        if (!(t1.length !== 0 && J.$eq$(C.JSArray_methods.get$last(t1), "")))
          break;
        C.JSArray_methods.removeLast$0(_this.parts);
        C.JSArray_methods.removeLast$0(_this.separators);
      }
      t1 = _this.separators;
      t2 = t1.length;
      if (t2 !== 0)
        C.JSArray_methods.$indexSet(t1, t2 - 1, "");
    },
    normalize$0: function(_) {
      var t2, t3, leadingDoubles, _i, part, t4, newSeparators, _this = this,
        t1 = P.String,
        newParts = H.setRuntimeTypeInfo([], [t1]);
      for (t2 = _this.parts, t3 = t2.length, leadingDoubles = 0, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        part = t2[_i];
        t4 = J.getInterceptor$(part);
        if (!(t4.$eq(part, ".") || t4.$eq(part, "")))
          if (t4.$eq(part, "..")) {
            t4 = newParts.length;
            if (t4 !== 0) {
              if (0 >= t4)
                return H.ioore(newParts, -1);
              newParts.pop();
            } else
              ++leadingDoubles;
          } else
            C.JSArray_methods.add$1(newParts, part);
      }
      if (_this.root == null)
        C.JSArray_methods.insertAll$2(newParts, 0, P.List_List$filled(leadingDoubles, "..", t1));
      if (newParts.length === 0 && _this.root == null)
        C.JSArray_methods.add$1(newParts, ".");
      newSeparators = P.List_List$generate(newParts.length, new X.ParsedPath_normalize_closure(_this), true, t1);
      t1 = _this.root;
      C.JSArray_methods.insert$2(newSeparators, 0, t1 != null && newParts.length !== 0 && _this.style.needsSeparator$1(t1) ? _this.style.get$separator() : "");
      _this.set$parts(newParts);
      _this.set$separators(newSeparators);
      t1 = _this.root;
      if (t1 != null && _this.style === $.$get$Style_windows()) {
        t1.toString;
        _this.root = H.stringReplaceAllUnchecked(t1, "/", "\\");
      }
      _this.removeTrailingSeparators$0();
    },
    toString$0: function(_) {
      var i, t2, _this = this,
        t1 = _this.root;
      t1 = t1 != null ? t1 : "";
      for (i = 0; i < _this.parts.length; ++i) {
        t2 = _this.separators;
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2 = t1 + H.S(t2[i]);
        t1 = _this.parts;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1 = t2 + H.S(t1[i]);
      }
      t1 += H.S(C.JSArray_methods.get$last(_this.separators));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    set$parts: function(parts) {
      this.parts = H.assertSubtype(parts, "$isList", [P.String], "$asList");
    },
    set$separators: function(separators) {
      this.separators = H.assertSubtype(separators, "$isList", [P.String], "$asList");
    }
  };
  X.ParsedPath_normalize_closure.prototype = {
    call$1: function(_) {
      return this.$this.style.get$separator();
    },
    $signature: 14
  };
  X.PathException.prototype = {
    toString$0: function(_) {
      return "PathException: " + this.message;
    },
    $isException: 1
  };
  O.Style.prototype = {
    toString$0: function(_) {
      return this.get$name(this);
    }
  };
  E.PosixStyle.prototype = {
    containsSeparator$1: function(path) {
      return C.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1: function(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1: function(path) {
      var t1 = path.length;
      return t1 !== 0 && J.codeUnitAt$1$s(path, t1 - 1) !== 47;
    },
    rootLength$2$withDrive: function(path, withDrive) {
      if (path.length !== 0 && J._codeUnitAt$1$s(path, 0) === 47)
        return 1;
      return 0;
    },
    rootLength$1: function(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1: function(path) {
      return false;
    },
    pathFromUri$1: function(uri) {
      var t1;
      if (uri.get$scheme() === "" || uri.get$scheme() === "file") {
        t1 = uri.get$path(uri);
        return P._Uri__uriDecode(t1, 0, t1.length, C.C_Utf8Codec, false);
      }
      throw H.wrapException(P.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'."));
    },
    get$name: function() {
      return "posix";
    },
    get$separator: function() {
      return "/";
    }
  };
  F.UrlStyle.prototype = {
    containsSeparator$1: function(path) {
      return C.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1: function(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1: function(path) {
      var t1 = path.length;
      if (t1 === 0)
        return false;
      if (J.getInterceptor$s(path).codeUnitAt$1(path, t1 - 1) !== 47)
        return true;
      return C.JSString_methods.endsWith$1(path, "://") && this.rootLength$1(path) === t1;
    },
    rootLength$2$withDrive: function(path, withDrive) {
      var i, codeUnit, index, t2,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (J.getInterceptor$s(path)._codeUnitAt$1(path, 0) === 47)
        return 1;
      for (i = 0; i < t1; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(path, i);
        if (codeUnit === 47)
          return 0;
        if (codeUnit === 58) {
          if (i === 0)
            return 0;
          index = C.JSString_methods.indexOf$2(path, "/", C.JSString_methods.startsWith$2(path, "//", i + 1) ? i + 3 : i);
          if (index <= 0)
            return t1;
          if (!withDrive || t1 < index + 3)
            return index;
          if (!C.JSString_methods.startsWith$1(path, "file://"))
            return index;
          if (!B.isDriveLetter(path, index + 1))
            return index;
          t2 = index + 3;
          return t1 === t2 ? t2 : index + 4;
        }
      }
      return 0;
    },
    rootLength$1: function(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1: function(path) {
      return path.length !== 0 && J._codeUnitAt$1$s(path, 0) === 47;
    },
    pathFromUri$1: function(uri) {
      return J.toString$0$(uri);
    },
    get$name: function() {
      return "url";
    },
    get$separator: function() {
      return "/";
    }
  };
  L.WindowsStyle.prototype = {
    containsSeparator$1: function(path) {
      return C.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1: function(codeUnit) {
      return codeUnit === 47 || codeUnit === 92;
    },
    needsSeparator$1: function(path) {
      var t1 = path.length;
      if (t1 === 0)
        return false;
      t1 = J.codeUnitAt$1$s(path, t1 - 1);
      return !(t1 === 47 || t1 === 92);
    },
    rootLength$2$withDrive: function(path, withDrive) {
      var t2, index,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      t2 = J.getInterceptor$s(path)._codeUnitAt$1(path, 0);
      if (t2 === 47)
        return 1;
      if (t2 === 92) {
        if (t1 < 2 || C.JSString_methods._codeUnitAt$1(path, 1) !== 92)
          return 1;
        index = C.JSString_methods.indexOf$2(path, "\\", 2);
        if (index > 0) {
          index = C.JSString_methods.indexOf$2(path, "\\", index + 1);
          if (index > 0)
            return index;
        }
        return t1;
      }
      if (t1 < 3)
        return 0;
      if (!B.isAlphabetic(t2))
        return 0;
      if (C.JSString_methods._codeUnitAt$1(path, 1) !== 58)
        return 0;
      t1 = C.JSString_methods._codeUnitAt$1(path, 2);
      if (!(t1 === 47 || t1 === 92))
        return 0;
      return 3;
    },
    rootLength$1: function(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1: function(path) {
      return this.rootLength$1(path) === 1;
    },
    pathFromUri$1: function(uri) {
      var path, t1;
      if (uri.get$scheme() !== "" && uri.get$scheme() !== "file")
        throw H.wrapException(P.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'."));
      path = uri.get$path(uri);
      if (uri.get$host(uri) === "") {
        t1 = path.length;
        if (t1 >= 3 && C.JSString_methods.startsWith$1(path, "/") && B.isDriveLetter(path, 1)) {
          P.RangeError_checkValueInInterval(0, 0, t1, "startIndex");
          path = H.stringReplaceFirstUnchecked(path, "/", "", 0);
        }
      } else
        path = "\\\\" + H.S(uri.get$host(uri)) + path;
      t1 = H.stringReplaceAllUnchecked(path, "/", "\\");
      return P._Uri__uriDecode(t1, 0, t1.length, C.C_Utf8Codec, false);
    },
    codeUnitsEqual$2: function(codeUnit1, codeUnit2) {
      var upperCase1;
      if (codeUnit1 === codeUnit2)
        return true;
      if (codeUnit1 === 47)
        return codeUnit2 === 92;
      if (codeUnit1 === 92)
        return codeUnit2 === 47;
      if ((codeUnit1 ^ codeUnit2) !== 32)
        return false;
      upperCase1 = codeUnit1 | 32;
      return upperCase1 >= 97 && upperCase1 <= 122;
    },
    pathsEqual$2: function(path1, path2) {
      var t1, t2, i;
      if (path1 == path2)
        return true;
      t1 = path1.length;
      if (t1 !== path2.length)
        return false;
      for (t2 = J.getInterceptor$s(path2), i = 0; i < t1; ++i)
        if (!this.codeUnitsEqual$2(C.JSString_methods._codeUnitAt$1(path1, i), t2._codeUnitAt$1(path2, i)))
          return false;
      return true;
    },
    get$name: function() {
      return "windows";
    },
    get$separator: function() {
      return "\\";
    }
  };
  X.hashObjects_closure.prototype = {
    call$2: function(h, i) {
      return X._combine(H.intTypeCheck(h), J.get$hashCode$(i));
    },
    $signature: 59
  };
  Y.SourceFile.prototype = {
    get$length: function(_) {
      return this._decodedChars.length;
    },
    get$lines: function(_) {
      return this._lineStarts.length;
    },
    SourceFile$decoded$2$url: function(decodedChars, url) {
      var t1, t2, t3, i, c, j, t4;
      for (t1 = this._decodedChars, t2 = t1.length, t3 = this._lineStarts, i = 0; i < t2; ++i) {
        c = t1[i];
        if (c === 13) {
          j = i + 1;
          if (j < t2) {
            if (j >= t2)
              return H.ioore(t1, j);
            t4 = t1[j] !== 10;
          } else
            t4 = true;
          if (t4)
            c = 10;
        }
        if (c === 10)
          C.JSArray_methods.add$1(t3, i + 1);
      }
    },
    getLine$1: function(offset) {
      var t1, _this = this;
      if (offset < 0)
        throw H.wrapException(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw H.wrapException(P.RangeError$("Offset " + offset + " must not be greater than the number of characters in the file, " + _this.get$length(_this) + "."));
      t1 = _this._lineStarts;
      if (offset < C.JSArray_methods.get$first(t1))
        return -1;
      if (offset >= C.JSArray_methods.get$last(t1))
        return t1.length - 1;
      if (_this._isNearCachedLine$1(offset))
        return _this._cachedLine;
      return _this._cachedLine = _this._binarySearch$1(offset) - 1;
    },
    _isNearCachedLine$1: function(offset) {
      var t2, t3, t4, _this = this,
        t1 = _this._cachedLine;
      if (t1 == null)
        return false;
      t2 = _this._lineStarts;
      if (t1 >>> 0 !== t1 || t1 >= t2.length)
        return H.ioore(t2, t1);
      if (offset < t2[t1])
        return false;
      t1 = _this._cachedLine;
      t3 = t2.length;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 < t3 - 1) {
        t4 = t1 + 1;
        if (t4 < 0 || t4 >= t3)
          return H.ioore(t2, t4);
        t4 = offset < t2[t4];
      } else
        t4 = true;
      if (t4)
        return true;
      if (t1 < t3 - 2) {
        t4 = t1 + 2;
        if (t4 < 0 || t4 >= t3)
          return H.ioore(t2, t4);
        t4 = offset < t2[t4];
        t2 = t4;
      } else
        t2 = true;
      if (t2) {
        _this._cachedLine = t1 + 1;
        return true;
      }
      return false;
    },
    _binarySearch$1: function(offset) {
      var min, half,
        t1 = this._lineStarts,
        t2 = t1.length,
        max = t2 - 1;
      for (min = 0; min < max;) {
        half = min + C.JSInt_methods._tdivFast$1(max - min, 2);
        if (half < 0 || half >= t2)
          return H.ioore(t1, half);
        if (t1[half] > offset)
          max = half;
        else
          min = half + 1;
      }
      return max;
    },
    getColumn$1: function(offset) {
      var line, lineStart, _this = this;
      if (offset < 0)
        throw H.wrapException(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw H.wrapException(P.RangeError$("Offset " + offset + " must be not be greater than the number of characters in the file, " + _this.get$length(_this) + "."));
      line = _this.getLine$1(offset);
      lineStart = C.JSArray_methods.$index(_this._lineStarts, line);
      if (lineStart > offset)
        throw H.wrapException(P.RangeError$("Line " + H.S(line) + " comes after offset " + offset + "."));
      return offset - lineStart;
    },
    getOffset$1: function(line) {
      var t1, t2, result, t3, _this = this;
      if (typeof line !== "number")
        return line.$lt();
      if (line < 0)
        throw H.wrapException(P.RangeError$("Line may not be negative, was " + line + "."));
      else {
        t1 = _this._lineStarts;
        t2 = t1.length;
        if (line >= t2)
          throw H.wrapException(P.RangeError$("Line " + line + " must be less than the number of lines in the file, " + _this.get$lines(_this) + "."));
      }
      result = t1[line];
      if (result <= _this._decodedChars.length) {
        t3 = line + 1;
        t1 = t3 < t2 && result >= t1[t3];
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$("Line " + line + " doesn't have 0 columns."));
      return result;
    }
  };
  Y.FileLocation.prototype = {
    get$sourceUrl: function() {
      return this.file.url;
    },
    get$line: function(_) {
      return this.file.getLine$1(this.offset);
    },
    get$column: function() {
      return this.file.getColumn$1(this.offset);
    },
    get$offset: function(receiver) {
      return this.offset;
    }
  };
  Y._FileSpan.prototype = {
    get$sourceUrl: function() {
      return this.file.url;
    },
    get$length: function(_) {
      return this._file$_end - this._file$_start;
    },
    get$start: function(_) {
      return Y.FileLocation$_(this.file, this._file$_start);
    },
    get$end: function(_) {
      return Y.FileLocation$_(this.file, this._file$_end);
    },
    get$text: function(_) {
      return P.String_String$fromCharCodes(C.NativeUint32List_methods.sublist$2(this.file._decodedChars, this._file$_start, this._file$_end), 0, null);
    },
    get$context: function(_) {
      var t2, _this = this,
        t1 = _this.file,
        endOffset = _this._file$_end,
        endLine = t1.getLine$1(endOffset);
      if (t1.getColumn$1(endOffset) === 0 && endLine !== 0) {
        if (endOffset - _this._file$_start === 0) {
          if (endLine === t1._lineStarts.length - 1)
            t1 = "";
          else {
            t2 = t1.getOffset$1(endLine);
            if (typeof endLine !== "number")
              return endLine.$add();
            t1 = P.String_String$fromCharCodes(C.NativeUint32List_methods.sublist$2(t1._decodedChars, t2, t1.getOffset$1(endLine + 1)), 0, null);
          }
          return t1;
        }
      } else if (endLine === t1._lineStarts.length - 1)
        endOffset = t1._decodedChars.length;
      else {
        if (typeof endLine !== "number")
          return endLine.$add();
        endOffset = t1.getOffset$1(endLine + 1);
      }
      return P.String_String$fromCharCodes(C.NativeUint32List_methods.sublist$2(t1._decodedChars, t1.getOffset$1(t1.getLine$1(_this._file$_start)), endOffset), 0, null);
    },
    compareTo$1: function(_, other) {
      var result;
      H.interceptedTypeCheck(other, "$isSourceSpan");
      if (!(other instanceof Y._FileSpan))
        return this.super$SourceSpanMixin$compareTo(0, other);
      result = C.JSInt_methods.compareTo$1(this._file$_start, other._file$_start);
      return result === 0 ? C.JSInt_methods.compareTo$1(this._file$_end, other._file$_end) : result;
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!J.getInterceptor$(other).$isFileSpan)
        return _this.super$SourceSpanMixin$$eq(0, other);
      return _this._file$_start === other._file$_start && _this._file$_end === other._file$_end && J.$eq$(_this.file.url, other.file.url);
    },
    get$hashCode: function(_) {
      return Y.SourceSpanMixin.prototype.get$hashCode.call(this, this);
    },
    $isFileSpan: 1,
    $isSourceSpanWithContext: 1
  };
  U.Highlighter.prototype = {
    highlight$0: function(_) {
      var t1, t2, lineStart, context, lines, t3, t4, lineNumber, _i, line, lastLineIndex, _this = this;
      _this._writeSidebar$1$end("\u2577");
      t1 = _this._highlighter$_buffer;
      t1._contents += "\n";
      t2 = _this._highlighter$_span;
      lineStart = B.findLineStart(t2.get$context(t2), t2.get$text(t2), t2.get$start(t2).get$column());
      context = t2.get$context(t2);
      if (typeof lineStart !== "number")
        return lineStart.$gt();
      if (lineStart > 0) {
        lines = C.JSString_methods.substring$2(context, 0, lineStart - 1).split("\n");
        t3 = t2.get$start(t2);
        t3 = t3.get$line(t3);
        t4 = lines.length;
        if (typeof t3 !== "number")
          return t3.$sub();
        lineNumber = t3 - t4;
        for (t3 = _this._multiline, _i = 0; _i < t4; ++_i) {
          line = lines[_i];
          _this._writeSidebar$1$line(lineNumber);
          t1._contents += C.JSString_methods.$mul(" ", t3 ? 3 : 1);
          _this._writeText$1(line);
          t1._contents += "\n";
          ++lineNumber;
        }
        context = C.JSString_methods.substring$1(context, lineStart);
      }
      lines = H.setRuntimeTypeInfo(context.split("\n"), [P.String]);
      t3 = t2.get$end(t2);
      t3 = t3.get$line(t3);
      t2 = t2.get$start(t2);
      t2 = t2.get$line(t2);
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      lastLineIndex = t3 - t2;
      if (J.get$length$asx(C.JSArray_methods.get$last(lines)) === 0 && lines.length > lastLineIndex + 1) {
        if (0 >= lines.length)
          return H.ioore(lines, -1);
        lines.pop();
      }
      _this._writeFirstLine$1(C.JSArray_methods.get$first(lines));
      if (_this._multiline) {
        _this._writeIntermediateLines$1(H.SubListIterable$(lines, 1, null, H.getTypeArgumentByIndex(lines, 0)).take$1(0, lastLineIndex - 1));
        if (lastLineIndex < 0 || lastLineIndex >= lines.length)
          return H.ioore(lines, lastLineIndex);
        _this._writeLastLine$1(lines[lastLineIndex]);
      }
      _this._writeTrailingLines$1(H.SubListIterable$(lines, lastLineIndex + 1, null, H.getTypeArgumentByIndex(lines, 0)));
      _this._writeSidebar$1$end("\u2575");
      t1 = t1._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _writeFirstLine$1: function(line) {
      var t4, startColumn, endColumn, textBefore, textInside, tabsBefore, tabsInside, _this = this, t1 = {},
        t2 = _this._highlighter$_span,
        t3 = t2.get$start(t2);
      _this._writeSidebar$1$line(t3.get$line(t3));
      t3 = t2.get$start(t2).get$column();
      t4 = line.length;
      startColumn = t1.startColumn = Math.min(t3, t4);
      t3 = t2.get$end(t2);
      t3 = t3.get$offset(t3);
      t2 = t2.get$start(t2);
      endColumn = t1.endColumn = Math.min(startColumn + t3 - t2.get$offset(t2), t4);
      textBefore = J.substring$2$s(line, 0, startColumn);
      t2 = _this._multiline;
      if (t2 && _this._isOnlyWhitespace$1(textBefore)) {
        t1 = _this._highlighter$_buffer;
        t1._contents += " ";
        _this._colorize$1(new U.Highlighter__writeFirstLine_closure(_this, line));
        t1._contents += "\n";
        return;
      }
      t3 = _this._highlighter$_buffer;
      t3._contents += C.JSString_methods.$mul(" ", t2 ? 3 : 1);
      _this._writeText$1(textBefore);
      textInside = C.JSString_methods.substring$2(line, startColumn, endColumn);
      _this._colorize$1(new U.Highlighter__writeFirstLine_closure0(_this, textInside));
      _this._writeText$1(C.JSString_methods.substring$1(line, endColumn));
      t3._contents += "\n";
      tabsBefore = _this._countTabs$1(textBefore);
      tabsInside = _this._countTabs$1(textInside);
      startColumn += tabsBefore * 3;
      t1.startColumn = startColumn;
      t1.endColumn = endColumn + (tabsBefore + tabsInside) * 3;
      _this._writeSidebar$0();
      if (t2) {
        t3._contents += " ";
        _this._colorize$1(new U.Highlighter__writeFirstLine_closure1(t1, _this));
      } else {
        t3._contents += C.JSString_methods.$mul(" ", startColumn + 1);
        _this._colorize$1(new U.Highlighter__writeFirstLine_closure2(t1, _this));
      }
      t3._contents += "\n";
    },
    _writeIntermediateLines$1: function(lines) {
      var t1, lineNumber, t2, t3, _this = this;
      H.assertSubtype(lines, "$isIterable", [P.String], "$asIterable");
      t1 = _this._highlighter$_span;
      t1 = t1.get$start(t1);
      t1 = t1.get$line(t1);
      if (typeof t1 !== "number")
        return t1.$add();
      lineNumber = t1 + 1;
      for (t1 = new H.ListIterator(lines, lines.get$length(lines), [H.getTypeArgumentByIndex(lines, 0)]), t2 = _this._highlighter$_buffer; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        _this._writeSidebar$1$line(lineNumber);
        t2._contents += " ";
        _this._colorize$1(new U.Highlighter__writeIntermediateLines_closure(_this, t3));
        t2._contents += "\n";
        ++lineNumber;
      }
    },
    _writeLastLine$1: function(line) {
      var endColumn, textInside, _this = this, t1 = {},
        t2 = _this._highlighter$_span,
        t3 = t2.get$end(t2);
      _this._writeSidebar$1$line(t3.get$line(t3));
      t2 = t2.get$end(t2).get$column();
      t3 = line.length;
      endColumn = t1.endColumn = Math.min(t2, t3);
      if (_this._multiline && endColumn === t3) {
        t1 = _this._highlighter$_buffer;
        t1._contents += " ";
        _this._colorize$1(new U.Highlighter__writeLastLine_closure(_this, line));
        t1._contents += "\n";
        return;
      }
      t2 = _this._highlighter$_buffer;
      t2._contents += " ";
      textInside = J.substring$2$s(line, 0, endColumn);
      _this._colorize$1(new U.Highlighter__writeLastLine_closure0(_this, textInside));
      _this._writeText$1(C.JSString_methods.substring$1(line, endColumn));
      t2._contents += "\n";
      t1.endColumn = endColumn + _this._countTabs$1(textInside) * 3;
      _this._writeSidebar$0();
      t2._contents += " ";
      _this._colorize$1(new U.Highlighter__writeLastLine_closure1(t1, _this));
      t2._contents += "\n";
    },
    _writeTrailingLines$1: function(lines) {
      var t1, lineNumber, t2, t3, t4, _this = this;
      H.assertSubtype(lines, "$isIterable", [P.String], "$asIterable");
      t1 = _this._highlighter$_span;
      t1 = t1.get$end(t1);
      t1 = t1.get$line(t1);
      if (typeof t1 !== "number")
        return t1.$add();
      lineNumber = t1 + 1;
      for (t1 = new H.ListIterator(lines, lines.get$length(lines), [H.getTypeArgumentByIndex(lines, 0)]), t2 = _this._highlighter$_buffer, t3 = _this._multiline; t1.moveNext$0();) {
        t4 = t1.__internal$_current;
        _this._writeSidebar$1$line(lineNumber);
        t2._contents += C.JSString_methods.$mul(" ", t3 ? 3 : 1);
        _this._writeText$1(t4);
        t2._contents += "\n";
        ++lineNumber;
      }
    },
    _writeText$1: function(text) {
      var t1, t2, t3;
      for (text.toString, t1 = new H.CodeUnits(text), t1 = new H.ListIterator(t1, t1.get$length(t1), [P.int]), t2 = this._highlighter$_buffer; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 === 9)
          t2._contents += C.JSString_methods.$mul(" ", 4);
        else
          t2._contents += H.Primitives_stringFromCharCode(t3);
      }
    },
    _writeSidebar$2$end$line: function(end, line) {
      this._colorize$2$color(new U.Highlighter__writeSidebar_closure(this, line, end), "\x1b[34m");
    },
    _writeSidebar$1$end: function(end) {
      return this._writeSidebar$2$end$line(end, null);
    },
    _writeSidebar$1$line: function(line) {
      return this._writeSidebar$2$end$line(null, line);
    },
    _writeSidebar$0: function() {
      return this._writeSidebar$2$end$line(null, null);
    },
    _countTabs$1: function(text) {
      var t1, count;
      for (t1 = new H.CodeUnits(text), t1 = new H.ListIterator(t1, t1.get$length(t1), [P.int]), count = 0; t1.moveNext$0();)
        if (t1.__internal$_current === 9)
          ++count;
      return count;
    },
    _isOnlyWhitespace$1: function(text) {
      var t1, t2;
      for (t1 = new H.CodeUnits(text), t1 = new H.ListIterator(t1, t1.get$length(t1), [P.int]); t1.moveNext$0();) {
        t2 = t1.__internal$_current;
        if (t2 !== 32 && t2 !== 9)
          return false;
      }
      return true;
    },
    _colorize$2$color: function(callback, color) {
      var t1, t2;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = this._color;
      t2 = t1 != null;
      if (t2) {
        t1 = color == null ? t1 : color;
        this._highlighter$_buffer._contents += t1;
      }
      callback.call$0();
      if (t2)
        this._highlighter$_buffer._contents += "\x1b[0m";
    },
    _colorize$1: function(callback) {
      return this._colorize$2$color(callback, null);
    }
  };
  U.Highlighter__writeFirstLine_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = t2._contents += "\u250c";
      t2._contents = t3 + " ";
      t1._writeText$1(this.line);
    },
    $signature: 1
  };
  U.Highlighter__writeFirstLine_closure0.prototype = {
    call$0: function() {
      return this.$this._writeText$1(this.textInside);
    },
    $signature: 0
  };
  U.Highlighter__writeFirstLine_closure1.prototype = {
    call$0: function() {
      var t2,
        t1 = this.$this._highlighter$_buffer;
      t1._contents += "\u250c";
      t2 = t1._contents += C.JSString_methods.$mul("\u2500", this._box_0.startColumn + 1);
      t1._contents = t2 + "^";
    },
    $signature: 1
  };
  U.Highlighter__writeFirstLine_closure2.prototype = {
    call$0: function() {
      var t1 = this._box_0;
      this.$this._highlighter$_buffer._contents += C.JSString_methods.$mul("^", Math.max(t1.endColumn - t1.startColumn, 1));
      return;
    },
    $signature: 0
  };
  U.Highlighter__writeIntermediateLines_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = t2._contents += "\u2502";
      t2._contents = t3 + " ";
      t1._writeText$1(this.line);
    },
    $signature: 1
  };
  U.Highlighter__writeLastLine_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = t2._contents += "\u2514";
      t2._contents = t3 + " ";
      t1._writeText$1(this.line);
    },
    $signature: 1
  };
  U.Highlighter__writeLastLine_closure0.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = t2._contents += "\u2502";
      t2._contents = t3 + " ";
      t1._writeText$1(this.textInside);
    },
    $signature: 1
  };
  U.Highlighter__writeLastLine_closure1.prototype = {
    call$0: function() {
      var t2,
        t1 = this.$this._highlighter$_buffer;
      t1._contents += "\u2514";
      t2 = t1._contents += C.JSString_methods.$mul("\u2500", this._box_0.endColumn);
      t1._contents = t2 + "^";
    },
    $signature: 1
  };
  U.Highlighter__writeSidebar_closure.prototype = {
    call$0: function() {
      var t1 = this.line,
        t2 = this.$this,
        t3 = t2._highlighter$_buffer;
      t2 = t2._paddingBeforeSidebar;
      if (t1 != null)
        t3._contents += C.JSString_methods.padRight$1(C.JSInt_methods.toString$0(t1 + 1), t2);
      else
        t3._contents += C.JSString_methods.$mul(" ", t2);
      t1 = this.end;
      t3._contents += t1 == null ? "\u2502" : t1;
    },
    $signature: 1
  };
  V.SourceLocation.prototype = {
    distance$1: function(other) {
      var t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(t1) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
      return Math.abs(this.offset - other.get$offset(other));
    },
    compareTo$1: function(_, other) {
      var t1;
      H.interceptedTypeCheck(other, "$isSourceLocation");
      t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(t1) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
      return this.offset - other.get$offset(other);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor$(other).$isSourceLocation && J.$eq$(this.sourceUrl, other.get$sourceUrl()) && this.offset === other.get$offset(other);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.sourceUrl) + this.offset;
    },
    toString$0: function(_) {
      var _this = this,
        t1 = "<" + H.getRuntimeType(_this).toString$0(0) + ": " + _this.offset + " ",
        source = _this.sourceUrl;
      return t1 + (H.S(source == null ? "unknown source" : source) + ":" + (_this.line + 1) + ":" + (_this.column + 1)) + ">";
    },
    $isComparable: 1,
    $asComparable: function() {
      return [V.SourceLocation];
    },
    get$sourceUrl: function() {
      return this.sourceUrl;
    },
    get$offset: function(receiver) {
      return this.offset;
    },
    get$line: function(receiver) {
      return this.line;
    },
    get$column: function() {
      return this.column;
    }
  };
  D.SourceLocationMixin.prototype = {
    distance$1: function(other) {
      if (!J.$eq$(this.file.url, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(this.get$sourceUrl()) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
      return Math.abs(this.offset - other.get$offset(other));
    },
    compareTo$1: function(_, other) {
      H.interceptedTypeCheck(other, "$isSourceLocation");
      if (!J.$eq$(this.file.url, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(this.get$sourceUrl()) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
      return this.offset - other.get$offset(other);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor$(other).$isSourceLocation && J.$eq$(this.file.url, other.get$sourceUrl()) && this.offset === other.get$offset(other);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.file.url) + this.offset;
    },
    toString$0: function(_) {
      var t1 = this.offset,
        t2 = "<" + H.getRuntimeType(this).toString$0(0) + ": " + t1 + " ",
        t3 = this.file,
        source = t3.url,
        t4 = H.S(source == null ? "unknown source" : source) + ":",
        t5 = t3.getLine$1(t1);
      if (typeof t5 !== "number")
        return t5.$add();
      return t2 + (t4 + (t5 + 1) + ":" + (t3.getColumn$1(t1) + 1)) + ">";
    },
    $isComparable: 1,
    $asComparable: function() {
      return [V.SourceLocation];
    },
    $isSourceLocation: 1
  };
  V.SourceSpan.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [V.SourceSpan];
    }
  };
  V.SourceSpanBase.prototype = {
    SourceSpanBase$3: function(start, end, text) {
      var t3,
        t1 = this.end,
        t2 = this.start;
      if (!J.$eq$(t1.get$sourceUrl(), t2.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(t2.get$sourceUrl()) + '" and  "' + H.S(t1.get$sourceUrl()) + "\" don't match."));
      else if (t1.get$offset(t1) < t2.get$offset(t2))
        throw H.wrapException(P.ArgumentError$("End " + t1.toString$0(0) + " must come after start " + t2.toString$0(0) + "."));
      else {
        t3 = this.text;
        if (t3.length !== t2.distance$1(t1))
          throw H.wrapException(P.ArgumentError$('Text "' + t3 + '" must be ' + t2.distance$1(t1) + " characters long."));
      }
    },
    get$start: function(receiver) {
      return this.start;
    },
    get$end: function(receiver) {
      return this.end;
    },
    get$text: function(receiver) {
      return this.text;
    }
  };
  G.SourceSpanException.prototype = {
    get$message: function(_) {
      return this._span_exception$_message;
    },
    toString$0: function(_) {
      var t3, highlight,
        t1 = this._span,
        t2 = t1.get$start(t1);
      t2 = t2.get$line(t2);
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = "line " + (t2 + 1) + ", column " + (t1.get$start(t1).get$column() + 1);
      if (t1.get$sourceUrl() != null) {
        t3 = t1.get$sourceUrl();
        t3 = t2 + (" of " + $.$get$context0().prettyUri$1(t3));
        t2 = t3;
      }
      t2 += ": " + this._span_exception$_message;
      highlight = t1.highlight$1$color(0, null);
      t1 = highlight.length !== 0 ? t2 + "\n" + highlight : t2;
      return "Error on " + (t1.charCodeAt(0) == 0 ? t1 : t1);
    },
    $isException: 1
  };
  G.SourceSpanFormatException.prototype = {
    get$source: function(_) {
      return this._span_exception$_source;
    },
    get$offset: function(_) {
      var t1 = this._span;
      t1 = Y.FileLocation$_(t1.file, t1._file$_start);
      return t1.offset;
    },
    $isFormatException: 1
  };
  Y.SourceSpanMixin.prototype = {
    get$sourceUrl: function() {
      return this.get$start(this).get$sourceUrl();
    },
    get$length: function(_) {
      var t2, _this = this,
        t1 = _this.get$end(_this);
      t1 = t1.get$offset(t1);
      t2 = _this.get$start(_this);
      return t1 - t2.get$offset(t2);
    },
    compareTo$1: function(_, other) {
      var result, _this = this;
      H.interceptedTypeCheck(other, "$isSourceSpan");
      result = _this.get$start(_this).compareTo$1(0, other.get$start(other));
      return result === 0 ? _this.get$end(_this).compareTo$1(0, other.get$end(other)) : result;
    },
    highlight$1$color: function(_, color) {
      var t2, t3, t4, newSpan, _this = this,
        t1 = !!_this.$isSourceSpanWithContext;
      if (!t1 && _this.get$length(_this) === 0)
        return "";
      if (t1 && B.findLineStart(_this.get$context(_this), _this.get$text(_this), _this.get$start(_this).get$column()) != null)
        t1 = _this;
      else {
        t1 = _this.get$start(_this);
        t1 = V.SourceLocation$(t1.get$offset(t1), 0, 0, _this.get$sourceUrl());
        t2 = _this.get$end(_this);
        t2 = t2.get$offset(t2);
        t3 = _this.get$sourceUrl();
        t4 = B.countCodeUnits(_this.get$text(_this), 10);
        t3 = X.SourceSpanWithContext$(t1, V.SourceLocation$(t2, U.Highlighter__lastLineLength(_this.get$text(_this)), t4, t3), _this.get$text(_this), _this.get$text(_this));
        t1 = t3;
      }
      newSpan = U.Highlighter__normalizeEndOfLine(U.Highlighter__normalizeTrailingNewline(U.Highlighter__normalizeNewlines(t1)));
      t1 = newSpan.get$start(newSpan);
      t1 = t1.get$line(t1);
      t2 = newSpan.get$end(newSpan);
      t2 = t2.get$line(t2);
      t3 = newSpan.get$end(newSpan);
      return new U.Highlighter(newSpan, color, t1 != t2, J.toString$0$(t3.get$line(t3)).length + 1, new P.StringBuffer("")).highlight$0(0);
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      return !!J.getInterceptor$(other).$isSourceSpan && _this.get$start(_this).$eq(0, other.get$start(other)) && _this.get$end(_this).$eq(0, other.get$end(other));
    },
    get$hashCode: function(_) {
      var t2, _this = this,
        t1 = _this.get$start(_this);
      t1 = t1.get$hashCode(t1);
      t2 = _this.get$end(_this);
      return t1 + 31 * t2.get$hashCode(t2);
    },
    toString$0: function(_) {
      var _this = this;
      return "<" + H.getRuntimeType(_this).toString$0(0) + ": from " + _this.get$start(_this).toString$0(0) + " to " + _this.get$end(_this).toString$0(0) + ' "' + _this.get$text(_this) + '">';
    },
    $isComparable: 1,
    $asComparable: function() {
      return [V.SourceSpan];
    },
    $isSourceSpan: 1
  };
  X.SourceSpanWithContext.prototype = {
    get$context: function(_) {
      return this._context;
    }
  };
  M.SseClient.prototype = {
    close$0: function(_) {
      var _this = this;
      _this._eventSource.close();
      _this._incomingController.close$0(0);
      _this._outgoingController.close$0(0);
      _this._sse_client$_client.close$0(0);
    },
    _onIncomingControlMessage$1: function(message) {
      var data = new P._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(H.interceptedTypeCast(H.interceptedTypeCheck(message, "$isEvent"), "$isMessageEvent").data, true);
      if (J.$eq$(data, "close"))
        this.close$0(0);
      else
        throw H.wrapException(P.UnsupportedError$('Illegal Control Message "' + H.S(data) + '"'));
    },
    _onIncomingMessage$1: function(message) {
      this._incomingController.add$1(0, H.stringTypeCast(C.C_JsonCodec.decode$2$reviver(0, H.stringTypeCast(new P._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(H.interceptedTypeCast(H.interceptedTypeCheck(message, "$isEvent"), "$isMessageEvent").data, true)), null)));
    },
    _onOutgoingDone$0: function() {
      this.close$0(0);
    },
    _onOutgoingMessage$1: function(message) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(null),
        $async$self = this;
      var $async$_onOutgoingMessage$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self._messages.add$1(0, message);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_onOutgoingMessage$1, $async$completer);
    },
    _startPostingMessages$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(null),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, message, e, e0, t2, t3, exception, t4, t5, t1, $async$exception, $async$temp1;
      var $async$_startPostingMessages$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._messages;
              t1 = new P._StreamIterator(new P._ControllerStream(t1, [H.getTypeArgumentByIndex(t1, 0)]), [null]);
              $async$handler = 2;
              t2 = $async$self._logger, t3 = $async$self._sse_client$_client;
            case 5:
              // for condition
              $async$temp1 = H;
              $async$goto = 7;
              return P._asyncAwait(t1.moveNext$0(), $async$_startPostingMessages$0);
            case 7:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 6;
                break;
              }
              message = t1.get$current(t1);
              $async$handler = 9;
              $async$goto = 12;
              return P._asyncAwait(t3._sendUnstreamed$5("POST", $async$self._serverUrl, null, C.C_JsonCodec.encode$2$toEncodable(message, null), null), $async$_startPostingMessages$0);
            case 12:
              // returning from await.
              $async$handler = 2;
              // goto after finally
              $async$goto = 11;
              break;
            case 9:
              // catch
              $async$handler = 8;
              $async$exception = $async$currentError;
              t4 = H.unwrapException($async$exception);
              t5 = J.getInterceptor$(t4);
              if (!!t5.$isJsonUnsupportedObjectError) {
                e = t4;
                t2.log$4(C.Level_WARNING_900, "Unable to encode outgoing message: " + H.S(e), null, null);
              } else if (!!t5.$isArgumentError) {
                e0 = t4;
                t2.log$4(C.Level_WARNING_900, "Invalid argument: " + H.S(e0), null, null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 11;
              break;
            case 8:
              // uncaught
              // goto uncaught
              $async$goto = 2;
              break;
            case 11:
              // after finally
              // goto for condition
              $async$goto = 5;
              break;
            case 6:
              // after for
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              $async$goto = 13;
              return P._asyncAwait(t1.cancel$0(0), $async$_startPostingMessages$0);
            case 13:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return P._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$_startPostingMessages$0, $async$completer);
    }
  };
  R.StreamChannelMixin.prototype = {};
  E.StringScannerException.prototype = {
    get$source: function(_) {
      return G.SourceSpanFormatException.prototype.get$source.call(this, this);
    }
  };
  X.StringScanner.prototype = {
    get$lastMatch: function() {
      var _this = this;
      if (_this._string_scanner$_position !== _this._lastMatchPosition)
        _this._lastMatch = null;
      return _this._lastMatch;
    },
    scan$1: function(pattern) {
      var success, _this = this,
        t1 = _this._lastMatch = J.matchAsPrefix$2$s(pattern, _this.string, _this._string_scanner$_position);
      _this._lastMatchPosition = _this._string_scanner$_position;
      success = t1 != null;
      if (success)
        _this._lastMatchPosition = _this._string_scanner$_position = t1.get$end(t1);
      return success;
    },
    expect$2$name: function(pattern, $name) {
      var t1;
      if (this.scan$1(pattern))
        return;
      if ($name == null) {
        t1 = J.getInterceptor$(pattern);
        if (!!t1.$isRegExp)
          $name = "/" + H.S(pattern.pattern) + "/";
        else {
          t1 = t1.toString$0(pattern);
          t1 = H.stringReplaceAllUnchecked(t1, "\\", "\\\\");
          $name = '"' + H.stringReplaceAllUnchecked(t1, '"', '\\"') + '"';
        }
      }
      this.error$3$length$position(0, "expected " + $name + ".", 0, this._string_scanner$_position);
    },
    expect$1: function(pattern) {
      return this.expect$2$name(pattern, null);
    },
    expectDone$0: function() {
      var t1 = this._string_scanner$_position;
      if (t1 === this.string.length)
        return;
      this.error$3$length$position(0, "expected no more input.", 0, t1);
    },
    error$3$length$position: function(_, message, $length, position) {
      var t2, t3, t4, t5, sourceFile, end,
        t1 = this.string;
      if (position < 0)
        H.throwExpression(P.RangeError$("position must be greater than or equal to 0."));
      else if (position > t1.length)
        H.throwExpression(P.RangeError$("position must be less than or equal to the string length."));
      t2 = position + $length > t1.length;
      if (t2)
        H.throwExpression(P.RangeError$("position plus length must not go beyond the end of the string."));
      t2 = this.sourceUrl;
      t3 = new H.CodeUnits(t1);
      t4 = H.setRuntimeTypeInfo([0], [P.int]);
      t5 = new Uint32Array(H._ensureNativeList(t3.toList$0(t3)));
      sourceFile = new Y.SourceFile(t2, t4, t5);
      sourceFile.SourceFile$decoded$2$url(t3, t2);
      end = position + $length;
      if (end > t5.length)
        H.throwExpression(P.RangeError$("End " + end + " must not be greater than the number of characters in the file, " + sourceFile.get$length(sourceFile) + "."));
      else if (position < 0)
        H.throwExpression(P.RangeError$("Start may not be negative, was " + position + "."));
      throw H.wrapException(new E.StringScannerException(t1, message, new Y._FileSpan(sourceFile, position, end)));
    }
  };
  F.Uuid.prototype = {
    Uuid$1$options: function(_box_0) {
      var t1, t2, i, hex, t3, v1PositionalArgs, v1NamedArgs, _this = this,
        _s19_ = "v1rngPositionalArgs",
        _s14_ = "v1rngNamedArgs",
        _s18_ = "grngPositionalArgs",
        _s13_ = "grngNamedArgs",
        options = _box_0.options;
      if (!(options != null))
        options = new H.JsLinkedHashMap([P.String, null]);
      _box_0.options = options;
      t1 = new Array(256);
      t1.fixed$length = Array;
      t2 = P.String;
      _this.set$_byteToHex(H.setRuntimeTypeInfo(t1, [t2]));
      t1 = P.int;
      _this.set$_hexToByte(new H.JsLinkedHashMap([t2, t1]));
      for (t1 = [t1], t2 = [P.List, P.int], i = 0; i < 256; ++i) {
        hex = H.setRuntimeTypeInfo([], t1);
        C.JSArray_methods.add$1(hex, i);
        t3 = _this._byteToHex;
        H.assertSubtypeOfRuntimeType(hex, t2);
        (t3 && C.JSArray_methods).$indexSet(t3, i, C.C_HexCodec.get$encoder().convert$1(hex));
        _this._hexToByte.$indexSet(0, _this._byteToHex[i], i);
      }
      v1PositionalArgs = _box_0.options.$index(0, _s19_) != null ? _box_0.options.$index(0, _s19_) : [];
      v1NamedArgs = _box_0.options.$index(0, _s14_) != null ? H.subtypeCast(_box_0.options.$index(0, _s14_), "$isMap", [P.Symbol0, null], "$asMap") : C.Map_empty0;
      _this._seedBytes = _box_0.options.$index(0, "v1rng") != null ? P.Function_apply(H.interceptedTypeCheck(_box_0.options.$index(0, "v1rng"), "$isFunction"), H.listTypeCheck(v1PositionalArgs), v1NamedArgs) : U.UuidUtil_mathRNG();
      if (_box_0.options.$index(0, _s18_) != null)
        _box_0.options.$index(0, _s18_);
      if (_box_0.options.$index(0, _s13_) != null)
        H.subtypeCast(_box_0.options.$index(0, _s13_), "$isMap", [P.Symbol0, null], "$asMap");
      _this._nodeId = [J.$or$bn(J.$index$asx(_this._seedBytes, 0), 1), J.$index$asx(_this._seedBytes, 1), J.$index$asx(_this._seedBytes, 2), J.$index$asx(_this._seedBytes, 3), J.$index$asx(_this._seedBytes, 4), J.$index$asx(_this._seedBytes, 5)];
      _this._clockSeq = J.$and$bn(J.$or$bn(J.$shl$n(J.$index$asx(_this._seedBytes, 6), 8), J.$index$asx(_this._seedBytes, 7)), 262143);
    },
    v1$0: function() {
      var t2, buf, options, clockSeq, mSecs, nSecs, dt, t3, tl, tmh, node, n, _this = this,
        _s8_ = "clockSeq",
        _s5_ = "nSecs",
        t1 = new Array(16);
      t1.fixed$length = Array;
      t2 = P.int;
      buf = H.setRuntimeTypeInfo(t1, [t2]);
      options = new H.JsLinkedHashMap([P.String, null]);
      clockSeq = options.$index(0, _s8_) != null ? options.$index(0, _s8_) : _this._clockSeq;
      mSecs = options.$index(0, "mSecs") != null ? options.$index(0, "mSecs") : Date.now();
      nSecs = options.$index(0, _s5_) != null ? options.$index(0, _s5_) : _this._lastNSecs + 1;
      t1 = J.getInterceptor$n(mSecs);
      dt = J.$add$ansx(t1.$sub(mSecs, _this._lastMSecs), J.$div$n(J.$sub$n(nSecs, _this._lastNSecs), 10000));
      t3 = J.getInterceptor$n(dt);
      if (t3.$lt(dt, 0) && options.$index(0, _s8_) == null)
        clockSeq = J.$and$bn(J.$add$ansx(clockSeq, 1), 16383);
      if ((t3.$lt(dt, 0) || t1.$gt(mSecs, _this._lastMSecs)) && options.$index(0, _s5_) == null)
        nSecs = 0;
      if (J.$ge$n(nSecs, 10000))
        throw H.wrapException(P.Exception_Exception("uuid.v1(): Can't create more than 10M uuids/sec"));
      H.intTypeCheck(mSecs);
      _this._lastMSecs = mSecs;
      H.intTypeCheck(nSecs);
      _this._lastNSecs = nSecs;
      _this._clockSeq = clockSeq;
      mSecs += 122192928e5;
      tl = C.JSInt_methods.$mod((mSecs & 268435455) * 10000 + nSecs, 4294967296);
      C.JSArray_methods.$indexSet(buf, 0, C.JSInt_methods._shrOtherPositive$1(tl, 24) & 255);
      C.JSArray_methods.$indexSet(buf, 1, C.JSInt_methods._shrOtherPositive$1(tl, 16) & 255);
      C.JSArray_methods.$indexSet(buf, 2, C.JSInt_methods._shrOtherPositive$1(tl, 8) & 255);
      C.JSArray_methods.$indexSet(buf, 3, tl & 255);
      tmh = C.JSDouble_methods.floor$0(mSecs / 4294967296 * 10000) & 268435455;
      C.JSArray_methods.$indexSet(buf, 4, tmh >>> 8 & 255);
      C.JSArray_methods.$indexSet(buf, 5, tmh & 255);
      C.JSArray_methods.$indexSet(buf, 6, tmh >>> 24 & 15 | 16);
      C.JSArray_methods.$indexSet(buf, 7, tmh >>> 16 & 255);
      t1 = J.getInterceptor$n(clockSeq);
      C.JSArray_methods.$indexSet(buf, 8, H.intTypeCheck(J.$or$bn(t1.$shr(clockSeq, 8), 128)));
      C.JSArray_methods.$indexSet(buf, 9, H.intTypeCheck(t1.$and(clockSeq, 255)));
      node = options.$index(0, "node") != null ? options.$index(0, "node") : _this._nodeId;
      for (t1 = J.getInterceptor$asx(node), n = 0; n < 6; ++n)
        C.JSArray_methods.$indexSet(buf, 10 + n, H.intTypeCheck(t1.$index(node, n)));
      H.assertSubtype(buf, "$isList", [t2], "$asList");
      t1 = _this._byteToHex;
      t1 = H.S((t1 && C.JSArray_methods).$index(t1, buf[0]));
      t2 = _this._byteToHex;
      t2 = t1 + H.S((t2 && C.JSArray_methods).$index(t2, buf[1]));
      t1 = _this._byteToHex;
      t1 = t2 + H.S((t1 && C.JSArray_methods).$index(t1, buf[2]));
      t2 = _this._byteToHex;
      t2 = t1 + H.S((t2 && C.JSArray_methods).$index(t2, buf[3])) + "-";
      t1 = _this._byteToHex;
      t1 = t2 + H.S((t1 && C.JSArray_methods).$index(t1, buf[4]));
      t2 = _this._byteToHex;
      t2 = t1 + H.S((t2 && C.JSArray_methods).$index(t2, buf[5])) + "-";
      t1 = _this._byteToHex;
      t1 = t2 + H.S((t1 && C.JSArray_methods).$index(t1, buf[6]));
      t2 = _this._byteToHex;
      t2 = t1 + H.S((t2 && C.JSArray_methods).$index(t2, buf[7])) + "-";
      t1 = _this._byteToHex;
      t1 = t2 + H.S((t1 && C.JSArray_methods).$index(t1, buf[8]));
      t2 = _this._byteToHex;
      t2 = t1 + H.S((t2 && C.JSArray_methods).$index(t2, buf[9])) + "-";
      t1 = _this._byteToHex;
      t1 = t2 + H.S((t1 && C.JSArray_methods).$index(t1, buf[10]));
      t2 = _this._byteToHex;
      t2 = t1 + H.S((t2 && C.JSArray_methods).$index(t2, buf[11]));
      t1 = _this._byteToHex;
      t1 = t2 + H.S((t1 && C.JSArray_methods).$index(t1, buf[12]));
      t2 = _this._byteToHex;
      t2 = t1 + H.S((t2 && C.JSArray_methods).$index(t2, buf[13]));
      t1 = _this._byteToHex;
      t1 = t2 + H.S((t1 && C.JSArray_methods).$index(t1, buf[14]));
      t2 = _this._byteToHex;
      return t1 + H.S((t2 && C.JSArray_methods).$index(t2, buf[15]));
    },
    set$_byteToHex: function(_byteToHex) {
      this._byteToHex = H.assertSubtype(_byteToHex, "$isList", [P.String], "$asList");
    },
    set$_hexToByte: function(_hexToByte) {
      this._hexToByte = H.assertSubtype(_hexToByte, "$isMap", [P.String, P.int], "$asMap");
    }
  };
  D.main_closure.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.Null),
        t1, t2, t3, t4, client, clientId, restarter, manager;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (self.$dartAppInstanceId == null) {
                t1 = F.Uuid$().v1$0();
                self.$dartAppInstanceId = t1;
              }
              t1 = P.String;
              t2 = P.StreamController_StreamController(t1);
              t3 = P.StreamController_StreamController(t1);
              t4 = new O.BrowserClient(P.LinkedHashSet_LinkedHashSet(W.HttpRequest));
              t4.withCredentials = true;
              client = new M.SseClient(t2, t3, t4, N.Logger_Logger("SseClient"), P.StreamController_StreamController(null));
              clientId = F.Uuid$().v1$0();
              client._eventSource = W.EventSource__factoryEventSource("/$sseHandler?sseClientId=" + clientId, P.LinkedHashMap_LinkedHashMap$_literal(["withCredentials", true], t1, null));
              client._serverUrl = "/$sseHandler?sseClientId=" + clientId;
              t1 = H.getTypeArgumentByIndex(t3, 0);
              new P._ControllerStream(t3, [t1]).listen$2$onDone(client.get$_onOutgoingMessage(), client.get$_onOutgoingDone());
              C.EventSource_methods.addEventListener$2(client._eventSource, "message", client.get$_onIncomingMessage());
              C.EventSource_methods.addEventListener$2(client._eventSource, "control", client.get$_onIncomingControlMessage());
              t4 = W.Event;
              W._EventStreamSubscription$(client._eventSource, "error", H.functionTypeCheck(t2.get$addError(), {func: 1, ret: -1, args: [t4]}), false, t4);
              client._startPostingMessages$0();
              t4 = new W._EventStream(client._eventSource, "open", false, [t4]);
              $async$goto = 2;
              return P._asyncAwait(t4.get$first(t4), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = J.$eq$(self.$dartModuleStrategy, "require") ? 3 : 5;
              break;
            case 3:
              // then
              $async$goto = 6;
              return P._asyncAwait(X.RequireRestarter_create(), $async$call$0);
            case 6:
              // returning from await.
              restarter = $async$result;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              if (J.$eq$(self.$dartModuleStrategy, "dart_library.import"))
                restarter = new Z.LegacyRestarter();
              else
                throw H.wrapException(P.StateError$("Unknown module strategy: " + H.S(self.$dartModuleStrategy)));
            case 4:
              // join
              manager = new Q.ReloadingManager(client, self.$dartAppId, self.$dartAppInstanceId, restarter);
              t4 = P.allowInterop(new D.main__closure(manager), {func: 1, ret: [S.Promise, -2]});
              self.$dartHotRestart = t4;
              t4 = P.allowInterop(new D.main__closure0(client), {func: 1, ret: -1});
              self.$launchDevTools = t4;
              new P._ControllerStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).listen$2$onError(new D.main__closure1(manager, client), new D.main__closure2());
              t2 = W.KeyboardEvent;
              W._EventStreamSubscription$(window, "keydown", H.functionTypeCheck(new D.main__closure3(), {func: 1, ret: -1, args: [t2]}), false, t2);
              if (D._isChrome()) {
                t2 = $.$get$serializers();
                t4 = new E.ConnectRequestBuilder();
                H.functionTypeCheck(new D.main__closure4(), {func: 1, ret: -1, args: [E.ConnectRequestBuilder]}).call$1(t4);
                t3.add$1(0, H.assertSubtypeOfRuntimeType(C.C_JsonCodec.encode$2$toEncodable(t2.serialize$1(t4.build$0()), null), t1));
              } else
                self.$dartRunMain.call$0();
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 92
  };
  D.main__closure.prototype = {
    call$0: function() {
      return S.toPromise(this.manager.hotRestart$0(), P.bool);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 62
  };
  D.main__closure0.prototype = {
    call$0: function() {
      var t1, t2, t3;
      if (!D._isChrome()) {
        window.alert("Dart DevTools is only supported on Chrome");
        return;
      }
      t1 = this.client._outgoingController;
      t2 = $.$get$serializers();
      t3 = new M.DevToolsRequestBuilder();
      H.functionTypeCheck(new D.main___closure0(), {func: 1, ret: -1, args: [M.DevToolsRequestBuilder]}).call$1(t3);
      t1.add$1(0, H.assertSubtypeOfRuntimeType(C.C_JsonCodec.encode$2$toEncodable(t2.serialize$1(t3.build$0()), null), H.getTypeArgumentByIndex(t1, 0)));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  D.main___closure0.prototype = {
    call$1: function(b) {
      var t1 = H.stringTypeCheck(self.$dartAppId);
      b.get$_devtools_request$_$this()._devtools_request$_appId = t1;
      t1 = H.stringTypeCheck(self.$dartAppInstanceId);
      b.get$_devtools_request$_$this()._devtools_request$_instanceId = t1;
      return b;
    },
    $signature: 63
  };
  D.main__closure1.prototype = {
    call$1: function(serialized) {
      return this.$call$body$main__closure(H.stringTypeCheck(serialized));
    },
    $call$body$main__closure: function(serialized) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.Null),
        $async$self = this, t3, t1, $event, t2;
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$serializers();
              $event = t1.deserialize$1(C.C_JsonCodec.decode$2$reviver(0, serialized, null));
              t2 = J.getInterceptor$($event);
              $async$goto = !!t2.$isDefaultBuildResult ? 2 : 4;
              break;
            case 2:
              // then
              $async$goto = J.$eq$(self.$dartReloadConfiguration, "ReloadConfiguration.liveReload") ? 5 : 7;
              break;
            case 5:
              // then
              window.location.reload();
              // goto join
              $async$goto = 6;
              break;
            case 7:
              // else
              $async$goto = J.$eq$(self.$dartReloadConfiguration, "ReloadConfiguration.hotRestart") ? 8 : 10;
              break;
            case 8:
              // then
              $async$goto = 11;
              return P._asyncAwait($async$self.manager.hotRestart$0(), $async$call$1);
            case 11:
              // returning from await.
              // goto join
              $async$goto = 9;
              break;
            case 10:
              // else
              if (J.$eq$(self.$dartReloadConfiguration, "ReloadConfiguration.hotReload"))
                P.print("Hot reload is currently unsupported. Ignoring change.");
            case 9:
              // join
            case 6:
              // join
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              if (!!t2.$isDevToolsResponse) {
                if (!H.boolConversionCheck($event.success))
                  window.alert("DevTools failed to open with: " + H.S($event.error));
              } else if (!!t2.$isRunRequest) {
                t2 = $async$self.client._outgoingController;
                t3 = new A.RunResponseBuilder();
                H.functionTypeCheck(new D.main___closure(), {func: 1, ret: -1, args: [A.RunResponseBuilder]}).call$1(t3);
                t2.add$1(0, H.assertSubtypeOfRuntimeType(C.C_JsonCodec.encode$2$toEncodable(t1.serialize$1(t3.build$0()), null), H.getTypeArgumentByIndex(t2, 0)));
                self.$dartRunMain.call$0();
              } else if (!!t2.$isErrorResponse) {
                t1 = "Error from backend:\n\nError: " + H.S($event.error) + "\n\nStack Trace:\n" + H.S($event.stackTrace);
                if (typeof console != "undefined")
                  window.console.error(t1);
              }
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 64
  };
  D.main___closure.prototype = {
    call$1: function(b) {
      var t1 = H.stringTypeCheck(self.$dartAppId);
      b.get$_run_request$_$this()._run_request$_appId = t1;
      t1 = H.stringTypeCheck(self.$dartAppInstanceId);
      b.get$_run_request$_$this()._run_request$_instanceId = t1;
      return b;
    },
    $signature: 65
  };
  D.main__closure2.prototype = {
    call$1: function(error) {
    },
    $signature: 12
  };
  D.main__closure3.prototype = {
    call$1: function(e) {
      if (!!J.getInterceptor$(e).$isKeyboardEvent && C.JSArray_methods.contains$1(C.List_zgw, e.key) && H.boolConversionCheck(e.altKey) && !H.boolConversionCheck(e.ctrlKey) && !H.boolConversionCheck(e.metaKey)) {
        e.preventDefault();
        self.$launchDevTools.call$0();
      }
    },
    $signature: 91
  };
  D.main__closure4.prototype = {
    call$1: function(b) {
      var t1 = H.stringTypeCheck(self.$dartAppId);
      b.get$_$this()._appId = t1;
      t1 = H.stringTypeCheck(self.$dartAppInstanceId);
      b.get$_$this()._instanceId = t1;
      return b;
    },
    $signature: 67
  };
  D.main_closure0.prototype = {
    call$2: function(error, stackTrace) {
      P.print("Unhandled error detected in the injected client.js script.\n\nYou can disable this script in webdev by passing --no-injected-client if it\nis preventing your app from loading, but note that this will also prevent\nall debugging and hot reload/restart functionality from working.\n\nThe original error is below, please file an issue at\nhttps://github.com/dart-lang/webdev/issues/new and attach this output:\n\n" + H.S(error) + "\n" + H.S(stackTrace) + "\n");
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 6
  };
  Z.LegacyRestarter.prototype = {
    restart$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.bool),
        $async$returnValue;
      var $async$restart$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              H.interceptedTypeCast($.$get$context().$index(0, "dart_library"), "$isJsObject").callMethod$1("reload");
              $async$returnValue = true;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$restart$0, $async$completer);
    },
    $isRestarter: 1
  };
  Q.ReloadingManager.prototype = {
    hotRestart$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.bool),
        $async$returnValue, $async$self = this, result;
      var $async$hotRestart$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self._beforeRestart$0();
              $async$goto = 3;
              return P._asyncAwait($async$self._restarter.restart$0(), $async$hotRestart$0);
            case 3:
              // returning from await.
              result = $async$result;
              $async$self._afterRestart$0();
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$hotRestart$0, $async$completer);
    },
    _afterRestart$0: function() {
      var t1 = this._client._outgoingController,
        t2 = $.$get$serializers(),
        t3 = new M.IsolateStartBuilder();
      H.functionTypeCheck(new Q.ReloadingManager__afterRestart_closure(this), {func: 1, ret: -1, args: [M.IsolateStartBuilder]}).call$1(t3);
      t1.add$1(0, H.assertSubtypeOfRuntimeType(C.C_JsonCodec.encode$2$toEncodable(t2.serialize$1(t3.build$0()), null), H.getTypeArgumentByIndex(t1, 0)));
    },
    _beforeRestart$0: function() {
      var t1 = this._client._outgoingController,
        t2 = $.$get$serializers(),
        t3 = new M.IsolateExitBuilder();
      H.functionTypeCheck(new Q.ReloadingManager__beforeRestart_closure(this), {func: 1, ret: -1, args: [M.IsolateExitBuilder]}).call$1(t3);
      t1.add$1(0, H.assertSubtypeOfRuntimeType(C.C_JsonCodec.encode$2$toEncodable(t2.serialize$1(t3.build$0()), null), H.getTypeArgumentByIndex(t1, 0)));
    }
  };
  Q.ReloadingManager__afterRestart_closure.prototype = {
    call$1: function(b) {
      var t1 = this.$this;
      b.get$_isolate_events$_$this()._isolate_events$_appId = t1._manager$_appId;
      b.get$_isolate_events$_$this()._isolate_events$_instanceId = t1._appInstanceId;
      return b;
    },
    $signature: 68
  };
  Q.ReloadingManager__beforeRestart_closure.prototype = {
    call$1: function(b) {
      var t1 = this.$this;
      b.get$_isolate_events$_$this()._isolate_events$_appId = t1._manager$_appId;
      b.get$_isolate_events$_$this()._isolate_events$_instanceId = t1._appInstanceId;
      return b;
    },
    $signature: 69
  };
  G.Library.prototype = {};
  G.Module.prototype = {
    onDestroy$0: function() {
      var t1, t2, t3,
        data = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.Object);
      for (t1 = this.libraries, t2 = t1.get$keys(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        data.$indexSet(0, t3, t1.$index(0, t3).onDestroy$0());
      }
      return data;
    },
    onSelfUpdate$1: function(data) {
      var t1, t2, result, t3, success;
      H.assertSubtype(data, "$isMap", [P.String, P.Object], "$asMap");
      for (t1 = this.libraries, t2 = t1.get$keys(t1), t2 = t2.get$iterator(t2), result = true; t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        success = t1.$index(0, t3).onSelfUpdate$1(data.$index(0, t3));
        if (success === false)
          return false;
        else if (success == null)
          result = success;
      }
      return result;
    },
    onChildUpdate$3: function(childId, child, data) {
      var t1, t2, t3, result, t4, t5, t6, success;
      H.assertSubtype(data, "$isMap", [P.String, P.Object], "$asMap");
      for (t1 = this.libraries, t2 = t1.get$keys(t1), t2 = t2.get$iterator(t2), t3 = child.libraries, result = true; t2.moveNext$0();) {
        t4 = t2.get$current(t2);
        for (t5 = t3.get$keys(t3), t5 = t5.get$iterator(t5); t5.moveNext$0();) {
          t6 = t5.get$current(t5);
          success = t1.$index(0, t4).onChildUpdate$3(t6, t3.$index(0, t6), data.$index(0, t6));
          if (success === false)
            return false;
          else if (success == null)
            result = success;
        }
      }
      return result;
    }
  };
  S.Promise.prototype = {};
  S.toPromise_closure.prototype = {
    call$2: function(resolve, reject) {
      H.functionTypeCheck(resolve, {func: 1, ret: -1, args: [this.T]});
      H.functionTypeCheck(reject, {func: 1, ret: -1, args: [,]});
      this.future.then$1$1(0, resolve, -1).catchError$1(reject);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: function() {
      return {func: 1, ret: P.Null, args: [{func: 1, ret: -1, args: [this.T]}, {func: 1, ret: -1, args: [,]}]};
    }
  };
  X.DartLoader.prototype = {};
  X.HotReloadableLibrary.prototype = {};
  X.HotReloadFailedException.prototype = {
    toString$0: function(_) {
      return "HotReloadFailedException: '" + H.S(this._s) + "'";
    },
    $isException: 1
  };
  X.JsError.prototype = {};
  X.JsMap.prototype = {};
  X.LibraryWrapper.prototype = {
    onChildUpdate$3: function(childId, child, data) {
      var t1 = this._internal;
      if (t1 != null && "hot$onChildUpdate" in t1)
        return J.hot$onChildUpdate$3$x(t1, childId, child._internal, data);
      return;
    },
    onDestroy$0: function() {
      var t1 = this._internal;
      if (t1 != null && "hot$onDestroy" in t1)
        return J.hot$onDestroy$0$x(t1);
      return;
    },
    onSelfUpdate$1: function(data) {
      var t1 = this._internal;
      if (t1 != null && "hot$onSelfUpdate" in t1)
        return J.hot$onSelfUpdate$1$x(t1, data);
      return;
    },
    $isLibrary: 1
  };
  X.RequireRestarter.prototype = {
    restart$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.bool),
        $async$returnValue, $async$self = this, t2, t3, completer, newDigests, modulesToLoad, servePath, parts, jsUri, moduleName, line, result, developer, t1;
      var $async$restart$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                developer = self.$loadModuleConfig.call$1("dart_sdk").developer;
                t1 = developer._extensions;
                $async$goto = H.boolConversionCheck(H.boolTypeCast(t1.containsKey.apply(t1, ["ext.flutter.disassemble"]))) ? 3 : 4;
                break;
              case 3:
                // then
                t1 = -1;
                t2 = H.subtypeCast(developer.invokeExtension.apply(developer, ["ext.flutter.disassemble", "{}"]), "$isPromise", [t1], "$asPromise");
                t3 = new P._Future($.Zone__current, [t1]);
                completer = new P._AsyncCompleter(t3, [t1]);
                J.then$2$x(t2, P.allowInterop(completer.get$complete(completer), {func: 1, args: [t1]}), P.allowInterop(completer.get$completeError(), {func: 1, args: [,]}));
                $async$goto = 5;
                return P._asyncAwait(t3, $async$restart$0);
              case 5:
                // returning from await.
              case 4:
                // join
                $async$goto = 6;
                return P._asyncAwait($async$self._getDigests$0(), $async$restart$0);
              case 6:
                // returning from await.
                newDigests = $async$result;
                modulesToLoad = H.setRuntimeTypeInfo([], [P.String]);
                for (t1 = J.getInterceptor$x(newDigests), t2 = J.get$iterator$ax(t1.get$keys(newDigests)); t2.moveNext$0();) {
                  servePath = t2.get$current(t2);
                  if (!J.containsKey$1$x($._lastKnownDigests, servePath) || !J.$eq$(J.$index$asx($._lastKnownDigests, servePath), t1.$index(newDigests, servePath))) {
                    J.$indexSet$ax($._lastKnownDigests, servePath, t1.$index(newDigests, servePath));
                    t3 = $.$get$url();
                    parts = t3.split$1(0, servePath);
                    servePath = J.$eq$(C.JSArray_methods.get$first(parts), "packages") ? servePath : t3.joinAll$1(H.SubListIterable$(parts, 1, null, H.getTypeArgumentByIndex(parts, 0)));
                    t3 = window.location;
                    jsUri = (t3 && C.Location_methods).get$origin(t3) + "/" + H.S(servePath);
                    moduleName = J.$get$1$x(J.get$urlToModuleId$x(self.$dartLoader), jsUri);
                    if (moduleName == null) {
                      line = "Error during script reloading, refreshing the page. \nUnable to find an existing module for script " + jsUri + ".";
                      t1 = $.printToZone;
                      if (t1 == null)
                        H.printString(line);
                      else
                        t1.call$1(line);
                      window.location.reload();
                      $async$returnValue = false;
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    C.JSArray_methods.add$1(modulesToLoad, moduleName);
                  }
                }
                $async$goto = modulesToLoad.length !== 0 ? 7 : 8;
                break;
              case 7:
                // then
                $async$self._updateGraph$0();
                $async$goto = 9;
                return P._asyncAwait($async$self._reload$1(modulesToLoad), $async$restart$0);
              case 9:
                // returning from await.
                result = $async$result;
                if (result == null) {
                  t1 = self.$loadModuleConfig.call$1("dart_sdk").dart;
                  t1.hotRestart.apply(t1, []);
                  result = true;
                }
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 8:
                // join
                t1 = self.$loadModuleConfig.call$1("dart_sdk").dart;
                t1.hotRestart.apply(t1, []);
                $async$returnValue = true;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return P._asyncStartSync($async$restart$0, $async$completer);
    },
    _getDigests$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter([P.Map, P.String, P.String]),
        $async$returnValue, t1, $async$temp1, $async$temp2, $async$temp3;
      var $async$_getDigests$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = P.String;
              $async$temp1 = J;
              $async$temp2 = H;
              $async$temp3 = W;
              $async$goto = 3;
              return P._asyncAwait(W.HttpRequest_request(J.get$appDigests$x(self.$dartLoader), "GET", "json"), $async$_getDigests$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.cast$2$0$ax($async$temp2.interceptedTypeCast($async$temp3._convertNativeToDart_XHR_Response($async$result.response), "$isMap"), t1, t1);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_getDigests$0, $async$completer);
    },
    _initialize$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(-1),
        $async$self = this, $async$temp1;
      var $async$_initialize$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = $;
              $async$goto = 2;
              return P._asyncAwait($async$self._getDigests$0(), $async$_initialize$0);
            case 2:
              // returning from await.
              $async$temp1._lastKnownDigests = $async$result;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_initialize$0, $async$completer);
    },
    _moduleLibraries$1: function(moduleId) {
      var t1, moduleKeys, moduleValues, t2, t3, t4, map,
        moduleObj = J.getModuleLibraries$1$x(self.$dartLoader, moduleId);
      if (moduleObj == null)
        throw H.wrapException(X.HotReloadFailedException$("Failed to get module '" + H.S(moduleId) + "'. This error might appear if such module doesn't exist or isn't already loaded"));
      t1 = P.String;
      moduleKeys = P.List_List$from(self.Object.keys(moduleObj), true, t1);
      moduleValues = P.List_List$from(self.Object.values(moduleObj), true, X.HotReloadableLibrary);
      t2 = X.LibraryWrapper;
      t3 = H.getTypeArgumentByIndex(moduleValues, 0);
      t4 = H.functionTypeCheck(new X.RequireRestarter__moduleLibraries_closure(), {func: 1, ret: t2, args: [t3]});
      map = P.LinkedHashMap_LinkedHashMap(null, null, t1, G.Library);
      P.MapBase__fillMapWithIterables(map, moduleKeys, new H.MappedListIterable(moduleValues, t4, [t3, t2]));
      return new G.Module(map);
    },
    _moduleParents$1: function(module) {
      var t1;
      H.stringTypeCheck(module);
      t1 = J.$get$1$x(J.get$moduleParentsGraph$x(self.$dartLoader), module);
      return t1 == null ? null : J.cast$1$0$ax(t1, P.String);
    },
    _moduleTopologicalCompare$2: function(module1, module2) {
      var t1, order1, order2, t2, topological;
      H.stringTypeCheck(module1);
      H.stringTypeCheck(module2);
      t1 = this._moduleOrdering;
      order1 = t1.$index(0, module1);
      order2 = t1.$index(0, module2);
      t2 = order1 == null;
      if (t2 || order2 == null)
        throw H.wrapException(X.HotReloadFailedException$("Unable to fetch ordering info for module: " + H.S(t2 ? module1 : module2)));
      topological = J.compareTo$1$ns(t1.$index(0, module2), t1.$index(0, module1));
      return topological === 0 ? J.compareTo$1$ns(module1, module2) : topological;
    },
    _reload$1: function(modules) {
      return this._reload$body$RequireRestarter(H.assertSubtype(modules, "$isList", [P.String], "$asList"));
    },
    _reload$body$RequireRestarter: function(modules) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.bool),
        $async$returnValue, $async$self = this, t1, t2;
      var $async$_reload$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self._dirtyModules.addAll$1(0, modules);
              t1 = $async$self._running.future;
              $async$goto = t1._state === 0 ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return P._asyncAwait(t1, $async$_reload$1);
            case 5:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
              t1 = P.bool;
              $async$self.set$_running(new P._AsyncCompleter(new P._Future($.Zone__current, [t1]), [t1]));
              t1 = new X.RequireRestarter__reload_closure($async$self).call$0();
              t2 = $async$self._running;
              J.then$1$1$x(t1, t2.get$complete(t2), -1).catchError$1($async$self._running.get$completeError());
              $async$returnValue = $async$self._running.future;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_reload$1, $async$completer);
    },
    _reloadModule$1: function(moduleId) {
      var t1 = G.Module,
        t2 = new P._Future($.Zone__current, [t1]),
        completer = new P._AsyncCompleter(t2, [t1]),
        stackTrace = P.StackTrace_current();
      J.forceLoadModule$3$x(self.$dartLoader, moduleId, P.allowInterop(new X.RequireRestarter__reloadModule_closure(this, completer, moduleId), {func: 1, ret: -1}), P.allowInterop(new X.RequireRestarter__reloadModule_closure0(completer, stackTrace), {func: 1, ret: -1, args: [X.JsError]}));
      return t2;
    },
    _updateGraph$0: function() {
      var i, t3, _i,
        t1 = P.String,
        t2 = J.keys$0$x(J.get$moduleParentsGraph$x(self.$dartLoader)),
        stronglyConnectedComponents = L.stronglyConnectedComponents(P.List_List$from(self.Array.from(t2), true, t1), this.get$_moduleParents(), t1);
      t1 = this._moduleOrdering;
      if (t1._collection$_length > 0) {
        t1._collection$_strings = t1._collection$_nums = t1._collection$_rest = t1._keys = null;
        t1._collection$_length = 0;
      }
      for (i = 0; i < stronglyConnectedComponents.length; ++i)
        for (t2 = stronglyConnectedComponents[i], t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
          t1.$indexSet(0, t2[_i], i);
    },
    set$_dirtyModules: function(_dirtyModules) {
      this._dirtyModules = H.assertSubtype(_dirtyModules, "$isSplayTreeSet", [P.String], "$asSplayTreeSet");
    },
    set$_running: function(_running) {
      this._running = H.assertSubtype(_running, "$isCompleter", [P.bool], "$asCompleter");
    },
    $isRestarter: 1
  };
  X.RequireRestarter__moduleLibraries_closure.prototype = {
    call$1: function(x) {
      return new X.LibraryWrapper(H.interceptedTypeCheck(x, "$isHotReloadableLibrary"));
    },
    $signature: 72
  };
  X.RequireRestarter__reload_closure.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.bool),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, moduleId, existing, data, newVersion, success, parentIds, parentId, parentModule, e, t1, t2, t3, t4, line, exception, reloadedModules, $async$exception;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                reloadedModules = 0;
                $async$handler = 4;
                t1 = $async$self.$this, t2 = t1.get$_moduleTopologicalCompare(), t3 = P.String;
              case 7:
                // for condition
                if (!(t4 = t1._dirtyModules, t4._root != null)) {
                  // goto after for
                  $async$goto = 8;
                  break;
                }
                if (t4._count === 0)
                  H.throwExpression(H.IterableElementError_noElement());
                moduleId = t4.get$_collection$_first().key;
                t1._dirtyModules.remove$1(0, moduleId);
                t4 = reloadedModules;
                if (typeof t4 !== "number") {
                  $async$returnValue = t4.$add();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                reloadedModules = t4 + 1;
                existing = t1._moduleLibraries$1(moduleId);
                data = existing.onDestroy$0();
                $async$goto = 9;
                return P._asyncAwait(t1._reloadModule$1(moduleId), $async$call$0);
              case 9:
                // returning from await.
                newVersion = $async$result;
                success = newVersion.onSelfUpdate$1(data);
                if (J.$eq$(success, true)) {
                  // goto for condition
                  $async$goto = 7;
                  break;
                }
                if (J.$eq$(success, false)) {
                  line = "Module '" + H.S(moduleId) + "' is marked as unreloadable. Firing full page reload.";
                  t1 = $.printToZone;
                  if (t1 == null)
                    H.printString(line);
                  else
                    t1.call$1(line);
                  window.location.reload();
                  $async$returnValue = false;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t4 = H.stringTypeCheck(moduleId);
                t4 = J.$get$1$x(J.get$moduleParentsGraph$x(self.$dartLoader), t4);
                parentIds = t4 == null ? null : J.cast$1$0$ax(t4, t3);
                if (parentIds == null || J.get$isEmpty$asx(parentIds)) {
                  t1 = $.printToZone;
                  if (t1 == null)
                    H.printString("Module reloading wasn't handled by any of parents. Firing full page reload.");
                  else
                    t1.call$1("Module reloading wasn't handled by any of parents. Firing full page reload.");
                  window.location.reload();
                  $async$returnValue = false;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                J.sort$1$ax(parentIds, t2);
                for (t4 = J.get$iterator$ax(parentIds); t4.moveNext$0();) {
                  parentId = t4.get$current(t4);
                  parentModule = t1._moduleLibraries$1(parentId);
                  success = parentModule.onChildUpdate$3(moduleId, newVersion, data);
                  if (J.endsWith$1$s(parentId, ".dart.bootstrap")) {
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  }
                  if (J.$eq$(success, true))
                    continue;
                  if (J.$eq$(success, false)) {
                    line = "Module '" + H.S(moduleId) + "' is marked as unreloadable. Firing full page reload.";
                    t1 = $.printToZone;
                    if (t1 == null)
                      H.printString(line);
                    else
                      t1.call$1(line);
                    window.location.reload();
                    $async$returnValue = false;
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  }
                  t1._dirtyModules.add$1(0, parentId);
                }
                // goto for condition
                $async$goto = 7;
                break;
              case 8:
                // after for
                P.print(H.S(reloadedModules) + " modules were hot-reloaded.");
                $async$handler = 2;
                // goto after finally
                $async$goto = 6;
                break;
              case 4:
                // catch
                $async$handler = 3;
                $async$exception = $async$currentError;
                t1 = H.unwrapException($async$exception);
                if (t1 instanceof X.HotReloadFailedException) {
                  e = t1;
                  P.print("Error during script reloading. Firing full page reload. " + H.S(e));
                  window.location.reload();
                  $async$returnValue = false;
                  // goto return
                  $async$goto = 1;
                  break;
                } else
                  throw $async$exception;
                // goto after finally
                $async$goto = 6;
                break;
              case 3:
                // uncaught
                // goto rethrow
                $async$goto = 2;
                break;
              case 6:
                // after finally
                $async$returnValue = true;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return P._asyncRethrow($async$currentError, $async$completer);
            }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 73
  };
  X.RequireRestarter__reloadModule_closure.prototype = {
    call$0: function() {
      this.completer.complete$1(0, this.$this._moduleLibraries$1(this.moduleId));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  X.RequireRestarter__reloadModule_closure0.prototype = {
    call$1: function(e) {
      return this.completer.completeError$2(new X.HotReloadFailedException(J.get$message$x(H.interceptedTypeCheck(e, "$isJsError"))), this.stackTrace);
    },
    $signature: 74
  };
  (function aliases() {
    var _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _.super$Interceptor$noSuchMethod = _.noSuchMethod$1;
    _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = H.JsLinkedHashMap.prototype;
    _.super$JsLinkedHashMap$internalContainsKey = _.internalContainsKey$1;
    _.super$JsLinkedHashMap$internalGet = _.internalGet$1;
    _.super$JsLinkedHashMap$internalSet = _.internalSet$2;
    _.super$JsLinkedHashMap$internalRemove = _.internalRemove$1;
    _ = P._BufferingStreamSubscription.prototype;
    _.super$_BufferingStreamSubscription$_add = _._add$1;
    _.super$_BufferingStreamSubscription$_addError = _._addError$2;
    _ = P._HashMap.prototype;
    _.super$_HashMap$_containsKey = _._containsKey$1;
    _.super$_HashMap$_get = _._get$1;
    _.super$_HashMap$_set = _._set$2;
    _ = P._HashSet.prototype;
    _.super$_HashSet$_contains = _._contains$1;
    _.super$_HashSet$_add = _._collection$_add$1;
    _.super$_HashSet$_remove = _._remove$1;
    _ = P.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
    _ = P.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _ = P.Object.prototype;
    _.super$Object$toString = _.toString$0;
    _ = P.JsObject.prototype;
    _.super$JsObject$$index = _.$index;
    _.super$JsObject$$indexSet = _.$indexSet;
    _ = G.BaseRequest.prototype;
    _.super$BaseRequest$finalize = _.finalize$0;
    _ = Y.SourceSpanMixin.prototype;
    _.super$SourceSpanMixin$compareTo = _.compareTo$1;
    _.super$SourceSpanMixin$$eq = _.$eq;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _static = hunkHelpers.installStaticTearOff,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_1_u = hunkHelpers._instance_1u,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_1_i = hunkHelpers._instance_1i,
      _instance_0_i = hunkHelpers._instance_0i,
      _instance_2_i = hunkHelpers._instance_2i;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 17);
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 11);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 11);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 11);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
    _static(P, "async___nullErrorHandler$closure", 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["_nullErrorHandler", function(error) {
      return P._nullErrorHandler(error, null);
    }], 4, 0);
    _static_0(P, "async___nullDoneHandler$closure", "_nullDoneHandler", 0);
    _static(P, "async___rootHandleUncaughtError$closure", 5, null, ["call$5"], ["_rootHandleUncaughtError"], 77, 0);
    _static(P, "async___rootRun$closure", 4, null, ["call$1$4", "call$4"], ["_rootRun", function($self, $parent, zone, f) {
      return P._rootRun($self, $parent, zone, f, null);
    }], 78, 1);
    _static(P, "async___rootRunUnary$closure", 5, null, ["call$2$5", "call$5"], ["_rootRunUnary", function($self, $parent, zone, f, arg) {
      return P._rootRunUnary($self, $parent, zone, f, arg, null, null);
    }], 79, 1);
    _static(P, "async___rootRunBinary$closure", 6, null, ["call$3$6", "call$6"], ["_rootRunBinary", function($self, $parent, zone, f, arg1, arg2) {
      return P._rootRunBinary($self, $parent, zone, f, arg1, arg2, null, null, null);
    }], 80, 1);
    _static(P, "async___rootRegisterCallback$closure", 4, null, ["call$1$4", "call$4"], ["_rootRegisterCallback", function($self, $parent, zone, f) {
      return P._rootRegisterCallback($self, $parent, zone, f, null);
    }], 81, 0);
    _static(P, "async___rootRegisterUnaryCallback$closure", 4, null, ["call$2$4", "call$4"], ["_rootRegisterUnaryCallback", function($self, $parent, zone, f) {
      return P._rootRegisterUnaryCallback($self, $parent, zone, f, null, null);
    }], 82, 0);
    _static(P, "async___rootRegisterBinaryCallback$closure", 4, null, ["call$3$4", "call$4"], ["_rootRegisterBinaryCallback", function($self, $parent, zone, f) {
      return P._rootRegisterBinaryCallback($self, $parent, zone, f, null, null, null);
    }], 83, 0);
    _static(P, "async___rootErrorCallback$closure", 5, null, ["call$5"], ["_rootErrorCallback"], 84, 0);
    _static(P, "async___rootScheduleMicrotask$closure", 4, null, ["call$4"], ["_rootScheduleMicrotask"], 85, 0);
    _static(P, "async___rootCreateTimer$closure", 5, null, ["call$5"], ["_rootCreateTimer"], 86, 0);
    _static(P, "async___rootCreatePeriodicTimer$closure", 5, null, ["call$5"], ["_rootCreatePeriodicTimer"], 87, 0);
    _static(P, "async___rootPrint$closure", 4, null, ["call$4"], ["_rootPrint"], 88, 0);
    _static_1(P, "async___printToZone$closure", "_printToZone", 89);
    _static(P, "async___rootFork$closure", 5, null, ["call$5"], ["_rootFork"], 90, 0);
    _instance(P._Completer.prototype, "get$completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 4, 0);
    _instance(P._AsyncCompleter.prototype, "get$complete", 1, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["complete$1", "complete$0"], 32, 0);
    _instance(P._Future.prototype, "get$_completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["_completeError$2", "_completeError$1"], 4, 0);
    _instance(P._StreamController.prototype, "get$addError", 0, 1, null, ["call$2", "call$1"], ["addError$2", "addError$1"], 4, 0);
    var _;
    _instance_0_u(_ = P._ControllerSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_0_u(_ = P._BufferingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_u(_ = P._StreamIterator.prototype, "get$_async$_onData", "_async$_onData$1", 13);
    _instance(_, "get$_onError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["_onError$2", "_onError$1"], 4, 0);
    _instance_0_u(_, "get$_onDone", "_onDone$0", 0);
    _instance_0_u(_ = P._ForwardingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_u(_, "get$_handleData", "_handleData$1", 13);
    _instance_2_u(_, "get$_handleError", "_handleError$2", 76);
    _instance_0_u(_, "get$_handleDone", "_handleDone$0", 0);
    _static_2(P, "collection___defaultEquals$closure", "_defaultEquals", 30);
    _static_1(P, "collection___defaultHashCode$closure", "_defaultHashCode", 61);
    _static_2(P, "collection_ListMixin__compareAny$closure", "ListMixin__compareAny", 17);
    _static_1(P, "convert___defaultToEncodable$closure", "_defaultToEncodable", 2);
    _instance_1_i(_ = P._ByteCallbackSink.prototype, "get$add", "add$1", 13);
    _instance_0_i(_, "get$close", "close$0", 0);
    _static_1(P, "core__identityHashCode$closure", "identityHashCode", 26);
    _static_2(P, "core__identical$closure", "identical", 25);
    _static_1(P, "core_Uri_decodeComponent$closure", "Uri_decodeComponent", 9);
    _instance_2_i(W.HttpRequest.prototype, "get$setRequestHeader", "setRequestHeader$2", 16);
    _static_1(P, "js___convertToJS$closure", "_convertToJS", 2);
    _static_1(P, "js___convertToDart$closure", "_convertToDart", 3);
    _instance_2_u(_ = U.DeepCollectionEquality.prototype, "get$equals", "equals$2", 25);
    _instance_1_i(_, "get$hash", "hash$1", 26);
    _instance_1_u(_, "get$isValidKey", "isValidKey$1", 27);
    _static_2(L, "strongly_connected_components___defaultEquals$closure", "_defaultEquals0", 30);
    _instance_1_u(_ = M.SseClient.prototype, "get$_onIncomingControlMessage", "_onIncomingControlMessage$1", 29);
    _instance_1_u(_, "get$_onIncomingMessage", "_onIncomingMessage$1", 29);
    _instance_0_u(_, "get$_onOutgoingDone", "_onOutgoingDone$0", 0);
    _instance_1_u(_, "get$_onOutgoingMessage", "_onOutgoingMessage$1", 8);
    _instance_1_u(_ = X.RequireRestarter.prototype, "get$_moduleParents", "_moduleParents$1", 70);
    _instance_2_u(_, "get$_moduleTopologicalCompare", "_moduleTopologicalCompare$2", 71);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, J.Interceptor, J.JSObject, J.ArrayIterator, P.Iterable, H.CastIterator, H.Closure, P.MapMixin, P._ListBase_Object_ListMixin, H.ListIterator, P.Iterator, H.EmptyIterator, H.FixedLengthListMixin, H.UnmodifiableListMixin, H.Symbol, P.MapView, H.ConstantMap, H.JSInvocationMirror, H.TypeErrorDecoder, P.Error, H.ExceptionAndStackTrace, H._StackTrace, H.TypeImpl, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.JSSyntaxRegExp, H._MatchImplementation, H._AllMatchesIterator, H.StringMatch, H._StringAllMatchesIterator, P._TimerImpl, P._AsyncAwaitCompleter, P.Future, P._Completer, P._FutureListener, P._Future, P._AsyncCallbackEntry, P.Stream, P.StreamSubscription, P.StreamTransformerBase, P._StreamController, P._AsyncStreamControllerDispatch, P._BufferingStreamSubscription, P._StreamSinkWrapper, P._PendingEvents, P._DelayedEvent, P._DelayedDone, P._StreamIterator, P.Timer, P.AsyncError, P._ZoneFunction, P.ZoneSpecification, P._ZoneSpecification, P.ZoneDelegate, P.Zone, P._ZoneDelegate, P._Zone, P._HashMapKeyIterator, P._SetBase, P._HashSetIterator, P._LinkedHashSetCell, P._LinkedHashSetIterator, P.IterableMixin, P.ListMixin, P._UnmodifiableMapMixin, P._ListQueueIterator, P.SetMixin, P._SplayTreeNode, P._SplayTree, P._SplayTreeIterator, P.Codec, P._Base64Encoder, P.ChunkedConversionSink, P._JsonStringifier, P._Utf8Encoder, P._Utf8Decoder, P._BigIntImpl, P.BigInt, P.bool, P.DateTime, P.num, P.Duration, P.OutOfMemoryError, P.StackOverflowError, P._Exception, P.FormatException, P.IntegerDivisionByZeroException, P.Function, P.List, P.Map, P.MapEntry, P.Null, P.Match, P.RegExp, P.RegExpMatch, P.StackTrace, P.String, P.StringBuffer, P.Symbol0, P.Type, P.Uri, P._Uri, P.UriData, P._SimpleUri, W.CssStyleDeclarationBase, W.ImmutableListMixin, W.FixedSizeListIterator, P._AcceptStructuredClone, P.JsObject, P._JSRandom, P._RectangleBase, P.ByteBuffer, P.ByteData, P.Int8List, P.Uint8List, P.Uint8ClampedList, P.Int16List, P.Uint16List, P.Int32List, P.Uint32List, P.Float32List, P.Float64List, Y.EnumClass, M.DefaultBuildResult, M._$BuildStatusSerializer, M._$DefaultBuildResultSerializer, M.DefaultBuildResultBuilder, S.BuiltList, S.ListBuilder, M.BuiltListMultimap, M.ListMultimapBuilder, A.BuiltMap, A.MapBuilder, L.BuiltSet, L.SetBuilder, E.BuiltSetMultimap, E.SetMultimapBuilder, Y.IndentingBuiltValueToStringHelper, A.JsonObject, U.SerializerPlugin, U.FullType, U.Serializer, O.BigIntSerializer, R.BoolSerializer, Y.BuiltJsonSerializers, Y.BuiltJsonSerializersBuilder, R.BuiltListMultimapSerializer, K.BuiltListSerializer, K.BuiltMapSerializer, R.BuiltSetMultimapSerializer, O.BuiltSetSerializer, Z.DateTimeSerializer, D.DoubleSerializer, K.DurationSerializer, Q.Int64Serializer, B.IntSerializer, O.JsonObjectSerializer, K.NumSerializer, K.RegExpSerializer, M.StringSerializer, O.UriSerializer, M.CanonicalizedMap, U.DefaultEquality, U.IterableEquality, U.ListEquality, U._UnorderedEquality, U._MapEntry, U.MapEquality, U.DeepCollectionEquality, B.Pair, E.ConnectRequest, E._$ConnectRequestSerializer, E.ConnectRequestBuilder, M.DevToolsRequest, M.DevToolsResponse, M._$DevToolsRequestSerializer, M._$DevToolsResponseSerializer, M.DevToolsRequestBuilder, M.DevToolsResponseBuilder, X.ErrorResponse, X._$ErrorResponseSerializer, X.ErrorResponseBuilder, S.ExtensionRequest, S.ExtensionResponse, S.ExtensionEvent, S._$ExtensionRequestSerializer, S._$ExtensionResponseSerializer, S._$ExtensionEventSerializer, S.ExtensionRequestBuilder, S.ExtensionResponseBuilder, S.ExtensionEventBuilder, M.IsolateExit, M.IsolateStart, M._$IsolateExitSerializer, M._$IsolateStartSerializer, M.IsolateExitBuilder, M.IsolateStartBuilder, A.RunRequest, A.RunResponse, A._$RunRequestSerializer, A._$RunResponseSerializer, A.RunRequestBuilder, A.RunResponseBuilder, V.Int64, E.BaseClient, G.BaseRequest, T.BaseResponse, E.ClientException, R.MediaType, N.Logger, N.Level, N.LogRecord, M.Context, O.Style, X.ParsedPath, X.PathException, Y.SourceFile, D.SourceLocationMixin, Y.SourceSpanMixin, U.Highlighter, V.SourceLocation, V.SourceSpan, G.SourceSpanException, R.StreamChannelMixin, X.StringScanner, F.Uuid, Z.LegacyRestarter, Q.ReloadingManager, G.Library, G.Module, X.HotReloadFailedException, X.LibraryWrapper, X.RequireRestarter]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, H.NativeByteBuffer, H.NativeTypedData, W.EventTarget, W.AccessibleNodeList, W.Blob, W.CssStyleValue, W.CssTransformComponent, W.CssRule, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.DataTransferItemList, W.DomException, W._DomRectList_Interceptor_ListMixin, W.DomRectReadOnly, W._DomStringList_Interceptor_ListMixin, W.DomTokenList, W.Event, W._FileList_Interceptor_ListMixin, W.Gamepad, W.History, W._HtmlCollection_Interceptor_ListMixin, W.ImageData, W.Location, W.MediaList, W._MidiInputMap_Interceptor_MapMixin, W._MidiOutputMap_Interceptor_MapMixin, W.MimeType, W._MimeTypeArray_Interceptor_ListMixin, W._NodeList_Interceptor_ListMixin, W.Plugin, W._PluginArray_Interceptor_ListMixin, W._RtcStatsReport_Interceptor_MapMixin, W.SpeechGrammar, W._SpeechGrammarList_Interceptor_ListMixin, W.SpeechRecognitionResult, W._Storage_Interceptor_MapMixin, W.StyleSheet, W._TextTrackCueList_Interceptor_ListMixin, W.TimeRanges, W.Touch, W._TouchList_Interceptor_ListMixin, W.TrackDefaultList, W.Url, W.__CssRuleList_Interceptor_ListMixin, W.__GamepadList_Interceptor_ListMixin, W.__NamedNodeMap_Interceptor_ListMixin, W.__SpeechRecognitionResultList_Interceptor_ListMixin, W.__StyleSheetList_Interceptor_ListMixin, P.KeyRange, P.Length, P._LengthList_Interceptor_ListMixin, P.Number, P._NumberList_Interceptor_ListMixin, P.PointList, P._StringList_Interceptor_ListMixin, P.Transform, P._TransformList_Interceptor_ListMixin, P.AudioBuffer, P._AudioParamMap_Interceptor_MapMixin, P._SqlResultSetRowList_Interceptor_ListMixin]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction, S.Promise, X.DartLoader, X.HotReloadableLibrary, X.JsError, X.JsMap]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSDouble]);
    _inheritMany(P.Iterable, [H._CastIterableBase, H.EfficientLengthIterable, H.MappedIterable, H.WhereIterable, H.SkipIterable, H._ConstantMapKeyIterable, P.IterableBase, H._StringAllMatchesIterable]);
    _inheritMany(H._CastIterableBase, [H.CastIterable, H.__CastListBase__CastIterableBase_ListMixin]);
    _inherit(H._EfficientLengthCastIterable, H.CastIterable);
    _inherit(H._CastListBase, H.__CastListBase__CastIterableBase_ListMixin);
    _inheritMany(H.Closure, [H._CastListBase_sort_closure, H.CastMap_forEach_closure, H.ConstantMap_map_closure, H.Primitives_functionNoSuchMethod_closure, H.unwrapException_saveStackTrace, H.TearOffClosure, H.JsLinkedHashMap_values_closure, H.JsLinkedHashMap_addAll_closure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._TimerImpl$periodic_closure, P._awaitOnObject_closure, P._awaitOnObject_closure0, P._wrapJsFunctionForAsync_closure, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__asyncComplete_closure, P._Future__chainFuture_closure, P._Future__asyncCompleteError_closure, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P.Stream_Stream$fromIterable_closure, P.Stream_length_closure, P.Stream_length_closure0, P.Stream_first_closure, P.Stream_first_closure0, P._StreamController__subscribe_closure, P._StreamController__recordCancel_complete, P._BufferingStreamSubscription__sendError_sendError, P._BufferingStreamSubscription__sendDone_sendDone, P._PendingEvents_schedule_closure, P._cancelAndValue_closure, P._CustomZone_bindCallback_closure, P._CustomZone_bindUnaryCallback_closure, P._CustomZone_bindCallbackGuarded_closure, P._CustomZone_bindUnaryCallbackGuarded_closure, P._rootHandleUncaughtError_closure, P._RootZone_bindCallback_closure, P._RootZone_bindCallbackGuarded_closure, P._RootZone_bindUnaryCallbackGuarded_closure, P.runZoned_closure, P._HashMap_addAll_closure, P._CustomHashMap_closure, P._LinkedCustomHashMap_closure, P._CustomHashSet_closure, P.LinkedHashMap_LinkedHashMap$from_closure, P.MapBase_mapToString_closure, P.SplayTreeSet_closure, P._JsonMap_addAll_closure, P._JsonStringifier_writeMap_closure, P._symbolMapToStringMap_closure, P.NoSuchMethodError_toString_closure, P._BigIntImpl_hashCode_combine, P._BigIntImpl_hashCode_finish, P._BigIntImpl_toDouble_readBits, P._BigIntImpl_toDouble_roundUp, P.Duration_toString_sixDigits, P.Duration_toString_twoDigits, P.Uri__parseIPv4Address_error, P.Uri_parseIPv6Address_error, P.Uri_parseIPv6Address_parseHex, P._Uri__Uri$notSimple_closure, P._Uri__checkNonWindowsPathReservedCharacters_closure, P._Uri__makePath_closure, P._createTables_closure, P._createTables_build, P._createTables_setChars, P._createTables_setRange, W.HttpRequest_request_closure, W.MidiInputMap_keys_closure, W.MidiOutputMap_keys_closure, W.RtcStatsReport_keys_closure, W.Storage_addAll_closure, W.Storage_keys_closure, W._EventStreamSubscription_closure, P._AcceptStructuredClone_walk_closure, P.convertDartToNative_Dictionary_closure, P.convertNativePromiseToDartFuture_closure, P.convertNativePromiseToDartFuture_closure0, P._convertToJS_closure, P._convertToJS_closure0, P._wrapToDart_closure, P._wrapToDart_closure0, P._wrapToDart_closure1, P.AudioParamMap_keys_closure, M.BuiltListMultimap_BuiltListMultimap_closure, M.BuiltListMultimap_hashCode_closure, M.ListMultimapBuilder_replace_closure, A.BuiltMap_BuiltMap_closure, A.BuiltMap_hashCode_closure, A.MapBuilder_replace_closure, L.BuiltSet_hashCode_closure, E.BuiltSetMultimap_hashCode_closure, E.SetMultimapBuilder_replace_closure, Y.closure, U.Serializers_Serializers_closure, U.Serializers_Serializers_closure0, U.Serializers_Serializers_closure1, U.Serializers_Serializers_closure2, U.Serializers_Serializers_closure3, R.BuiltListMultimapSerializer_serialize_closure, R.BuiltListMultimapSerializer_deserialize_closure, K.BuiltListSerializer_serialize_closure, K.BuiltListSerializer_deserialize_closure, R.BuiltSetMultimapSerializer_serialize_closure, R.BuiltSetMultimapSerializer_deserialize_closure, O.BuiltSetSerializer_serialize_closure, O.BuiltSetSerializer_deserialize_closure, M.CanonicalizedMap_addAll_closure, M.CanonicalizedMap_forEach_closure, M.CanonicalizedMap_keys_closure, M.CanonicalizedMap_map_closure, M.CanonicalizedMap_toString_closure, M._isToStringVisiting_closure, L.stronglyConnectedComponents_strongConnect, G.BaseRequest_closure, G.BaseRequest_closure0, O.BrowserClient_send_closure, O.BrowserClient_send__closure, O.BrowserClient_send__closure0, O.BrowserClient_send_closure0, Z.ByteStream_toBytes_closure, U.Response_fromStream_closure, Z.CaseInsensitiveMap$from_closure, Z.CaseInsensitiveMap$from_closure0, R.MediaType_MediaType$parse_closure, R.MediaType_toString_closure, R.MediaType_toString__closure, N.expectQuotedString_closure, N.Logger_Logger_closure, M.Context_join_closure, M.Context_joinAll_closure, M.Context_split_closure, M._validateArgList_closure, X.ParsedPath_normalize_closure, X.hashObjects_closure, U.Highlighter__writeFirstLine_closure, U.Highlighter__writeFirstLine_closure0, U.Highlighter__writeFirstLine_closure1, U.Highlighter__writeFirstLine_closure2, U.Highlighter__writeIntermediateLines_closure, U.Highlighter__writeLastLine_closure, U.Highlighter__writeLastLine_closure0, U.Highlighter__writeLastLine_closure1, U.Highlighter__writeSidebar_closure, D.main_closure, D.main__closure, D.main__closure0, D.main___closure0, D.main__closure1, D.main___closure, D.main__closure2, D.main__closure3, D.main__closure4, D.main_closure0, Q.ReloadingManager__afterRestart_closure, Q.ReloadingManager__beforeRestart_closure, S.toPromise_closure, X.RequireRestarter__moduleLibraries_closure, X.RequireRestarter__reload_closure, X.RequireRestarter__reloadModule_closure, X.RequireRestarter__reloadModule_closure0]);
    _inherit(H.CastList, H._CastListBase);
    _inherit(P.MapBase, P.MapMixin);
    _inheritMany(P.MapBase, [H.CastMap, H.JsLinkedHashMap, P._HashMap, P._JsonMap]);
    _inherit(P.ListBase, P._ListBase_Object_ListMixin);
    _inherit(H.UnmodifiableListBase, P.ListBase);
    _inheritMany(H.UnmodifiableListBase, [H.CodeUnits, P.UnmodifiableListView]);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.EmptyIterable, H.LinkedHashMapKeyIterable, P._HashMapKeyIterable, P.Set]);
    _inheritMany(H.ListIterable, [H.SubListIterable, H.MappedListIterable, H.ReversedListIterable, P.ListQueue, P._JsonMapKeyIterable]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [H.MappedIterator, H.WhereIterator, H.SkipIterator]);
    _inherit(H.EfficientLengthSkipIterable, H.SkipIterable);
    _inherit(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P.MapView);
    _inherit(P.UnmodifiableMapView, P._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(H.ConstantMapView, P.UnmodifiableMapView);
    _inherit(H.ConstantStringMap, H.ConstantMap);
    _inheritMany(P.Error, [H.NullError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.TypeErrorImplementation, H.CastErrorImplementation, H.RuntimeError, P.AssertionError, P.JsonUnsupportedObjectError, P.NullThrownError, P.ArgumentError, P.NoSuchMethodError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError, Y.BuiltValueNullFieldError, U.DeserializationError]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(H._AssertionError, P.AssertionError);
    _inherit(H._AllMatchesIterable, P.IterableBase);
    _inheritMany(H.NativeTypedData, [H.NativeByteData, H.NativeTypedArray]);
    _inheritMany(H.NativeTypedArray, [H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfDouble, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfInt, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedArrayOfDouble, [H.NativeFloat32List, H.NativeFloat64List]);
    _inheritMany(H.NativeTypedArrayOfInt, [H.NativeInt16List, H.NativeInt32List, H.NativeInt8List, H.NativeUint16List, H.NativeUint32List, H.NativeUint8ClampedList, H.NativeUint8List]);
    _inherit(P._AsyncCompleter, P._Completer);
    _inheritMany(P.Stream, [P.StreamView, P._StreamImpl, P._ForwardingStream, W._EventStream]);
    _inherit(P._AsyncStreamController, P._StreamController);
    _inheritMany(P._StreamImpl, [P._ControllerStream, P._GeneratedStreamImpl]);
    _inheritMany(P._BufferingStreamSubscription, [P._ControllerSubscription, P._ForwardingStreamSubscription]);
    _inheritMany(P._PendingEvents, [P._IterablePendingEvents, P._StreamImplEvents]);
    _inheritMany(P._DelayedEvent, [P._DelayedData, P._DelayedError]);
    _inherit(P._MapStream, P._ForwardingStream);
    _inheritMany(P._Zone, [P._CustomZone, P._RootZone]);
    _inheritMany(P._HashMap, [P._IdentityHashMap, P._CustomHashMap]);
    _inheritMany(H.JsLinkedHashMap, [P._LinkedIdentityHashMap, P._LinkedCustomHashMap]);
    _inheritMany(P._SetBase, [P._HashSet, P._LinkedHashSet]);
    _inherit(P._CustomHashSet, P._HashSet);
    _inherit(P._SplayTreeKeyIterator, P._SplayTreeIterator);
    _inherit(P._SplayTreeSet__SplayTree_IterableMixin, P._SplayTree);
    _inherit(P._SplayTreeSet__SplayTree_IterableMixin_SetMixin, P._SplayTreeSet__SplayTree_IterableMixin);
    _inherit(P.SplayTreeSet, P._SplayTreeSet__SplayTree_IterableMixin_SetMixin);
    _inheritMany(P.Codec, [P.Encoding, P.Base64Codec, P.JsonCodec, N.HexCodec]);
    _inheritMany(P.Encoding, [P.AsciiCodec, P.Latin1Codec, P.Utf8Codec]);
    _inherit(P.Converter, P.StreamTransformerBase);
    _inheritMany(P.Converter, [P._UnicodeSubsetEncoder, P.Base64Encoder, P.JsonEncoder, P.JsonDecoder, P.Utf8Encoder, P.Utf8Decoder, R.HexEncoder]);
    _inheritMany(P._UnicodeSubsetEncoder, [P.AsciiEncoder, P.Latin1Encoder]);
    _inherit(P.ByteConversionSink, P.ChunkedConversionSink);
    _inherit(P.ByteConversionSinkBase, P.ByteConversionSink);
    _inherit(P._ByteCallbackSink, P.ByteConversionSinkBase);
    _inherit(P.JsonCyclicError, P.JsonUnsupportedObjectError);
    _inherit(P._JsonStringStringifier, P._JsonStringifier);
    _inheritMany(P.num, [P.double, P.int]);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inherit(P._DataUri, P._Uri);
    _inheritMany(W.EventTarget, [W.Node, W.EventSource, W.FileReader, W.FileWriter, W.HttpRequestEventTarget, W.SourceBuffer, W._SourceBufferList_EventTarget_ListMixin, W.TextTrack, W.TextTrackCue, W._TextTrackList_EventTarget_ListMixin, W.VideoTrackList, W.Window, W.WorkerGlobalScope, P.AudioTrackList, P.BaseAudioContext]);
    _inheritMany(W.Node, [W.Element, W.CharacterData, W.Document]);
    _inherit(W.HtmlElement, W.Element);
    _inheritMany(W.HtmlElement, [W.AnchorElement, W.AreaElement, W.FormElement, W.SelectElement]);
    _inheritMany(W.CssStyleValue, [W.CssNumericValue, W.CssTransformValue, W.CssUnparsedValue]);
    _inherit(W.CssPerspective, W.CssTransformComponent);
    _inherit(W.CssStyleDeclaration, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase);
    _inherit(W._DomRectList_Interceptor_ListMixin_ImmutableListMixin, W._DomRectList_Interceptor_ListMixin);
    _inherit(W.DomRectList, W._DomRectList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._DomStringList_Interceptor_ListMixin_ImmutableListMixin, W._DomStringList_Interceptor_ListMixin);
    _inherit(W.DomStringList, W._DomStringList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.File, W.Blob);
    _inherit(W._FileList_Interceptor_ListMixin_ImmutableListMixin, W._FileList_Interceptor_ListMixin);
    _inherit(W.FileList, W._FileList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W._HtmlCollection_Interceptor_ListMixin);
    _inherit(W.HtmlCollection, W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.HttpRequest, W.HttpRequestEventTarget);
    _inheritMany(W.Event, [W.UIEvent, W.MessageEvent, W.ProgressEvent]);
    _inherit(W.KeyboardEvent, W.UIEvent);
    _inherit(W.MidiInputMap, W._MidiInputMap_Interceptor_MapMixin);
    _inherit(W.MidiOutputMap, W._MidiOutputMap_Interceptor_MapMixin);
    _inherit(W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin, W._MimeTypeArray_Interceptor_ListMixin);
    _inherit(W.MimeTypeArray, W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W._NodeList_Interceptor_ListMixin);
    _inherit(W.NodeList, W._NodeList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._PluginArray_Interceptor_ListMixin_ImmutableListMixin, W._PluginArray_Interceptor_ListMixin);
    _inherit(W.PluginArray, W._PluginArray_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.RtcStatsReport, W._RtcStatsReport_Interceptor_MapMixin);
    _inherit(W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, W._SourceBufferList_EventTarget_ListMixin);
    _inherit(W.SourceBufferList, W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin, W._SpeechGrammarList_Interceptor_ListMixin);
    _inherit(W.SpeechGrammarList, W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.Storage, W._Storage_Interceptor_MapMixin);
    _inherit(W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin, W._TextTrackCueList_Interceptor_ListMixin);
    _inherit(W.TextTrackCueList, W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, W._TextTrackList_EventTarget_ListMixin);
    _inherit(W.TextTrackList, W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(W._TouchList_Interceptor_ListMixin_ImmutableListMixin, W._TouchList_Interceptor_ListMixin);
    _inherit(W.TouchList, W._TouchList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin, W.__CssRuleList_Interceptor_ListMixin);
    _inherit(W._CssRuleList, W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._DomRect, W.DomRectReadOnly);
    _inherit(W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin, W.__GamepadList_Interceptor_ListMixin);
    _inherit(W._GamepadList, W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.__NamedNodeMap_Interceptor_ListMixin);
    _inherit(W._NamedNodeMap, W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin, W.__SpeechRecognitionResultList_Interceptor_ListMixin);
    _inherit(W._SpeechRecognitionResultList, W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin, W.__StyleSheetList_Interceptor_ListMixin);
    _inherit(W._StyleSheetList, W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inherit(P._AcceptStructuredCloneDart2Js, P._AcceptStructuredClone);
    _inheritMany(P.JsObject, [P.JsFunction, P._JsArray_JsObject_ListMixin]);
    _inherit(P.JsArray, P._JsArray_JsObject_ListMixin);
    _inherit(P.Rectangle, P._RectangleBase);
    _inherit(P._LengthList_Interceptor_ListMixin_ImmutableListMixin, P._LengthList_Interceptor_ListMixin);
    _inherit(P.LengthList, P._LengthList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._NumberList_Interceptor_ListMixin_ImmutableListMixin, P._NumberList_Interceptor_ListMixin);
    _inherit(P.NumberList, P._NumberList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._StringList_Interceptor_ListMixin_ImmutableListMixin, P._StringList_Interceptor_ListMixin);
    _inherit(P.StringList, P._StringList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._TransformList_Interceptor_ListMixin_ImmutableListMixin, P._TransformList_Interceptor_ListMixin);
    _inherit(P.TransformList, P._TransformList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P.AudioParamMap, P._AudioParamMap_Interceptor_MapMixin);
    _inherit(P.OfflineAudioContext, P.BaseAudioContext);
    _inherit(P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin, P._SqlResultSetRowList_Interceptor_ListMixin);
    _inherit(P.SqlResultSetRowList, P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(M.BuildStatus, Y.EnumClass);
    _inherit(M._$DefaultBuildResult, M.DefaultBuildResult);
    _inherit(S._BuiltList, S.BuiltList);
    _inherit(M._BuiltListMultimap, M.BuiltListMultimap);
    _inherit(A._BuiltMap, A.BuiltMap);
    _inherit(L._BuiltSet, L.BuiltSet);
    _inherit(E._BuiltSetMultimap, E.BuiltSetMultimap);
    _inheritMany(A.JsonObject, [A.BoolJsonObject, A.ListJsonObject, A.MapJsonObject, A.NumJsonObject, A.StringJsonObject]);
    _inherit(U.SetEquality, U._UnorderedEquality);
    _inherit(E._$ConnectRequest, E.ConnectRequest);
    _inherit(M._$DevToolsRequest, M.DevToolsRequest);
    _inherit(M._$DevToolsResponse, M.DevToolsResponse);
    _inherit(X._$ErrorResponse, X.ErrorResponse);
    _inherit(S._$ExtensionRequest, S.ExtensionRequest);
    _inherit(S._$ExtensionResponse, S.ExtensionResponse);
    _inherit(S._$ExtensionEvent, S.ExtensionEvent);
    _inherit(M._$IsolateExit, M.IsolateExit);
    _inherit(M._$IsolateStart, M.IsolateStart);
    _inherit(A._$RunRequest, A.RunRequest);
    _inherit(A._$RunResponse, A.RunResponse);
    _inherit(O.BrowserClient, E.BaseClient);
    _inherit(Z.ByteStream, P.StreamView);
    _inherit(O.Request, G.BaseRequest);
    _inheritMany(T.BaseResponse, [U.Response, X.StreamedResponse]);
    _inherit(Z.CaseInsensitiveMap, M.CanonicalizedMap);
    _inherit(B.InternalStyle, O.Style);
    _inheritMany(B.InternalStyle, [E.PosixStyle, F.UrlStyle, L.WindowsStyle]);
    _inherit(Y.FileLocation, D.SourceLocationMixin);
    _inheritMany(Y.SourceSpanMixin, [Y._FileSpan, V.SourceSpanBase]);
    _inherit(G.SourceSpanFormatException, G.SourceSpanException);
    _inherit(X.SourceSpanWithContext, V.SourceSpanBase);
    _inherit(M.SseClient, R.StreamChannelMixin);
    _inherit(E.StringScannerException, G.SourceSpanFormatException);
    _mixin(H.UnmodifiableListBase, H.UnmodifiableListMixin);
    _mixin(H.__CastListBase__CastIterableBase_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(P._AsyncStreamController, P._AsyncStreamControllerDispatch);
    _mixin(P._ListBase_Object_ListMixin, P.ListMixin);
    _mixin(P._SplayTreeSet__SplayTree_IterableMixin, P.IterableMixin);
    _mixin(P._SplayTreeSet__SplayTree_IterableMixin_SetMixin, P.SetMixin);
    _mixin(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P._UnmodifiableMapMixin);
    _mixin(W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.CssStyleDeclarationBase);
    _mixin(W._DomRectList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._DomRectList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._DomStringList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._DomStringList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._FileList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._FileList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._HtmlCollection_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._MidiInputMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._MidiOutputMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._MimeTypeArray_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._PluginArray_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._PluginArray_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._RtcStatsReport_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._SourceBufferList_EventTarget_ListMixin, P.ListMixin);
    _mixin(W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._SpeechGrammarList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._Storage_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._TextTrackCueList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._TextTrackList_EventTarget_ListMixin, P.ListMixin);
    _mixin(W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._TouchList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._TouchList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__CssRuleList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__GamepadList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__SpeechRecognitionResultList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__StyleSheetList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._JsArray_JsObject_ListMixin, P.ListMixin);
    _mixin(P._LengthList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._LengthList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._NumberList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._NumberList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._StringList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._StringList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._TransformList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._TransformList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._AudioParamMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(P._SqlResultSetRowList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
  })();
  var init = {mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"}, mangledNames: {}, getTypeFromName: getGlobalFromName, metadata: [], types: [{func: 1, ret: -1}, {func: 1, ret: P.Null}, {func: 1, args: [,]}, {func: 1, ret: P.Object, args: [,]}, {func: 1, ret: -1, args: [P.Object], opt: [P.StackTrace]}, {func: 1, ret: P.bool, args: [,]}, {func: 1, ret: P.Null, args: [,,]}, {func: 1, ret: P.Null, args: [W.ProgressEvent]}, {func: 1, ret: -1, args: [,]}, {func: 1, ret: P.String, args: [P.String]}, {func: 1, ret: -1, args: [P.String,,]}, {func: 1, ret: -1, args: [{func: 1, ret: -1}]}, {func: 1, ret: P.Null, args: [,]}, {func: 1, ret: -1, args: [P.Object]}, {func: 1, ret: P.String, args: [P.int]}, {func: 1, ret: P.bool, args: [P.String]}, {func: 1, ret: -1, args: [P.String, P.String]}, {func: 1, ret: P.int, args: [,,]}, {func: 1, ret: P.Null, args: [P.Symbol0,,]}, {func: 1, ret: P.int, args: [P.int, P.int]}, {func: 1, ret: P.int, args: [P.int]}, {func: 1, ret: P.Null, args: [P.String]}, {func: 1, ret: -1, args: [P.Uint8List, P.String, P.int]}, {func: 1, ret: P.Null, args: [P.String,,]}, {func: 1, ret: P.Null, args: [P.String, P.String]}, {func: 1, ret: P.bool, args: [P.Object, P.Object]}, {func: 1, ret: P.int, args: [P.Object]}, {func: 1, ret: P.bool, args: [P.Object]}, {func: 1, ret: P.String, args: [P.Match]}, {func: 1, ret: -1, args: [W.Event]}, {func: 1, ret: P.bool, args: [,,]}, {func: 1, ret: [S.ListBuilder, P.Object]}, {func: 1, ret: -1, opt: [P.Object]}, {func: 1, ret: P.Null, args: [,], opt: [P.StackTrace]}, {func: 1, ret: -1, args: [P.String, P.int]}, {func: 1, args: [W.Event]}, {func: 1, args: [,,]}, {func: 1, ret: P.JsFunction, args: [,]}, {func: 1, ret: [P.JsArray,,], args: [,]}, {func: 1, ret: P.JsObject, args: [,]}, {func: 1, ret: P.Null, args: [P.Object, P.Object]}, {func: 1, ret: Y.IndentingBuiltValueToStringHelper, args: [P.String]}, {func: 1, ret: P.Null, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Object, P.StackTrace]}, {func: 1, ret: [M.ListMultimapBuilder, P.Object, P.Object]}, {func: 1, ret: [A.MapBuilder, P.Object, P.Object]}, {func: 1, ret: [L.SetBuilder, P.Object]}, {func: 1, ret: [E.SetMultimapBuilder, P.Object, P.Object]}, {func: 1, ret: [P._Future,,], args: [,]}, {func: 1, ret: -1, args: [P.String], opt: [,]}, {func: 1, ret: P.Null, args: [, P.StackTrace]}, {func: 1, args: [P.String]}, {func: 1, ret: P.bool, args: [P.String, P.String]}, {func: 1, ret: P.int, args: [P.String]}, {func: 1, ret: -1, args: [[P.List, P.int]]}, {func: 1, ret: U.Response, args: [P.Uint8List]}, {func: 1, ret: R.MediaType}, {func: 1, ret: P.Uint8List, args: [P.int]}, {func: 1, ret: N.Logger}, {func: 1, args: [, P.String]}, {func: 1, ret: P.int, args: [P.int,,]}, {func: 1, ret: P.Uint8List, args: [,,]}, {func: 1, ret: P.int, args: [,]}, {func: 1, ret: [S.Promise, -2]}, {func: 1, ret: M.DevToolsRequestBuilder, args: [M.DevToolsRequestBuilder]}, {func: 1, ret: [P.Future, P.Null], args: [P.String]}, {func: 1, ret: A.RunResponseBuilder, args: [A.RunResponseBuilder]}, {func: 1, ret: P.Null, args: [{func: 1, ret: -1}]}, {func: 1, ret: E.ConnectRequestBuilder, args: [E.ConnectRequestBuilder]}, {func: 1, ret: M.IsolateStartBuilder, args: [M.IsolateStartBuilder]}, {func: 1, ret: M.IsolateExitBuilder, args: [M.IsolateExitBuilder]}, {func: 1, ret: [P.List, P.String], args: [P.String]}, {func: 1, ret: P.int, args: [P.String, P.String]}, {func: 1, ret: X.LibraryWrapper, args: [X.HotReloadableLibrary]}, {func: 1, ret: [P.Future, P.bool]}, {func: 1, ret: -1, args: [X.JsError]}, {func: 1, ret: P.Null, args: [P.int,,]}, {func: 1, ret: -1, args: [, P.StackTrace]}, {func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone,, P.StackTrace]}, {func: 1, bounds: [P.Object], ret: 0, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0}]}, {func: 1, bounds: [P.Object, P.Object], ret: 0, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1]}, 1]}, {func: 1, bounds: [P.Object, P.Object, P.Object], ret: 0, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1, 2]}, 1, 2]}, {func: 1, bounds: [P.Object], ret: {func: 1, ret: 0}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0}]}, {func: 1, bounds: [P.Object, P.Object], ret: {func: 1, ret: 0, args: [1]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1]}]}, {func: 1, bounds: [P.Object, P.Object, P.Object], ret: {func: 1, ret: 0, args: [1, 2]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1, 2]}]}, {func: 1, ret: P.AsyncError, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Object, P.StackTrace]}, {func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: -1}]}, {func: 1, ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: 1, ret: -1}]}, {func: 1, ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: 1, ret: -1, args: [P.Timer]}]}, {func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, P.String]}, {func: 1, ret: -1, args: [P.String]}, {func: 1, ret: P.Zone, args: [P.Zone, P.ZoneDelegate, P.Zone, P.ZoneSpecification, [P.Map,,,]]}, {func: 1, ret: P.Null, args: [W.Event]}, {func: 1, ret: [P.Future, P.Null]}], interceptorsByTag: null, leafTags: null};
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.EventSource_methods = W.EventSource.prototype;
    C.FileReader_methods = W.FileReader.prototype;
    C.HttpRequest_methods = W.HttpRequest.prototype;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSBool_methods = J.JSBool.prototype;
    C.JSDouble_methods = J.JSDouble.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNull_methods = J.JSNull.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.Location_methods = W.Location.prototype;
    C.NativeUint32List_methods = H.NativeUint32List.prototype;
    C.NativeUint8List_methods = H.NativeUint8List.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.AsciiEncoder_127 = new P.AsciiEncoder(127);
    C.BuildStatus_failed = new M.BuildStatus("failed");
    C.BuildStatus_started = new M.BuildStatus("started");
    C.BuildStatus_succeeded = new M.BuildStatus("succeeded");
    C.C_AsciiCodec = new P.AsciiCodec();
    C.C_Base64Encoder = new P.Base64Encoder();
    C.C_Base64Codec = new P.Base64Codec();
    C.C_DefaultEquality = new U.DefaultEquality([null]);
    C.C_DeepCollectionEquality = new U.DeepCollectionEquality();
    C.C_EmptyIterator = new H.EmptyIterator([P.Null]);
    C.C_HexCodec = new N.HexCodec();
    C.C_HexEncoder = new R.HexEncoder();
    C.C_IntegerDivisionByZeroException = new P.IntegerDivisionByZeroException();
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST3 = function(hooks) { return hooks; }
;
    C.C_JsonCodec = new P.JsonCodec();
    C.C_Latin1Codec = new P.Latin1Codec();
    C.C_OutOfMemoryError = new P.OutOfMemoryError();
    C.C_Utf8Codec = new P.Utf8Codec();
    C.C_Utf8Encoder = new P.Utf8Encoder();
    C.C__DelayedDone = new P._DelayedDone();
    C.C__JSRandom = new P._JSRandom();
    C.C__RootZone = new P._RootZone();
    C.Duration_0 = new P.Duration(0);
    C.Type_bool_lhE = H.createRuntimeType(P.bool);
    C.List_empty2 = H.setRuntimeTypeInfo(makeConstList([]), [U.FullType]);
    C.FullType_6bM = new U.FullType(C.Type_bool_lhE, C.List_empty2);
    C.Type_BuiltSetMultimap_9Fi = H.createRuntimeType([E.BuiltSetMultimap,,,]);
    C.Type_Object_xQ6 = H.createRuntimeType(P.Object);
    C.FullType_sIv = new U.FullType(C.Type_Object_xQ6, C.List_empty2);
    C.List_Ult = H.setRuntimeTypeInfo(makeConstList([C.FullType_sIv, C.FullType_sIv]), [U.FullType]);
    C.FullType_C1B = new U.FullType(C.Type_BuiltSetMultimap_9Fi, C.List_Ult);
    C.Type_BuiltSet_fcN = H.createRuntimeType([L.BuiltSet,,]);
    C.List_0ju = H.setRuntimeTypeInfo(makeConstList([C.FullType_sIv]), [U.FullType]);
    C.FullType_ECn = new U.FullType(C.Type_BuiltSet_fcN, C.List_0ju);
    C.Type_BuiltList_iTR = H.createRuntimeType([S.BuiltList,,]);
    C.FullType_GJM = new U.FullType(C.Type_BuiltList_iTR, C.List_0ju);
    C.Type_BuildStatus_qBS = H.createRuntimeType(M.BuildStatus);
    C.FullType_GJj = new U.FullType(C.Type_BuildStatus_qBS, C.List_empty2);
    C.Type_BuiltListMultimap_2Mt = H.createRuntimeType([M.BuiltListMultimap,,,]);
    C.FullType_UGJ = new U.FullType(C.Type_BuiltListMultimap_2Mt, C.List_Ult);
    C.Type_String_k8F = H.createRuntimeType(P.String);
    C.FullType_aZ8 = new U.FullType(C.Type_String_k8F, C.List_empty2);
    C.Type_int_tHn = H.createRuntimeType(P.int);
    C.FullType_kaS = new U.FullType(C.Type_int_tHn, C.List_empty2);
    C.FullType_null_List_empty = new U.FullType(null, C.List_empty2);
    C.Type_BuiltMap_qd4 = H.createRuntimeType([A.BuiltMap,,,]);
    C.FullType_sEu = new U.FullType(C.Type_BuiltMap_qd4, C.List_Ult);
    C.Int64_0_0_0 = new V.Int64(0, 0, 0);
    C.Int64_4194303_4194303_1048575 = new V.Int64(4194303, 4194303, 1048575);
    C.JsonDecoder_null = new P.JsonDecoder(null);
    C.JsonEncoder_null = new P.JsonEncoder(null);
    C.Latin1Encoder_255 = new P.Latin1Encoder(255);
    C.Level_INFO_800 = new N.Level("INFO", 800);
    C.Level_WARNING_900 = new N.Level("WARNING", 900);
    C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(makeConstList([127, 2047, 65535, 1114111]), [P.int]);
    C.List_2Vk = H.setRuntimeTypeInfo(makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]), [P.int]);
    C.Type_DevToolsResponse_Hhy = H.createRuntimeType(M.DevToolsResponse);
    C.Type__$DevToolsResponse_23h = H.createRuntimeType(M._$DevToolsResponse);
    C.List_41A = H.setRuntimeTypeInfo(makeConstList([C.Type_DevToolsResponse_Hhy, C.Type__$DevToolsResponse_23h]), [P.Type]);
    C.Type_RunResponse_mxf = H.createRuntimeType(A.RunResponse);
    C.Type__$RunResponse_23h = H.createRuntimeType(A._$RunResponse);
    C.List_69t = H.setRuntimeTypeInfo(makeConstList([C.Type_RunResponse_mxf, C.Type__$RunResponse_23h]), [P.Type]);
    C.Type_IsolateStart_0 = H.createRuntimeType(M.IsolateStart);
    C.Type__$IsolateStart_o3b = H.createRuntimeType(M._$IsolateStart);
    C.List_6TA = H.setRuntimeTypeInfo(makeConstList([C.Type_IsolateStart_0, C.Type__$IsolateStart_o3b]), [P.Type]);
    C.Type_DevToolsRequest_A0n = H.createRuntimeType(M.DevToolsRequest);
    C.Type__$DevToolsRequest_cDy = H.createRuntimeType(M._$DevToolsRequest);
    C.List_BCG = H.setRuntimeTypeInfo(makeConstList([C.Type_DevToolsRequest_A0n, C.Type__$DevToolsRequest_cDy]), [P.Type]);
    C.List_CVk = H.setRuntimeTypeInfo(makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]), [P.int]);
    C.List_JYB = H.setRuntimeTypeInfo(makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]), [P.int]);
    C.Type_IsolateExit_D1o = H.createRuntimeType(M.IsolateExit);
    C.Type__$IsolateExit_eWg = H.createRuntimeType(M._$IsolateExit);
    C.List_LT1 = H.setRuntimeTypeInfo(makeConstList([C.Type_IsolateExit_D1o, C.Type__$IsolateExit_eWg]), [P.Type]);
    C.List_Type_BuildStatus_qBS = H.setRuntimeTypeInfo(makeConstList([C.Type_BuildStatus_qBS]), [P.Type]);
    C.List_WrN = H.setRuntimeTypeInfo(makeConstList([0, 0, 1048576, 531441, 1048576, 390625, 279936, 823543, 262144, 531441, 1000000, 161051, 248832, 371293, 537824, 759375, 1048576, 83521, 104976, 130321, 160000, 194481, 234256, 279841, 331776, 390625, 456976, 531441, 614656, 707281, 810000, 923521, 1048576, 35937, 39304, 42875, 46656]), [P.int]);
    C.List_empty0 = H.setRuntimeTypeInfo(makeConstList([]), [P.Null]);
    C.List_empty1 = H.setRuntimeTypeInfo(makeConstList([]), [P.String]);
    C.List_empty = makeConstList([]);
    C.Type_ExtensionRequest_BMe = H.createRuntimeType(S.ExtensionRequest);
    C.Type__$ExtensionRequest_1Ej = H.createRuntimeType(S._$ExtensionRequest);
    C.List_evd = H.setRuntimeTypeInfo(makeConstList([C.Type_ExtensionRequest_BMe, C.Type__$ExtensionRequest_1Ej]), [P.Type]);
    C.Type_ErrorResponse_Q43 = H.createRuntimeType(X.ErrorResponse);
    C.Type__$ErrorResponse_xV7 = H.createRuntimeType(X._$ErrorResponse);
    C.List_gQA = H.setRuntimeTypeInfo(makeConstList([C.Type_ErrorResponse_Q43, C.Type__$ErrorResponse_xV7]), [P.Type]);
    C.List_gRj = H.setRuntimeTypeInfo(makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]), [P.int]);
    C.Type_DefaultBuildResult_2J4 = H.createRuntimeType(M.DefaultBuildResult);
    C.Type__$DefaultBuildResult_aUS = H.createRuntimeType(M._$DefaultBuildResult);
    C.List_j8H = H.setRuntimeTypeInfo(makeConstList([C.Type_DefaultBuildResult_2J4, C.Type__$DefaultBuildResult_aUS]), [P.Type]);
    C.List_nxB = H.setRuntimeTypeInfo(makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]), [P.int]);
    C.Type_ExtensionEvent_gsm = H.createRuntimeType(S.ExtensionEvent);
    C.Type__$ExtensionEvent_XOq = H.createRuntimeType(S._$ExtensionEvent);
    C.List_pnF = H.setRuntimeTypeInfo(makeConstList([C.Type_ExtensionEvent_gsm, C.Type__$ExtensionEvent_XOq]), [P.Type]);
    C.List_qNA = H.setRuntimeTypeInfo(makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]), [P.int]);
    C.List_qg40 = H.setRuntimeTypeInfo(makeConstList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]), [P.int]);
    C.List_qg4 = H.setRuntimeTypeInfo(makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]), [P.int]);
    C.Type_ConnectRequest_UGQ = H.createRuntimeType(E.ConnectRequest);
    C.Type__$ConnectRequest_cJC = H.createRuntimeType(E._$ConnectRequest);
    C.List_ssp = H.setRuntimeTypeInfo(makeConstList([C.Type_ConnectRequest_UGQ, C.Type__$ConnectRequest_cJC]), [P.Type]);
    C.Type_ExtensionResponse_CC0 = H.createRuntimeType(S.ExtensionResponse);
    C.Type__$ExtensionResponse_Ddl = H.createRuntimeType(S._$ExtensionResponse);
    C.List_tQ0 = H.setRuntimeTypeInfo(makeConstList([C.Type_ExtensionResponse_CC0, C.Type__$ExtensionResponse_Ddl]), [P.Type]);
    C.Type_RunRequest_Pkw = H.createRuntimeType(A.RunRequest);
    C.Type__$RunRequest_Im4 = H.createRuntimeType(A._$RunRequest);
    C.List_wsa = H.setRuntimeTypeInfo(makeConstList([C.Type_RunRequest_Pkw, C.Type__$RunRequest_Im4]), [P.Type]);
    C.List_zgw = H.setRuntimeTypeInfo(makeConstList(["d", "D", "\u2202", "\xce"]), [P.String]);
    C.Map_empty1 = new H.ConstantStringMap(0, {}, C.List_empty1, [P.String, P.String]);
    C.List_empty3 = H.setRuntimeTypeInfo(makeConstList([]), [P.Symbol0]);
    C.Map_empty0 = new H.ConstantStringMap(0, {}, C.List_empty3, [P.Symbol0, null]);
    C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty, [null, null]);
    C.Symbol_call = new H.Symbol("call");
    C.Type_BigInt_8OV = H.createRuntimeType(P.BigInt);
    C.Type_BoolJsonObject_8HQ = H.createRuntimeType(A.BoolJsonObject);
    C.Type_ByteBuffer_RkP = H.createRuntimeType(P.ByteBuffer);
    C.Type_ByteData_zNC = H.createRuntimeType(P.ByteData);
    C.Type_DateTime_8AS = H.createRuntimeType(P.DateTime);
    C.Type_Duration_SnA = H.createRuntimeType(P.Duration);
    C.Type_Float32List_LB7 = H.createRuntimeType(P.Float32List);
    C.Type_Float64List_LB7 = H.createRuntimeType(P.Float64List);
    C.Type_Int16List_uXf = H.createRuntimeType(P.Int16List);
    C.Type_Int32List_O50 = H.createRuntimeType(P.Int32List);
    C.Type_Int64_gc6 = H.createRuntimeType(V.Int64);
    C.Type_Int8List_ekJ = H.createRuntimeType(P.Int8List);
    C.Type_JSObject_8k0 = H.createRuntimeType(J.JSObject);
    C.Type_JsonObject_gyf = H.createRuntimeType(A.JsonObject);
    C.Type_ListJsonObject_yPV = H.createRuntimeType(A.ListJsonObject);
    C.Type_MapJsonObject_bBG = H.createRuntimeType(A.MapJsonObject);
    C.Type_Null_Yyn = H.createRuntimeType(P.Null);
    C.Type_NumJsonObject_H9C = H.createRuntimeType(A.NumJsonObject);
    C.Type_RegExp_Eeh = H.createRuntimeType(P.RegExp);
    C.Type_StringJsonObject_GAC = H.createRuntimeType(A.StringJsonObject);
    C.Type_Uint16List_2bx = H.createRuntimeType(P.Uint16List);
    C.Type_Uint32List_2bx = H.createRuntimeType(P.Uint32List);
    C.Type_Uint8ClampedList_Jik = H.createRuntimeType(P.Uint8ClampedList);
    C.Type_Uint8List_WLA = H.createRuntimeType(P.Uint8List);
    C.Type_Uri_EFX = H.createRuntimeType(P.Uri);
    C.Type_double_K1J = H.createRuntimeType(P.double);
    C.Type_dynamic_0Rz = H.createRuntimeType(null);
    C.Type_num_cv7 = H.createRuntimeType(P.num);
    C._ZoneFunction_3bB = new P._ZoneFunction(C.C__RootZone, P.async___rootCreatePeriodicTimer$closure(), [{func: 1, ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: 1, ret: -1, args: [P.Timer]}]}]);
    C._ZoneFunction_7G2 = new P._ZoneFunction(C.C__RootZone, P.async___rootRegisterBinaryCallback$closure(), [P.Function]);
    C._ZoneFunction_Eeh = new P._ZoneFunction(C.C__RootZone, P.async___rootRegisterUnaryCallback$closure(), [P.Function]);
    C._ZoneFunction_NMc = new P._ZoneFunction(C.C__RootZone, P.async___rootHandleUncaughtError$closure(), [{func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Object, P.StackTrace]}]);
    C._ZoneFunction__RootZone__rootCreateTimer = new P._ZoneFunction(C.C__RootZone, P.async___rootCreateTimer$closure(), [{func: 1, ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: 1, ret: -1}]}]);
    C._ZoneFunction__RootZone__rootErrorCallback = new P._ZoneFunction(C.C__RootZone, P.async___rootErrorCallback$closure(), [{func: 1, ret: P.AsyncError, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Object, P.StackTrace]}]);
    C._ZoneFunction__RootZone__rootFork = new P._ZoneFunction(C.C__RootZone, P.async___rootFork$closure(), [{func: 1, ret: P.Zone, args: [P.Zone, P.ZoneDelegate, P.Zone, P.ZoneSpecification, [P.Map,,,]]}]);
    C._ZoneFunction__RootZone__rootPrint = new P._ZoneFunction(C.C__RootZone, P.async___rootPrint$closure(), [{func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, P.String]}]);
    C._ZoneFunction__RootZone__rootRegisterCallback = new P._ZoneFunction(C.C__RootZone, P.async___rootRegisterCallback$closure(), [P.Function]);
    C._ZoneFunction__RootZone__rootRun = new P._ZoneFunction(C.C__RootZone, P.async___rootRun$closure(), [P.Function]);
    C._ZoneFunction__RootZone__rootRunBinary = new P._ZoneFunction(C.C__RootZone, P.async___rootRunBinary$closure(), [P.Function]);
    C._ZoneFunction__RootZone__rootRunUnary = new P._ZoneFunction(C.C__RootZone, P.async___rootRunUnary$closure(), [P.Function]);
    C._ZoneFunction__RootZone__rootScheduleMicrotask = new P._ZoneFunction(C.C__RootZone, P.async___rootScheduleMicrotask$closure(), [{func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: -1}]}]);
    C._ZoneSpecification_ALf = new P._ZoneSpecification(null, null, null, null, null, null, null, null, null, null, null, null, null);
  })();
  (function staticFields() {
    $.printToZone = null;
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $._inTypeAssertion = false;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._RootZone__rootDelegate = null;
    $._toStringVisiting = [];
    $.Encoding__nameToEncoding = P.LinkedHashMap_LinkedHashMap$_literal(["iso_8859-1:1987", C.C_Latin1Codec, "iso-ir-100", C.C_Latin1Codec, "iso_8859-1", C.C_Latin1Codec, "iso-8859-1", C.C_Latin1Codec, "latin1", C.C_Latin1Codec, "l1", C.C_Latin1Codec, "ibm819", C.C_Latin1Codec, "cp819", C.C_Latin1Codec, "csisolatin1", C.C_Latin1Codec, "iso-ir-6", C.C_AsciiCodec, "ansi_x3.4-1968", C.C_AsciiCodec, "ansi_x3.4-1986", C.C_AsciiCodec, "iso_646.irv:1991", C.C_AsciiCodec, "iso646-us", C.C_AsciiCodec, "us-ascii", C.C_AsciiCodec, "us", C.C_AsciiCodec, "ibm367", C.C_AsciiCodec, "cp367", C.C_AsciiCodec, "csascii", C.C_AsciiCodec, "ascii", C.C_AsciiCodec, "csutf8", C.C_Utf8Codec, "utf-8", C.C_Utf8Codec], P.String, P.Encoding);
    $._BigIntImpl__lastDividendDigits = null;
    $._BigIntImpl__lastDividendUsed = null;
    $._BigIntImpl__lastDivisorDigits = null;
    $._BigIntImpl__lastDivisorUsed = null;
    $._BigIntImpl__lastQuoRemDigits = null;
    $._BigIntImpl__lastQuoRemUsed = null;
    $._BigIntImpl__lastRemUsed = null;
    $._BigIntImpl__lastRem_nsh = null;
    $._indentingBuiltValueToStringHelperIndent = 0;
    $._toStringVisiting0 = [];
    $.Logger__loggers = P.LinkedHashMap_LinkedHashMap$_empty(P.String, N.Logger);
    $.LogRecord__nextNumber = 0;
    $._currentUriBase = null;
    $._current = null;
    $._lastKnownDigests = null;
  })();
  (function lazyInitializers() {
    var _lazy = hunkHelpers.lazy;
    _lazy($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazy($, "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
      return H.getIsolateAffinityTag("_$dart_js");
    });
    _lazy($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazy($, "Future__nullFuture", "$get$Future__nullFuture", function() {
      return P._Future$zoneValue(null, C.C__RootZone, P.Null);
    });
    _lazy($, "Future__falseFuture", "$get$Future__falseFuture", function() {
      return P._Future$zoneValue(false, C.C__RootZone, P.bool);
    });
    _lazy($, "_RootZone__rootMap", "$get$_RootZone__rootMap", function() {
      var _null = null;
      return P.HashMap_HashMap(_null, _null, _null, _null, _null);
    });
    _lazy($, "Utf8Decoder__decoder", "$get$Utf8Decoder__decoder", function() {
      return P.Utf8Decoder__makeDecoder();
    });
    _lazy($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", function() {
      return H.NativeInt8List__create1(H._ensureNativeList(H.setRuntimeTypeInfo([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], [P.int])));
    });
    _lazy($, "_Uri__isWindowsCached", "$get$_Uri__isWindowsCached", function() {
      return typeof process != "undefined" && Object.prototype.toString.call(process) == "[object process]" && process.platform == "win32";
    });
    _lazy($, "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", function() {
      return P.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$", true);
    });
    _lazy($, "_hasErrorStackProperty", "$get$_hasErrorStackProperty", function() {
      return new Error().stack != void 0;
    });
    _lazy($, "_BigIntImpl_zero", "$get$_BigIntImpl_zero", function() {
      return P._BigIntImpl__BigIntImpl$_fromInt(0);
    });
    _lazy($, "_BigIntImpl_one", "$get$_BigIntImpl_one", function() {
      return P._BigIntImpl__BigIntImpl$_fromInt(1);
    });
    _lazy($, "_BigIntImpl__minusOne", "$get$_BigIntImpl__minusOne", function() {
      return $.$get$_BigIntImpl_one().$negate(0);
    });
    _lazy($, "_BigIntImpl__bigInt10000", "$get$_BigIntImpl__bigInt10000", function() {
      return P._BigIntImpl__BigIntImpl$_fromInt(10000);
    });
    _lazy($, "_scannerTables", "$get$_scannerTables", function() {
      return P._createTables();
    });
    _lazy($, "context", "$get$context", function() {
      return H.interceptedTypeCheck(P._wrapToDart(self), "$isJsObject");
    });
    _lazy($, "_DART_OBJECT_PROPERTY_NAME", "$get$_DART_OBJECT_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartObject");
    });
    _lazy($, "_dartProxyCtor", "$get$_dartProxyCtor", function() {
      return function DartObject(o) {
        this.o = o;
      };
    });
    _lazy($, "_$buildStatusSerializer", "$get$_$buildStatusSerializer", function() {
      return new M._$BuildStatusSerializer();
    });
    _lazy($, "_$defaultBuildResultSerializer", "$get$_$defaultBuildResultSerializer", function() {
      return new M._$DefaultBuildResultSerializer();
    });
    _lazy($, "newBuiltValueToStringHelper", "$get$newBuiltValueToStringHelper", function() {
      return new Y.closure();
    });
    _lazy($, "_runtimeType", "$get$_runtimeType", function() {
      return H.getRuntimeType(P.RegExp_RegExp("", true));
    });
    _lazy($, "_$connectRequestSerializer", "$get$_$connectRequestSerializer", function() {
      return new E._$ConnectRequestSerializer();
    });
    _lazy($, "_$devToolsRequestSerializer", "$get$_$devToolsRequestSerializer", function() {
      return new M._$DevToolsRequestSerializer();
    });
    _lazy($, "_$devToolsResponseSerializer", "$get$_$devToolsResponseSerializer", function() {
      return new M._$DevToolsResponseSerializer();
    });
    _lazy($, "_$errorResponseSerializer", "$get$_$errorResponseSerializer", function() {
      return new X._$ErrorResponseSerializer();
    });
    _lazy($, "_$extensionRequestSerializer", "$get$_$extensionRequestSerializer", function() {
      return new S._$ExtensionRequestSerializer();
    });
    _lazy($, "_$extensionResponseSerializer", "$get$_$extensionResponseSerializer", function() {
      return new S._$ExtensionResponseSerializer();
    });
    _lazy($, "_$extensionEventSerializer", "$get$_$extensionEventSerializer", function() {
      return new S._$ExtensionEventSerializer();
    });
    _lazy($, "_$isolateExitSerializer", "$get$_$isolateExitSerializer", function() {
      return new M._$IsolateExitSerializer();
    });
    _lazy($, "_$isolateStartSerializer", "$get$_$isolateStartSerializer", function() {
      return new M._$IsolateStartSerializer();
    });
    _lazy($, "_$runRequestSerializer", "$get$_$runRequestSerializer", function() {
      return new A._$RunRequestSerializer();
    });
    _lazy($, "_$runResponseSerializer", "$get$_$runResponseSerializer", function() {
      return new A._$RunResponseSerializer();
    });
    _lazy($, "serializers", "$get$serializers", function() {
      return $.$get$_$serializers();
    });
    _lazy($, "_$serializers", "$get$_$serializers", function() {
      var t1 = U.Serializers_Serializers();
      t1 = Y.BuiltJsonSerializersBuilder$_(t1._typeToSerializer.toBuilder$0(), t1._wireNameToSerializer.toBuilder$0(), t1._typeNameToSerializer.toBuilder$0(), t1.builderFactories.toBuilder$0(), t1._plugins.toBuilder$0());
      t1.add$1(0, $.$get$_$buildStatusSerializer());
      t1.add$1(0, $.$get$_$connectRequestSerializer());
      t1.add$1(0, $.$get$_$defaultBuildResultSerializer());
      t1.add$1(0, $.$get$_$devToolsRequestSerializer());
      t1.add$1(0, $.$get$_$devToolsResponseSerializer());
      t1.add$1(0, $.$get$_$errorResponseSerializer());
      t1.add$1(0, $.$get$_$extensionEventSerializer());
      t1.add$1(0, $.$get$_$extensionRequestSerializer());
      t1.add$1(0, $.$get$_$extensionResponseSerializer());
      t1.add$1(0, $.$get$_$isolateExitSerializer());
      t1.add$1(0, $.$get$_$isolateStartSerializer());
      t1.add$1(0, $.$get$_$runRequestSerializer());
      t1.add$1(0, $.$get$_$runResponseSerializer());
      return t1.build$0();
    });
    _lazy($, "_escapedChar", "$get$_escapedChar", function() {
      return P.RegExp_RegExp('["\\x00-\\x1F\\x7F]', true);
    });
    _lazy($, "token", "$get$token", function() {
      return P.RegExp_RegExp('[^()<>@,;:"\\\\/[\\]?={} \\t\\x00-\\x1F\\x7F]+', true);
    });
    _lazy($, "_lws", "$get$_lws", function() {
      return P.RegExp_RegExp("(?:\\r\\n)?[ \\t]+", true);
    });
    _lazy($, "_quotedString", "$get$_quotedString", function() {
      return P.RegExp_RegExp('"(?:[^"\\x00-\\x1F\\x7F]|\\\\.)*"', true);
    });
    _lazy($, "_quotedPair", "$get$_quotedPair", function() {
      return P.RegExp_RegExp("\\\\(.)", true);
    });
    _lazy($, "nonToken", "$get$nonToken", function() {
      return P.RegExp_RegExp('[()<>@,;:"\\\\/\\[\\]?={} \\t\\x00-\\x1F\\x7F]', true);
    });
    _lazy($, "whitespace", "$get$whitespace", function() {
      return P.RegExp_RegExp("(?:" + H.S($.$get$_lws().pattern) + ")*", true);
    });
    _lazy($, "Logger_root", "$get$Logger_root", function() {
      return N.Logger_Logger("");
    });
    _lazy($, "url", "$get$url", function() {
      var style = $.$get$Style_url(),
        current = style == null ? D.current() : ".";
      if (style == null)
        style = $.$get$Style_platform();
      return new M.Context(style, current);
    });
    _lazy($, "context0", "$get$context0", function() {
      return new M.Context($.$get$Style_platform(), null);
    });
    _lazy($, "Style_posix", "$get$Style_posix", function() {
      return new E.PosixStyle(P.RegExp_RegExp("/", true), P.RegExp_RegExp("[^/]$", true), P.RegExp_RegExp("^/", true));
    });
    _lazy($, "Style_windows", "$get$Style_windows", function() {
      return new L.WindowsStyle(P.RegExp_RegExp("[/\\\\]", true), P.RegExp_RegExp("[^/\\\\]$", true), P.RegExp_RegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])", true), P.RegExp_RegExp("^[/\\\\](?![/\\\\])", true));
    });
    _lazy($, "Style_url", "$get$Style_url", function() {
      return new F.UrlStyle(P.RegExp_RegExp("/", true), P.RegExp_RegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", true), P.RegExp_RegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", true), P.RegExp_RegExp("^/", true));
    });
    _lazy($, "Style_platform", "$get$Style_platform", function() {
      return O.Style__getPlatformStyle();
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({AnimationEffectReadOnly: J.Interceptor, AnimationEffectTiming: J.Interceptor, AnimationEffectTimingReadOnly: J.Interceptor, AnimationTimeline: J.Interceptor, AnimationWorkletGlobalScope: J.Interceptor, AuthenticatorAssertionResponse: J.Interceptor, AuthenticatorAttestationResponse: J.Interceptor, AuthenticatorResponse: J.Interceptor, BackgroundFetchFetch: J.Interceptor, BackgroundFetchManager: J.Interceptor, BackgroundFetchSettledFetch: J.Interceptor, BarProp: J.Interceptor, BarcodeDetector: J.Interceptor, BluetoothRemoteGATTDescriptor: J.Interceptor, Body: J.Interceptor, BudgetState: J.Interceptor, CacheStorage: J.Interceptor, CanvasGradient: J.Interceptor, CanvasPattern: J.Interceptor, CanvasRenderingContext2D: J.Interceptor, Client: J.Interceptor, Clients: J.Interceptor, CookieStore: J.Interceptor, Coordinates: J.Interceptor, Credential: J.Interceptor, CredentialUserData: J.Interceptor, CredentialsContainer: J.Interceptor, Crypto: J.Interceptor, CryptoKey: J.Interceptor, CSS: J.Interceptor, CSSVariableReferenceValue: J.Interceptor, CustomElementRegistry: J.Interceptor, DataTransfer: J.Interceptor, DataTransferItem: J.Interceptor, DeprecatedStorageInfo: J.Interceptor, DeprecatedStorageQuota: J.Interceptor, DeprecationReport: J.Interceptor, DetectedBarcode: J.Interceptor, DetectedFace: J.Interceptor, DetectedText: J.Interceptor, DeviceAcceleration: J.Interceptor, DeviceRotationRate: J.Interceptor, DirectoryEntry: J.Interceptor, DirectoryReader: J.Interceptor, DocumentOrShadowRoot: J.Interceptor, DocumentTimeline: J.Interceptor, DOMError: J.Interceptor, DOMImplementation: J.Interceptor, Iterator: J.Interceptor, DOMMatrix: J.Interceptor, DOMMatrixReadOnly: J.Interceptor, DOMParser: J.Interceptor, DOMPoint: J.Interceptor, DOMPointReadOnly: J.Interceptor, DOMQuad: J.Interceptor, DOMStringMap: J.Interceptor, Entry: J.Interceptor, External: J.Interceptor, FaceDetector: J.Interceptor, FederatedCredential: J.Interceptor, FileEntry: J.Interceptor, DOMFileSystem: J.Interceptor, FontFace: J.Interceptor, FontFaceSource: J.Interceptor, FormData: J.Interceptor, GamepadButton: J.Interceptor, GamepadPose: J.Interceptor, Geolocation: J.Interceptor, Position: J.Interceptor, Headers: J.Interceptor, HTMLHyperlinkElementUtils: J.Interceptor, IdleDeadline: J.Interceptor, ImageBitmap: J.Interceptor, ImageBitmapRenderingContext: J.Interceptor, ImageCapture: J.Interceptor, InputDeviceCapabilities: J.Interceptor, IntersectionObserver: J.Interceptor, IntersectionObserverEntry: J.Interceptor, InterventionReport: J.Interceptor, KeyframeEffect: J.Interceptor, KeyframeEffectReadOnly: J.Interceptor, MediaCapabilities: J.Interceptor, MediaCapabilitiesInfo: J.Interceptor, MediaDeviceInfo: J.Interceptor, MediaError: J.Interceptor, MediaKeyStatusMap: J.Interceptor, MediaKeySystemAccess: J.Interceptor, MediaKeys: J.Interceptor, MediaKeysPolicy: J.Interceptor, MediaMetadata: J.Interceptor, MediaSession: J.Interceptor, MediaSettingsRange: J.Interceptor, MemoryInfo: J.Interceptor, MessageChannel: J.Interceptor, Metadata: J.Interceptor, MutationObserver: J.Interceptor, WebKitMutationObserver: J.Interceptor, MutationRecord: J.Interceptor, NavigationPreloadManager: J.Interceptor, Navigator: J.Interceptor, NavigatorAutomationInformation: J.Interceptor, NavigatorConcurrentHardware: J.Interceptor, NavigatorCookies: J.Interceptor, NavigatorUserMediaError: J.Interceptor, NodeFilter: J.Interceptor, NodeIterator: J.Interceptor, NonDocumentTypeChildNode: J.Interceptor, NonElementParentNode: J.Interceptor, NoncedElement: J.Interceptor, OffscreenCanvasRenderingContext2D: J.Interceptor, OverconstrainedError: J.Interceptor, PaintRenderingContext2D: J.Interceptor, PaintSize: J.Interceptor, PaintWorkletGlobalScope: J.Interceptor, PasswordCredential: J.Interceptor, Path2D: J.Interceptor, PaymentAddress: J.Interceptor, PaymentInstruments: J.Interceptor, PaymentManager: J.Interceptor, PaymentResponse: J.Interceptor, PerformanceEntry: J.Interceptor, PerformanceLongTaskTiming: J.Interceptor, PerformanceMark: J.Interceptor, PerformanceMeasure: J.Interceptor, PerformanceNavigation: J.Interceptor, PerformanceNavigationTiming: J.Interceptor, PerformanceObserver: J.Interceptor, PerformanceObserverEntryList: J.Interceptor, PerformancePaintTiming: J.Interceptor, PerformanceResourceTiming: J.Interceptor, PerformanceServerTiming: J.Interceptor, PerformanceTiming: J.Interceptor, Permissions: J.Interceptor, PhotoCapabilities: J.Interceptor, PositionError: J.Interceptor, Presentation: J.Interceptor, PresentationReceiver: J.Interceptor, PublicKeyCredential: J.Interceptor, PushManager: J.Interceptor, PushMessageData: J.Interceptor, PushSubscription: J.Interceptor, PushSubscriptionOptions: J.Interceptor, Range: J.Interceptor, RelatedApplication: J.Interceptor, ReportBody: J.Interceptor, ReportingObserver: J.Interceptor, ResizeObserver: J.Interceptor, ResizeObserverEntry: J.Interceptor, RTCCertificate: J.Interceptor, RTCIceCandidate: J.Interceptor, mozRTCIceCandidate: J.Interceptor, RTCLegacyStatsReport: J.Interceptor, RTCRtpContributingSource: J.Interceptor, RTCRtpReceiver: J.Interceptor, RTCRtpSender: J.Interceptor, RTCSessionDescription: J.Interceptor, mozRTCSessionDescription: J.Interceptor, RTCStatsResponse: J.Interceptor, Screen: J.Interceptor, ScrollState: J.Interceptor, ScrollTimeline: J.Interceptor, Selection: J.Interceptor, SharedArrayBuffer: J.Interceptor, SpeechRecognitionAlternative: J.Interceptor, SpeechSynthesisVoice: J.Interceptor, StaticRange: J.Interceptor, StorageManager: J.Interceptor, StyleMedia: J.Interceptor, StylePropertyMap: J.Interceptor, StylePropertyMapReadonly: J.Interceptor, SyncManager: J.Interceptor, TaskAttributionTiming: J.Interceptor, TextDetector: J.Interceptor, TextMetrics: J.Interceptor, TrackDefault: J.Interceptor, TreeWalker: J.Interceptor, TrustedHTML: J.Interceptor, TrustedScriptURL: J.Interceptor, TrustedURL: J.Interceptor, UnderlyingSourceBase: J.Interceptor, URLSearchParams: J.Interceptor, VRCoordinateSystem: J.Interceptor, VRDisplayCapabilities: J.Interceptor, VREyeParameters: J.Interceptor, VRFrameData: J.Interceptor, VRFrameOfReference: J.Interceptor, VRPose: J.Interceptor, VRStageBounds: J.Interceptor, VRStageBoundsPoint: J.Interceptor, VRStageParameters: J.Interceptor, ValidityState: J.Interceptor, VideoPlaybackQuality: J.Interceptor, VideoTrack: J.Interceptor, VTTRegion: J.Interceptor, WindowClient: J.Interceptor, WorkletAnimation: J.Interceptor, WorkletGlobalScope: J.Interceptor, XPathEvaluator: J.Interceptor, XPathExpression: J.Interceptor, XPathNSResolver: J.Interceptor, XPathResult: J.Interceptor, XMLSerializer: J.Interceptor, XSLTProcessor: J.Interceptor, Bluetooth: J.Interceptor, BluetoothCharacteristicProperties: J.Interceptor, BluetoothRemoteGATTServer: J.Interceptor, BluetoothRemoteGATTService: J.Interceptor, BluetoothUUID: J.Interceptor, BudgetService: J.Interceptor, Cache: J.Interceptor, DOMFileSystemSync: J.Interceptor, DirectoryEntrySync: J.Interceptor, DirectoryReaderSync: J.Interceptor, EntrySync: J.Interceptor, FileEntrySync: J.Interceptor, FileReaderSync: J.Interceptor, FileWriterSync: J.Interceptor, HTMLAllCollection: J.Interceptor, Mojo: J.Interceptor, MojoHandle: J.Interceptor, MojoWatcher: J.Interceptor, NFC: J.Interceptor, PagePopupController: J.Interceptor, Report: J.Interceptor, Request: J.Interceptor, Response: J.Interceptor, SubtleCrypto: J.Interceptor, USBAlternateInterface: J.Interceptor, USBConfiguration: J.Interceptor, USBDevice: J.Interceptor, USBEndpoint: J.Interceptor, USBInTransferResult: J.Interceptor, USBInterface: J.Interceptor, USBIsochronousInTransferPacket: J.Interceptor, USBIsochronousInTransferResult: J.Interceptor, USBIsochronousOutTransferPacket: J.Interceptor, USBIsochronousOutTransferResult: J.Interceptor, USBOutTransferResult: J.Interceptor, WorkerLocation: J.Interceptor, WorkerNavigator: J.Interceptor, Worklet: J.Interceptor, IDBCursor: J.Interceptor, IDBCursorWithValue: J.Interceptor, IDBFactory: J.Interceptor, IDBIndex: J.Interceptor, IDBObjectStore: J.Interceptor, IDBObservation: J.Interceptor, IDBObserver: J.Interceptor, IDBObserverChanges: J.Interceptor, SVGAngle: J.Interceptor, SVGAnimatedAngle: J.Interceptor, SVGAnimatedBoolean: J.Interceptor, SVGAnimatedEnumeration: J.Interceptor, SVGAnimatedInteger: J.Interceptor, SVGAnimatedLength: J.Interceptor, SVGAnimatedLengthList: J.Interceptor, SVGAnimatedNumber: J.Interceptor, SVGAnimatedNumberList: J.Interceptor, SVGAnimatedPreserveAspectRatio: J.Interceptor, SVGAnimatedRect: J.Interceptor, SVGAnimatedString: J.Interceptor, SVGAnimatedTransformList: J.Interceptor, SVGMatrix: J.Interceptor, SVGPoint: J.Interceptor, SVGPreserveAspectRatio: J.Interceptor, SVGRect: J.Interceptor, SVGUnitTypes: J.Interceptor, AudioListener: J.Interceptor, AudioParam: J.Interceptor, AudioTrack: J.Interceptor, AudioWorkletGlobalScope: J.Interceptor, AudioWorkletProcessor: J.Interceptor, PeriodicWave: J.Interceptor, WebGLActiveInfo: J.Interceptor, ANGLEInstancedArrays: J.Interceptor, ANGLE_instanced_arrays: J.Interceptor, WebGLBuffer: J.Interceptor, WebGLCanvas: J.Interceptor, WebGLColorBufferFloat: J.Interceptor, WebGLCompressedTextureASTC: J.Interceptor, WebGLCompressedTextureATC: J.Interceptor, WEBGL_compressed_texture_atc: J.Interceptor, WebGLCompressedTextureETC1: J.Interceptor, WEBGL_compressed_texture_etc1: J.Interceptor, WebGLCompressedTextureETC: J.Interceptor, WebGLCompressedTexturePVRTC: J.Interceptor, WEBGL_compressed_texture_pvrtc: J.Interceptor, WebGLCompressedTextureS3TC: J.Interceptor, WEBGL_compressed_texture_s3tc: J.Interceptor, WebGLCompressedTextureS3TCsRGB: J.Interceptor, WebGLDebugRendererInfo: J.Interceptor, WEBGL_debug_renderer_info: J.Interceptor, WebGLDebugShaders: J.Interceptor, WEBGL_debug_shaders: J.Interceptor, WebGLDepthTexture: J.Interceptor, WEBGL_depth_texture: J.Interceptor, WebGLDrawBuffers: J.Interceptor, WEBGL_draw_buffers: J.Interceptor, EXTsRGB: J.Interceptor, EXT_sRGB: J.Interceptor, EXTBlendMinMax: J.Interceptor, EXT_blend_minmax: J.Interceptor, EXTColorBufferFloat: J.Interceptor, EXTColorBufferHalfFloat: J.Interceptor, EXTDisjointTimerQuery: J.Interceptor, EXTDisjointTimerQueryWebGL2: J.Interceptor, EXTFragDepth: J.Interceptor, EXT_frag_depth: J.Interceptor, EXTShaderTextureLOD: J.Interceptor, EXT_shader_texture_lod: J.Interceptor, EXTTextureFilterAnisotropic: J.Interceptor, EXT_texture_filter_anisotropic: J.Interceptor, WebGLFramebuffer: J.Interceptor, WebGLGetBufferSubDataAsync: J.Interceptor, WebGLLoseContext: J.Interceptor, WebGLExtensionLoseContext: J.Interceptor, WEBGL_lose_context: J.Interceptor, OESElementIndexUint: J.Interceptor, OES_element_index_uint: J.Interceptor, OESStandardDerivatives: J.Interceptor, OES_standard_derivatives: J.Interceptor, OESTextureFloat: J.Interceptor, OES_texture_float: J.Interceptor, OESTextureFloatLinear: J.Interceptor, OES_texture_float_linear: J.Interceptor, OESTextureHalfFloat: J.Interceptor, OES_texture_half_float: J.Interceptor, OESTextureHalfFloatLinear: J.Interceptor, OES_texture_half_float_linear: J.Interceptor, OESVertexArrayObject: J.Interceptor, OES_vertex_array_object: J.Interceptor, WebGLProgram: J.Interceptor, WebGLQuery: J.Interceptor, WebGLRenderbuffer: J.Interceptor, WebGLRenderingContext: J.Interceptor, WebGL2RenderingContext: J.Interceptor, WebGLSampler: J.Interceptor, WebGLShader: J.Interceptor, WebGLShaderPrecisionFormat: J.Interceptor, WebGLSync: J.Interceptor, WebGLTexture: J.Interceptor, WebGLTimerQueryEXT: J.Interceptor, WebGLTransformFeedback: J.Interceptor, WebGLUniformLocation: J.Interceptor, WebGLVertexArrayObject: J.Interceptor, WebGLVertexArrayObjectOES: J.Interceptor, WebGL: J.Interceptor, WebGL2RenderingContextBase: J.Interceptor, Database: J.Interceptor, SQLError: J.Interceptor, SQLResultSet: J.Interceptor, SQLTransaction: J.Interceptor, ArrayBuffer: H.NativeByteBuffer, ArrayBufferView: H.NativeTypedData, DataView: H.NativeByteData, Float32Array: H.NativeFloat32List, Float64Array: H.NativeFloat64List, Int16Array: H.NativeInt16List, Int32Array: H.NativeInt32List, Int8Array: H.NativeInt8List, Uint16Array: H.NativeUint16List, Uint32Array: H.NativeUint32List, Uint8ClampedArray: H.NativeUint8ClampedList, CanvasPixelArray: H.NativeUint8ClampedList, Uint8Array: H.NativeUint8List, HTMLAudioElement: W.HtmlElement, HTMLBRElement: W.HtmlElement, HTMLBaseElement: W.HtmlElement, HTMLBodyElement: W.HtmlElement, HTMLButtonElement: W.HtmlElement, HTMLCanvasElement: W.HtmlElement, HTMLContentElement: W.HtmlElement, HTMLDListElement: W.HtmlElement, HTMLDataElement: W.HtmlElement, HTMLDataListElement: W.HtmlElement, HTMLDetailsElement: W.HtmlElement, HTMLDialogElement: W.HtmlElement, HTMLDivElement: W.HtmlElement, HTMLEmbedElement: W.HtmlElement, HTMLFieldSetElement: W.HtmlElement, HTMLHRElement: W.HtmlElement, HTMLHeadElement: W.HtmlElement, HTMLHeadingElement: W.HtmlElement, HTMLHtmlElement: W.HtmlElement, HTMLIFrameElement: W.HtmlElement, HTMLImageElement: W.HtmlElement, HTMLInputElement: W.HtmlElement, HTMLLIElement: W.HtmlElement, HTMLLabelElement: W.HtmlElement, HTMLLegendElement: W.HtmlElement, HTMLLinkElement: W.HtmlElement, HTMLMapElement: W.HtmlElement, HTMLMediaElement: W.HtmlElement, HTMLMenuElement: W.HtmlElement, HTMLMetaElement: W.HtmlElement, HTMLMeterElement: W.HtmlElement, HTMLModElement: W.HtmlElement, HTMLOListElement: W.HtmlElement, HTMLObjectElement: W.HtmlElement, HTMLOptGroupElement: W.HtmlElement, HTMLOptionElement: W.HtmlElement, HTMLOutputElement: W.HtmlElement, HTMLParagraphElement: W.HtmlElement, HTMLParamElement: W.HtmlElement, HTMLPictureElement: W.HtmlElement, HTMLPreElement: W.HtmlElement, HTMLProgressElement: W.HtmlElement, HTMLQuoteElement: W.HtmlElement, HTMLScriptElement: W.HtmlElement, HTMLShadowElement: W.HtmlElement, HTMLSlotElement: W.HtmlElement, HTMLSourceElement: W.HtmlElement, HTMLSpanElement: W.HtmlElement, HTMLStyleElement: W.HtmlElement, HTMLTableCaptionElement: W.HtmlElement, HTMLTableCellElement: W.HtmlElement, HTMLTableDataCellElement: W.HtmlElement, HTMLTableHeaderCellElement: W.HtmlElement, HTMLTableColElement: W.HtmlElement, HTMLTableElement: W.HtmlElement, HTMLTableRowElement: W.HtmlElement, HTMLTableSectionElement: W.HtmlElement, HTMLTemplateElement: W.HtmlElement, HTMLTextAreaElement: W.HtmlElement, HTMLTimeElement: W.HtmlElement, HTMLTitleElement: W.HtmlElement, HTMLTrackElement: W.HtmlElement, HTMLUListElement: W.HtmlElement, HTMLUnknownElement: W.HtmlElement, HTMLVideoElement: W.HtmlElement, HTMLDirectoryElement: W.HtmlElement, HTMLFontElement: W.HtmlElement, HTMLFrameElement: W.HtmlElement, HTMLFrameSetElement: W.HtmlElement, HTMLMarqueeElement: W.HtmlElement, HTMLElement: W.HtmlElement, AccessibleNodeList: W.AccessibleNodeList, HTMLAnchorElement: W.AnchorElement, HTMLAreaElement: W.AreaElement, Blob: W.Blob, CDATASection: W.CharacterData, CharacterData: W.CharacterData, Comment: W.CharacterData, ProcessingInstruction: W.CharacterData, Text: W.CharacterData, CSSNumericValue: W.CssNumericValue, CSSUnitValue: W.CssNumericValue, CSSPerspective: W.CssPerspective, CSSCharsetRule: W.CssRule, CSSConditionRule: W.CssRule, CSSFontFaceRule: W.CssRule, CSSGroupingRule: W.CssRule, CSSImportRule: W.CssRule, CSSKeyframeRule: W.CssRule, MozCSSKeyframeRule: W.CssRule, WebKitCSSKeyframeRule: W.CssRule, CSSKeyframesRule: W.CssRule, MozCSSKeyframesRule: W.CssRule, WebKitCSSKeyframesRule: W.CssRule, CSSMediaRule: W.CssRule, CSSNamespaceRule: W.CssRule, CSSPageRule: W.CssRule, CSSRule: W.CssRule, CSSStyleRule: W.CssRule, CSSSupportsRule: W.CssRule, CSSViewportRule: W.CssRule, CSSStyleDeclaration: W.CssStyleDeclaration, MSStyleCSSProperties: W.CssStyleDeclaration, CSS2Properties: W.CssStyleDeclaration, CSSImageValue: W.CssStyleValue, CSSKeywordValue: W.CssStyleValue, CSSPositionValue: W.CssStyleValue, CSSResourceValue: W.CssStyleValue, CSSURLImageValue: W.CssStyleValue, CSSStyleValue: W.CssStyleValue, CSSMatrixComponent: W.CssTransformComponent, CSSRotation: W.CssTransformComponent, CSSScale: W.CssTransformComponent, CSSSkew: W.CssTransformComponent, CSSTranslation: W.CssTransformComponent, CSSTransformComponent: W.CssTransformComponent, CSSTransformValue: W.CssTransformValue, CSSUnparsedValue: W.CssUnparsedValue, DataTransferItemList: W.DataTransferItemList, Document: W.Document, HTMLDocument: W.Document, XMLDocument: W.Document, DOMException: W.DomException, ClientRectList: W.DomRectList, DOMRectList: W.DomRectList, DOMRectReadOnly: W.DomRectReadOnly, DOMStringList: W.DomStringList, DOMTokenList: W.DomTokenList, SVGAElement: W.Element, SVGAnimateElement: W.Element, SVGAnimateMotionElement: W.Element, SVGAnimateTransformElement: W.Element, SVGAnimationElement: W.Element, SVGCircleElement: W.Element, SVGClipPathElement: W.Element, SVGDefsElement: W.Element, SVGDescElement: W.Element, SVGDiscardElement: W.Element, SVGEllipseElement: W.Element, SVGFEBlendElement: W.Element, SVGFEColorMatrixElement: W.Element, SVGFEComponentTransferElement: W.Element, SVGFECompositeElement: W.Element, SVGFEConvolveMatrixElement: W.Element, SVGFEDiffuseLightingElement: W.Element, SVGFEDisplacementMapElement: W.Element, SVGFEDistantLightElement: W.Element, SVGFEFloodElement: W.Element, SVGFEFuncAElement: W.Element, SVGFEFuncBElement: W.Element, SVGFEFuncGElement: W.Element, SVGFEFuncRElement: W.Element, SVGFEGaussianBlurElement: W.Element, SVGFEImageElement: W.Element, SVGFEMergeElement: W.Element, SVGFEMergeNodeElement: W.Element, SVGFEMorphologyElement: W.Element, SVGFEOffsetElement: W.Element, SVGFEPointLightElement: W.Element, SVGFESpecularLightingElement: W.Element, SVGFESpotLightElement: W.Element, SVGFETileElement: W.Element, SVGFETurbulenceElement: W.Element, SVGFilterElement: W.Element, SVGForeignObjectElement: W.Element, SVGGElement: W.Element, SVGGeometryElement: W.Element, SVGGraphicsElement: W.Element, SVGImageElement: W.Element, SVGLineElement: W.Element, SVGLinearGradientElement: W.Element, SVGMarkerElement: W.Element, SVGMaskElement: W.Element, SVGMetadataElement: W.Element, SVGPathElement: W.Element, SVGPatternElement: W.Element, SVGPolygonElement: W.Element, SVGPolylineElement: W.Element, SVGRadialGradientElement: W.Element, SVGRectElement: W.Element, SVGScriptElement: W.Element, SVGSetElement: W.Element, SVGStopElement: W.Element, SVGStyleElement: W.Element, SVGElement: W.Element, SVGSVGElement: W.Element, SVGSwitchElement: W.Element, SVGSymbolElement: W.Element, SVGTSpanElement: W.Element, SVGTextContentElement: W.Element, SVGTextElement: W.Element, SVGTextPathElement: W.Element, SVGTextPositioningElement: W.Element, SVGTitleElement: W.Element, SVGUseElement: W.Element, SVGViewElement: W.Element, SVGGradientElement: W.Element, SVGComponentTransferFunctionElement: W.Element, SVGFEDropShadowElement: W.Element, SVGMPathElement: W.Element, Element: W.Element, AbortPaymentEvent: W.Event, AnimationEvent: W.Event, AnimationPlaybackEvent: W.Event, ApplicationCacheErrorEvent: W.Event, BackgroundFetchClickEvent: W.Event, BackgroundFetchEvent: W.Event, BackgroundFetchFailEvent: W.Event, BackgroundFetchedEvent: W.Event, BeforeInstallPromptEvent: W.Event, BeforeUnloadEvent: W.Event, BlobEvent: W.Event, CanMakePaymentEvent: W.Event, ClipboardEvent: W.Event, CloseEvent: W.Event, CustomEvent: W.Event, DeviceMotionEvent: W.Event, DeviceOrientationEvent: W.Event, ErrorEvent: W.Event, ExtendableEvent: W.Event, ExtendableMessageEvent: W.Event, FetchEvent: W.Event, FontFaceSetLoadEvent: W.Event, ForeignFetchEvent: W.Event, GamepadEvent: W.Event, HashChangeEvent: W.Event, InstallEvent: W.Event, MediaEncryptedEvent: W.Event, MediaKeyMessageEvent: W.Event, MediaQueryListEvent: W.Event, MediaStreamEvent: W.Event, MediaStreamTrackEvent: W.Event, MIDIConnectionEvent: W.Event, MIDIMessageEvent: W.Event, MutationEvent: W.Event, NotificationEvent: W.Event, PageTransitionEvent: W.Event, PaymentRequestEvent: W.Event, PaymentRequestUpdateEvent: W.Event, PopStateEvent: W.Event, PresentationConnectionAvailableEvent: W.Event, PresentationConnectionCloseEvent: W.Event, PromiseRejectionEvent: W.Event, PushEvent: W.Event, RTCDataChannelEvent: W.Event, RTCDTMFToneChangeEvent: W.Event, RTCPeerConnectionIceEvent: W.Event, RTCTrackEvent: W.Event, SecurityPolicyViolationEvent: W.Event, SensorErrorEvent: W.Event, SpeechRecognitionError: W.Event, SpeechRecognitionEvent: W.Event, SpeechSynthesisEvent: W.Event, StorageEvent: W.Event, SyncEvent: W.Event, TrackEvent: W.Event, TransitionEvent: W.Event, WebKitTransitionEvent: W.Event, VRDeviceEvent: W.Event, VRDisplayEvent: W.Event, VRSessionEvent: W.Event, MojoInterfaceRequestEvent: W.Event, USBConnectionEvent: W.Event, IDBVersionChangeEvent: W.Event, AudioProcessingEvent: W.Event, OfflineAudioCompletionEvent: W.Event, WebGLContextEvent: W.Event, Event: W.Event, InputEvent: W.Event, EventSource: W.EventSource, AbsoluteOrientationSensor: W.EventTarget, Accelerometer: W.EventTarget, AccessibleNode: W.EventTarget, AmbientLightSensor: W.EventTarget, Animation: W.EventTarget, ApplicationCache: W.EventTarget, DOMApplicationCache: W.EventTarget, OfflineResourceList: W.EventTarget, BackgroundFetchRegistration: W.EventTarget, BatteryManager: W.EventTarget, BroadcastChannel: W.EventTarget, CanvasCaptureMediaStreamTrack: W.EventTarget, FontFaceSet: W.EventTarget, Gyroscope: W.EventTarget, LinearAccelerationSensor: W.EventTarget, Magnetometer: W.EventTarget, MediaDevices: W.EventTarget, MediaKeySession: W.EventTarget, MediaQueryList: W.EventTarget, MediaRecorder: W.EventTarget, MediaSource: W.EventTarget, MediaStream: W.EventTarget, MediaStreamTrack: W.EventTarget, MessagePort: W.EventTarget, MIDIAccess: W.EventTarget, MIDIInput: W.EventTarget, MIDIOutput: W.EventTarget, MIDIPort: W.EventTarget, NetworkInformation: W.EventTarget, Notification: W.EventTarget, OffscreenCanvas: W.EventTarget, OrientationSensor: W.EventTarget, PaymentRequest: W.EventTarget, Performance: W.EventTarget, PermissionStatus: W.EventTarget, PresentationAvailability: W.EventTarget, PresentationConnection: W.EventTarget, PresentationConnectionList: W.EventTarget, PresentationRequest: W.EventTarget, RelativeOrientationSensor: W.EventTarget, RemotePlayback: W.EventTarget, RTCDataChannel: W.EventTarget, DataChannel: W.EventTarget, RTCDTMFSender: W.EventTarget, RTCPeerConnection: W.EventTarget, webkitRTCPeerConnection: W.EventTarget, mozRTCPeerConnection: W.EventTarget, ScreenOrientation: W.EventTarget, Sensor: W.EventTarget, ServiceWorker: W.EventTarget, ServiceWorkerContainer: W.EventTarget, ServiceWorkerRegistration: W.EventTarget, SharedWorker: W.EventTarget, SpeechRecognition: W.EventTarget, SpeechSynthesis: W.EventTarget, SpeechSynthesisUtterance: W.EventTarget, VR: W.EventTarget, VRDevice: W.EventTarget, VRDisplay: W.EventTarget, VRSession: W.EventTarget, VisualViewport: W.EventTarget, WebSocket: W.EventTarget, Worker: W.EventTarget, WorkerPerformance: W.EventTarget, BluetoothDevice: W.EventTarget, BluetoothRemoteGATTCharacteristic: W.EventTarget, Clipboard: W.EventTarget, MojoInterfaceInterceptor: W.EventTarget, USB: W.EventTarget, IDBDatabase: W.EventTarget, IDBOpenDBRequest: W.EventTarget, IDBVersionChangeRequest: W.EventTarget, IDBRequest: W.EventTarget, IDBTransaction: W.EventTarget, AnalyserNode: W.EventTarget, RealtimeAnalyserNode: W.EventTarget, AudioBufferSourceNode: W.EventTarget, AudioDestinationNode: W.EventTarget, AudioNode: W.EventTarget, AudioScheduledSourceNode: W.EventTarget, AudioWorkletNode: W.EventTarget, BiquadFilterNode: W.EventTarget, ChannelMergerNode: W.EventTarget, AudioChannelMerger: W.EventTarget, ChannelSplitterNode: W.EventTarget, AudioChannelSplitter: W.EventTarget, ConstantSourceNode: W.EventTarget, ConvolverNode: W.EventTarget, DelayNode: W.EventTarget, DynamicsCompressorNode: W.EventTarget, GainNode: W.EventTarget, AudioGainNode: W.EventTarget, IIRFilterNode: W.EventTarget, MediaElementAudioSourceNode: W.EventTarget, MediaStreamAudioDestinationNode: W.EventTarget, MediaStreamAudioSourceNode: W.EventTarget, OscillatorNode: W.EventTarget, Oscillator: W.EventTarget, PannerNode: W.EventTarget, AudioPannerNode: W.EventTarget, webkitAudioPannerNode: W.EventTarget, ScriptProcessorNode: W.EventTarget, JavaScriptAudioNode: W.EventTarget, StereoPannerNode: W.EventTarget, WaveShaperNode: W.EventTarget, EventTarget: W.EventTarget, File: W.File, FileList: W.FileList, FileReader: W.FileReader, FileWriter: W.FileWriter, HTMLFormElement: W.FormElement, Gamepad: W.Gamepad, History: W.History, HTMLCollection: W.HtmlCollection, HTMLFormControlsCollection: W.HtmlCollection, HTMLOptionsCollection: W.HtmlCollection, XMLHttpRequest: W.HttpRequest, XMLHttpRequestUpload: W.HttpRequestEventTarget, XMLHttpRequestEventTarget: W.HttpRequestEventTarget, ImageData: W.ImageData, KeyboardEvent: W.KeyboardEvent, Location: W.Location, MediaList: W.MediaList, MessageEvent: W.MessageEvent, MIDIInputMap: W.MidiInputMap, MIDIOutputMap: W.MidiOutputMap, MimeType: W.MimeType, MimeTypeArray: W.MimeTypeArray, DocumentFragment: W.Node, ShadowRoot: W.Node, Attr: W.Node, DocumentType: W.Node, Node: W.Node, NodeList: W.NodeList, RadioNodeList: W.NodeList, Plugin: W.Plugin, PluginArray: W.PluginArray, ProgressEvent: W.ProgressEvent, ResourceProgressEvent: W.ProgressEvent, RTCStatsReport: W.RtcStatsReport, HTMLSelectElement: W.SelectElement, SourceBuffer: W.SourceBuffer, SourceBufferList: W.SourceBufferList, SpeechGrammar: W.SpeechGrammar, SpeechGrammarList: W.SpeechGrammarList, SpeechRecognitionResult: W.SpeechRecognitionResult, Storage: W.Storage, CSSStyleSheet: W.StyleSheet, StyleSheet: W.StyleSheet, TextTrack: W.TextTrack, TextTrackCue: W.TextTrackCue, VTTCue: W.TextTrackCue, TextTrackCueList: W.TextTrackCueList, TextTrackList: W.TextTrackList, TimeRanges: W.TimeRanges, Touch: W.Touch, TouchList: W.TouchList, TrackDefaultList: W.TrackDefaultList, CompositionEvent: W.UIEvent, FocusEvent: W.UIEvent, MouseEvent: W.UIEvent, DragEvent: W.UIEvent, PointerEvent: W.UIEvent, TextEvent: W.UIEvent, TouchEvent: W.UIEvent, WheelEvent: W.UIEvent, UIEvent: W.UIEvent, URL: W.Url, VideoTrackList: W.VideoTrackList, Window: W.Window, DOMWindow: W.Window, DedicatedWorkerGlobalScope: W.WorkerGlobalScope, ServiceWorkerGlobalScope: W.WorkerGlobalScope, SharedWorkerGlobalScope: W.WorkerGlobalScope, WorkerGlobalScope: W.WorkerGlobalScope, CSSRuleList: W._CssRuleList, ClientRect: W._DomRect, DOMRect: W._DomRect, GamepadList: W._GamepadList, NamedNodeMap: W._NamedNodeMap, MozNamedAttrMap: W._NamedNodeMap, SpeechRecognitionResultList: W._SpeechRecognitionResultList, StyleSheetList: W._StyleSheetList, IDBKeyRange: P.KeyRange, SVGLength: P.Length, SVGLengthList: P.LengthList, SVGNumber: P.Number, SVGNumberList: P.NumberList, SVGPointList: P.PointList, SVGStringList: P.StringList, SVGTransform: P.Transform, SVGTransformList: P.TransformList, AudioBuffer: P.AudioBuffer, AudioParamMap: P.AudioParamMap, AudioTrackList: P.AudioTrackList, AudioContext: P.BaseAudioContext, webkitAudioContext: P.BaseAudioContext, BaseAudioContext: P.BaseAudioContext, OfflineAudioContext: P.OfflineAudioContext, SQLResultSetRowList: P.SqlResultSetRowList});
    hunkHelpers.setOrUpdateLeafTags({AnimationEffectReadOnly: true, AnimationEffectTiming: true, AnimationEffectTimingReadOnly: true, AnimationTimeline: true, AnimationWorkletGlobalScope: true, AuthenticatorAssertionResponse: true, AuthenticatorAttestationResponse: true, AuthenticatorResponse: true, BackgroundFetchFetch: true, BackgroundFetchManager: true, BackgroundFetchSettledFetch: true, BarProp: true, BarcodeDetector: true, BluetoothRemoteGATTDescriptor: true, Body: true, BudgetState: true, CacheStorage: true, CanvasGradient: true, CanvasPattern: true, CanvasRenderingContext2D: true, Client: true, Clients: true, CookieStore: true, Coordinates: true, Credential: true, CredentialUserData: true, CredentialsContainer: true, Crypto: true, CryptoKey: true, CSS: true, CSSVariableReferenceValue: true, CustomElementRegistry: true, DataTransfer: true, DataTransferItem: true, DeprecatedStorageInfo: true, DeprecatedStorageQuota: true, DeprecationReport: true, DetectedBarcode: true, DetectedFace: true, DetectedText: true, DeviceAcceleration: true, DeviceRotationRate: true, DirectoryEntry: true, DirectoryReader: true, DocumentOrShadowRoot: true, DocumentTimeline: true, DOMError: true, DOMImplementation: true, Iterator: true, DOMMatrix: true, DOMMatrixReadOnly: true, DOMParser: true, DOMPoint: true, DOMPointReadOnly: true, DOMQuad: true, DOMStringMap: true, Entry: true, External: true, FaceDetector: true, FederatedCredential: true, FileEntry: true, DOMFileSystem: true, FontFace: true, FontFaceSource: true, FormData: true, GamepadButton: true, GamepadPose: true, Geolocation: true, Position: true, Headers: true, HTMLHyperlinkElementUtils: true, IdleDeadline: true, ImageBitmap: true, ImageBitmapRenderingContext: true, ImageCapture: true, InputDeviceCapabilities: true, IntersectionObserver: true, IntersectionObserverEntry: true, InterventionReport: true, KeyframeEffect: true, KeyframeEffectReadOnly: true, MediaCapabilities: true, MediaCapabilitiesInfo: true, MediaDeviceInfo: true, MediaError: true, MediaKeyStatusMap: true, MediaKeySystemAccess: true, MediaKeys: true, MediaKeysPolicy: true, MediaMetadata: true, MediaSession: true, MediaSettingsRange: true, MemoryInfo: true, MessageChannel: true, Metadata: true, MutationObserver: true, WebKitMutationObserver: true, MutationRecord: true, NavigationPreloadManager: true, Navigator: true, NavigatorAutomationInformation: true, NavigatorConcurrentHardware: true, NavigatorCookies: true, NavigatorUserMediaError: true, NodeFilter: true, NodeIterator: true, NonDocumentTypeChildNode: true, NonElementParentNode: true, NoncedElement: true, OffscreenCanvasRenderingContext2D: true, OverconstrainedError: true, PaintRenderingContext2D: true, PaintSize: true, PaintWorkletGlobalScope: true, PasswordCredential: true, Path2D: true, PaymentAddress: true, PaymentInstruments: true, PaymentManager: true, PaymentResponse: true, PerformanceEntry: true, PerformanceLongTaskTiming: true, PerformanceMark: true, PerformanceMeasure: true, PerformanceNavigation: true, PerformanceNavigationTiming: true, PerformanceObserver: true, PerformanceObserverEntryList: true, PerformancePaintTiming: true, PerformanceResourceTiming: true, PerformanceServerTiming: true, PerformanceTiming: true, Permissions: true, PhotoCapabilities: true, PositionError: true, Presentation: true, PresentationReceiver: true, PublicKeyCredential: true, PushManager: true, PushMessageData: true, PushSubscription: true, PushSubscriptionOptions: true, Range: true, RelatedApplication: true, ReportBody: true, ReportingObserver: true, ResizeObserver: true, ResizeObserverEntry: true, RTCCertificate: true, RTCIceCandidate: true, mozRTCIceCandidate: true, RTCLegacyStatsReport: true, RTCRtpContributingSource: true, RTCRtpReceiver: true, RTCRtpSender: true, RTCSessionDescription: true, mozRTCSessionDescription: true, RTCStatsResponse: true, Screen: true, ScrollState: true, ScrollTimeline: true, Selection: true, SharedArrayBuffer: true, SpeechRecognitionAlternative: true, SpeechSynthesisVoice: true, StaticRange: true, StorageManager: true, StyleMedia: true, StylePropertyMap: true, StylePropertyMapReadonly: true, SyncManager: true, TaskAttributionTiming: true, TextDetector: true, TextMetrics: true, TrackDefault: true, TreeWalker: true, TrustedHTML: true, TrustedScriptURL: true, TrustedURL: true, UnderlyingSourceBase: true, URLSearchParams: true, VRCoordinateSystem: true, VRDisplayCapabilities: true, VREyeParameters: true, VRFrameData: true, VRFrameOfReference: true, VRPose: true, VRStageBounds: true, VRStageBoundsPoint: true, VRStageParameters: true, ValidityState: true, VideoPlaybackQuality: true, VideoTrack: true, VTTRegion: true, WindowClient: true, WorkletAnimation: true, WorkletGlobalScope: true, XPathEvaluator: true, XPathExpression: true, XPathNSResolver: true, XPathResult: true, XMLSerializer: true, XSLTProcessor: true, Bluetooth: true, BluetoothCharacteristicProperties: true, BluetoothRemoteGATTServer: true, BluetoothRemoteGATTService: true, BluetoothUUID: true, BudgetService: true, Cache: true, DOMFileSystemSync: true, DirectoryEntrySync: true, DirectoryReaderSync: true, EntrySync: true, FileEntrySync: true, FileReaderSync: true, FileWriterSync: true, HTMLAllCollection: true, Mojo: true, MojoHandle: true, MojoWatcher: true, NFC: true, PagePopupController: true, Report: true, Request: true, Response: true, SubtleCrypto: true, USBAlternateInterface: true, USBConfiguration: true, USBDevice: true, USBEndpoint: true, USBInTransferResult: true, USBInterface: true, USBIsochronousInTransferPacket: true, USBIsochronousInTransferResult: true, USBIsochronousOutTransferPacket: true, USBIsochronousOutTransferResult: true, USBOutTransferResult: true, WorkerLocation: true, WorkerNavigator: true, Worklet: true, IDBCursor: true, IDBCursorWithValue: true, IDBFactory: true, IDBIndex: true, IDBObjectStore: true, IDBObservation: true, IDBObserver: true, IDBObserverChanges: true, SVGAngle: true, SVGAnimatedAngle: true, SVGAnimatedBoolean: true, SVGAnimatedEnumeration: true, SVGAnimatedInteger: true, SVGAnimatedLength: true, SVGAnimatedLengthList: true, SVGAnimatedNumber: true, SVGAnimatedNumberList: true, SVGAnimatedPreserveAspectRatio: true, SVGAnimatedRect: true, SVGAnimatedString: true, SVGAnimatedTransformList: true, SVGMatrix: true, SVGPoint: true, SVGPreserveAspectRatio: true, SVGRect: true, SVGUnitTypes: true, AudioListener: true, AudioParam: true, AudioTrack: true, AudioWorkletGlobalScope: true, AudioWorkletProcessor: true, PeriodicWave: true, WebGLActiveInfo: true, ANGLEInstancedArrays: true, ANGLE_instanced_arrays: true, WebGLBuffer: true, WebGLCanvas: true, WebGLColorBufferFloat: true, WebGLCompressedTextureASTC: true, WebGLCompressedTextureATC: true, WEBGL_compressed_texture_atc: true, WebGLCompressedTextureETC1: true, WEBGL_compressed_texture_etc1: true, WebGLCompressedTextureETC: true, WebGLCompressedTexturePVRTC: true, WEBGL_compressed_texture_pvrtc: true, WebGLCompressedTextureS3TC: true, WEBGL_compressed_texture_s3tc: true, WebGLCompressedTextureS3TCsRGB: true, WebGLDebugRendererInfo: true, WEBGL_debug_renderer_info: true, WebGLDebugShaders: true, WEBGL_debug_shaders: true, WebGLDepthTexture: true, WEBGL_depth_texture: true, WebGLDrawBuffers: true, WEBGL_draw_buffers: true, EXTsRGB: true, EXT_sRGB: true, EXTBlendMinMax: true, EXT_blend_minmax: true, EXTColorBufferFloat: true, EXTColorBufferHalfFloat: true, EXTDisjointTimerQuery: true, EXTDisjointTimerQueryWebGL2: true, EXTFragDepth: true, EXT_frag_depth: true, EXTShaderTextureLOD: true, EXT_shader_texture_lod: true, EXTTextureFilterAnisotropic: true, EXT_texture_filter_anisotropic: true, WebGLFramebuffer: true, WebGLGetBufferSubDataAsync: true, WebGLLoseContext: true, WebGLExtensionLoseContext: true, WEBGL_lose_context: true, OESElementIndexUint: true, OES_element_index_uint: true, OESStandardDerivatives: true, OES_standard_derivatives: true, OESTextureFloat: true, OES_texture_float: true, OESTextureFloatLinear: true, OES_texture_float_linear: true, OESTextureHalfFloat: true, OES_texture_half_float: true, OESTextureHalfFloatLinear: true, OES_texture_half_float_linear: true, OESVertexArrayObject: true, OES_vertex_array_object: true, WebGLProgram: true, WebGLQuery: true, WebGLRenderbuffer: true, WebGLRenderingContext: true, WebGL2RenderingContext: true, WebGLSampler: true, WebGLShader: true, WebGLShaderPrecisionFormat: true, WebGLSync: true, WebGLTexture: true, WebGLTimerQueryEXT: true, WebGLTransformFeedback: true, WebGLUniformLocation: true, WebGLVertexArrayObject: true, WebGLVertexArrayObjectOES: true, WebGL: true, WebGL2RenderingContextBase: true, Database: true, SQLError: true, SQLResultSet: true, SQLTransaction: true, ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, HTMLAudioElement: true, HTMLBRElement: true, HTMLBaseElement: true, HTMLBodyElement: true, HTMLButtonElement: true, HTMLCanvasElement: true, HTMLContentElement: true, HTMLDListElement: true, HTMLDataElement: true, HTMLDataListElement: true, HTMLDetailsElement: true, HTMLDialogElement: true, HTMLDivElement: true, HTMLEmbedElement: true, HTMLFieldSetElement: true, HTMLHRElement: true, HTMLHeadElement: true, HTMLHeadingElement: true, HTMLHtmlElement: true, HTMLIFrameElement: true, HTMLImageElement: true, HTMLInputElement: true, HTMLLIElement: true, HTMLLabelElement: true, HTMLLegendElement: true, HTMLLinkElement: true, HTMLMapElement: true, HTMLMediaElement: true, HTMLMenuElement: true, HTMLMetaElement: true, HTMLMeterElement: true, HTMLModElement: true, HTMLOListElement: true, HTMLObjectElement: true, HTMLOptGroupElement: true, HTMLOptionElement: true, HTMLOutputElement: true, HTMLParagraphElement: true, HTMLParamElement: true, HTMLPictureElement: true, HTMLPreElement: true, HTMLProgressElement: true, HTMLQuoteElement: true, HTMLScriptElement: true, HTMLShadowElement: true, HTMLSlotElement: true, HTMLSourceElement: true, HTMLSpanElement: true, HTMLStyleElement: true, HTMLTableCaptionElement: true, HTMLTableCellElement: true, HTMLTableDataCellElement: true, HTMLTableHeaderCellElement: true, HTMLTableColElement: true, HTMLTableElement: true, HTMLTableRowElement: true, HTMLTableSectionElement: true, HTMLTemplateElement: true, HTMLTextAreaElement: true, HTMLTimeElement: true, HTMLTitleElement: true, HTMLTrackElement: true, HTMLUListElement: true, HTMLUnknownElement: true, HTMLVideoElement: true, HTMLDirectoryElement: true, HTMLFontElement: true, HTMLFrameElement: true, HTMLFrameSetElement: true, HTMLMarqueeElement: true, HTMLElement: false, AccessibleNodeList: true, HTMLAnchorElement: true, HTMLAreaElement: true, Blob: false, CDATASection: true, CharacterData: true, Comment: true, ProcessingInstruction: true, Text: true, CSSNumericValue: true, CSSUnitValue: true, CSSPerspective: true, CSSCharsetRule: true, CSSConditionRule: true, CSSFontFaceRule: true, CSSGroupingRule: true, CSSImportRule: true, CSSKeyframeRule: true, MozCSSKeyframeRule: true, WebKitCSSKeyframeRule: true, CSSKeyframesRule: true, MozCSSKeyframesRule: true, WebKitCSSKeyframesRule: true, CSSMediaRule: true, CSSNamespaceRule: true, CSSPageRule: true, CSSRule: true, CSSStyleRule: true, CSSSupportsRule: true, CSSViewportRule: true, CSSStyleDeclaration: true, MSStyleCSSProperties: true, CSS2Properties: true, CSSImageValue: true, CSSKeywordValue: true, CSSPositionValue: true, CSSResourceValue: true, CSSURLImageValue: true, CSSStyleValue: false, CSSMatrixComponent: true, CSSRotation: true, CSSScale: true, CSSSkew: true, CSSTranslation: true, CSSTransformComponent: false, CSSTransformValue: true, CSSUnparsedValue: true, DataTransferItemList: true, Document: true, HTMLDocument: true, XMLDocument: true, DOMException: true, ClientRectList: true, DOMRectList: true, DOMRectReadOnly: false, DOMStringList: true, DOMTokenList: true, SVGAElement: true, SVGAnimateElement: true, SVGAnimateMotionElement: true, SVGAnimateTransformElement: true, SVGAnimationElement: true, SVGCircleElement: true, SVGClipPathElement: true, SVGDefsElement: true, SVGDescElement: true, SVGDiscardElement: true, SVGEllipseElement: true, SVGFEBlendElement: true, SVGFEColorMatrixElement: true, SVGFEComponentTransferElement: true, SVGFECompositeElement: true, SVGFEConvolveMatrixElement: true, SVGFEDiffuseLightingElement: true, SVGFEDisplacementMapElement: true, SVGFEDistantLightElement: true, SVGFEFloodElement: true, SVGFEFuncAElement: true, SVGFEFuncBElement: true, SVGFEFuncGElement: true, SVGFEFuncRElement: true, SVGFEGaussianBlurElement: true, SVGFEImageElement: true, SVGFEMergeElement: true, SVGFEMergeNodeElement: true, SVGFEMorphologyElement: true, SVGFEOffsetElement: true, SVGFEPointLightElement: true, SVGFESpecularLightingElement: true, SVGFESpotLightElement: true, SVGFETileElement: true, SVGFETurbulenceElement: true, SVGFilterElement: true, SVGForeignObjectElement: true, SVGGElement: true, SVGGeometryElement: true, SVGGraphicsElement: true, SVGImageElement: true, SVGLineElement: true, SVGLinearGradientElement: true, SVGMarkerElement: true, SVGMaskElement: true, SVGMetadataElement: true, SVGPathElement: true, SVGPatternElement: true, SVGPolygonElement: true, SVGPolylineElement: true, SVGRadialGradientElement: true, SVGRectElement: true, SVGScriptElement: true, SVGSetElement: true, SVGStopElement: true, SVGStyleElement: true, SVGElement: true, SVGSVGElement: true, SVGSwitchElement: true, SVGSymbolElement: true, SVGTSpanElement: true, SVGTextContentElement: true, SVGTextElement: true, SVGTextPathElement: true, SVGTextPositioningElement: true, SVGTitleElement: true, SVGUseElement: true, SVGViewElement: true, SVGGradientElement: true, SVGComponentTransferFunctionElement: true, SVGFEDropShadowElement: true, SVGMPathElement: true, Element: false, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ErrorEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, MediaEncryptedEvent: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PopStateEvent: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, StorageEvent: true, SyncEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, MojoInterfaceRequestEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, EventSource: true, AbsoluteOrientationSensor: true, Accelerometer: true, AccessibleNode: true, AmbientLightSensor: true, Animation: true, ApplicationCache: true, DOMApplicationCache: true, OfflineResourceList: true, BackgroundFetchRegistration: true, BatteryManager: true, BroadcastChannel: true, CanvasCaptureMediaStreamTrack: true, FontFaceSet: true, Gyroscope: true, LinearAccelerationSensor: true, Magnetometer: true, MediaDevices: true, MediaKeySession: true, MediaQueryList: true, MediaRecorder: true, MediaSource: true, MediaStream: true, MediaStreamTrack: true, MessagePort: true, MIDIAccess: true, MIDIInput: true, MIDIOutput: true, MIDIPort: true, NetworkInformation: true, Notification: true, OffscreenCanvas: true, OrientationSensor: true, PaymentRequest: true, Performance: true, PermissionStatus: true, PresentationAvailability: true, PresentationConnection: true, PresentationConnectionList: true, PresentationRequest: true, RelativeOrientationSensor: true, RemotePlayback: true, RTCDataChannel: true, DataChannel: true, RTCDTMFSender: true, RTCPeerConnection: true, webkitRTCPeerConnection: true, mozRTCPeerConnection: true, ScreenOrientation: true, Sensor: true, ServiceWorker: true, ServiceWorkerContainer: true, ServiceWorkerRegistration: true, SharedWorker: true, SpeechRecognition: true, SpeechSynthesis: true, SpeechSynthesisUtterance: true, VR: true, VRDevice: true, VRDisplay: true, VRSession: true, VisualViewport: true, WebSocket: true, Worker: true, WorkerPerformance: true, BluetoothDevice: true, BluetoothRemoteGATTCharacteristic: true, Clipboard: true, MojoInterfaceInterceptor: true, USB: true, IDBDatabase: true, IDBOpenDBRequest: true, IDBVersionChangeRequest: true, IDBRequest: true, IDBTransaction: true, AnalyserNode: true, RealtimeAnalyserNode: true, AudioBufferSourceNode: true, AudioDestinationNode: true, AudioNode: true, AudioScheduledSourceNode: true, AudioWorkletNode: true, BiquadFilterNode: true, ChannelMergerNode: true, AudioChannelMerger: true, ChannelSplitterNode: true, AudioChannelSplitter: true, ConstantSourceNode: true, ConvolverNode: true, DelayNode: true, DynamicsCompressorNode: true, GainNode: true, AudioGainNode: true, IIRFilterNode: true, MediaElementAudioSourceNode: true, MediaStreamAudioDestinationNode: true, MediaStreamAudioSourceNode: true, OscillatorNode: true, Oscillator: true, PannerNode: true, AudioPannerNode: true, webkitAudioPannerNode: true, ScriptProcessorNode: true, JavaScriptAudioNode: true, StereoPannerNode: true, WaveShaperNode: true, EventTarget: false, File: true, FileList: true, FileReader: true, FileWriter: true, HTMLFormElement: true, Gamepad: true, History: true, HTMLCollection: true, HTMLFormControlsCollection: true, HTMLOptionsCollection: true, XMLHttpRequest: true, XMLHttpRequestUpload: true, XMLHttpRequestEventTarget: false, ImageData: true, KeyboardEvent: true, Location: true, MediaList: true, MessageEvent: true, MIDIInputMap: true, MIDIOutputMap: true, MimeType: true, MimeTypeArray: true, DocumentFragment: true, ShadowRoot: true, Attr: true, DocumentType: true, Node: false, NodeList: true, RadioNodeList: true, Plugin: true, PluginArray: true, ProgressEvent: true, ResourceProgressEvent: true, RTCStatsReport: true, HTMLSelectElement: true, SourceBuffer: true, SourceBufferList: true, SpeechGrammar: true, SpeechGrammarList: true, SpeechRecognitionResult: true, Storage: true, CSSStyleSheet: true, StyleSheet: true, TextTrack: true, TextTrackCue: true, VTTCue: true, TextTrackCueList: true, TextTrackList: true, TimeRanges: true, Touch: true, TouchList: true, TrackDefaultList: true, CompositionEvent: true, FocusEvent: true, MouseEvent: true, DragEvent: true, PointerEvent: true, TextEvent: true, TouchEvent: true, WheelEvent: true, UIEvent: false, URL: true, VideoTrackList: true, Window: true, DOMWindow: true, DedicatedWorkerGlobalScope: true, ServiceWorkerGlobalScope: true, SharedWorkerGlobalScope: true, WorkerGlobalScope: true, CSSRuleList: true, ClientRect: true, DOMRect: true, GamepadList: true, NamedNodeMap: true, MozNamedAttrMap: true, SpeechRecognitionResultList: true, StyleSheetList: true, IDBKeyRange: true, SVGLength: true, SVGLengthList: true, SVGNumber: true, SVGNumberList: true, SVGPointList: true, SVGStringList: true, SVGTransform: true, SVGTransformList: true, AudioBuffer: true, AudioParamMap: true, AudioTrackList: true, AudioContext: true, webkitAudioContext: true, BaseAudioContext: false, OfflineAudioContext: true, SQLResultSetRowList: true});
    H.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
    W._SourceBufferList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
    W._TextTrackList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
  })();
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$1$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  Function.prototype.call$2$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  Function.prototype.call$2$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$3$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$2$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$3$6 = function(a, b, c, d, e, f) {
    return this(a, b, c, d, e, f);
  };
  Function.prototype.call$2$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$1$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$2$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$1$0 = function() {
    return this();
  };
  Function.prototype.call$2$0 = function() {
    return this();
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(D.main, []);
    else
      D.main([]);
  });
})();

//# sourceMappingURL=client.dart.js.map
